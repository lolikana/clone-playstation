(()=>{"use strict";var e={52:function(e,t,s){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.swiperRandomGameData=t.swiperHardwareData=t.swiperTopData=void 0;const i=a(s(4840)),r=a(s(9622)),n=a(s(1514)),l=a(s(2199)),o=a(s(2207)),d=a(s(6690)),c=a(s(9744)),p=a(s(5172)),u=a(s(5786)),m=a(s(579)),f=a(s(1402)),h=a(s(2824)),g=a(s(351)),v=a(s(5512)),b=a(s(5444)),w=a(s(9995)),y=a(s(3420)),x=a(s(9990)),E=a(s(9332)),S=a(s(5678)),T=a(s(3067)),M=a(s(4906)),C=a(s(9819)),P=a(s(3035)),L=a(s(6194));t.swiperTopData=[{id:1,img:{large:d.default,medium:p.default,mobile:u.default,thumb:m.default},alt:"forspoken game",logo:c.default,title:"Find your fight",text:"Traverse sprawling landscapes and battle monstrous creatures with a massive variety of magif abilities, out now on PS5.",btn:{text:"Play now",href:"#"}},{id:2,img:{large:i.default,medium:n.default,mobile:l.default,thumb:o.default},alt:"dead space game",logo:r.default,title:"Humanity ends here",text:"The sci-fi survival horror classic returns, rebuilt to offer a deeper and more immersive experience, out now on PS5",btn:{text:"Find out more",href:"#"}},{id:3,img:{large:i.default,medium:n.default,mobile:l.default,thumb:o.default},alt:"dead space game",logo:r.default,title:"Humanity ends here",text:"The sci-fi survival horror classic returns, rebuilt to offer a deeper and more immersive experience, out now on PS5",btn:{text:"Find out more",href:"#"}},{id:4,img:{large:i.default,medium:n.default,mobile:l.default,thumb:o.default},alt:"dead space game",logo:r.default,title:"Humanity ends here",text:"The sci-fi survival horror classic returns, rebuilt to offer a deeper and more immersive experience, out now on PS5",btn:{text:"Find out more",href:"#"}},{id:5,img:{large:i.default,medium:n.default,mobile:l.default,thumb:o.default},alt:"dead space game",logo:r.default,title:"Humanity ends here",text:"The sci-fi survival horror classic returns, rebuilt to offer a deeper and more immersive experience, out now on PS5",btn:{text:"Find out more",href:"#"}},{id:6,img:{large:i.default,medium:n.default,mobile:l.default,thumb:o.default},alt:"dead space game",logo:r.default,title:"Humanity ends here",text:"The sci-fi survival horror classic returns, rebuilt to offer a deeper and more immersive experience, out now on PS5",btn:{text:"Find out more",href:"#"}},{id:7,img:{large:f.default,medium:g.default,mobile:v.default,thumb:b.default},logo:h.default,classLogo:"ps-live",alt:"live ps5 game",title:"Bringing your the extraordinary",text:"Explore incredible worlds and experience the unexpected. Start your story today.",btn:{text:"Find out more",href:"#"}}],t.swiperHardwareData=[{id:1,img:S.default,alt:"PS5 Console",title:"PlayStation 5 Console",text:"Experience an all-new generation of incredible PlayStation games. PS5 consoles are currently in stock.",btn:{more:{text:"Learn more",href:"#"},buy:{text:"Buy now",href:"#"}}},{id:2,img:y.default,alt:"DualSense™ Wireless Controller",title:"DualSense™ Wireless Controller",text:"Immerse yourself in the gaming experience with a controller the supports responsive haptic feedback and dynamic trigger effects.",btn:{more:{text:"Learn more",href:"#"}}},{id:3,img:E.default,alt:"PULSE 3D™ Wireless Headset",title:"PULSE 3D™ Wireless Headset",text:"Enjoy a seamless wireless experience with a headset fine-tuned for 3D Audio on PS5 consoles.",btn:{more:{text:"Learn more",href:"#"}}},{id:4,img:x.default,alt:"DualSense Edge™ Wireless Controller",title:"DualSense Edge™ Wireless Controller",text:"Get an edge in gameplay with remappable buttons, tunable triggers and sticks, changeable stick caps, back buttons, and more.",btn:{more:{text:"Learn more",href:"#"}}},{id:5,img:M.default,alt:"Media Remote",title:"Media Remote",text:"Conveniently control movies, streaming services and more on your PS5 console with an intuitive layout.",btn:{more:{text:"Learn more",href:"#"}}},{id:6,img:w.default,alt:"HD Camera",title:"HD Camera",text:"Add yourself to your gameplay videos and broadcasts with smooth, sharp, full-HD capture.",btn:{more:{text:"Learn more",href:"#"}}},{id:7,img:T.default,alt:"PS5 Console Covers",title:"PS5 Console Covers",text:"Personalise your PlayStation 5 or PlayStation 5 Digital Edition console with a vibrant array of new colour options.",btn:{more:{text:"Learn more",href:"#"}}}],t.swiperRandomGameData={img:{large:C.default,mobile:L.default},alt:"God of War Ragnarok",logo:P.default,title:"The Norse saga continues",text:"   Embark on an epix and heartfelt journey as Kratos, and Atreus, struggle with holding on and letting go, available now on PS4 & PS5",btn:{text:"Buy now",href:"#"}}},9560:function(e,t,s){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),s(9181),s(330);const i=s(2590),r=a(s(6541));new r.default(".section--top-swiper",{...i.sliderParams,...i.sliderParamsTop}),new r.default(".section--hardware-swiper",{...i.sliderParams,...i.sliderParamsHardware})},330:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0});const a=s(52),i=document.querySelector(".section--hardware-wrapper"),r=document.querySelector(".hardware--thumbnail-wrapper");a.swiperHardwareData.map((e=>{i.appendChild((e=>{const t=document.createElement("div"),s=document.createElement("div"),a=document.createElement("img"),i=document.createElement("div"),r=document.createElement("h1"),n=document.createElement("p"),l=document.createElement("div"),o=document.createElement("a"),d=document.createElement("a");a.classList.add("slide-img"),a.src=e.img,a.alt=`${e.alt} image slide`,a.loading="lazy",i.classList.add("slide--hardware-desc"),r.classList.add("slide-title"),r.textContent=e.title,n.classList.add("slide-text"),n.textContent=e.text,l.classList.add("slide-btn"),o.classList.add("button","button--border","button--color-blue"),o.textContent=e.btn.more.text,o.href=e.btn.more.href,l.appendChild(o),e.btn.buy&&(d.classList.add("button","button--border","button--color-orange"),d.textContent=e.btn.buy.text,d.href=e.btn.buy.href,l.appendChild(d));const c=document.createElement("div");return c.classList.add("swiper-lazy-preloader","swiper-lazy-preloader-white"),i.append(r,n,l),t.classList.add("swiper-slide","section--hardware-slide"),s.classList.add("section--hardware-content"),s.append(a,i,c),t.appendChild(s),t})(e)),r.appendChild(function(e){const t=document.createElement("div"),s=document.createElement("div"),a=document.createElement("img"),i=document.createElement("p");return a.classList.add("section--thumbnail-img"),a.src=e.img,a.alt=`${e.alt} thumbnail slide`,a.loading="lazy",i.textContent=e.alt,document.createElement("div").classList.add("swiper-lazy-preloader","swiper-lazy-preloader-white"),s.classList.add("section--hardware-content"),s.append(a,i),t.classList.add("swiper-slide","section--thumbnail-slide","hardware--thumbnail-slide"),t.append(s),t}(e))}))},9181:(e,t,s)=>{Object.defineProperty(t,"__esModule",{value:!0});const a=s(52),i=document.querySelector(".section--top-wrapper"),r=document.querySelector(".top--thumbnail-wrapper");a.swiperTopData.map((e=>{i.appendChild((e=>{const t=document.createElement("div"),s=document.createElement("picture"),a=document.createElement("source"),i=document.createElement("source"),r=document.createElement("source"),n=document.createElement("img"),l=document.createElement("a"),o=document.createElement("div"),d=document.createElement("img"),c=document.createElement("h1"),p=document.createElement("p"),u=document.createElement("div"),m=document.createElement("a");a.media="(min-width:1024px)",a.srcset=e.img.large,i.media="(min-width:700px)",i.srcset=e.img.medium,r.srcset=e.img.mobile,n.classList.add("slide-img"),n.src=e.img.mobile,n.alt=`${e.alt} image slide`,n.loading="lazy",s.append(a,i,r,n),l.classList.add("slide-link"),l.href="#",o.classList.add("slide-desc"),d.classList.add("slide-logo"),e.classLogo&&d.classList.add(e.classLogo),d.src=e.logo,d.alt=`${e.alt} logo`,d.loading="lazy",c.classList.add("slide-title"),c.textContent=e.title,p.classList.add("slide-text"),p.textContent=e.text,u.classList.add("slide-btn"),m.classList.add("button","button--border","button--color-white"),m.textContent=e.btn.text,m.href=e.btn.href,u.appendChild(m);const f=document.createElement("div");return f.classList.add("swiper-lazy-preloader","swiper-lazy-preloader-white"),o.append(d,c,p,u),t.classList.add("swiper-slide","section--top-slide"),t.append(s,l,o,f),t})(e)),r.appendChild(function(e){const t=document.createElement("div"),s=document.createElement("img");s.classList.add("section--thumbnail-img"),s.src=e.img.thumb,s.alt=`${e.alt} thumbnail slide`,s.loading="lazy";const a=document.createElement("div");return a.classList.add("swiper-lazy-preloader","swiper-lazy-preloader-white"),t.classList.add("swiper-slide","section--thumbnail-slide","top--thumbnail-slide"),t.append(a,s),t}(e))}))},2590:function(e,t,s){var a=this&&this.__createBinding||(Object.create?function(e,t,s,a){void 0===a&&(a=s);var i=Object.getOwnPropertyDescriptor(t,s);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[s]}}),Object.defineProperty(e,a,i)}:function(e,t,s,a){void 0===a&&(a=s),e[a]=t[s]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)"default"!==s&&Object.prototype.hasOwnProperty.call(e,s)&&a(t,e,s);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.sliderParamsHardware=t.sliderParamsTop=t.thumbsParams=t.sliderParams=void 0;const n=r(s(6541)),l=s(52);t.sliderParams={modules:[n.EffectFade,n.Thumbs],effect:"fade",fadeEffect:{crossFade:!0},loop:!0,touchRatio:0,speed:500},t.thumbsParams={modules:[n.Keyboard,n.Autoplay],loop:!0,slidesPerView:"auto",spaceBetween:"2%",centeredSlides:!0,slideToClickedSlide:!0,grabCursor:!0,watchSlidesProgress:!0,keyboard:!0,autoplay:{delay:3e3,stopOnLastSlide:!0,disableOnInteraction:!0,pauseOnMouseEnter:!0,waitForTransition:!0},speed:500};const o={breakpoints:{700:{loop:!1,centeredSlides:!1,spaceBetween:7,slidesPerView:l.swiperTopData.length}}},d=new n.default(".section--top-thumbnails",{...t.thumbsParams,...o});t.sliderParamsTop={loopedSlides:l.swiperTopData.length,thumbs:{swiper:d}};const c={breakpoints:{700:{loop:!1,centeredSlides:!1,spaceBetween:7,slidesPerView:l.swiperHardwareData.length}}},p=new n.default(".section--hardware-thumbnails",{...t.thumbsParams,...c});t.sliderParamsHardware={loopedSlides:l.swiperHardwareData.length,thumbs:{swiper:p}};const u={modules:[n.Pagination,n.Grid,n.Keyboard],slidesPerView:2,spaceBetween:20,keyboard:!0,pagination:{enabled:!0,clickable:!0,type:"bullets",el:".swiper-pagination",renderBullet:function(){return'<div class="swiper-pagination-bullet"><span></span></div>'}},grid:{fill:"row",rows:2},breakpoints:{768:{slidesPerView:4,spaceBetween:40,grid:{fill:"row",rows:3},pagination:{enabled:!1}},1024:{slidesPerView:6,grid:{rows:2}}}};new n.default(".listGames--container-newReleases",u),new n.default(".listGames--container-comingSoon",u)},6194:(e,t,s)=>{e.exports=s.p+"assets/dae06993ebc5cfe580db.webp"},9819:(e,t,s)=>{e.exports=s.p+"assets/2c379023a64338520a65.webp"},3035:(e,t,s)=>{e.exports=s.p+"assets/93e1fea3fb433fed8c01.webp"},9332:(e,t,s)=>{e.exports=s.p+"assets/492ed84bf543cecc10fa.webp"},3420:(e,t,s)=>{e.exports=s.p+"assets/42081818d6cb61373f94.webp"},9990:(e,t,s)=>{e.exports=s.p+"assets/7c831ffab68c151996af.webp"},9995:(e,t,s)=>{e.exports=s.p+"assets/1903370c5ff150cf04b4.webp"},4906:(e,t,s)=>{e.exports=s.p+"assets/735fb7010894af43c09f.webp"},5678:(e,t,s)=>{e.exports=s.p+"assets/0ae93bdfa68b86f185fb.webp"},3067:(e,t,s)=>{e.exports=s.p+"assets/d6c09c0262411b0adfaf.webp"},9622:(e,t,s)=>{e.exports=s.p+"assets/9c654bd724c8b3cb6302.png"},1514:(e,t,s)=>{e.exports=s.p+"assets/8292c458a1ef44ee069e.webp"},2199:(e,t,s)=>{e.exports=s.p+"assets/6da6aff66707d970a886.webp"},2207:(e,t,s)=>{e.exports=s.p+"assets/175034a85dfa2ae46059.png"},4840:(e,t,s)=>{e.exports=s.p+"assets/bf68a80f6a6cb7999005.webp"},9744:(e,t,s)=>{e.exports=s.p+"assets/916b92490caebb050e14.png"},5172:(e,t,s)=>{e.exports=s.p+"assets/15bad8a03467c045c440.webp"},5786:(e,t,s)=>{e.exports=s.p+"assets/05837921597b81d479f8.webp"},579:(e,t,s)=>{e.exports=s.p+"assets/72a43ad9fd3d6d954639.png"},6690:(e,t,s)=>{e.exports=s.p+"assets/cc7956085614fd98efe9.webp"},2824:(e,t,s)=>{e.exports=s.p+"assets/9ae5ff9cf384c26c7ff5.png"},351:(e,t,s)=>{e.exports=s.p+"assets/562848a778dd009a08d5.webp"},5512:(e,t,s)=>{e.exports=s.p+"assets/cc94d0eaa8b1d661212a.webp"},5444:(e,t,s)=>{e.exports=s.p+"assets/fa9cfca24585b6b29cfb.png"},1402:(e,t,s)=>{e.exports=s.p+"assets/7896b02c9633ca1f672e.webp"},6541:(e,t,s)=>{function a(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function i(e={},t={}){Object.keys(t).forEach((s=>{void 0===e[s]?e[s]=t[s]:a(t[s])&&a(e[s])&&Object.keys(t[s]).length>0&&i(e[s],t[s])}))}s.r(t),s.d(t,{A11y:()=>de,Autoplay:()=>ue,Controller:()=>oe,EffectCards:()=>Ae,EffectCoverflow:()=>ke,EffectCreative:()=>ze,EffectCube:()=>Ce,EffectFade:()=>Me,EffectFlip:()=>Le,FreeMode:()=>fe,Grid:()=>he,HashNavigation:()=>pe,History:()=>ce,Keyboard:()=>J,Manipulation:()=>xe,Mousewheel:()=>ee,Navigation:()=>se,Pagination:()=>ie,Parallax:()=>ne,Scrollbar:()=>re,Swiper:()=>Z,Thumbs:()=>me,Virtual:()=>Q,Zoom:()=>le,default:()=>Z});const r={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function n(){const e="undefined"!=typeof document?document:{};return i(e,r),e}const l={document:r,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function o(){const e="undefined"!=typeof window?window:{};return i(e,l),e}function d(e,t=0){return setTimeout(e,t)}function c(){return Date.now()}function p(e,t="x"){const s=o();let a,i,r;const n=function(e){const t=o();let s;return t.getComputedStyle&&(s=t.getComputedStyle(e,null)),!s&&e.currentStyle&&(s=e.currentStyle),s||(s=e.style),s}(e);return s.WebKitCSSMatrix?(i=n.transform||n.webkitTransform,i.split(",").length>6&&(i=i.split(", ").map((e=>e.replace(",","."))).join(", ")),r=new s.WebKitCSSMatrix("none"===i?"":i)):(r=n.MozTransform||n.OTransform||n.MsTransform||n.msTransform||n.transform||n.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),a=r.toString().split(",")),"x"===t&&(i=s.WebKitCSSMatrix?r.m41:16===a.length?parseFloat(a[12]):parseFloat(a[4])),"y"===t&&(i=s.WebKitCSSMatrix?r.m42:16===a.length?parseFloat(a[13]):parseFloat(a[5])),i||0}function u(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function m(...e){const t=Object(e[0]),s=["__proto__","constructor","prototype"];for(let i=1;i<e.length;i+=1){const r=e[i];if(null!=r&&(a=r,!("undefined"!=typeof window&&void 0!==window.HTMLElement?a instanceof HTMLElement:a&&(1===a.nodeType||11===a.nodeType)))){const e=Object.keys(Object(r)).filter((e=>s.indexOf(e)<0));for(let s=0,a=e.length;s<a;s+=1){const a=e[s],i=Object.getOwnPropertyDescriptor(r,a);void 0!==i&&i.enumerable&&(u(t[a])&&u(r[a])?r[a].__swiper__?t[a]=r[a]:m(t[a],r[a]):!u(t[a])&&u(r[a])?(t[a]={},r[a].__swiper__?t[a]=r[a]:m(t[a],r[a])):t[a]=r[a])}}}var a;return t}function f(e,t,s){e.style.setProperty(t,s)}function h({swiper:e,targetPosition:t,side:s}){const a=o(),i=-e.translate;let r,n=null;const l=e.params.speed;e.wrapperEl.style.scrollSnapType="none",a.cancelAnimationFrame(e.cssModeFrameID);const d=t>i?"next":"prev",c=(e,t)=>"next"===d&&e>=t||"prev"===d&&e<=t,p=()=>{r=(new Date).getTime(),null===n&&(n=r);const o=Math.max(Math.min((r-n)/l,1),0),d=.5-Math.cos(o*Math.PI)/2;let u=i+d*(t-i);if(c(u,t)&&(u=t),e.wrapperEl.scrollTo({[s]:u}),c(u,t))return e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.scrollSnapType="",setTimeout((()=>{e.wrapperEl.style.overflow="",e.wrapperEl.scrollTo({[s]:u})})),void a.cancelAnimationFrame(e.cssModeFrameID);e.cssModeFrameID=a.requestAnimationFrame(p)};p()}function g(e){return e.querySelector(".swiper-slide-transform")||e.shadowEl&&e.shadowEl.querySelector(".swiper-slide-transform")||e}function v(e,t=""){return[...e.children].filter((e=>e.matches(t)))}function b(e,t=[]){const s=document.createElement(e);return s.classList.add(...Array.isArray(t)?t:[t]),s}function w(e){const t=o(),s=n(),a=e.getBoundingClientRect(),i=s.body,r=e.clientTop||i.clientTop||0,l=e.clientLeft||i.clientLeft||0,d=e===t?t.scrollY:e.scrollTop,c=e===t?t.scrollX:e.scrollLeft;return{top:a.top+d-r,left:a.left+c-l}}function y(e,t){return o().getComputedStyle(e,null).getPropertyValue(t)}function x(e){let t,s=e;if(s){for(t=0;null!==(s=s.previousSibling);)1===s.nodeType&&(t+=1);return t}}function E(e,t){const s=[];let a=e.parentElement;for(;a;)t?a.matches(t)&&s.push(a):s.push(a),a=a.parentElement;return s}function S(e,t){t&&e.addEventListener("transitionend",(function s(a){a.target===e&&(t.call(e,a),e.removeEventListener("transitionend",s))}))}function T(e,t,s){const a=o();return s?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(a.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(a.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}let M,C,P;function L(){return M||(M=function(){const e=o(),t=n();return{smoothScroll:t.documentElement&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),M}const k={on(e,t,s){const a=this;if(!a.eventsListeners||a.destroyed)return a;if("function"!=typeof t)return a;const i=s?"unshift":"push";return e.split(" ").forEach((e=>{a.eventsListeners[e]||(a.eventsListeners[e]=[]),a.eventsListeners[e][i](t)})),a},once(e,t,s){const a=this;if(!a.eventsListeners||a.destroyed)return a;if("function"!=typeof t)return a;function i(...s){a.off(e,i),i.__emitterProxy&&delete i.__emitterProxy,t.apply(a,s)}return i.__emitterProxy=t,a.on(e,i,s)},onAny(e,t){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof e)return s;const a=t?"unshift":"push";return s.eventsAnyListeners.indexOf(e)<0&&s.eventsAnyListeners[a](e),s},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const s=t.eventsAnyListeners.indexOf(e);return s>=0&&t.eventsAnyListeners.splice(s,1),t},off(e,t){const s=this;return!s.eventsListeners||s.destroyed?s:s.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?s.eventsListeners[e]=[]:s.eventsListeners[e]&&s.eventsListeners[e].forEach(((a,i)=>{(a===t||a.__emitterProxy&&a.__emitterProxy===t)&&s.eventsListeners[e].splice(i,1)}))})),s):s},emit(...e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsListeners)return t;let s,a,i;return"string"==typeof e[0]||Array.isArray(e[0])?(s=e[0],a=e.slice(1,e.length),i=t):(s=e[0].events,a=e[0].data,i=e[0].context||t),a.unshift(i),(Array.isArray(s)?s:s.split(" ")).forEach((e=>{t.eventsAnyListeners&&t.eventsAnyListeners.length&&t.eventsAnyListeners.forEach((t=>{t.apply(i,[e,...a])})),t.eventsListeners&&t.eventsListeners[e]&&t.eventsListeners[e].forEach((e=>{e.apply(i,a)}))})),t}},z={updateSize:function(){const e=this;let t,s;const a=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:a.clientWidth,s=void 0!==e.params.height&&null!==e.params.height?e.params.height:a.clientHeight,0===t&&e.isHorizontal()||0===s&&e.isVertical()||(t=t-parseInt(y(a,"padding-left")||0,10)-parseInt(y(a,"padding-right")||0,10),s=s-parseInt(y(a,"padding-top")||0,10)-parseInt(y(a,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(s)&&(s=0),Object.assign(e,{width:t,height:s,size:e.isHorizontal()?t:s}))},updateSlides:function(){const e=this;function t(t){return e.isHorizontal()?t:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[t]}function s(e,s){return parseFloat(e.getPropertyValue(t(s))||0)}const a=e.params,{wrapperEl:i,slidesEl:r,size:n,rtlTranslate:l,wrongRTL:o}=e,d=e.virtual&&a.virtual.enabled,c=d?e.virtual.slides.length:e.slides.length,p=v(r,`.${e.params.slideClass}, swiper-slide`),u=d?e.virtual.slides.length:p.length;let m=[];const h=[],g=[];let b=a.slidesOffsetBefore;"function"==typeof b&&(b=a.slidesOffsetBefore.call(e));let w=a.slidesOffsetAfter;"function"==typeof w&&(w=a.slidesOffsetAfter.call(e));const x=e.snapGrid.length,E=e.slidesGrid.length;let S=a.spaceBetween,M=-b,C=0,P=0;if(void 0===n)return;"string"==typeof S&&S.indexOf("%")>=0&&(S=parseFloat(S.replace("%",""))/100*n),e.virtualSize=-S,p.forEach((e=>{l?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),a.centeredSlides&&a.cssMode&&(f(i,"--swiper-centered-offset-before",""),f(i,"--swiper-centered-offset-after",""));const L=a.grid&&a.grid.rows>1&&e.grid;let k;L&&e.grid.initSlides(u);const z="auto"===a.slidesPerView&&a.breakpoints&&Object.keys(a.breakpoints).filter((e=>void 0!==a.breakpoints[e].slidesPerView)).length>0;for(let i=0;i<u;i+=1){let r;if(k=0,p[i]&&(r=p[i]),L&&e.grid.updateSlide(i,r,u,t),!p[i]||"none"!==y(r,"display")){if("auto"===a.slidesPerView){z&&(p[i].style[t("width")]="");const n=getComputedStyle(r),l=r.style.transform,o=r.style.webkitTransform;if(l&&(r.style.transform="none"),o&&(r.style.webkitTransform="none"),a.roundLengths)k=e.isHorizontal()?T(r,"width",!0):T(r,"height",!0);else{const e=s(n,"width"),t=s(n,"padding-left"),a=s(n,"padding-right"),i=s(n,"margin-left"),l=s(n,"margin-right"),o=n.getPropertyValue("box-sizing");if(o&&"border-box"===o)k=e+i+l;else{const{clientWidth:s,offsetWidth:n}=r;k=e+t+a+i+l+(n-s)}}l&&(r.style.transform=l),o&&(r.style.webkitTransform=o),a.roundLengths&&(k=Math.floor(k))}else k=(n-(a.slidesPerView-1)*S)/a.slidesPerView,a.roundLengths&&(k=Math.floor(k)),p[i]&&(p[i].style[t("width")]=`${k}px`);p[i]&&(p[i].swiperSlideSize=k),g.push(k),a.centeredSlides?(M=M+k/2+C/2+S,0===C&&0!==i&&(M=M-n/2-S),0===i&&(M=M-n/2-S),Math.abs(M)<.001&&(M=0),a.roundLengths&&(M=Math.floor(M)),P%a.slidesPerGroup==0&&m.push(M),h.push(M)):(a.roundLengths&&(M=Math.floor(M)),(P-Math.min(e.params.slidesPerGroupSkip,P))%e.params.slidesPerGroup==0&&m.push(M),h.push(M),M=M+k+S),e.virtualSize+=k+S,C=k,P+=1}}if(e.virtualSize=Math.max(e.virtualSize,n)+w,l&&o&&("slide"===a.effect||"coverflow"===a.effect)&&(i.style.width=`${e.virtualSize+a.spaceBetween}px`),a.setWrapperSize&&(i.style[t("width")]=`${e.virtualSize+a.spaceBetween}px`),L&&e.grid.updateWrapperSize(k,m,t),!a.centeredSlides){const t=[];for(let s=0;s<m.length;s+=1){let i=m[s];a.roundLengths&&(i=Math.floor(i)),m[s]<=e.virtualSize-n&&t.push(i)}m=t,Math.floor(e.virtualSize-n)-Math.floor(m[m.length-1])>1&&m.push(e.virtualSize-n)}if(d&&a.loop){const t=g[0]+S;if(a.slidesPerGroup>1){const s=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/a.slidesPerGroup),i=t*a.slidesPerGroup;for(let e=0;e<s;e+=1)m.push(m[m.length-1]+i)}for(let s=0;s<e.virtual.slidesBefore+e.virtual.slidesAfter;s+=1)1===a.slidesPerGroup&&m.push(m[m.length-1]+t),h.push(h[h.length-1]+t),e.virtualSize+=t}if(0===m.length&&(m=[0]),0!==a.spaceBetween){const s=e.isHorizontal()&&l?"marginLeft":t("marginRight");p.filter(((e,t)=>!(a.cssMode&&!a.loop)||t!==p.length-1)).forEach((e=>{e.style[s]=`${S}px`}))}if(a.centeredSlides&&a.centeredSlidesBounds){let e=0;g.forEach((t=>{e+=t+(a.spaceBetween?a.spaceBetween:0)})),e-=a.spaceBetween;const t=e-n;m=m.map((e=>e<0?-b:e>t?t+w:e))}if(a.centerInsufficientSlides){let e=0;if(g.forEach((t=>{e+=t+(a.spaceBetween?a.spaceBetween:0)})),e-=a.spaceBetween,e<n){const t=(n-e)/2;m.forEach(((e,s)=>{m[s]=e-t})),h.forEach(((e,s)=>{h[s]=e+t}))}}if(Object.assign(e,{slides:p,snapGrid:m,slidesGrid:h,slidesSizesGrid:g}),a.centeredSlides&&a.cssMode&&!a.centeredSlidesBounds){f(i,"--swiper-centered-offset-before",-m[0]+"px"),f(i,"--swiper-centered-offset-after",e.size/2-g[g.length-1]/2+"px");const t=-e.snapGrid[0],s=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+s))}if(u!==c&&e.emit("slidesLengthChange"),m.length!==x&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),h.length!==E&&e.emit("slidesGridLengthChange"),a.watchSlidesProgress&&e.updateSlidesOffset(),!(d||a.cssMode||"slide"!==a.effect&&"fade"!==a.effect)){const t=`${a.containerModifierClass}backface-hidden`,s=e.el.classList.contains(t);u<=a.maxBackfaceHiddenSlides?s||e.el.classList.add(t):s&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,s=[],a=t.virtual&&t.params.virtual.enabled;let i,r=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const n=e=>a?t.slides.filter((t=>parseInt(t.getAttribute("data-swiper-slide-index"),10)===e))[0]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{s.push(e)}));else for(i=0;i<Math.ceil(t.params.slidesPerView);i+=1){const e=t.activeIndex+i;if(e>t.slides.length&&!a)break;s.push(n(e))}else s.push(n(t.activeIndex));for(i=0;i<s.length;i+=1)if(void 0!==s[i]){const e=s[i].offsetHeight;r=e>r?e:r}(r||0===r)&&(t.wrapperEl.style.height=`${r}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,s=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let a=0;a<t.length;a+=1)t[a].swiperSlideOffset=(e.isHorizontal()?t[a].offsetLeft:t[a].offsetTop)-s},updateSlidesProgress:function(e=this&&this.translate||0){const t=this,s=t.params,{slides:a,rtlTranslate:i,snapGrid:r}=t;if(0===a.length)return;void 0===a[0].swiperSlideOffset&&t.updateSlidesOffset();let n=-e;i&&(n=e),a.forEach((e=>{e.classList.remove(s.slideVisibleClass)})),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(let e=0;e<a.length;e+=1){const l=a[e];let o=l.swiperSlideOffset;s.cssMode&&s.centeredSlides&&(o-=a[0].swiperSlideOffset);const d=(n+(s.centeredSlides?t.minTranslate():0)-o)/(l.swiperSlideSize+s.spaceBetween),c=(n-r[0]+(s.centeredSlides?t.minTranslate():0)-o)/(l.swiperSlideSize+s.spaceBetween),p=-(n-o),u=p+t.slidesSizesGrid[e];(p>=0&&p<t.size-1||u>1&&u<=t.size||p<=0&&u>=t.size)&&(t.visibleSlides.push(l),t.visibleSlidesIndexes.push(e),a[e].classList.add(s.slideVisibleClass)),l.progress=i?-d:d,l.originalProgress=i?-c:c}},updateProgress:function(e){const t=this;if(void 0===e){const s=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*s||0}const s=t.params,a=t.maxTranslate()-t.minTranslate();let{progress:i,isBeginning:r,isEnd:n,progressLoop:l}=t;const o=r,d=n;if(0===a)i=0,r=!0,n=!0;else{i=(e-t.minTranslate())/a;const s=Math.abs(e-t.minTranslate())<1,l=Math.abs(e-t.maxTranslate())<1;r=s||i<=0,n=l||i>=1,s&&(i=0),l&&(i=1)}if(s.loop){const s=t.getSlideIndex(t.slides.filter((e=>"0"===e.getAttribute("data-swiper-slide-index")))[0]),a=t.getSlideIndex(t.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")==t.slides.length-1))[0]),i=t.slidesGrid[s],r=t.slidesGrid[a],n=t.slidesGrid[t.slidesGrid.length-1],o=Math.abs(e);l=o>=i?(o-i)/n:(o+n-r)/n,l>1&&(l-=1)}Object.assign(t,{progress:i,progressLoop:l,isBeginning:r,isEnd:n}),(s.watchSlidesProgress||s.centeredSlides&&s.autoHeight)&&t.updateSlidesProgress(e),r&&!o&&t.emit("reachBeginning toEdge"),n&&!d&&t.emit("reachEnd toEdge"),(o&&!r||d&&!n)&&t.emit("fromEdge"),t.emit("progress",i)},updateSlidesClasses:function(){const e=this,{slides:t,params:s,slidesEl:a,activeIndex:i}=e,r=e.virtual&&s.virtual.enabled,n=e=>v(a,`.${s.slideClass}${e}, swiper-slide${e}`)[0];let l;if(t.forEach((e=>{e.classList.remove(s.slideActiveClass,s.slideNextClass,s.slidePrevClass)})),r)if(s.loop){let t=i-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),l=n(`[data-swiper-slide-index="${t}"]`)}else l=n(`[data-swiper-slide-index="${i}"]`);else l=t[i];if(l){l.classList.add(s.slideActiveClass);let e=function(e,t){const s=[];for(;e.nextElementSibling;){const a=e.nextElementSibling;t?a.matches(t)&&s.push(a):s.push(a),e=a}return s}(l,`.${s.slideClass}, swiper-slide`)[0];s.loop&&!e&&(e=t[0]),e&&e.classList.add(s.slideNextClass);let a=function(e,t){const s=[];for(;e.previousElementSibling;){const a=e.previousElementSibling;t?a.matches(t)&&s.push(a):s.push(a),e=a}return s}(l,`.${s.slideClass}, swiper-slide`)[0];s.loop&&0===!a&&(a=t[t.length-1]),a&&a.classList.add(s.slidePrevClass)}e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,s=t.rtlTranslate?t.translate:-t.translate,{snapGrid:a,params:i,activeIndex:r,realIndex:n,snapIndex:l}=t;let o,d=e;const c=e=>{let s=e-t.virtual.slidesBefore;return s<0&&(s=t.virtual.slides.length+s),s>=t.virtual.slides.length&&(s-=t.virtual.slides.length),s};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:s}=e,a=e.rtlTranslate?e.translate:-e.translate;let i;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?a>=t[e]&&a<t[e+1]-(t[e+1]-t[e])/2?i=e:a>=t[e]&&a<t[e+1]&&(i=e+1):a>=t[e]&&(i=e);return s.normalizeSlideIndex&&(i<0||void 0===i)&&(i=0),i}(t)),a.indexOf(s)>=0)o=a.indexOf(s);else{const e=Math.min(i.slidesPerGroupSkip,d);o=e+Math.floor((d-e)/i.slidesPerGroup)}if(o>=a.length&&(o=a.length-1),d===r)return o!==l&&(t.snapIndex=o,t.emit("snapIndexChange")),void(t.params.loop&&t.virtual&&t.params.virtual.enabled&&(t.realIndex=c(d)));let p;p=t.virtual&&i.virtual.enabled&&i.loop?c(d):t.slides[d]?parseInt(t.slides[d].getAttribute("data-swiper-slide-index")||d,10):d,Object.assign(t,{snapIndex:o,realIndex:p,previousIndex:r,activeIndex:d}),t.emit("activeIndexChange"),t.emit("snapIndexChange"),n!==p&&t.emit("realIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&t.emit("slideChange")},updateClickedSlide:function(e){const t=this,s=t.params,a=e.closest(`.${s.slideClass}, swiper-slide`);let i,r=!1;if(a)for(let e=0;e<t.slides.length;e+=1)if(t.slides[e]===a){r=!0,i=e;break}if(!a||!r)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=a,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(a.getAttribute("data-swiper-slide-index"),10):t.clickedIndex=i,s.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}};function A({swiper:e,runCallbacks:t,direction:s,step:a}){const{activeIndex:i,previousIndex:r}=e;let n=s;if(n||(n=i>r?"next":i<r?"prev":"reset"),e.emit(`transition${a}`),t&&i!==r){if("reset"===n)return void e.emit(`slideResetTransition${a}`);e.emit(`slideChangeTransition${a}`),"next"===n?e.emit(`slideNextTransition${a}`):e.emit(`slidePrevTransition${a}`)}}const $={slideTo:function(e=0,t=this.params.speed,s=!0,a,i){"string"==typeof e&&(e=parseInt(e,10));const r=this;let n=e;n<0&&(n=0);const{params:l,snapGrid:o,slidesGrid:d,previousIndex:c,activeIndex:p,rtlTranslate:u,wrapperEl:m,enabled:f}=r;if(r.animating&&l.preventInteractionOnTransition||!f&&!a&&!i)return!1;const g=Math.min(r.params.slidesPerGroupSkip,n);let v=g+Math.floor((n-g)/r.params.slidesPerGroup);v>=o.length&&(v=o.length-1);const b=-o[v];if(l.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const t=-Math.floor(100*b),s=Math.floor(100*d[e]),a=Math.floor(100*d[e+1]);void 0!==d[e+1]?t>=s&&t<a-(a-s)/2?n=e:t>=s&&t<a&&(n=e+1):t>=s&&(n=e)}if(r.initialized&&n!==p){if(!r.allowSlideNext&&b<r.translate&&b<r.minTranslate())return!1;if(!r.allowSlidePrev&&b>r.translate&&b>r.maxTranslate()&&(p||0)!==n)return!1}let w;if(n!==(c||0)&&s&&r.emit("beforeSlideChangeStart"),r.updateProgress(b),w=n>p?"next":n<p?"prev":"reset",u&&-b===r.translate||!u&&b===r.translate)return r.updateActiveIndex(n),l.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==l.effect&&r.setTranslate(b),"reset"!==w&&(r.transitionStart(s,w),r.transitionEnd(s,w)),!1;if(l.cssMode){const e=r.isHorizontal(),s=u?b:-b;if(0===t){const t=r.virtual&&r.params.virtual.enabled;t&&(r.wrapperEl.style.scrollSnapType="none",r._immediateVirtual=!0),t&&!r._cssModeVirtualInitialSet&&r.params.initialSlide>0?(r._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{m[e?"scrollLeft":"scrollTop"]=s}))):m[e?"scrollLeft":"scrollTop"]=s,t&&requestAnimationFrame((()=>{r.wrapperEl.style.scrollSnapType="",r._immediateVirtual=!1}))}else{if(!r.support.smoothScroll)return h({swiper:r,targetPosition:s,side:e?"left":"top"}),!0;m.scrollTo({[e?"left":"top"]:s,behavior:"smooth"})}return!0}return r.setTransition(t),r.setTranslate(b),r.updateActiveIndex(n),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,a),r.transitionStart(s,w),0===t?r.transitionEnd(s,w):r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(s,w))}),r.wrapperEl.addEventListener("transitionend",r.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e=0,t=this.params.speed,s=!0,a){"string"==typeof e&&(e=parseInt(e,10));const i=this;let r=e;return i.params.loop&&(i.virtual&&i.params.virtual.enabled?r+=i.virtual.slidesBefore:r=i.getSlideIndex(i.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===r))[0])),i.slideTo(r,t,s,a)},slideNext:function(e=this.params.speed,t=!0,s){const a=this,{enabled:i,params:r,animating:n}=a;if(!i)return a;let l=r.slidesPerGroup;"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(l=Math.max(a.slidesPerViewDynamic("current",!0),1));const o=a.activeIndex<r.slidesPerGroupSkip?1:l,d=a.virtual&&r.virtual.enabled;if(r.loop){if(n&&!d&&r.loopPreventsSliding)return!1;a.loopFix({direction:"next"}),a._clientLeft=a.wrapperEl.clientLeft}return r.rewind&&a.isEnd?a.slideTo(0,e,t,s):a.slideTo(a.activeIndex+o,e,t,s)},slidePrev:function(e=this.params.speed,t=!0,s){const a=this,{params:i,snapGrid:r,slidesGrid:n,rtlTranslate:l,enabled:o,animating:d}=a;if(!o)return a;const c=a.virtual&&i.virtual.enabled;if(i.loop){if(d&&!c&&i.loopPreventsSliding)return!1;a.loopFix({direction:"prev"}),a._clientLeft=a.wrapperEl.clientLeft}function p(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=p(l?a.translate:-a.translate),m=r.map((e=>p(e)));let f=r[m.indexOf(u)-1];if(void 0===f&&i.cssMode){let e;r.forEach(((t,s)=>{u>=t&&(e=s)})),void 0!==e&&(f=r[e>0?e-1:e])}let h=0;if(void 0!==f&&(h=n.indexOf(f),h<0&&(h=a.activeIndex-1),"auto"===i.slidesPerView&&1===i.slidesPerGroup&&i.slidesPerGroupAuto&&(h=h-a.slidesPerViewDynamic("previous",!0)+1,h=Math.max(h,0))),i.rewind&&a.isBeginning){const i=a.params.virtual&&a.params.virtual.enabled&&a.virtual?a.virtual.slides.length-1:a.slides.length-1;return a.slideTo(i,e,t,s)}return a.slideTo(h,e,t,s)},slideReset:function(e=this.params.speed,t=!0,s){return this.slideTo(this.activeIndex,e,t,s)},slideToClosest:function(e=this.params.speed,t=!0,s,a=.5){const i=this;let r=i.activeIndex;const n=Math.min(i.params.slidesPerGroupSkip,r),l=n+Math.floor((r-n)/i.params.slidesPerGroup),o=i.rtlTranslate?i.translate:-i.translate;if(o>=i.snapGrid[l]){const e=i.snapGrid[l];o-e>(i.snapGrid[l+1]-e)*a&&(r+=i.params.slidesPerGroup)}else{const e=i.snapGrid[l-1];o-e<=(i.snapGrid[l]-e)*a&&(r-=i.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,i.slidesGrid.length-1),i.slideTo(r,e,t,s)},slideToClickedSlide:function(){const e=this,{params:t,slidesEl:s}=e,a="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let i,r=e.clickedIndex;const n=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;i=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?r<e.loopedSlides-a/2||r>e.slides.length-e.loopedSlides+a/2?(e.loopFix(),r=e.getSlideIndex(v(s,`${n}[data-swiper-slide-index="${i}"]`)[0]),d((()=>{e.slideTo(r)}))):e.slideTo(r):r>e.slides.length-a?(e.loopFix(),r=e.getSlideIndex(v(s,`${n}[data-swiper-slide-index="${i}"]`)[0]),d((()=>{e.slideTo(r)}))):e.slideTo(r)}else e.slideTo(r)}};function I(e){const t=this,s=n(),a=o(),i=t.touchEventsData;i.evCache.push(e);const{params:r,touches:l,enabled:d}=t;if(!d)return;if(!r.simulateTouch&&"mouse"===e.pointerType)return;if(t.animating&&r.preventInteractionOnTransition)return;!t.animating&&r.cssMode&&r.loop&&t.loopFix();let p=e;p.originalEvent&&(p=p.originalEvent);let u=p.target;if("wrapper"===r.touchEventsTarget&&!t.wrapperEl.contains(u))return;if("which"in p&&3===p.which)return;if("button"in p&&p.button>0)return;if(i.isTouched&&i.isMoved)return;const m=!!r.noSwipingClass&&""!==r.noSwipingClass,f=e.composedPath?e.composedPath():e.path;m&&p.target&&p.target.shadowRoot&&f&&(u=f[0]);const h=r.noSwipingSelector?r.noSwipingSelector:`.${r.noSwipingClass}`,g=!(!p.target||!p.target.shadowRoot);if(r.noSwiping&&(g?function(e,t=this){return function t(s){if(!s||s===n()||s===o())return null;s.assignedSlot&&(s=s.assignedSlot);const a=s.closest(e);return a||s.getRootNode?a||t(s.getRootNode().host):null}(t)}(h,u):u.closest(h)))return void(t.allowClick=!0);if(r.swipeHandler&&!u.closest(r.swipeHandler))return;l.currentX=p.pageX,l.currentY=p.pageY;const v=l.currentX,b=l.currentY,w=r.edgeSwipeDetection||r.iOSEdgeSwipeDetection,y=r.edgeSwipeThreshold||r.iOSEdgeSwipeThreshold;if(w&&(v<=y||v>=a.innerWidth-y)){if("prevent"!==w)return;e.preventDefault()}Object.assign(i,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=v,l.startY=b,i.touchStartTime=c(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,r.threshold>0&&(i.allowThresholdMove=!1);let x=!0;u.matches(i.focusableElements)&&(x=!1,"SELECT"===u.nodeName&&(i.isTouched=!1)),s.activeElement&&s.activeElement.matches(i.focusableElements)&&s.activeElement!==u&&s.activeElement.blur();const E=x&&t.allowTouchMove&&r.touchStartPreventDefault;!r.touchStartForcePreventDefault&&!E||u.isContentEditable||p.preventDefault(),t.params.freeMode&&t.params.freeMode.enabled&&t.freeMode&&t.animating&&!r.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",p)}function O(e){const t=n(),s=this,a=s.touchEventsData,{params:i,touches:r,rtlTranslate:l,enabled:o}=s;if(!o)return;if(!i.simulateTouch&&"mouse"===e.pointerType)return;let d=e;if(d.originalEvent&&(d=d.originalEvent),!a.isTouched)return void(a.startMoving&&a.isScrolling&&s.emit("touchMoveOpposite",d));const p=a.evCache.findIndex((e=>e.pointerId===d.pointerId));p>=0&&(a.evCache[p]=d);const u=a.evCache.length>1?a.evCache[0]:d,m=u.pageX,f=u.pageY;if(d.preventedByNestedSwiper)return r.startX=m,void(r.startY=f);if(!s.allowTouchMove)return d.target.matches(a.focusableElements)||(s.allowClick=!1),void(a.isTouched&&(Object.assign(r,{startX:m,startY:f,prevX:s.touches.currentX,prevY:s.touches.currentY,currentX:m,currentY:f}),a.touchStartTime=c()));if(i.touchReleaseOnEdges&&!i.loop)if(s.isVertical()){if(f<r.startY&&s.translate<=s.maxTranslate()||f>r.startY&&s.translate>=s.minTranslate())return a.isTouched=!1,void(a.isMoved=!1)}else if(m<r.startX&&s.translate<=s.maxTranslate()||m>r.startX&&s.translate>=s.minTranslate())return;if(t.activeElement&&d.target===t.activeElement&&d.target.matches(a.focusableElements))return a.isMoved=!0,void(s.allowClick=!1);if(a.allowTouchCallbacks&&s.emit("touchMove",d),d.targetTouches&&d.targetTouches.length>1)return;r.currentX=m,r.currentY=f;const h=r.currentX-r.startX,g=r.currentY-r.startY;if(s.params.threshold&&Math.sqrt(h**2+g**2)<s.params.threshold)return;if(void 0===a.isScrolling){let e;s.isHorizontal()&&r.currentY===r.startY||s.isVertical()&&r.currentX===r.startX?a.isScrolling=!1:h*h+g*g>=25&&(e=180*Math.atan2(Math.abs(g),Math.abs(h))/Math.PI,a.isScrolling=s.isHorizontal()?e>i.touchAngle:90-e>i.touchAngle)}if(a.isScrolling&&s.emit("touchMoveOpposite",d),void 0===a.startMoving&&(r.currentX===r.startX&&r.currentY===r.startY||(a.startMoving=!0)),a.isScrolling||s.zoom&&s.params.zoom&&s.params.zoom.enabled&&a.evCache.length>1)return void(a.isTouched=!1);if(!a.startMoving)return;s.allowClick=!1,!i.cssMode&&d.cancelable&&d.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&d.stopPropagation();let v=s.isHorizontal()?h:g,b=s.isHorizontal()?r.currentX-r.previousX:r.currentY-r.previousY;i.oneWayMovement&&(v=Math.abs(v)*(l?1:-1),b=Math.abs(b)*(l?1:-1)),r.diff=v,v*=i.touchRatio,l&&(v=-v,b=-b);const w=s.touchesDirection;s.swipeDirection=v>0?"prev":"next",s.touchesDirection=b>0?"prev":"next";const y=s.params.loop&&!i.cssMode;if(!a.isMoved){if(y&&s.loopFix({direction:s.swipeDirection}),a.startTranslate=s.getTranslate(),s.setTransition(0),s.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});s.wrapperEl.dispatchEvent(e)}a.allowMomentumBounce=!1,!i.grabCursor||!0!==s.allowSlideNext&&!0!==s.allowSlidePrev||s.setGrabCursor(!0),s.emit("sliderFirstMove",d)}let x;a.isMoved&&w!==s.touchesDirection&&y&&Math.abs(v)>=1&&(s.loopFix({direction:s.swipeDirection,setTranslate:!0}),x=!0),s.emit("sliderMove",d),a.isMoved=!0,a.currentTranslate=v+a.startTranslate;let E=!0,S=i.resistanceRatio;if(i.touchReleaseOnEdges&&(S=0),v>0?(y&&!x&&a.currentTranslate>(i.centeredSlides?s.minTranslate()-s.size/2:s.minTranslate())&&s.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),a.currentTranslate>s.minTranslate()&&(E=!1,i.resistance&&(a.currentTranslate=s.minTranslate()-1+(-s.minTranslate()+a.startTranslate+v)**S))):v<0&&(y&&!x&&a.currentTranslate<(i.centeredSlides?s.maxTranslate()+s.size/2:s.maxTranslate())&&s.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:s.slides.length-("auto"===i.slidesPerView?s.slidesPerViewDynamic():Math.ceil(parseFloat(i.slidesPerView,10)))}),a.currentTranslate<s.maxTranslate()&&(E=!1,i.resistance&&(a.currentTranslate=s.maxTranslate()+1-(s.maxTranslate()-a.startTranslate-v)**S))),E&&(d.preventedByNestedSwiper=!0),!s.allowSlideNext&&"next"===s.swipeDirection&&a.currentTranslate<a.startTranslate&&(a.currentTranslate=a.startTranslate),!s.allowSlidePrev&&"prev"===s.swipeDirection&&a.currentTranslate>a.startTranslate&&(a.currentTranslate=a.startTranslate),s.allowSlidePrev||s.allowSlideNext||(a.currentTranslate=a.startTranslate),i.threshold>0){if(!(Math.abs(v)>i.threshold||a.allowThresholdMove))return void(a.currentTranslate=a.startTranslate);if(!a.allowThresholdMove)return a.allowThresholdMove=!0,r.startX=r.currentX,r.startY=r.currentY,a.currentTranslate=a.startTranslate,void(r.diff=s.isHorizontal()?r.currentX-r.startX:r.currentY-r.startY)}i.followFinger&&!i.cssMode&&((i.freeMode&&i.freeMode.enabled&&s.freeMode||i.watchSlidesProgress)&&(s.updateActiveIndex(),s.updateSlidesClasses()),s.params.freeMode&&i.freeMode.enabled&&s.freeMode&&s.freeMode.onTouchMove(),s.updateProgress(a.currentTranslate),s.setTranslate(a.currentTranslate))}function D(e){const t=this,s=t.touchEventsData,a=s.evCache.findIndex((t=>t.pointerId===e.pointerId));if(a>=0&&s.evCache.splice(a,1),["pointercancel","pointerout","pointerleave"].includes(e.type)&&("pointercancel"!==e.type||!t.browser.isSafari&&!t.browser.isWebView))return;const{params:i,touches:r,rtlTranslate:n,slidesGrid:l,enabled:o}=t;if(!o)return;if(!i.simulateTouch&&"mouse"===e.pointerType)return;let p=e;if(p.originalEvent&&(p=p.originalEvent),s.allowTouchCallbacks&&t.emit("touchEnd",p),s.allowTouchCallbacks=!1,!s.isTouched)return s.isMoved&&i.grabCursor&&t.setGrabCursor(!1),s.isMoved=!1,void(s.startMoving=!1);i.grabCursor&&s.isMoved&&s.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const u=c(),m=u-s.touchStartTime;if(t.allowClick){const e=p.path||p.composedPath&&p.composedPath();t.updateClickedSlide(e&&e[0]||p.target),t.emit("tap click",p),m<300&&u-s.lastClickTime<300&&t.emit("doubleTap doubleClick",p)}if(s.lastClickTime=c(),d((()=>{t.destroyed||(t.allowClick=!0)})),!s.isTouched||!s.isMoved||!t.swipeDirection||0===r.diff||s.currentTranslate===s.startTranslate)return s.isTouched=!1,s.isMoved=!1,void(s.startMoving=!1);let f;if(s.isTouched=!1,s.isMoved=!1,s.startMoving=!1,f=i.followFinger?n?t.translate:-t.translate:-s.currentTranslate,i.cssMode)return;if(t.params.freeMode&&i.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:f});let h=0,g=t.slidesSizesGrid[0];for(let e=0;e<l.length;e+=e<i.slidesPerGroupSkip?1:i.slidesPerGroup){const t=e<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;void 0!==l[e+t]?f>=l[e]&&f<l[e+t]&&(h=e,g=l[e+t]-l[e]):f>=l[e]&&(h=e,g=l[l.length-1]-l[l.length-2])}let v=null,b=null;i.rewind&&(t.isBeginning?b=t.params.virtual&&t.params.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(v=0));const w=(f-l[h])/g,y=h<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;if(m>i.longSwipesMs){if(!i.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(w>=i.longSwipesRatio?t.slideTo(i.rewind&&t.isEnd?v:h+y):t.slideTo(h)),"prev"===t.swipeDirection&&(w>1-i.longSwipesRatio?t.slideTo(h+y):null!==b&&w<0&&Math.abs(w)>i.longSwipesRatio?t.slideTo(b):t.slideTo(h))}else{if(!i.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||p.target!==t.navigation.nextEl&&p.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(null!==v?v:h+y),"prev"===t.swipeDirection&&t.slideTo(null!==b?b:h)):p.target===t.navigation.nextEl?t.slideTo(h+y):t.slideTo(h)}}let G;function H(){const e=this,{params:t,el:s}=e;if(s&&0===s.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:a,allowSlidePrev:i,snapGrid:r}=e,n=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const l=n&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||l?e.params.loop&&!n?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(G),G=setTimeout((()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()}),500)),e.allowSlidePrev=i,e.allowSlideNext=a,e.params.watchOverflow&&r!==e.snapGrid&&e.checkOverflow()}function B(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function _(){const e=this,{wrapperEl:t,rtlTranslate:s,enabled:a}=e;if(!a)return;let i;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const r=e.maxTranslate()-e.minTranslate();i=0===r?0:(e.translate-e.minTranslate())/r,i!==e.progress&&e.updateProgress(s?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}const X=(e,t)=>{if(!e||e.destroyed||!e.params)return;const s=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(s){const t=s.querySelector(`.${e.params.lazyPreloaderClass}`);t&&t.remove()}};function Y(e){X(this,e.target),this.update()}let R=!1;function F(){}const q=(e,t)=>{const s=n(),{params:a,el:i,wrapperEl:r,device:l}=e,o=!!a.nested,d="on"===t?"addEventListener":"removeEventListener",c=t;i[d]("pointerdown",e.onTouchStart,{passive:!1}),s[d]("pointermove",e.onTouchMove,{passive:!1,capture:o}),s[d]("pointerup",e.onTouchEnd,{passive:!0}),s[d]("pointercancel",e.onTouchEnd,{passive:!0}),s[d]("pointerout",e.onTouchEnd,{passive:!0}),s[d]("pointerleave",e.onTouchEnd,{passive:!0}),(a.preventClicks||a.preventClicksPropagation)&&i[d]("click",e.onClick,!0),a.cssMode&&r[d]("scroll",e.onScroll),a.updateOnWindowResize?e[c](l.ios||l.android?"resize orientationchange observerUpdate":"resize observerUpdate",H,!0):e[c]("observerUpdate",H,!0),i[d]("load",e.onLoad,{capture:!0})},N=(e,t)=>e.grid&&t.grid&&t.grid.rows>1,j={init:!0,direction:"horizontal",oneWayMovement:!1,touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopedSlides:null,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",runCallbacksOnInit:!0,_emitClasses:!1};function V(e,t){return function(s={}){const a=Object.keys(s)[0],i=s[a];"object"==typeof i&&null!==i?(["navigation","pagination","scrollbar"].indexOf(a)>=0&&!0===e[a]&&(e[a]={auto:!0}),a in e&&"enabled"in i?(!0===e[a]&&(e[a]={enabled:!0}),"object"!=typeof e[a]||"enabled"in e[a]||(e[a].enabled=!0),e[a]||(e[a]={enabled:!1}),m(t,s)):m(t,s)):m(t,s)}}const W={eventsEmitter:k,update:z,translate:{getTranslate:function(e=(this.isHorizontal()?"x":"y")){const{params:t,rtlTranslate:s,translate:a,wrapperEl:i}=this;if(t.virtualTranslate)return s?-a:a;if(t.cssMode)return a;let r=p(i,e);return s&&(r=-r),r||0},setTranslate:function(e,t){const s=this,{rtlTranslate:a,params:i,wrapperEl:r,progress:n}=s;let l,o=0,d=0;s.isHorizontal()?o=a?-e:e:d=e,i.roundLengths&&(o=Math.floor(o),d=Math.floor(d)),i.cssMode?r[s.isHorizontal()?"scrollLeft":"scrollTop"]=s.isHorizontal()?-o:-d:i.virtualTranslate||(r.style.transform=`translate3d(${o}px, ${d}px, 0px)`),s.previousTranslate=s.translate,s.translate=s.isHorizontal()?o:d;const c=s.maxTranslate()-s.minTranslate();l=0===c?0:(e-s.minTranslate())/c,l!==n&&s.updateProgress(e),s.emit("setTranslate",s.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e=0,t=this.params.speed,s=!0,a=!0,i){const r=this,{params:n,wrapperEl:l}=r;if(r.animating&&n.preventInteractionOnTransition)return!1;const o=r.minTranslate(),d=r.maxTranslate();let c;if(c=a&&e>o?o:a&&e<d?d:e,r.updateProgress(c),n.cssMode){const e=r.isHorizontal();if(0===t)l[e?"scrollLeft":"scrollTop"]=-c;else{if(!r.support.smoothScroll)return h({swiper:r,targetPosition:-c,side:e?"left":"top"}),!0;l.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(r.setTransition(0),r.setTranslate(c),s&&(r.emit("beforeTransitionStart",t,i),r.emit("transitionEnd"))):(r.setTransition(t),r.setTranslate(c),s&&(r.emit("beforeTransitionStart",t,i),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,s&&r.emit("transitionEnd"))}),r.wrapperEl.addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){const s=this;s.params.cssMode||(s.wrapperEl.style.transitionDuration=`${e}ms`),s.emit("setTransition",e,t)},transitionStart:function(e=!0,t){const s=this,{params:a}=s;a.cssMode||(a.autoHeight&&s.updateAutoHeight(),A({swiper:s,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e=!0,t){const s=this,{params:a}=s;s.animating=!1,a.cssMode||(s.setTransition(0),A({swiper:s,runCallbacks:e,direction:t,step:"End"}))}},slide:$,loop:{loopCreate:function(e){const t=this,{params:s,slidesEl:a}=t;!s.loop||t.virtual&&t.params.virtual.enabled||(v(a,`.${s.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)})),t.loopFix({slideRealIndex:e,direction:s.centeredSlides?void 0:"next"}))},loopFix:function({slideRealIndex:e,slideTo:t=!0,direction:s,setTranslate:a,activeSlideIndex:i,byController:r,byMousewheel:n}={}){const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:o,allowSlidePrev:d,allowSlideNext:c,slidesEl:p,params:u}=l;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&u.virtual.enabled)return t&&(u.centeredSlides||0!==l.snapIndex?u.centeredSlides&&l.snapIndex<u.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0):l.slideTo(l.virtual.slides.length,0,!1,!0)),l.allowSlidePrev=d,l.allowSlideNext=c,void l.emit("loopFix");const m="auto"===u.slidesPerView?l.slidesPerViewDynamic():Math.ceil(parseFloat(u.slidesPerView,10));let f=u.loopedSlides||m;f%u.slidesPerGroup!=0&&(f+=u.slidesPerGroup-f%u.slidesPerGroup),l.loopedSlides=f;const h=[],g=[];let v=l.activeIndex;void 0===i?i=l.getSlideIndex(l.slides.filter((e=>e.classList.contains("swiper-slide-active")))[0]):v=i;const b="next"===s||!s,w="prev"===s||!s;let y=0,x=0;if(i<f){y=Math.max(f-i,u.slidesPerGroup);for(let e=0;e<f-i;e+=1){const t=e-Math.floor(e/o.length)*o.length;h.push(o.length-t-1)}}else if(i>l.slides.length-2*f){x=Math.max(i-(l.slides.length-2*f),u.slidesPerGroup);for(let e=0;e<x;e+=1){const t=e-Math.floor(e/o.length)*o.length;g.push(t)}}if(w&&h.forEach((e=>{p.prepend(l.slides[e])})),b&&g.forEach((e=>{p.append(l.slides[e])})),l.recalcSlides(),u.watchSlidesProgress&&l.updateSlidesOffset(),t)if(h.length>0&&w)if(void 0===e){const e=l.slidesGrid[v],t=l.slidesGrid[v+y]-e;n?l.setTranslate(l.translate-t):(l.slideTo(v+y,0,!1,!0),a&&(l.touches[l.isHorizontal()?"startX":"startY"]+=t))}else a&&l.slideToLoop(e,0,!1,!0);else if(g.length>0&&b)if(void 0===e){const e=l.slidesGrid[v],t=l.slidesGrid[v-x]-e;n?l.setTranslate(l.translate-t):(l.slideTo(v-x,0,!1,!0),a&&(l.touches[l.isHorizontal()?"startX":"startY"]+=t))}else l.slideToLoop(e,0,!1,!0);if(l.allowSlidePrev=d,l.allowSlideNext=c,l.controller&&l.controller.control&&!r){const t={slideRealIndex:e,slideTo:!1,direction:s,setTranslate:a,activeSlideIndex:i,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach((e=>{e.params.loop&&e.loopFix(t)})):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix(t)}l.emit("loopFix")},loopDestroy:function(){const e=this,{slides:t,params:s,slidesEl:a}=e;if(!s.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const i=[];t.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;i[t]=e})),t.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),i.forEach((e=>{a.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}},grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const s="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),s.style.cursor="move",s.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame((()=>{t.__preventObserver__=!1}))},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame((()=>{e.__preventObserver__=!1})))}},events:{attachEvents:function(){const e=this,t=n(),{params:s}=e;e.onTouchStart=I.bind(e),e.onTouchMove=O.bind(e),e.onTouchEnd=D.bind(e),s.cssMode&&(e.onScroll=_.bind(e)),e.onClick=B.bind(e),e.onLoad=Y.bind(e),R||(t.addEventListener("touchstart",F),R=!0),q(e,"on")},detachEvents:function(){q(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:s,params:a,el:i}=e,r=a.breakpoints;if(!r||r&&0===Object.keys(r).length)return;const n=e.getBreakpoint(r,e.params.breakpointsBase,e.el);if(!n||e.currentBreakpoint===n)return;const l=(n in r?r[n]:void 0)||e.originalParams,o=N(e,a),d=N(e,l),c=a.enabled;o&&!d?(i.classList.remove(`${a.containerModifierClass}grid`,`${a.containerModifierClass}grid-column`),e.emitContainerClasses()):!o&&d&&(i.classList.add(`${a.containerModifierClass}grid`),(l.grid.fill&&"column"===l.grid.fill||!l.grid.fill&&"column"===a.grid.fill)&&i.classList.add(`${a.containerModifierClass}grid-column`),e.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach((t=>{const s=a[t]&&a[t].enabled,i=l[t]&&l[t].enabled;s&&!i&&e[t].disable(),!s&&i&&e[t].enable()}));const p=l.direction&&l.direction!==a.direction,u=a.loop&&(l.slidesPerView!==a.slidesPerView||p);p&&s&&e.changeDirection(),m(e.params,l);const f=e.params.enabled;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),c&&!f?e.disable():!c&&f&&e.enable(),e.currentBreakpoint=n,e.emit("_beforeBreakpoint",l),u&&s&&(e.loopDestroy(),e.loopCreate(t),e.updateSlides()),e.emit("breakpoint",l)},getBreakpoint:function(e,t="window",s){if(!e||"container"===t&&!s)return;let a=!1;const i=o(),r="window"===t?i.innerHeight:s.clientHeight,n=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:r*t,point:e}}return{value:e,point:e}}));n.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<n.length;e+=1){const{point:r,value:l}=n[e];"window"===t?i.matchMedia(`(min-width: ${l}px)`).matches&&(a=r):l<=s.clientWidth&&(a=r)}return a||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:s}=e,{slidesOffsetBefore:a}=s;if(a){const t=e.slides.length-1,s=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*a;e.isLocked=e.size>s}else e.isLocked=1===e.snapGrid.length;!0===s.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===s.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:s,rtl:a,el:i,device:r}=e,n=function(e,t){const s=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((a=>{e[a]&&s.push(t+a)})):"string"==typeof e&&s.push(t+e)})),s}(["initialized",s.direction,{"free-mode":e.params.freeMode&&s.freeMode.enabled},{autoheight:s.autoHeight},{rtl:a},{grid:s.grid&&s.grid.rows>1},{"grid-column":s.grid&&s.grid.rows>1&&"column"===s.grid.fill},{android:r.android},{ios:r.ios},{"css-mode":s.cssMode},{centered:s.cssMode&&s.centeredSlides},{"watch-progress":s.watchSlidesProgress}],s.containerModifierClass);t.push(...n),i.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e.classList.remove(...t),this.emitContainerClasses()}}},U={};class K{constructor(...e){let t,s;1===e.length&&e[0].constructor&&"Object"===Object.prototype.toString.call(e[0]).slice(8,-1)?s=e[0]:[t,s]=e,s||(s={}),s=m({},s),t&&!s.el&&(s.el=t);const a=n();if(s.el&&"string"==typeof s.el&&a.querySelectorAll(s.el).length>1){const e=[];return a.querySelectorAll(s.el).forEach((t=>{const a=m({},s,{el:t});e.push(new K(a))})),e}const i=this;i.__swiper__=!0,i.support=L(),i.device=function(e={}){return C||(C=function({userAgent:e}={}){const t=L(),s=o(),a=s.navigator.platform,i=e||s.navigator.userAgent,r={ios:!1,android:!1},n=s.screen.width,l=s.screen.height,d=i.match(/(Android);?[\s\/]+([\d.]+)?/);let c=i.match(/(iPad).*OS\s([\d_]+)/);const p=i.match(/(iPod)(.*OS\s([\d_]+))?/),u=!c&&i.match(/(iPhone\sOS|iOS)\s([\d_]+)/),m="Win32"===a;let f="MacIntel"===a;return!c&&f&&t.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${n}x${l}`)>=0&&(c=i.match(/(Version)\/([\d.]+)/),c||(c=[0,1,"13_0_0"]),f=!1),d&&!m&&(r.os="android",r.android=!0),(c||u||p)&&(r.os="ios",r.ios=!0),r}(e)),C}({userAgent:s.userAgent}),i.browser=(P||(P=function(){const e=o();let t=!1;function s(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(s()){const s=String(e.navigator.userAgent);if(s.includes("Version/")){const[e,a]=s.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));t=e<16||16===e&&a<2}}return{isSafari:t||s(),needPerspectiveFix:t,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)}}()),P),i.eventsListeners={},i.eventsAnyListeners=[],i.modules=[...i.__modules__],s.modules&&Array.isArray(s.modules)&&i.modules.push(...s.modules);const r={};i.modules.forEach((e=>{e({params:s,swiper:i,extendParams:V(s,r),on:i.on.bind(i),once:i.once.bind(i),off:i.off.bind(i),emit:i.emit.bind(i)})}));const l=m({},j,r);return i.params=m({},l,U,s),i.originalParams=m({},i.params),i.passedParams=m({},s),i.params&&i.params.on&&Object.keys(i.params.on).forEach((e=>{i.on(e,i.params.on[e])})),i.params&&i.params.onAny&&i.onAny(i.params.onAny),Object.assign(i,{enabled:i.params.enabled,el:t,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===i.params.direction,isVertical:()=>"vertical"===i.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:i.params.allowSlideNext,allowSlidePrev:i.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:i.params.focusableElements,lastClickTime:c(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,evCache:[]},allowClick:!0,allowTouchMove:i.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),i.emit("_swiper"),i.params.init&&i.init(),i}getSlideIndex(e){const{slidesEl:t,params:s}=this,a=x(v(t,`.${s.slideClass}, swiper-slide`)[0]);return x(e)-a}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=v(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const s=this;e=Math.min(Math.max(e,0),1);const a=s.minTranslate(),i=(s.maxTranslate()-a)*e+a;s.translateTo(i,void 0===t?0:t),s.updateActiveIndex(),s.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((s=>{const a=e.getSlideClasses(s);t.push({slideEl:s,classNames:a}),e.emit("_slideClass",s,a)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e="current",t=!1){const{params:s,slides:a,slidesGrid:i,slidesSizesGrid:r,size:n,activeIndex:l}=this;let o=1;if(s.centeredSlides){let e,t=a[l].swiperSlideSize;for(let s=l+1;s<a.length;s+=1)a[s]&&!e&&(t+=a[s].swiperSlideSize,o+=1,t>n&&(e=!0));for(let s=l-1;s>=0;s-=1)a[s]&&!e&&(t+=a[s].swiperSlideSize,o+=1,t>n&&(e=!0))}else if("current"===e)for(let e=l+1;e<a.length;e+=1)(t?i[e]+r[e]-i[l]<n:i[e]-i[l]<n)&&(o+=1);else for(let e=l-1;e>=0;e-=1)i[l]-i[e]<n&&(o+=1);return o}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:s}=e;function a(){const t=e.rtlTranslate?-1*e.translate:e.translate,s=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(s),e.updateActiveIndex(),e.updateSlidesClasses()}let i;s.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&X(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode&&e.params.freeMode.enabled?(a(),e.params.autoHeight&&e.updateAutoHeight()):(i=("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),i||a()),s.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t=!0){const s=this,a=s.params.direction;return e||(e="horizontal"===a?"vertical":"horizontal"),e===a||"horizontal"!==e&&"vertical"!==e||(s.el.classList.remove(`${s.params.containerModifierClass}${a}`),s.el.classList.add(`${s.params.containerModifierClass}${e}`),s.emitContainerClasses(),s.params.direction=e,s.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),s.emit("changeDirection"),t&&s.update()),s}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let s=e||t.params.el;if("string"==typeof s&&(s=document.querySelector(s)),!s)return!1;s.swiper=t,s.shadowEl&&(t.isElement=!0);const a=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let i=s&&s.shadowRoot&&s.shadowRoot.querySelector?s.shadowRoot.querySelector(a()):v(s,a())[0];return!i&&t.params.createElements&&(i=b("div",t.params.wrapperClass),s.append(i),v(s,`.${t.params.slideClass}`).forEach((e=>{i.append(e)}))),Object.assign(t,{el:s,wrapperEl:i,slidesEl:t.isElement?s:i,mounted:!0,rtl:"rtl"===s.dir.toLowerCase()||"rtl"===y(s,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===s.dir.toLowerCase()||"rtl"===y(s,"direction")),wrongRTL:"-webkit-box"===y(i,"display")}),!0}init(e){const t=this;return t.initialized||!1===t.mount(e)||(t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents(),[...t.el.querySelectorAll('[loading="lazy"]')].forEach((e=>{e.complete?X(t,e):e.addEventListener("load",(e=>{X(t,e.target)}))})),t.initialized=!0,t.emit("init"),t.emit("afterInit")),t}destroy(e=!0,t=!0){const s=this,{params:a,el:i,wrapperEl:r,slides:n}=s;return void 0===s.params||s.destroyed||(s.emit("beforeDestroy"),s.initialized=!1,s.detachEvents(),a.loop&&s.loopDestroy(),t&&(s.removeClasses(),i.removeAttribute("style"),r.removeAttribute("style"),n&&n.length&&n.forEach((e=>{e.classList.remove(a.slideVisibleClass,a.slideActiveClass,a.slideNextClass,a.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),s.emit("destroy"),Object.keys(s.eventsListeners).forEach((e=>{s.off(e)})),!1!==e&&(s.el.swiper=null,function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(s)),s.destroyed=!0),null}static extendDefaults(e){m(U,e)}static get extendedDefaults(){return U}static get defaults(){return j}static installModule(e){K.prototype.__modules__||(K.prototype.__modules__=[]);const t=K.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>K.installModule(e))),K):(K.installModule(e),K)}}Object.keys(W).forEach((e=>{Object.keys(W[e]).forEach((t=>{K.prototype[t]=W[e][t]}))})),K.use([function({swiper:e,on:t,emit:s}){const a=o();let i=null,r=null;const n=()=>{e&&!e.destroyed&&e.initialized&&(s("beforeResize"),s("resize"))},l=()=>{e&&!e.destroyed&&e.initialized&&s("orientationchange")};t("init",(()=>{e.params.resizeObserver&&void 0!==a.ResizeObserver?e&&!e.destroyed&&e.initialized&&(i=new ResizeObserver((t=>{r=a.requestAnimationFrame((()=>{const{width:s,height:a}=e;let i=s,r=a;t.forEach((({contentBoxSize:t,contentRect:s,target:a})=>{a&&a!==e.el||(i=s?s.width:(t[0]||t).inlineSize,r=s?s.height:(t[0]||t).blockSize)})),i===s&&r===a||n()}))})),i.observe(e.el)):(a.addEventListener("resize",n),a.addEventListener("orientationchange",l))})),t("destroy",(()=>{r&&a.cancelAnimationFrame(r),i&&i.unobserve&&e.el&&(i.unobserve(e.el),i=null),a.removeEventListener("resize",n),a.removeEventListener("orientationchange",l)}))},function({swiper:e,extendParams:t,on:s,emit:a}){const i=[],r=o(),n=(t,s={})=>{const n=new(r.MutationObserver||r.WebkitMutationObserver)((t=>{if(e.__preventObserver__)return;if(1===t.length)return void a("observerUpdate",t[0]);const s=function(){a("observerUpdate",t[0])};r.requestAnimationFrame?r.requestAnimationFrame(s):r.setTimeout(s,0)}));n.observe(t,{attributes:void 0===s.attributes||s.attributes,childList:void 0===s.childList||s.childList,characterData:void 0===s.characterData||s.characterData}),i.push(n)};t({observer:!1,observeParents:!1,observeSlideChildren:!1}),s("init",(()=>{if(e.params.observer){if(e.params.observeParents){const t=E(e.el);for(let e=0;e<t.length;e+=1)n(t[e])}n(e.el,{childList:e.params.observeSlideChildren}),n(e.wrapperEl,{attributes:!1})}})),s("destroy",(()=>{i.forEach((e=>{e.disconnect()})),i.splice(0,i.length)}))}]);const Z=K;function Q({swiper:e,extendParams:t,on:s,emit:a}){let i;t({virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}});const r=n();e.virtual={cache:{},from:void 0,to:void 0,slides:[],offset:0,slidesGrid:[]};const l=r.createElement("div");function o(t,s){const a=e.params.virtual;if(a.cache&&e.virtual.cache[s])return e.virtual.cache[s];let i;return a.renderSlide?(i=a.renderSlide.call(e,t,s),"string"==typeof i&&(l.innerHTML=i,i=l.children[0])):i=e.isElement?b("swiper-slide"):b("div",e.params.slideClass),i.setAttribute("data-swiper-slide-index",s),a.renderSlide||(i.innerHTML=t),a.cache&&(e.virtual.cache[s]=i),i}function d(t){const{slidesPerView:s,slidesPerGroup:i,centeredSlides:r,loop:n}=e.params,{addSlidesBefore:l,addSlidesAfter:d}=e.params.virtual,{from:c,to:p,slides:u,slidesGrid:m,offset:f}=e.virtual;e.params.cssMode||e.updateActiveIndex();const h=e.activeIndex||0;let g,b,w;g=e.rtlTranslate?"right":e.isHorizontal()?"left":"top",r?(b=Math.floor(s/2)+i+d,w=Math.floor(s/2)+i+l):(b=s+(i-1)+d,w=(n?s:i)+l);let y=h-w,x=h+b;n||(y=Math.max(y,0),x=Math.min(x,u.length-1));let E=(e.slidesGrid[y]||0)-(e.slidesGrid[0]||0);function S(){e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),a("virtualUpdate")}if(n&&h>=w?(y-=w,r||(E+=e.slidesGrid[0])):n&&h<w&&(y=-w,r&&(E+=e.slidesGrid[0])),Object.assign(e.virtual,{from:y,to:x,offset:E,slidesGrid:e.slidesGrid,slidesBefore:w,slidesAfter:b}),c===y&&p===x&&!t)return e.slidesGrid!==m&&E!==f&&e.slides.forEach((e=>{e.style[g]=`${E}px`})),e.updateProgress(),void a("virtualUpdate");if(e.params.virtual.renderExternal)return e.params.virtual.renderExternal.call(e,{offset:E,from:y,to:x,slides:function(){const e=[];for(let t=y;t<=x;t+=1)e.push(u[t]);return e}()}),void(e.params.virtual.renderExternalUpdate?S():a("virtualUpdate"));const T=[],M=[],C=e=>{let t=e;return e<0?t=u.length+e:t>=u.length&&(t-=u.length),t};if(t)e.slidesEl.querySelectorAll(`.${e.params.slideClass}, swiper-slide`).forEach((e=>{e.remove()}));else for(let t=c;t<=p;t+=1)if(t<y||t>x){const s=C(t);e.slidesEl.querySelectorAll(`.${e.params.slideClass}[data-swiper-slide-index="${s}"], swiper-slide[data-swiper-slide-index="${s}"]`).forEach((e=>{e.remove()}))}const P=n?-u.length:0,L=n?2*u.length:u.length;for(let e=P;e<L;e+=1)if(e>=y&&e<=x){const s=C(e);void 0===p||t?M.push(s):(e>p&&M.push(s),e<c&&T.push(s))}if(M.forEach((t=>{e.slidesEl.append(o(u[t],t))})),n)for(let t=T.length-1;t>=0;t-=1){const s=T[t];e.slidesEl.prepend(o(u[s],s))}else T.sort(((e,t)=>t-e)),T.forEach((t=>{e.slidesEl.prepend(o(u[t],t))}));v(e.slidesEl,".swiper-slide, swiper-slide").forEach((e=>{e.style[g]=`${E}px`})),S()}s("beforeInit",(()=>{if(!e.params.virtual.enabled)return;let t;if(void 0===e.passedParams.virtual.slides){const s=[...e.slidesEl.children].filter((t=>t.matches(`.${e.params.slideClass}, swiper-slide`)));s&&s.length&&(e.virtual.slides=[...s],t=!0,s.forEach(((t,s)=>{t.setAttribute("data-swiper-slide-index",s),e.virtual.cache[s]=t,t.remove()})))}t||(e.virtual.slides=e.params.virtual.slides),e.classNames.push(`${e.params.containerModifierClass}virtual`),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0,e.params.initialSlide||d()})),s("setTranslate",(()=>{e.params.virtual.enabled&&(e.params.cssMode&&!e._immediateVirtual?(clearTimeout(i),i=setTimeout((()=>{d()}),100)):d())})),s("init update resize",(()=>{e.params.virtual.enabled&&e.params.cssMode&&f(e.wrapperEl,"--swiper-virtual-size",`${e.virtualSize}px`)})),Object.assign(e.virtual,{appendSlide:function(t){if("object"==typeof t&&"length"in t)for(let s=0;s<t.length;s+=1)t[s]&&e.virtual.slides.push(t[s]);else e.virtual.slides.push(t);d(!0)},prependSlide:function(t){const s=e.activeIndex;let a=s+1,i=1;if(Array.isArray(t)){for(let s=0;s<t.length;s+=1)t[s]&&e.virtual.slides.unshift(t[s]);a=s+t.length,i=t.length}else e.virtual.slides.unshift(t);if(e.params.virtual.cache){const t=e.virtual.cache,s={};Object.keys(t).forEach((e=>{const a=t[e],r=a.getAttribute("data-swiper-slide-index");r&&a.setAttribute("data-swiper-slide-index",parseInt(r,10)+i),s[parseInt(e,10)+i]=a})),e.virtual.cache=s}d(!0),e.slideTo(a,0)},removeSlide:function(t){if(null==t)return;let s=e.activeIndex;if(Array.isArray(t))for(let a=t.length-1;a>=0;a-=1)e.virtual.slides.splice(t[a],1),e.params.virtual.cache&&delete e.virtual.cache[t[a]],t[a]<s&&(s-=1),s=Math.max(s,0);else e.virtual.slides.splice(t,1),e.params.virtual.cache&&delete e.virtual.cache[t],t<s&&(s-=1),s=Math.max(s,0);d(!0),e.slideTo(s,0)},removeAllSlides:function(){e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),d(!0),e.slideTo(0,0)},update:d})}function J({swiper:e,extendParams:t,on:s,emit:a}){const i=n(),r=o();function l(t){if(!e.enabled)return;const{rtlTranslate:s}=e;let n=t;n.originalEvent&&(n=n.originalEvent);const l=n.keyCode||n.charCode,o=e.params.keyboard.pageUpDown,d=o&&33===l,c=o&&34===l,p=37===l,u=39===l,m=38===l,f=40===l;if(!e.allowSlideNext&&(e.isHorizontal()&&u||e.isVertical()&&f||c))return!1;if(!e.allowSlidePrev&&(e.isHorizontal()&&p||e.isVertical()&&m||d))return!1;if(!(n.shiftKey||n.altKey||n.ctrlKey||n.metaKey||i.activeElement&&i.activeElement.nodeName&&("input"===i.activeElement.nodeName.toLowerCase()||"textarea"===i.activeElement.nodeName.toLowerCase()))){if(e.params.keyboard.onlyInViewport&&(d||c||p||u||m||f)){let t=!1;if(E(e.el,`.${e.params.slideClass}, swiper-slide`).length>0&&0===E(e.el,`.${e.params.slideActiveClass}`).length)return;const a=e.el,i=a.clientWidth,n=a.clientHeight,l=r.innerWidth,o=r.innerHeight,d=w(a);s&&(d.left-=a.scrollLeft);const c=[[d.left,d.top],[d.left+i,d.top],[d.left,d.top+n],[d.left+i,d.top+n]];for(let e=0;e<c.length;e+=1){const s=c[e];if(s[0]>=0&&s[0]<=l&&s[1]>=0&&s[1]<=o){if(0===s[0]&&0===s[1])continue;t=!0}}if(!t)return}e.isHorizontal()?((d||c||p||u)&&(n.preventDefault?n.preventDefault():n.returnValue=!1),((c||u)&&!s||(d||p)&&s)&&e.slideNext(),((d||p)&&!s||(c||u)&&s)&&e.slidePrev()):((d||c||m||f)&&(n.preventDefault?n.preventDefault():n.returnValue=!1),(c||f)&&e.slideNext(),(d||m)&&e.slidePrev()),a("keyPress",l)}}function d(){e.keyboard.enabled||(i.addEventListener("keydown",l),e.keyboard.enabled=!0)}function c(){e.keyboard.enabled&&(i.removeEventListener("keydown",l),e.keyboard.enabled=!1)}e.keyboard={enabled:!1},t({keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}}),s("init",(()=>{e.params.keyboard.enabled&&d()})),s("destroy",(()=>{e.keyboard.enabled&&c()})),Object.assign(e.keyboard,{enable:d,disable:c})}function ee({swiper:e,extendParams:t,on:s,emit:a}){const i=o();let r;t({mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null}}),e.mousewheel={enabled:!1};let n,l=c();const p=[];function u(){e.enabled&&(e.mouseEntered=!0)}function m(){e.enabled&&(e.mouseEntered=!1)}function f(t){return!(e.params.mousewheel.thresholdDelta&&t.delta<e.params.mousewheel.thresholdDelta||e.params.mousewheel.thresholdTime&&c()-l<e.params.mousewheel.thresholdTime||!(t.delta>=6&&c()-l<60)&&(t.direction<0?e.isEnd&&!e.params.loop||e.animating||(e.slideNext(),a("scroll",t.raw)):e.isBeginning&&!e.params.loop||e.animating||(e.slidePrev(),a("scroll",t.raw)),l=(new i.Date).getTime(),1))}function h(t){let s=t,i=!0;if(!e.enabled)return;const l=e.params.mousewheel;e.params.cssMode&&s.preventDefault();let o=e.el;"container"!==e.params.mousewheel.eventsTarget&&(o=document.querySelector(e.params.mousewheel.eventsTarget));const u=o&&o.contains(s.target);if(!e.mouseEntered&&!u&&!l.releaseOnEdges)return!0;s.originalEvent&&(s=s.originalEvent);let m=0;const h=e.rtlTranslate?-1:1,g=function(e){let t=0,s=0,a=0,i=0;return"detail"in e&&(s=e.detail),"wheelDelta"in e&&(s=-e.wheelDelta/120),"wheelDeltaY"in e&&(s=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=s,s=0),a=10*t,i=10*s,"deltaY"in e&&(i=e.deltaY),"deltaX"in e&&(a=e.deltaX),e.shiftKey&&!a&&(a=i,i=0),(a||i)&&e.deltaMode&&(1===e.deltaMode?(a*=40,i*=40):(a*=800,i*=800)),a&&!t&&(t=a<1?-1:1),i&&!s&&(s=i<1?-1:1),{spinX:t,spinY:s,pixelX:a,pixelY:i}}(s);if(l.forceToAxis)if(e.isHorizontal()){if(!(Math.abs(g.pixelX)>Math.abs(g.pixelY)))return!0;m=-g.pixelX*h}else{if(!(Math.abs(g.pixelY)>Math.abs(g.pixelX)))return!0;m=-g.pixelY}else m=Math.abs(g.pixelX)>Math.abs(g.pixelY)?-g.pixelX*h:-g.pixelY;if(0===m)return!0;l.invert&&(m=-m);let v=e.getTranslate()+m*l.sensitivity;if(v>=e.minTranslate()&&(v=e.minTranslate()),v<=e.maxTranslate()&&(v=e.maxTranslate()),i=!!e.params.loop||!(v===e.minTranslate()||v===e.maxTranslate()),i&&e.params.nested&&s.stopPropagation(),e.params.freeMode&&e.params.freeMode.enabled){const t={time:c(),delta:Math.abs(m),direction:Math.sign(m)},i=n&&t.time<n.time+500&&t.delta<=n.delta&&t.direction===n.direction;if(!i){n=void 0;let o=e.getTranslate()+m*l.sensitivity;const c=e.isBeginning,u=e.isEnd;if(o>=e.minTranslate()&&(o=e.minTranslate()),o<=e.maxTranslate()&&(o=e.maxTranslate()),e.setTransition(0),e.setTranslate(o),e.updateProgress(),e.updateActiveIndex(),e.updateSlidesClasses(),(!c&&e.isBeginning||!u&&e.isEnd)&&e.updateSlidesClasses(),e.params.loop&&e.loopFix({direction:t.direction<0?"next":"prev",byMousewheel:!0}),e.params.freeMode.sticky){clearTimeout(r),r=void 0,p.length>=15&&p.shift();const s=p.length?p[p.length-1]:void 0,a=p[0];if(p.push(t),s&&(t.delta>s.delta||t.direction!==s.direction))p.splice(0);else if(p.length>=15&&t.time-a.time<500&&a.delta-t.delta>=1&&t.delta<=6){const s=m>0?.8:.2;n=t,p.splice(0),r=d((()=>{e.slideToClosest(e.params.speed,!0,void 0,s)}),0)}r||(r=d((()=>{n=t,p.splice(0),e.slideToClosest(e.params.speed,!0,void 0,.5)}),500))}if(i||a("scroll",s),e.params.autoplay&&e.params.autoplayDisableOnInteraction&&e.autoplay.stop(),o===e.minTranslate()||o===e.maxTranslate())return!0}}else{const s={time:c(),delta:Math.abs(m),direction:Math.sign(m),raw:t};p.length>=2&&p.shift();const a=p.length?p[p.length-1]:void 0;if(p.push(s),a?(s.direction!==a.direction||s.delta>a.delta||s.time>a.time+150)&&f(s):f(s),function(t){const s=e.params.mousewheel;if(t.direction<0){if(e.isEnd&&!e.params.loop&&s.releaseOnEdges)return!0}else if(e.isBeginning&&!e.params.loop&&s.releaseOnEdges)return!0;return!1}(s))return!0}return s.preventDefault?s.preventDefault():s.returnValue=!1,!1}function g(t){let s=e.el;"container"!==e.params.mousewheel.eventsTarget&&(s=document.querySelector(e.params.mousewheel.eventsTarget)),s[t]("mouseenter",u),s[t]("mouseleave",m),s[t]("wheel",h)}function v(){return e.params.cssMode?(e.wrapperEl.removeEventListener("wheel",h),!0):!e.mousewheel.enabled&&(g("addEventListener"),e.mousewheel.enabled=!0,!0)}function b(){return e.params.cssMode?(e.wrapperEl.addEventListener(event,h),!0):!!e.mousewheel.enabled&&(g("removeEventListener"),e.mousewheel.enabled=!1,!0)}s("init",(()=>{!e.params.mousewheel.enabled&&e.params.cssMode&&b(),e.params.mousewheel.enabled&&v()})),s("destroy",(()=>{e.params.cssMode&&v(),e.mousewheel.enabled&&b()})),Object.assign(e.mousewheel,{enable:v,disable:b})}function te(e,t,s,a){return e.params.createElements&&Object.keys(a).forEach((i=>{if(!s[i]&&!0===s.auto){let r=v(e.el,`.${a[i]}`)[0];r||(r=b("div",a[i]),r.className=a[i],e.el.append(r)),s[i]=r,t[i]=r}})),s}function se({swiper:e,extendParams:t,on:s,emit:a}){t({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),e.navigation={nextEl:null,prevEl:null};const i=e=>(Array.isArray(e)||(e=[e].filter((e=>!!e))),e);function r(t){let s;return t&&"string"==typeof t&&e.isElement&&(s=e.el.shadowRoot.querySelector(t),s)?s:(t&&("string"==typeof t&&(s=[...document.querySelectorAll(t)]),e.params.uniqueNavElements&&"string"==typeof t&&s.length>1&&1===e.el.querySelectorAll(t).length&&(s=e.el.querySelector(t))),t&&!s?t:s)}function n(t,s){const a=e.params.navigation;(t=i(t)).forEach((t=>{t&&(t.classList[s?"add":"remove"](...a.disabledClass.split(" ")),"BUTTON"===t.tagName&&(t.disabled=s),e.params.watchOverflow&&e.enabled&&t.classList[e.isLocked?"add":"remove"](a.lockClass))}))}function l(){const{nextEl:t,prevEl:s}=e.navigation;if(e.params.loop)return n(s,!1),void n(t,!1);n(s,e.isBeginning&&!e.params.rewind),n(t,e.isEnd&&!e.params.rewind)}function o(t){t.preventDefault(),(!e.isBeginning||e.params.loop||e.params.rewind)&&(e.slidePrev(),a("navigationPrev"))}function d(t){t.preventDefault(),(!e.isEnd||e.params.loop||e.params.rewind)&&(e.slideNext(),a("navigationNext"))}function c(){const t=e.params.navigation;if(e.params.navigation=te(e,e.originalParams.navigation,e.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!t.nextEl&&!t.prevEl)return;let s=r(t.nextEl),a=r(t.prevEl);Object.assign(e.navigation,{nextEl:s,prevEl:a}),s=i(s),a=i(a);const n=(s,a)=>{s&&s.addEventListener("click","next"===a?d:o),!e.enabled&&s&&s.classList.add(...t.lockClass.split(" "))};s.forEach((e=>n(e,"next"))),a.forEach((e=>n(e,"prev")))}function p(){let{nextEl:t,prevEl:s}=e.navigation;t=i(t),s=i(s);const a=(t,s)=>{t.removeEventListener("click","next"===s?d:o),t.classList.remove(...e.params.navigation.disabledClass.split(" "))};t.forEach((e=>a(e,"next"))),s.forEach((e=>a(e,"prev")))}s("init",(()=>{!1===e.params.navigation.enabled?u():(c(),l())})),s("toEdge fromEdge lock unlock",(()=>{l()})),s("destroy",(()=>{p()})),s("enable disable",(()=>{let{nextEl:t,prevEl:s}=e.navigation;t=i(t),s=i(s),[...t,...s].filter((e=>!!e)).forEach((t=>t.classList[e.enabled?"remove":"add"](e.params.navigation.lockClass)))})),s("click",((t,s)=>{let{nextEl:r,prevEl:n}=e.navigation;r=i(r),n=i(n);const l=s.target;if(e.params.navigation.hideOnClick&&!n.includes(l)&&!r.includes(l)){if(e.pagination&&e.params.pagination&&e.params.pagination.clickable&&(e.pagination.el===l||e.pagination.el.contains(l)))return;let t;r.length?t=r[0].classList.contains(e.params.navigation.hiddenClass):n.length&&(t=n[0].classList.contains(e.params.navigation.hiddenClass)),a(!0===t?"navigationShow":"navigationHide"),[...r,...n].filter((e=>!!e)).forEach((t=>t.classList.toggle(e.params.navigation.hiddenClass)))}}));const u=()=>{e.el.classList.add(...e.params.navigation.navigationDisabledClass.split(" ")),p()};Object.assign(e.navigation,{enable:()=>{e.el.classList.remove(...e.params.navigation.navigationDisabledClass.split(" ")),c(),l()},disable:u,update:l,init:c,destroy:p})}function ae(e=""){return`.${e.trim().replace(/([\.:!\/])/g,"\\$1").replace(/ /g,".")}`}function ie({swiper:e,extendParams:t,on:s,emit:a}){const i="swiper-pagination";let r;t({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${i}-bullet`,bulletActiveClass:`${i}-bullet-active`,modifierClass:`${i}-`,currentClass:`${i}-current`,totalClass:`${i}-total`,hiddenClass:`${i}-hidden`,progressbarFillClass:`${i}-progressbar-fill`,progressbarOppositeClass:`${i}-progressbar-opposite`,clickableClass:`${i}-clickable`,lockClass:`${i}-lock`,horizontalClass:`${i}-horizontal`,verticalClass:`${i}-vertical`,paginationDisabledClass:`${i}-disabled`}}),e.pagination={el:null,bullets:[]};let n=0;const l=e=>(Array.isArray(e)||(e=[e].filter((e=>!!e))),e);function o(){return!e.params.pagination.el||!e.pagination.el||Array.isArray(e.pagination.el)&&0===e.pagination.el.length}function d(t,s){const{bulletActiveClass:a}=e.params.pagination;t&&(t=t[("prev"===s?"previous":"next")+"ElementSibling"])&&(t.classList.add(`${a}-${s}`),(t=t[("prev"===s?"previous":"next")+"ElementSibling"])&&t.classList.add(`${a}-${s}-${s}`))}function c(t){const s=t.target.closest(ae(e.params.pagination.bulletClass));if(!s)return;t.preventDefault();const a=x(s)*e.params.slidesPerGroup;if(e.params.loop){if(e.realIndex===a)return;(a<e.loopedSlides||a>e.slides.length-e.loopedSlides)&&e.loopFix({direction:a<e.loopedSlides?"prev":"next",activeSlideIndex:a,slideTo:!1}),e.slideToLoop(a)}else e.slideTo(a)}function p(){const t=e.rtl,s=e.params.pagination;if(o())return;let i,c=e.pagination.el;c=l(c);const p=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,u=e.params.loop?Math.ceil(p/e.params.slidesPerGroup):e.snapGrid.length;if(i=e.params.loop?e.params.slidesPerGroup>1?Math.floor(e.realIndex/e.params.slidesPerGroup):e.realIndex:void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===s.type&&e.pagination.bullets&&e.pagination.bullets.length>0){const a=e.pagination.bullets;let l,o,p;if(s.dynamicBullets&&(r=T(a[0],e.isHorizontal()?"width":"height",!0),c.forEach((t=>{t.style[e.isHorizontal()?"width":"height"]=r*(s.dynamicMainBullets+4)+"px"})),s.dynamicMainBullets>1&&void 0!==e.previousIndex&&(n+=i-(e.previousIndex||0),n>s.dynamicMainBullets-1?n=s.dynamicMainBullets-1:n<0&&(n=0)),l=Math.max(i-n,0),o=l+(Math.min(a.length,s.dynamicMainBullets)-1),p=(o+l)/2),a.forEach((e=>{e.classList.remove(...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${s.bulletActiveClass}${e}`)))})),c.length>1)a.forEach((e=>{const t=x(e);t===i&&e.classList.add(s.bulletActiveClass),s.dynamicBullets&&(t>=l&&t<=o&&e.classList.add(`${s.bulletActiveClass}-main`),t===l&&d(e,"prev"),t===o&&d(e,"next"))}));else{const e=a[i];if(e&&e.classList.add(s.bulletActiveClass),s.dynamicBullets){const e=a[l],t=a[o];for(let e=l;e<=o;e+=1)a[e]&&a[e].classList.add(`${s.bulletActiveClass}-main`);d(e,"prev"),d(t,"next")}}if(s.dynamicBullets){const i=Math.min(a.length,s.dynamicMainBullets+4),n=(r*i-r)/2-p*r,l=t?"right":"left";a.forEach((t=>{t.style[e.isHorizontal()?l:"top"]=`${n}px`}))}}c.forEach(((t,r)=>{if("fraction"===s.type&&(t.querySelectorAll(ae(s.currentClass)).forEach((e=>{e.textContent=s.formatFractionCurrent(i+1)})),t.querySelectorAll(ae(s.totalClass)).forEach((e=>{e.textContent=s.formatFractionTotal(u)}))),"progressbar"===s.type){let a;a=s.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";const r=(i+1)/u;let n=1,l=1;"horizontal"===a?n=r:l=r,t.querySelectorAll(ae(s.progressbarFillClass)).forEach((t=>{t.style.transform=`translate3d(0,0,0) scaleX(${n}) scaleY(${l})`,t.style.transitionDuration=`${e.params.speed}ms`}))}"custom"===s.type&&s.renderCustom?(t.innerHTML=s.renderCustom(e,i+1,u),0===r&&a("paginationRender",t)):(0===r&&a("paginationRender",t),a("paginationUpdate",t)),e.params.watchOverflow&&e.enabled&&t.classList[e.isLocked?"add":"remove"](s.lockClass)}))}function u(){const t=e.params.pagination;if(o())return;const s=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length;let i=e.pagination.el;i=l(i);let r="";if("bullets"===t.type){let a=e.params.loop?Math.ceil(s/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&e.params.freeMode.enabled&&a>s&&(a=s);for(let s=0;s<a;s+=1)t.renderBullet?r+=t.renderBullet.call(e,s,t.bulletClass):r+=`<${t.bulletElement} class="${t.bulletClass}"></${t.bulletElement}>`}"fraction"===t.type&&(r=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):`<span class="${t.currentClass}"></span> / <span class="${t.totalClass}"></span>`),"progressbar"===t.type&&(r=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):`<span class="${t.progressbarFillClass}"></span>`),i.forEach((s=>{"custom"!==t.type&&(s.innerHTML=r||""),"bullets"===t.type&&(e.pagination.bullets=[...s.querySelectorAll(ae(t.bulletClass))])})),"custom"!==t.type&&a("paginationRender",i[0])}function m(){e.params.pagination=te(e,e.originalParams.pagination,e.params.pagination,{el:"swiper-pagination"});const t=e.params.pagination;if(!t.el)return;let s;"string"==typeof t.el&&e.isElement&&(s=e.el.shadowRoot.querySelector(t.el)),s||"string"!=typeof t.el||(s=[...document.querySelectorAll(t.el)]),s||(s=t.el),s&&0!==s.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&Array.isArray(s)&&s.length>1&&(s=[...e.el.querySelectorAll(t.el)],s.length>1&&(s=s.filter((t=>E(t,".swiper")[0]===e.el))[0])),Array.isArray(s)&&1===s.length&&(s=s[0]),Object.assign(e.pagination,{el:s}),s=l(s),s.forEach((s=>{"bullets"===t.type&&t.clickable&&s.classList.add(t.clickableClass),s.classList.add(t.modifierClass+t.type),s.classList.add(e.isHorizontal()?t.horizontalClass:t.verticalClass),"bullets"===t.type&&t.dynamicBullets&&(s.classList.add(`${t.modifierClass}${t.type}-dynamic`),n=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&s.classList.add(t.progressbarOppositeClass),t.clickable&&s.addEventListener("click",c),e.enabled||s.classList.add(t.lockClass)})))}function f(){const t=e.params.pagination;if(o())return;let s=e.pagination.el;s&&(s=l(s),s.forEach((s=>{s.classList.remove(t.hiddenClass),s.classList.remove(t.modifierClass+t.type),s.classList.remove(e.isHorizontal()?t.horizontalClass:t.verticalClass),t.clickable&&s.removeEventListener("click",c)}))),e.pagination.bullets&&e.pagination.bullets.forEach((e=>e.classList.remove(t.bulletActiveClass)))}s("init",(()=>{!1===e.params.pagination.enabled?h():(m(),u(),p())})),s("activeIndexChange",(()=>{void 0===e.snapIndex&&p()})),s("snapIndexChange",(()=>{p()})),s("snapGridLengthChange",(()=>{u(),p()})),s("destroy",(()=>{f()})),s("enable disable",(()=>{let{el:t}=e.pagination;t&&(t=l(t),t.forEach((t=>t.classList[e.enabled?"remove":"add"](e.params.pagination.lockClass))))})),s("lock unlock",(()=>{p()})),s("click",((t,s)=>{const i=s.target;let{el:r}=e.pagination;if(Array.isArray(r)||(r=[r].filter((e=>!!e))),e.params.pagination.el&&e.params.pagination.hideOnClick&&r&&r.length>0&&!i.classList.contains(e.params.pagination.bulletClass)){if(e.navigation&&(e.navigation.nextEl&&i===e.navigation.nextEl||e.navigation.prevEl&&i===e.navigation.prevEl))return;const t=r[0].classList.contains(e.params.pagination.hiddenClass);a(!0===t?"paginationShow":"paginationHide"),r.forEach((t=>t.classList.toggle(e.params.pagination.hiddenClass)))}}));const h=()=>{e.el.classList.add(e.params.pagination.paginationDisabledClass);let{el:t}=e.pagination;t&&(t=l(t),t.forEach((t=>t.classList.add(e.params.pagination.paginationDisabledClass)))),f()};Object.assign(e.pagination,{enable:()=>{e.el.classList.remove(e.params.pagination.paginationDisabledClass);let{el:t}=e.pagination;t&&(t=l(t),t.forEach((t=>t.classList.remove(e.params.pagination.paginationDisabledClass)))),m(),u(),p()},disable:h,render:u,update:p,init:m,destroy:f})}function re({swiper:e,extendParams:t,on:s,emit:a}){const i=n();let r,l,o,c,p=!1,u=null,m=null;function f(){if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:t,rtlTranslate:s}=e,{dragEl:a,el:i}=t,r=e.params.scrollbar,n=e.params.loop?e.progressLoop:e.progress;let d=l,c=(o-l)*n;s?(c=-c,c>0?(d=l-c,c=0):-c+l>o&&(d=o+c)):c<0?(d=l+c,c=0):c+l>o&&(d=o-c),e.isHorizontal()?(a.style.transform=`translate3d(${c}px, 0, 0)`,a.style.width=`${d}px`):(a.style.transform=`translate3d(0px, ${c}px, 0)`,a.style.height=`${d}px`),r.hide&&(clearTimeout(u),i.style.opacity=1,u=setTimeout((()=>{i.style.opacity=0,i.style.transitionDuration="400ms"}),1e3))}function h(){if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:t}=e,{dragEl:s,el:a}=t;s.style.width="",s.style.height="",o=e.isHorizontal()?a.offsetWidth:a.offsetHeight,c=e.size/(e.virtualSize+e.params.slidesOffsetBefore-(e.params.centeredSlides?e.snapGrid[0]:0)),l="auto"===e.params.scrollbar.dragSize?o*c:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?s.style.width=`${l}px`:s.style.height=`${l}px`,a.style.display=c>=1?"none":"",e.params.scrollbar.hide&&(a.style.opacity=0),e.params.watchOverflow&&e.enabled&&t.el.classList[e.isLocked?"add":"remove"](e.params.scrollbar.lockClass)}function g(t){return e.isHorizontal()?t.clientX:t.clientY}function v(t){const{scrollbar:s,rtlTranslate:a}=e,{el:i}=s;let n;n=(g(t)-w(i)[e.isHorizontal()?"left":"top"]-(null!==r?r:l/2))/(o-l),n=Math.max(Math.min(n,1),0),a&&(n=1-n);const d=e.minTranslate()+(e.maxTranslate()-e.minTranslate())*n;e.updateProgress(d),e.setTranslate(d),e.updateActiveIndex(),e.updateSlidesClasses()}function y(t){const s=e.params.scrollbar,{scrollbar:i,wrapperEl:n}=e,{el:l,dragEl:o}=i;p=!0,r=t.target===o?g(t)-t.target.getBoundingClientRect()[e.isHorizontal()?"left":"top"]:null,t.preventDefault(),t.stopPropagation(),n.style.transitionDuration="100ms",o.style.transitionDuration="100ms",v(t),clearTimeout(m),l.style.transitionDuration="0ms",s.hide&&(l.style.opacity=1),e.params.cssMode&&(e.wrapperEl.style["scroll-snap-type"]="none"),a("scrollbarDragStart",t)}function x(t){const{scrollbar:s,wrapperEl:i}=e,{el:r,dragEl:n}=s;p&&(t.preventDefault?t.preventDefault():t.returnValue=!1,v(t),i.style.transitionDuration="0ms",r.style.transitionDuration="0ms",n.style.transitionDuration="0ms",a("scrollbarDragMove",t))}function E(t){const s=e.params.scrollbar,{scrollbar:i,wrapperEl:r}=e,{el:n}=i;p&&(p=!1,e.params.cssMode&&(e.wrapperEl.style["scroll-snap-type"]="",r.style.transitionDuration=""),s.hide&&(clearTimeout(m),m=d((()=>{n.style.opacity=0,n.style.transitionDuration="400ms"}),1e3)),a("scrollbarDragEnd",t),s.snapOnRelease&&e.slideToClosest())}function S(t){const{scrollbar:s,params:a}=e,r=s.el;if(!r)return;const n=r,l=!!a.passiveListeners&&{passive:!1,capture:!1},o=!!a.passiveListeners&&{passive:!0,capture:!1};if(!n)return;const d="on"===t?"addEventListener":"removeEventListener";n[d]("pointerdown",y,l),i[d]("pointermove",x,l),i[d]("pointerup",E,o)}function T(){const{scrollbar:t,el:s}=e;e.params.scrollbar=te(e,e.originalParams.scrollbar,e.params.scrollbar,{el:"swiper-scrollbar"});const a=e.params.scrollbar;if(!a.el)return;let r,n;"string"==typeof a.el&&e.isElement&&(r=e.el.shadowRoot.querySelector(a.el)),r||"string"!=typeof a.el?r||(r=a.el):r=i.querySelectorAll(a.el),e.params.uniqueNavElements&&"string"==typeof a.el&&r.length>1&&1===s.querySelectorAll(a.el).length&&(r=s.querySelector(a.el)),r.length>0&&(r=r[0]),r.classList.add(e.isHorizontal()?a.horizontalClass:a.verticalClass),r&&(n=r.querySelector(`.${e.params.scrollbar.dragClass}`),n||(n=b("div",e.params.scrollbar.dragClass),r.append(n))),Object.assign(t,{el:r,dragEl:n}),a.draggable&&e.params.scrollbar.el&&e.scrollbar.el&&S("on"),r&&r.classList[e.enabled?"remove":"add"](e.params.scrollbar.lockClass)}function M(){const t=e.params.scrollbar,s=e.scrollbar.el;s&&s.classList.remove(e.isHorizontal()?t.horizontalClass:t.verticalClass),e.params.scrollbar.el&&e.scrollbar.el&&S("off")}t({scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag",scrollbarDisabledClass:"swiper-scrollbar-disabled",horizontalClass:"swiper-scrollbar-horizontal",verticalClass:"swiper-scrollbar-vertical"}}),e.scrollbar={el:null,dragEl:null},s("init",(()=>{!1===e.params.scrollbar.enabled?C():(T(),h(),f())})),s("update resize observerUpdate lock unlock",(()=>{h()})),s("setTranslate",(()=>{f()})),s("setTransition",((t,s)=>{!function(t){e.params.scrollbar.el&&e.scrollbar.el&&(e.scrollbar.dragEl.style.transitionDuration=`${t}ms`)}(s)})),s("enable disable",(()=>{const{el:t}=e.scrollbar;t&&t.classList[e.enabled?"remove":"add"](e.params.scrollbar.lockClass)})),s("destroy",(()=>{M()}));const C=()=>{e.el.classList.add(e.params.scrollbar.scrollbarDisabledClass),e.scrollbar.el&&e.scrollbar.el.classList.add(e.params.scrollbar.scrollbarDisabledClass),M()};Object.assign(e.scrollbar,{enable:()=>{e.el.classList.remove(e.params.scrollbar.scrollbarDisabledClass),e.scrollbar.el&&e.scrollbar.el.classList.remove(e.params.scrollbar.scrollbarDisabledClass),T(),h(),f()},disable:C,updateSize:h,setTranslate:f,init:T,destroy:M})}function ne({swiper:e,extendParams:t,on:s}){t({parallax:{enabled:!1}});const a=(t,s)=>{const{rtl:a}=e,i=a?-1:1,r=t.getAttribute("data-swiper-parallax")||"0";let n=t.getAttribute("data-swiper-parallax-x"),l=t.getAttribute("data-swiper-parallax-y");const o=t.getAttribute("data-swiper-parallax-scale"),d=t.getAttribute("data-swiper-parallax-opacity"),c=t.getAttribute("data-swiper-parallax-rotate");if(n||l?(n=n||"0",l=l||"0"):e.isHorizontal()?(n=r,l="0"):(l=r,n="0"),n=n.indexOf("%")>=0?parseInt(n,10)*s*i+"%":n*s*i+"px",l=l.indexOf("%")>=0?parseInt(l,10)*s+"%":l*s+"px",null!=d){const e=d-(d-1)*(1-Math.abs(s));t.style.opacity=e}let p=`translate3d(${n}, ${l}, 0px)`;null!=o&&(p+=` scale(${o-(o-1)*(1-Math.abs(s))})`),c&&null!=c&&(p+=` rotate(${c*s*-1}deg)`),t.style.transform=p},i=()=>{const{el:t,slides:s,progress:i,snapGrid:r}=e;v(t,"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").forEach((e=>{a(e,i)})),s.forEach(((t,s)=>{let n=t.progress;e.params.slidesPerGroup>1&&"auto"!==e.params.slidesPerView&&(n+=Math.ceil(s/2)-i*(r.length-1)),n=Math.min(Math.max(n,-1),1),t.querySelectorAll("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale], [data-swiper-parallax-rotate]").forEach((e=>{a(e,n)}))}))};s("beforeInit",(()=>{e.params.parallax.enabled&&(e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)})),s("init",(()=>{e.params.parallax.enabled&&i()})),s("setTranslate",(()=>{e.params.parallax.enabled&&i()})),s("setTransition",((t,s)=>{e.params.parallax.enabled&&((t=e.params.speed)=>{const{el:s}=e;s.querySelectorAll("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").forEach((e=>{let s=parseInt(e.getAttribute("data-swiper-parallax-duration"),10)||t;0===t&&(s=0),e.style.transitionDuration=`${s}ms`}))})(s)}))}function le({swiper:e,extendParams:t,on:s,emit:a}){const i=o();t({zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}}),e.zoom={enabled:!1};let r,n,l=1,d=!1;const c=[],u={slideEl:void 0,slideWidth:void 0,slideHeight:void 0,imageEl:void 0,imageWrapEl:void 0,maxRatio:3},m={isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},f={x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0};let h=1;function g(){if(c.length<2)return 1;const e=c[0].pageX,t=c[0].pageY,s=c[1].pageX,a=c[1].pageY;return Math.sqrt((s-e)**2+(a-t)**2)}function b(t){const s=e.isElement?"swiper-slide":`.${e.params.slideClass}`;return!!t.target.matches(s)||e.slides.filter((e=>e.contains(t.target))).length>0}function y(t){if("mouse"===t.pointerType&&c.splice(0,c.length),!b(t))return;const s=e.params.zoom;if(r=!1,n=!1,c.push(t),!(c.length<2)){if(r=!0,u.scaleStart=g(),!u.slideEl){u.slideEl=t.target.closest(`.${e.params.slideClass}, swiper-slide`),u.slideEl||(u.slideEl=e.slides[e.activeIndex]);let a=u.slideEl.querySelector(`.${s.containerClass}`);if(a&&(a=a.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),u.imageEl=a,u.imageWrapEl=a?E(u.imageEl,`.${s.containerClass}`)[0]:void 0,!u.imageWrapEl)return void(u.imageEl=void 0);u.maxRatio=u.imageWrapEl.getAttribute("data-swiper-zoom")||s.maxRatio}if(u.imageEl){const[e,t]=function(){if(c.length<2)return{x:null,y:null};const e=u.imageEl.getBoundingClientRect();return[(c[0].pageX+(c[1].pageX-c[0].pageX)/2-e.x)/l,(c[0].pageY+(c[1].pageY-c[0].pageY)/2-e.y)/l]}();u.imageEl.style.transformOrigin=`${e}px ${t}px`,u.imageEl.style.transitionDuration="0ms"}d=!0}}function x(t){if(!b(t))return;const s=e.params.zoom,a=e.zoom,i=c.findIndex((e=>e.pointerId===t.pointerId));i>=0&&(c[i]=t),c.length<2||(n=!0,u.scaleMove=g(),u.imageEl&&(a.scale=u.scaleMove/u.scaleStart*l,a.scale>u.maxRatio&&(a.scale=u.maxRatio-1+(a.scale-u.maxRatio+1)**.5),a.scale<s.minRatio&&(a.scale=s.minRatio+1-(s.minRatio-a.scale+1)**.5),u.imageEl.style.transform=`translate3d(0,0,0) scale(${a.scale})`))}function S(t){if(!b(t))return;if("mouse"===t.pointerType&&"pointerout"===t.type)return;const s=e.params.zoom,a=e.zoom,i=c.findIndex((e=>e.pointerId===t.pointerId));i>=0&&c.splice(i,1),r&&n&&(r=!1,n=!1,u.imageEl&&(a.scale=Math.max(Math.min(a.scale,u.maxRatio),s.minRatio),u.imageEl.style.transitionDuration=`${e.params.speed}ms`,u.imageEl.style.transform=`translate3d(0,0,0) scale(${a.scale})`,l=a.scale,d=!1,1===a.scale&&(u.slideEl=void 0)))}function T(t){if(!b(t)||!function(t){const s=`.${e.params.zoom.containerClass}`;return!!t.target.matches(s)||[...e.el.querySelectorAll(s)].filter((e=>e.contains(t.target))).length>0}(t))return;const s=e.zoom;if(!u.imageEl)return;if(e.allowClick=!1,!m.isTouched||!u.slideEl)return;m.isMoved||(m.width=u.imageEl.offsetWidth,m.height=u.imageEl.offsetHeight,m.startX=p(u.imageWrapEl,"x")||0,m.startY=p(u.imageWrapEl,"y")||0,u.slideWidth=u.slideEl.offsetWidth,u.slideHeight=u.slideEl.offsetHeight,u.imageWrapEl.style.transitionDuration="0ms");const a=m.width*s.scale,i=m.height*s.scale;if(!(a<u.slideWidth&&i<u.slideHeight)){if(m.minX=Math.min(u.slideWidth/2-a/2,0),m.maxX=-m.minX,m.minY=Math.min(u.slideHeight/2-i/2,0),m.maxY=-m.minY,m.touchesCurrent.x=c.length>0?c[0].pageX:t.pageX,m.touchesCurrent.y=c.length>0?c[0].pageY:t.pageY,!m.isMoved&&!d){if(e.isHorizontal()&&(Math.floor(m.minX)===Math.floor(m.startX)&&m.touchesCurrent.x<m.touchesStart.x||Math.floor(m.maxX)===Math.floor(m.startX)&&m.touchesCurrent.x>m.touchesStart.x))return void(m.isTouched=!1);if(!e.isHorizontal()&&(Math.floor(m.minY)===Math.floor(m.startY)&&m.touchesCurrent.y<m.touchesStart.y||Math.floor(m.maxY)===Math.floor(m.startY)&&m.touchesCurrent.y>m.touchesStart.y))return void(m.isTouched=!1)}t.cancelable&&t.preventDefault(),t.stopPropagation(),m.isMoved=!0,m.currentX=m.touchesCurrent.x-m.touchesStart.x+m.startX,m.currentY=m.touchesCurrent.y-m.touchesStart.y+m.startY,m.currentX<m.minX&&(m.currentX=m.minX+1-(m.minX-m.currentX+1)**.8),m.currentX>m.maxX&&(m.currentX=m.maxX-1+(m.currentX-m.maxX+1)**.8),m.currentY<m.minY&&(m.currentY=m.minY+1-(m.minY-m.currentY+1)**.8),m.currentY>m.maxY&&(m.currentY=m.maxY-1+(m.currentY-m.maxY+1)**.8),f.prevPositionX||(f.prevPositionX=m.touchesCurrent.x),f.prevPositionY||(f.prevPositionY=m.touchesCurrent.y),f.prevTime||(f.prevTime=Date.now()),f.x=(m.touchesCurrent.x-f.prevPositionX)/(Date.now()-f.prevTime)/2,f.y=(m.touchesCurrent.y-f.prevPositionY)/(Date.now()-f.prevTime)/2,Math.abs(m.touchesCurrent.x-f.prevPositionX)<2&&(f.x=0),Math.abs(m.touchesCurrent.y-f.prevPositionY)<2&&(f.y=0),f.prevPositionX=m.touchesCurrent.x,f.prevPositionY=m.touchesCurrent.y,f.prevTime=Date.now(),u.imageWrapEl.style.transform=`translate3d(${m.currentX}px, ${m.currentY}px,0)`}}function M(){const t=e.zoom;u.slideEl&&e.previousIndex!==e.activeIndex&&(u.imageEl&&(u.imageEl.style.transform="translate3d(0,0,0) scale(1)"),u.imageWrapEl&&(u.imageWrapEl.style.transform="translate3d(0,0,0)"),t.scale=1,l=1,u.slideEl=void 0,u.imageEl=void 0,u.imageWrapEl=void 0)}function C(t){const s=e.zoom,a=e.params.zoom;if(!u.slideEl){t&&t.target&&(u.slideEl=t.target.closest(`.${e.params.slideClass}, swiper-slide`)),u.slideEl||(e.params.virtual&&e.params.virtual.enabled&&e.virtual?u.slideEl=v(e.slidesEl,`.${e.params.slideActiveClass}`)[0]:u.slideEl=e.slides[e.activeIndex]);let s=u.slideEl.querySelector(`.${a.containerClass}`);s&&(s=s.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),u.imageEl=s,u.imageWrapEl=s?E(u.imageEl,`.${a.containerClass}`)[0]:void 0}if(!u.imageEl||!u.imageWrapEl)return;let r,n,o,d,c,p,f,h,g,b,y,x,S,T,M,C,P,L;e.params.cssMode&&(e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.touchAction="none"),u.slideEl.classList.add(`${a.zoomedSlideClass}`),void 0===m.touchesStart.x&&t?(r=t.pageX,n=t.pageY):(r=m.touchesStart.x,n=m.touchesStart.y);const k="number"==typeof t?t:null;1===l&&k&&(r=void 0,n=void 0),s.scale=k||u.imageWrapEl.getAttribute("data-swiper-zoom")||a.maxRatio,l=k||u.imageWrapEl.getAttribute("data-swiper-zoom")||a.maxRatio,!t||1===l&&k?(f=0,h=0):(P=u.slideEl.offsetWidth,L=u.slideEl.offsetHeight,o=w(u.slideEl).left+i.scrollX,d=w(u.slideEl).top+i.scrollY,c=o+P/2-r,p=d+L/2-n,g=u.imageEl.offsetWidth,b=u.imageEl.offsetHeight,y=g*s.scale,x=b*s.scale,S=Math.min(P/2-y/2,0),T=Math.min(L/2-x/2,0),M=-S,C=-T,f=c*s.scale,h=p*s.scale,f<S&&(f=S),f>M&&(f=M),h<T&&(h=T),h>C&&(h=C)),u.imageWrapEl.style.transitionDuration="300ms",u.imageWrapEl.style.transform=`translate3d(${f}px, ${h}px,0)`,u.imageEl.style.transitionDuration="300ms",u.imageEl.style.transform=`translate3d(0,0,0) scale(${s.scale})`}function P(){const t=e.zoom,s=e.params.zoom;if(!u.slideEl){e.params.virtual&&e.params.virtual.enabled&&e.virtual?u.slideEl=v(e.slidesEl,`.${e.params.slideActiveClass}`)[0]:u.slideEl=e.slides[e.activeIndex];let t=u.slideEl.querySelector(`.${s.containerClass}`);t&&(t=t.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),u.imageEl=t,u.imageWrapEl=t?E(u.imageEl,`.${s.containerClass}`)[0]:void 0}u.imageEl&&u.imageWrapEl&&(e.params.cssMode&&(e.wrapperEl.style.overflow="",e.wrapperEl.style.touchAction=""),t.scale=1,l=1,u.imageWrapEl.style.transitionDuration="300ms",u.imageWrapEl.style.transform="translate3d(0,0,0)",u.imageEl.style.transitionDuration="300ms",u.imageEl.style.transform="translate3d(0,0,0) scale(1)",u.slideEl.classList.remove(`${s.zoomedSlideClass}`),u.slideEl=void 0)}function L(t){const s=e.zoom;s.scale&&1!==s.scale?P():C(t)}function k(){return{passiveListener:!!e.params.passiveListeners&&{passive:!0,capture:!1},activeListenerWithCapture:!e.params.passiveListeners||{passive:!1,capture:!0}}}function z(){const t=e.zoom;if(t.enabled)return;t.enabled=!0;const{passiveListener:s,activeListenerWithCapture:a}=k();e.wrapperEl.addEventListener("pointerdown",y,s),e.wrapperEl.addEventListener("pointermove",x,a),["pointerup","pointercancel","pointerout"].forEach((t=>{e.wrapperEl.addEventListener(t,S,s)})),e.wrapperEl.addEventListener("pointermove",T,a)}function A(){const t=e.zoom;if(!t.enabled)return;t.enabled=!1;const{passiveListener:s,activeListenerWithCapture:a}=k();e.wrapperEl.removeEventListener("pointerdown",y,s),e.wrapperEl.removeEventListener("pointermove",x,a),["pointerup","pointercancel","pointerout"].forEach((t=>{e.wrapperEl.removeEventListener(t,S,s)})),e.wrapperEl.removeEventListener("pointermove",T,a)}Object.defineProperty(e.zoom,"scale",{get:()=>h,set(e){if(h!==e){const t=u.imageEl,s=u.slideEl;a("zoomChange",e,t,s)}h=e}}),s("init",(()=>{e.params.zoom.enabled&&z()})),s("destroy",(()=>{A()})),s("touchStart",((t,s)=>{e.zoom.enabled&&function(t){const s=e.device;u.imageEl&&(m.isTouched||(s.android&&t.cancelable&&t.preventDefault(),m.isTouched=!0,m.touchesStart.x=t.pageX,m.touchesStart.y=t.pageY))}(s)})),s("touchEnd",((t,s)=>{e.zoom.enabled&&function(){const t=e.zoom;if(!u.imageEl)return;if(!m.isTouched||!m.isMoved)return m.isTouched=!1,void(m.isMoved=!1);m.isTouched=!1,m.isMoved=!1;let s=300,a=300;const i=f.x*s,r=m.currentX+i,n=f.y*a,l=m.currentY+n;0!==f.x&&(s=Math.abs((r-m.currentX)/f.x)),0!==f.y&&(a=Math.abs((l-m.currentY)/f.y));const o=Math.max(s,a);m.currentX=r,m.currentY=l;const d=m.width*t.scale,c=m.height*t.scale;m.minX=Math.min(u.slideWidth/2-d/2,0),m.maxX=-m.minX,m.minY=Math.min(u.slideHeight/2-c/2,0),m.maxY=-m.minY,m.currentX=Math.max(Math.min(m.currentX,m.maxX),m.minX),m.currentY=Math.max(Math.min(m.currentY,m.maxY),m.minY),u.imageWrapEl.style.transitionDuration=`${o}ms`,u.imageWrapEl.style.transform=`translate3d(${m.currentX}px, ${m.currentY}px,0)`}()})),s("doubleTap",((t,s)=>{!e.animating&&e.params.zoom.enabled&&e.zoom.enabled&&e.params.zoom.toggle&&L(s)})),s("transitionEnd",(()=>{e.zoom.enabled&&e.params.zoom.enabled&&M()})),s("slideChange",(()=>{e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&M()})),Object.assign(e.zoom,{enable:z,disable:A,in:C,out:P,toggle:L})}function oe({swiper:e,extendParams:t,on:s}){function a(e,t){const s=function(){let e,t,s;return(a,i)=>{for(t=-1,e=a.length;e-t>1;)s=e+t>>1,a[s]<=i?t=s:e=s;return e}}();let a,i;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(i=s(this.x,e),a=i-1,(e-this.x[a])*(this.y[i]-this.y[a])/(this.x[i]-this.x[a])+this.y[a]):0},this}function i(){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)}t({controller:{control:void 0,inverse:!1,by:"slide"}}),e.controller={control:void 0},s("beforeInit",(()=>{if("undefined"!=typeof window&&("string"==typeof e.params.controller.control||e.params.controller.control instanceof HTMLElement)){const t=document.querySelector(e.params.controller.control);if(t&&t.swiper)e.controller.control=t.swiper;else if(t){const s=a=>{e.controller.control=a.detail[0],e.update(),t.removeEventListener("init",s)};t.addEventListener("init",s)}}else e.controller.control=e.params.controller.control})),s("update",(()=>{i()})),s("resize",(()=>{i()})),s("observerUpdate",(()=>{i()})),s("setTranslate",((t,s,a)=>{e.controller.control&&e.controller.setTranslate(s,a)})),s("setTransition",((t,s,a)=>{e.controller.control&&e.controller.setTransition(s,a)})),Object.assign(e.controller,{setTranslate:function(t,s){const i=e.controller.control;let r,n;const l=e.constructor;function o(t){const s=e.rtlTranslate?-e.translate:e.translate;"slide"===e.params.controller.by&&(function(t){e.controller.spline||(e.controller.spline=e.params.loop?new a(e.slidesGrid,t.slidesGrid):new a(e.snapGrid,t.snapGrid))}(t),n=-e.controller.spline.interpolate(-s)),n&&"container"!==e.params.controller.by||(r=(t.maxTranslate()-t.minTranslate())/(e.maxTranslate()-e.minTranslate()),n=(s-e.minTranslate())*r+t.minTranslate()),e.params.controller.inverse&&(n=t.maxTranslate()-n),t.updateProgress(n),t.setTranslate(n,e),t.updateActiveIndex(),t.updateSlidesClasses()}if(Array.isArray(i))for(let e=0;e<i.length;e+=1)i[e]!==s&&i[e]instanceof l&&o(i[e]);else i instanceof l&&s!==i&&o(i)},setTransition:function(t,s){const a=e.constructor,i=e.controller.control;let r;function n(s){s.setTransition(t,e),0!==t&&(s.transitionStart(),s.params.autoHeight&&d((()=>{s.updateAutoHeight()})),S(s.wrapperEl,(()=>{i&&s.transitionEnd()})))}if(Array.isArray(i))for(r=0;r<i.length;r+=1)i[r]!==s&&i[r]instanceof a&&n(i[r]);else i instanceof a&&s!==i&&n(i)}})}function de({swiper:e,extendParams:t,on:s}){t({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null}}),e.a11y={clicked:!1};let a=null;function i(e){const t=a;0!==t.length&&(t.innerHTML="",t.innerHTML=e)}const r=e=>(Array.isArray(e)||(e=[e].filter((e=>!!e))),e);function n(e){(e=r(e)).forEach((e=>{e.setAttribute("tabIndex","0")}))}function l(e){(e=r(e)).forEach((e=>{e.setAttribute("tabIndex","-1")}))}function o(e,t){(e=r(e)).forEach((e=>{e.setAttribute("role",t)}))}function d(e,t){(e=r(e)).forEach((e=>{e.setAttribute("aria-roledescription",t)}))}function c(e,t){(e=r(e)).forEach((e=>{e.setAttribute("aria-label",t)}))}function p(e){(e=r(e)).forEach((e=>{e.setAttribute("aria-disabled",!0)}))}function u(e){(e=r(e)).forEach((e=>{e.setAttribute("aria-disabled",!1)}))}function m(t){if(13!==t.keyCode&&32!==t.keyCode)return;const s=e.params.a11y,a=t.target;e.pagination&&e.pagination.el&&(a===e.pagination.el||e.pagination.el.contains(t.target))&&!t.target.matches(ae(e.params.pagination.bulletClass))||(e.navigation&&e.navigation.nextEl&&a===e.navigation.nextEl&&(e.isEnd&&!e.params.loop||e.slideNext(),e.isEnd?i(s.lastSlideMessage):i(s.nextSlideMessage)),e.navigation&&e.navigation.prevEl&&a===e.navigation.prevEl&&(e.isBeginning&&!e.params.loop||e.slidePrev(),e.isBeginning?i(s.firstSlideMessage):i(s.prevSlideMessage)),e.pagination&&a.matches(ae(e.params.pagination.bulletClass))&&a.click())}function f(){return e.pagination&&e.pagination.bullets&&e.pagination.bullets.length}function h(){return f()&&e.params.pagination.clickable}const g=(e,t,s)=>{n(e),"BUTTON"!==e.tagName&&(o(e,"button"),e.addEventListener("keydown",m)),c(e,s),function(e,t){(e=r(e)).forEach((e=>{e.setAttribute("aria-controls",t)}))}(e,t)},v=()=>{e.a11y.clicked=!0},w=()=>{requestAnimationFrame((()=>{requestAnimationFrame((()=>{e.destroyed||(e.a11y.clicked=!1)}))}))},y=t=>{if(e.a11y.clicked)return;const s=t.target.closest(`.${e.params.slideClass}, swiper-slide`);if(!s||!e.slides.includes(s))return;const a=e.slides.indexOf(s)===e.activeIndex,i=e.params.watchSlidesProgress&&e.visibleSlides&&e.visibleSlides.includes(s);a||i||t.sourceCapabilities&&t.sourceCapabilities.firesTouchEvents||(e.isHorizontal()?e.el.scrollLeft=0:e.el.scrollTop=0,e.slideTo(e.slides.indexOf(s),0))},E=()=>{const t=e.params.a11y;t.itemRoleDescriptionMessage&&d(e.slides,t.itemRoleDescriptionMessage),t.slideRole&&o(e.slides,t.slideRole);const s=e.slides.length;t.slideLabelMessage&&e.slides.forEach(((a,i)=>{const r=e.params.loop?parseInt(a.getAttribute("data-swiper-slide-index"),10):i;c(a,t.slideLabelMessage.replace(/\{\{index\}\}/,r+1).replace(/\{\{slidesLength\}\}/,s))}))};s("beforeInit",(()=>{a=b("span",e.params.a11y.notificationClass),a.setAttribute("aria-live","assertive"),a.setAttribute("aria-atomic","true"),e.isElement&&a.setAttribute("slot","container-end")})),s("afterInit",(()=>{e.params.a11y.enabled&&(()=>{const t=e.params.a11y;e.el.append(a);const s=e.el;t.containerRoleDescriptionMessage&&d(s,t.containerRoleDescriptionMessage),t.containerMessage&&c(s,t.containerMessage);const i=e.wrapperEl,n=t.id||i.getAttribute("id")||`swiper-wrapper-${function(e=16){return"x".repeat(e).replace(/x/g,(()=>Math.round(16*Math.random()).toString(16)))}(16)}`,l=e.params.autoplay&&e.params.autoplay.enabled?"off":"polite";var o;o=n,r(i).forEach((e=>{e.setAttribute("id",o)})),function(e,t){(e=r(e)).forEach((e=>{e.setAttribute("aria-live",t)}))}(i,l),E();let{nextEl:p,prevEl:u}=e.navigation?e.navigation:{};p=r(p),u=r(u),p&&p.forEach((e=>g(e,n,t.nextSlideMessage))),u&&u.forEach((e=>g(e,n,t.prevSlideMessage))),h()&&(Array.isArray(e.pagination.el)?e.pagination.el:[e.pagination.el]).forEach((e=>{e.addEventListener("keydown",m)})),e.el.addEventListener("focus",y,!0),e.el.addEventListener("pointerdown",v,!0),e.el.addEventListener("pointerup",w,!0)})()})),s("slidesLengthChange snapGridLengthChange slidesGridLengthChange",(()=>{e.params.a11y.enabled&&E()})),s("fromEdge toEdge afterInit lock unlock",(()=>{e.params.a11y.enabled&&function(){if(e.params.loop||e.params.rewind||!e.navigation)return;const{nextEl:t,prevEl:s}=e.navigation;s&&(e.isBeginning?(p(s),l(s)):(u(s),n(s))),t&&(e.isEnd?(p(t),l(t)):(u(t),n(t)))}()})),s("paginationUpdate",(()=>{e.params.a11y.enabled&&function(){const t=e.params.a11y;f()&&e.pagination.bullets.forEach((s=>{e.params.pagination.clickable&&(n(s),e.params.pagination.renderBullet||(o(s,"button"),c(s,t.paginationBulletMessage.replace(/\{\{index\}\}/,x(s)+1)))),s.matches(`.${e.params.pagination.bulletActiveClass}`)?s.setAttribute("aria-current","true"):s.removeAttribute("aria-current")}))}()})),s("destroy",(()=>{e.params.a11y.enabled&&function(){a&&a.length>0&&a.remove();let{nextEl:t,prevEl:s}=e.navigation?e.navigation:{};t=r(t),s=r(s),t&&t.forEach((e=>e.removeEventListener("keydown",m))),s&&s.forEach((e=>e.removeEventListener("keydown",m))),h()&&(Array.isArray(e.pagination.el)?e.pagination.el:[e.pagination.el]).forEach((e=>{e.removeEventListener("keydown",m)})),e.el.removeEventListener("focus",y,!0),e.el.removeEventListener("pointerdown",v,!0),e.el.removeEventListener("pointerup",w,!0)}()}))}function ce({swiper:e,extendParams:t,on:s}){t({history:{enabled:!1,root:"",replaceState:!1,key:"slides",keepQuery:!1}});let a=!1,i={};const r=e=>e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),n=e=>{const t=o();let s;s=e?new URL(e):t.location;const a=s.pathname.slice(1).split("/").filter((e=>""!==e)),i=a.length;return{key:a[i-2],value:a[i-1]}},l=(t,s)=>{const i=o();if(!a||!e.params.history.enabled)return;let n;n=e.params.url?new URL(e.params.url):i.location;const l=e.slides[s];let d=r(l.getAttribute("data-history"));if(e.params.history.root.length>0){let s=e.params.history.root;"/"===s[s.length-1]&&(s=s.slice(0,s.length-1)),d=`${s}/${t?`${t}/`:""}${d}`}else n.pathname.includes(t)||(d=`${t?`${t}/`:""}${d}`);e.params.history.keepQuery&&(d+=n.search);const c=i.history.state;c&&c.value===d||(e.params.history.replaceState?i.history.replaceState({value:d},null,d):i.history.pushState({value:d},null,d))},d=(t,s,a)=>{if(s)for(let i=0,n=e.slides.length;i<n;i+=1){const n=e.slides[i];if(r(n.getAttribute("data-history"))===s){const s=e.getSlideIndex(n);e.slideTo(s,t,a)}}else e.slideTo(0,t,a)},c=()=>{i=n(e.params.url),d(e.params.speed,i.value,!1)};s("init",(()=>{e.params.history.enabled&&(()=>{const t=o();if(e.params.history){if(!t.history||!t.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);a=!0,i=n(e.params.url),i.key||i.value?(d(0,i.value,e.params.runCallbacksOnInit),e.params.history.replaceState||t.addEventListener("popstate",c)):e.params.history.replaceState||t.addEventListener("popstate",c)}})()})),s("destroy",(()=>{e.params.history.enabled&&(()=>{const t=o();e.params.history.replaceState||t.removeEventListener("popstate",c)})()})),s("transitionEnd _freeModeNoMomentumRelease",(()=>{a&&l(e.params.history.key,e.activeIndex)})),s("slideChange",(()=>{a&&e.params.cssMode&&l(e.params.history.key,e.activeIndex)}))}function pe({swiper:e,extendParams:t,emit:s,on:a}){let i=!1;const r=n(),l=o();t({hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}});const d=()=>{s("hashChange");const t=r.location.hash.replace("#","");if(t!==e.slides[e.activeIndex].getAttribute("data-hash")){const s=e.getSlideIndex(v(e.slidesEl,`.${e.params.slideClass}[data-hash="${t}"], swiper-slide[data-hash="${t}"]`)[0]);if(void 0===s)return;e.slideTo(s)}},c=()=>{if(i&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&l.history&&l.history.replaceState)l.history.replaceState(null,null,`#${e.slides[e.activeIndex].getAttribute("data-hash")}`||""),s("hashSet");else{const t=e.slides[e.activeIndex],a=t.getAttribute("data-hash")||t.getAttribute("data-history");r.location.hash=a||"",s("hashSet")}};a("init",(()=>{e.params.hashNavigation.enabled&&(()=>{if(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)return;i=!0;const t=r.location.hash.replace("#","");if(t){const s=0;for(let a=0,i=e.slides.length;a<i;a+=1){const i=e.slides[a];if((i.getAttribute("data-hash")||i.getAttribute("data-history"))===t){const t=e.getSlideIndex(i);e.slideTo(t,s,e.params.runCallbacksOnInit,!0)}}}e.params.hashNavigation.watchState&&l.addEventListener("hashchange",d)})()})),a("destroy",(()=>{e.params.hashNavigation.enabled&&e.params.hashNavigation.watchState&&l.removeEventListener("hashchange",d)})),a("transitionEnd _freeModeNoMomentumRelease",(()=>{i&&c()})),a("slideChange",(()=>{i&&e.params.cssMode&&c()}))}function ue({swiper:e,extendParams:t,on:s,emit:a,params:i}){let r,l;e.autoplay={running:!1,paused:!1,timeLeft:0},t({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let o,d,c,p,u,m,f,h=i&&i.autoplay?i.autoplay.delay:3e3,g=i&&i.autoplay?i.autoplay.delay:3e3,v=(new Date).getTime;function b(t){e&&!e.destroyed&&e.wrapperEl&&t.target===e.wrapperEl&&(e.wrapperEl.removeEventListener("transitionend",b),T())}const w=()=>{if(e.destroyed||!e.autoplay.running)return;e.autoplay.paused?d=!0:d&&(g=o,d=!1);const t=e.autoplay.paused?o:v+g-(new Date).getTime();e.autoplay.timeLeft=t,a("autoplayTimeLeft",t,t/h),l=requestAnimationFrame((()=>{w()}))},y=t=>{if(e.destroyed||!e.autoplay.running)return;cancelAnimationFrame(l),w();let s=void 0===t?e.params.autoplay.delay:t;h=e.params.autoplay.delay,g=e.params.autoplay.delay;const i=(()=>{let t;if(t=e.virtual&&e.params.virtual.enabled?e.slides.filter((e=>e.classList.contains("swiper-slide-active")))[0]:e.slides[e.activeIndex],t)return parseInt(t.getAttribute("data-swiper-autoplay"),10)})();!Number.isNaN(i)&&i>0&&void 0===t&&(s=i,h=i,g=i),o=s;const n=e.params.speed,d=()=>{e&&!e.destroyed&&(e.params.autoplay.reverseDirection?!e.isBeginning||e.params.loop||e.params.rewind?(e.slidePrev(n,!0,!0),a("autoplay")):e.params.autoplay.stopOnLastSlide||(e.slideTo(e.slides.length-1,n,!0,!0),a("autoplay")):!e.isEnd||e.params.loop||e.params.rewind?(e.slideNext(n,!0,!0),a("autoplay")):e.params.autoplay.stopOnLastSlide||(e.slideTo(0,n,!0,!0),a("autoplay")),e.params.cssMode&&(v=(new Date).getTime(),requestAnimationFrame((()=>{y()}))))};return s>0?(clearTimeout(r),r=setTimeout((()=>{d()}),s)):requestAnimationFrame((()=>{d()})),s},x=()=>{e.autoplay.running=!0,y(),a("autoplayStart")},E=()=>{e.autoplay.running=!1,clearTimeout(r),cancelAnimationFrame(l),a("autoplayStop")},S=(t,s)=>{if(e.destroyed||!e.autoplay.running)return;clearTimeout(r),t||(f=!0);const i=()=>{a("autoplayPause"),e.params.autoplay.waitForTransition?e.wrapperEl.addEventListener("transitionend",b):T()};if(e.autoplay.paused=!0,s)return m&&(o=e.params.autoplay.delay),m=!1,void i();const n=o||e.params.autoplay.delay;o=n-((new Date).getTime()-v),e.isEnd&&o<0&&!e.params.loop||(o<0&&(o=0),i())},T=()=>{e.isEnd&&o<0&&!e.params.loop||e.destroyed||!e.autoplay.running||(v=(new Date).getTime(),f?(f=!1,y(o)):y(),e.autoplay.paused=!1,a("autoplayResume"))},M=()=>{if(e.destroyed||!e.autoplay.running)return;const t=n();"hidden"===t.visibilityState&&(f=!0,S(!0)),"visible"===t.visibilityState&&T()},C=e=>{"mouse"===e.pointerType&&(f=!0,S(!0))},P=t=>{"mouse"===t.pointerType&&e.autoplay.paused&&T()};s("init",(()=>{e.params.autoplay.enabled&&(e.params.autoplay.pauseOnMouseEnter&&(e.el.addEventListener("pointerenter",C),e.el.addEventListener("pointerleave",P)),n().addEventListener("visibilitychange",M),v=(new Date).getTime(),x())})),s("destroy",(()=>{e.el.removeEventListener("pointerenter",C),e.el.removeEventListener("pointerleave",P),n().removeEventListener("visibilitychange",M),e.autoplay.running&&E()})),s("beforeTransitionStart",((t,s,a)=>{!e.destroyed&&e.autoplay.running&&(a||!e.params.autoplay.disableOnInteraction?S(!0,!0):E())})),s("sliderFirstMove",(()=>{!e.destroyed&&e.autoplay.running&&(e.params.autoplay.disableOnInteraction?E():(c=!0,p=!1,f=!1,u=setTimeout((()=>{f=!0,p=!0,S(!0)}),200)))})),s("touchEnd",(()=>{if(!e.destroyed&&e.autoplay.running&&c){if(clearTimeout(u),clearTimeout(r),e.params.autoplay.disableOnInteraction)return p=!1,void(c=!1);p&&e.params.cssMode&&T(),p=!1,c=!1}})),s("slideChange",(()=>{!e.destroyed&&e.autoplay.running&&(m=!0)})),Object.assign(e.autoplay,{start:x,stop:E,pause:S,resume:T})}function me({swiper:e,extendParams:t,on:s}){t({thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-thumbs"}});let a=!1,i=!1;function r(){const t=e.thumbs.swiper;if(!t||t.destroyed)return;const s=t.clickedIndex,a=t.clickedSlide;if(a&&a.classList.contains(e.params.thumbs.slideThumbActiveClass))return;if(null==s)return;let i;i=t.params.loop?parseInt(t.clickedSlide.getAttribute("data-swiper-slide-index"),10):s,e.params.loop?e.slideToLoop(i):e.slideTo(i)}function l(){const{thumbs:t}=e.params;if(a)return!1;a=!0;const s=e.constructor;if(t.swiper instanceof s)e.thumbs.swiper=t.swiper,Object.assign(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),Object.assign(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1}),e.thumbs.swiper.update();else if(u(t.swiper)){const a=Object.assign({},t.swiper);Object.assign(a,{watchSlidesProgress:!0,slideToClickedSlide:!1}),e.thumbs.swiper=new s(a),i=!0}return e.thumbs.swiper.el.classList.add(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",r),!0}function o(t){const s=e.thumbs.swiper;if(!s||s.destroyed)return;const a="auto"===s.params.slidesPerView?s.slidesPerViewDynamic():s.params.slidesPerView;let i=1;const r=e.params.thumbs.slideThumbActiveClass;if(e.params.slidesPerView>1&&!e.params.centeredSlides&&(i=e.params.slidesPerView),e.params.thumbs.multipleActiveThumbs||(i=1),i=Math.floor(i),s.slides.forEach((e=>e.classList.remove(r))),s.params.loop||s.params.virtual&&s.params.virtual.enabled)for(let t=0;t<i;t+=1)v(s.slidesEl,`[data-swiper-slide-index="${e.realIndex+t}"]`).forEach((e=>{e.classList.add(r)}));else for(let t=0;t<i;t+=1)s.slides[e.realIndex+t]&&s.slides[e.realIndex+t].classList.add(r);const n=e.params.thumbs.autoScrollOffset,l=n&&!s.params.loop;if(e.realIndex!==s.realIndex||l){const i=s.activeIndex;let r,o;if(s.params.loop){const t=s.slides.filter((t=>t.getAttribute("data-swiper-slide-index")===`${e.realIndex}`))[0];r=s.slides.indexOf(t),o=e.activeIndex>e.previousIndex?"next":"prev"}else r=e.realIndex,o=r>e.previousIndex?"next":"prev";l&&(r+="next"===o?n:-1*n),s.visibleSlidesIndexes&&s.visibleSlidesIndexes.indexOf(r)<0&&(s.params.centeredSlides?r=r>i?r-Math.floor(a/2)+1:r+Math.floor(a/2)-1:r>i&&s.params.slidesPerGroup,s.slideTo(r,t?0:void 0))}}e.thumbs={swiper:null},s("beforeInit",(()=>{const{thumbs:t}=e.params;if(t&&t.swiper)if("string"==typeof t.swiper||t.swiper instanceof HTMLElement){const s=n(),a=()=>{const a="string"==typeof t.swiper?s.querySelector(t.swiper):t.swiper;if(a&&a.swiper)t.swiper=a.swiper,l(),o(!0);else if(a){const s=i=>{t.swiper=i.detail[0],a.removeEventListener("init",s),l(),o(!0),t.swiper.update(),e.update()};a.addEventListener("init",s)}return a},i=()=>{e.destroyed||a()||requestAnimationFrame(i)};requestAnimationFrame(i)}else l(),o(!0)})),s("slideChange update resize observerUpdate",(()=>{o()})),s("setTransition",((t,s)=>{const a=e.thumbs.swiper;a&&!a.destroyed&&a.setTransition(s)})),s("beforeDestroy",(()=>{const t=e.thumbs.swiper;t&&!t.destroyed&&i&&t.destroy()})),Object.assign(e.thumbs,{init:l,update:o})}function fe({swiper:e,extendParams:t,emit:s,once:a}){t({freeMode:{enabled:!1,momentum:!0,momentumRatio:1,momentumBounce:!0,momentumBounceRatio:1,momentumVelocityRatio:1,sticky:!1,minimumVelocity:.02}}),Object.assign(e,{freeMode:{onTouchStart:function(){const t=e.getTranslate();e.setTranslate(t),e.setTransition(0),e.touchEventsData.velocities.length=0,e.freeMode.onTouchEnd({currentPos:e.rtl?e.translate:-e.translate})},onTouchMove:function(){const{touchEventsData:t,touches:s}=e;0===t.velocities.length&&t.velocities.push({position:s[e.isHorizontal()?"startX":"startY"],time:t.touchStartTime}),t.velocities.push({position:s[e.isHorizontal()?"currentX":"currentY"],time:c()})},onTouchEnd:function({currentPos:t}){const{params:i,wrapperEl:r,rtlTranslate:n,snapGrid:l,touchEventsData:o}=e,d=c()-o.touchStartTime;if(t<-e.minTranslate())e.slideTo(e.activeIndex);else if(t>-e.maxTranslate())e.slides.length<l.length?e.slideTo(l.length-1):e.slideTo(e.slides.length-1);else{if(i.freeMode.momentum){if(o.velocities.length>1){const t=o.velocities.pop(),s=o.velocities.pop(),a=t.position-s.position,r=t.time-s.time;e.velocity=a/r,e.velocity/=2,Math.abs(e.velocity)<i.freeMode.minimumVelocity&&(e.velocity=0),(r>150||c()-t.time>300)&&(e.velocity=0)}else e.velocity=0;e.velocity*=i.freeMode.momentumVelocityRatio,o.velocities.length=0;let t=1e3*i.freeMode.momentumRatio;const d=e.velocity*t;let p=e.translate+d;n&&(p=-p);let u,m=!1;const f=20*Math.abs(e.velocity)*i.freeMode.momentumBounceRatio;let h;if(p<e.maxTranslate())i.freeMode.momentumBounce?(p+e.maxTranslate()<-f&&(p=e.maxTranslate()-f),u=e.maxTranslate(),m=!0,o.allowMomentumBounce=!0):p=e.maxTranslate(),i.loop&&i.centeredSlides&&(h=!0);else if(p>e.minTranslate())i.freeMode.momentumBounce?(p-e.minTranslate()>f&&(p=e.minTranslate()+f),u=e.minTranslate(),m=!0,o.allowMomentumBounce=!0):p=e.minTranslate(),i.loop&&i.centeredSlides&&(h=!0);else if(i.freeMode.sticky){let t;for(let e=0;e<l.length;e+=1)if(l[e]>-p){t=e;break}p=Math.abs(l[t]-p)<Math.abs(l[t-1]-p)||"next"===e.swipeDirection?l[t]:l[t-1],p=-p}if(h&&a("transitionEnd",(()=>{e.loopFix()})),0!==e.velocity){if(t=n?Math.abs((-p-e.translate)/e.velocity):Math.abs((p-e.translate)/e.velocity),i.freeMode.sticky){const s=Math.abs((n?-p:p)-e.translate),a=e.slidesSizesGrid[e.activeIndex];t=s<a?i.speed:s<2*a?1.5*i.speed:2.5*i.speed}}else if(i.freeMode.sticky)return void e.slideToClosest();i.freeMode.momentumBounce&&m?(e.updateProgress(u),e.setTransition(t),e.setTranslate(p),e.transitionStart(!0,e.swipeDirection),e.animating=!0,S(r,(()=>{e&&!e.destroyed&&o.allowMomentumBounce&&(s("momentumBounce"),e.setTransition(i.speed),setTimeout((()=>{e.setTranslate(u),S(r,(()=>{e&&!e.destroyed&&e.transitionEnd()}))}),0))}))):e.velocity?(s("_freeModeNoMomentumRelease"),e.updateProgress(p),e.setTransition(t),e.setTranslate(p),e.transitionStart(!0,e.swipeDirection),e.animating||(e.animating=!0,S(r,(()=>{e&&!e.destroyed&&e.transitionEnd()})))):e.updateProgress(p),e.updateActiveIndex(),e.updateSlidesClasses()}else{if(i.freeMode.sticky)return void e.slideToClosest();i.freeMode&&s("_freeModeNoMomentumRelease")}(!i.freeMode.momentum||d>=i.longSwipesMs)&&(e.updateProgress(),e.updateActiveIndex(),e.updateSlidesClasses())}}}})}function he({swiper:e,extendParams:t}){let s,a,i;t({grid:{rows:1,fill:"column"}}),e.grid={initSlides:t=>{const{slidesPerView:r}=e.params,{rows:n,fill:l}=e.params.grid;a=s/n,i=Math.floor(t/n),s=Math.floor(t/n)===t/n?t:Math.ceil(t/n)*n,"auto"!==r&&"row"===l&&(s=Math.max(s,r*n))},updateSlide:(t,r,n,l)=>{const{slidesPerGroup:o,spaceBetween:d}=e.params,{rows:c,fill:p}=e.params.grid;let u,m,f;if("row"===p&&o>1){const e=Math.floor(t/(o*c)),a=t-c*o*e,i=0===e?o:Math.min(Math.ceil((n-e*c*o)/c),o);f=Math.floor(a/i),m=a-f*i+e*o,u=m+f*s/c,r.style.order=u}else"column"===p?(m=Math.floor(t/c),f=t-m*c,(m>i||m===i&&f===c-1)&&(f+=1,f>=c&&(f=0,m+=1))):(f=Math.floor(t/a),m=t-f*a);r.style[l("margin-top")]=0!==f?d&&`${d}px`:""},updateWrapperSize:(t,a,i)=>{const{spaceBetween:r,centeredSlides:n,roundLengths:l}=e.params,{rows:o}=e.params.grid;if(e.virtualSize=(t+r)*s,e.virtualSize=Math.ceil(e.virtualSize/o)-r,e.wrapperEl.style[i("width")]=`${e.virtualSize+r}px`,n){const t=[];for(let s=0;s<a.length;s+=1){let i=a[s];l&&(i=Math.floor(i)),a[s]<e.virtualSize+a[0]&&t.push(i)}a.splice(0,a.length),a.push(...t)}}}}function ge(e){const t=this,{params:s,slidesEl:a}=t;s.loop&&t.loopDestroy();const i=e=>{if("string"==typeof e){const t=document.createElement("div");t.innerHTML=e,a.append(t.children[0]),t.innerHTML=""}else a.append(e)};if("object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&i(e[t]);else i(e);t.recalcSlides(),s.loop&&t.loopCreate(),s.observer&&!t.isElement||t.update()}function ve(e){const t=this,{params:s,activeIndex:a,slidesEl:i}=t;s.loop&&t.loopDestroy();let r=a+1;const n=e=>{if("string"==typeof e){const t=document.createElement("div");t.innerHTML=e,i.prepend(t.children[0]),t.innerHTML=""}else i.prepend(e)};if("object"==typeof e&&"length"in e){for(let t=0;t<e.length;t+=1)e[t]&&n(e[t]);r=a+e.length}else n(e);t.recalcSlides(),s.loop&&t.loopCreate(),s.observer&&!t.isElement||t.update(),t.slideTo(r,0,!1)}function be(e,t){const s=this,{params:a,activeIndex:i,slidesEl:r}=s;let n=i;a.loop&&(n-=s.loopedSlides,s.loopDestroy(),s.recalcSlides());const l=s.slides.length;if(e<=0)return void s.prependSlide(t);if(e>=l)return void s.appendSlide(t);let o=n>e?n+1:n;const d=[];for(let t=l-1;t>=e;t-=1){const e=s.slides[t];e.remove(),d.unshift(e)}if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)t[e]&&r.append(t[e]);o=n>e?n+t.length:n}else r.append(t);for(let e=0;e<d.length;e+=1)r.append(d[e]);s.recalcSlides(),a.loop&&s.loopCreate(),a.observer&&!s.isElement||s.update(),a.loop?s.slideTo(o+s.loopedSlides,0,!1):s.slideTo(o,0,!1)}function we(e){const t=this,{params:s,activeIndex:a}=t;let i=a;s.loop&&(i-=t.loopedSlides,t.loopDestroy());let r,n=i;if("object"==typeof e&&"length"in e){for(let s=0;s<e.length;s+=1)r=e[s],t.slides[r]&&t.slides[r].remove(),r<n&&(n-=1);n=Math.max(n,0)}else r=e,t.slides[r]&&t.slides[r].remove(),r<n&&(n-=1),n=Math.max(n,0);t.recalcSlides(),s.loop&&t.loopCreate(),s.observer&&!t.isElement||t.update(),s.loop?t.slideTo(n+t.loopedSlides,0,!1):t.slideTo(n,0,!1)}function ye(){const e=this,t=[];for(let s=0;s<e.slides.length;s+=1)t.push(s);e.removeSlide(t)}function xe({swiper:e}){Object.assign(e,{appendSlide:ge.bind(e),prependSlide:ve.bind(e),addSlide:be.bind(e),removeSlide:we.bind(e),removeAllSlides:ye.bind(e)})}function Ee(e){const{effect:t,swiper:s,on:a,setTranslate:i,setTransition:r,overwriteParams:n,perspective:l,recreateShadows:o,getEffectParams:d}=e;let c;a("beforeInit",(()=>{if(s.params.effect!==t)return;s.classNames.push(`${s.params.containerModifierClass}${t}`),l&&l()&&s.classNames.push(`${s.params.containerModifierClass}3d`);const e=n?n():{};Object.assign(s.params,e),Object.assign(s.originalParams,e)})),a("setTranslate",(()=>{s.params.effect===t&&i()})),a("setTransition",((e,a)=>{s.params.effect===t&&r(a)})),a("transitionEnd",(()=>{if(s.params.effect===t&&o){if(!d||!d().slideShadows)return;s.slides.forEach((e=>{e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>e.remove()))})),o()}})),a("virtualUpdate",(()=>{s.params.effect===t&&(s.slides.length||(c=!0),requestAnimationFrame((()=>{c&&s.slides&&s.slides.length&&(i(),c=!1)})))}))}function Se(e,t){const s=g(t);return s!==t&&(s.style.backfaceVisibility="hidden",s.style["-webkit-backface-visibility"]="hidden"),s}function Te({swiper:e,duration:t,transformElements:s,allSlides:a}){const{activeIndex:i}=e;if(e.params.virtualTranslate&&0!==t){let t,r=!1;t=a?s:s.filter((t=>{const s=t.classList.contains("swiper-slide-transform")?(t=>t.parentElement?t.parentElement:e.slides.filter((e=>e.shadowEl&&e.shadowEl===t.parentNode))[0])(t):t;return e.getSlideIndex(s)===i})),t.forEach((t=>{S(t,(()=>{if(r)return;if(!e||e.destroyed)return;r=!0,e.animating=!1;const t=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});e.wrapperEl.dispatchEvent(t)}))}))}}function Me({swiper:e,extendParams:t,on:s}){t({fadeEffect:{crossFade:!1}}),Ee({effect:"fade",swiper:e,on:s,setTranslate:()=>{const{slides:t}=e;e.params.fadeEffect;for(let s=0;s<t.length;s+=1){const t=e.slides[s];let a=-t.swiperSlideOffset;e.params.virtualTranslate||(a-=e.translate);let i=0;e.isHorizontal()||(i=a,a=0);const r=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(t.progress),0):1+Math.min(Math.max(t.progress,-1),0),n=Se(0,t);n.style.opacity=r,n.style.transform=`translate3d(${a}px, ${i}px, 0px)`}},setTransition:t=>{const s=e.slides.map((e=>g(e)));s.forEach((e=>{e.style.transitionDuration=`${t}ms`})),Te({swiper:e,duration:t,transformElements:s,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!e.params.cssMode})})}function Ce({swiper:e,extendParams:t,on:s}){t({cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}});const a=(e,t,s)=>{let a=s?e.querySelector(".swiper-slide-shadow-left"):e.querySelector(".swiper-slide-shadow-top"),i=s?e.querySelector(".swiper-slide-shadow-right"):e.querySelector(".swiper-slide-shadow-bottom");a||(a=b("div","swiper-slide-shadow-"+(s?"left":"top")),e.append(a)),i||(i=b("div","swiper-slide-shadow-"+(s?"right":"bottom")),e.append(i)),a&&(a.style.opacity=Math.max(-t,0)),i&&(i.style.opacity=Math.max(t,0))};Ee({effect:"cube",swiper:e,on:s,setTranslate:()=>{const{el:t,wrapperEl:s,slides:i,width:r,height:n,rtlTranslate:l,size:o,browser:d}=e,c=e.params.cubeEffect,p=e.isHorizontal(),u=e.virtual&&e.params.virtual.enabled;let m,f=0;c.shadow&&(p?(m=e.slidesEl.querySelector(".swiper-cube-shadow"),m||(m=b("div","swiper-cube-shadow"),e.slidesEl.append(m)),m.style.height=`${r}px`):(m=t.querySelector(".swiper-cube-shadow"),m||(m=b("div","swiper-cube-shadow"),t.append(m))));for(let e=0;e<i.length;e+=1){const t=i[e];let s=e;u&&(s=parseInt(t.getAttribute("data-swiper-slide-index"),10));let r=90*s,n=Math.floor(r/360);l&&(r=-r,n=Math.floor(-r/360));const d=Math.max(Math.min(t.progress,1),-1);let m=0,h=0,g=0;s%4==0?(m=4*-n*o,g=0):(s-1)%4==0?(m=0,g=4*-n*o):(s-2)%4==0?(m=o+4*n*o,g=o):(s-3)%4==0&&(m=-o,g=3*o+4*o*n),l&&(m=-m),p||(h=m,m=0);const v=`rotateX(${p?0:-r}deg) rotateY(${p?r:0}deg) translate3d(${m}px, ${h}px, ${g}px)`;d<=1&&d>-1&&(f=90*s+90*d,l&&(f=90*-s-90*d)),t.style.transform=v,c.slideShadows&&a(t,d,p)}if(s.style.transformOrigin=`50% 50% -${o/2}px`,s.style["-webkit-transform-origin"]=`50% 50% -${o/2}px`,c.shadow)if(p)m.style.transform=`translate3d(0px, ${r/2+c.shadowOffset}px, ${-r/2}px) rotateX(90deg) rotateZ(0deg) scale(${c.shadowScale})`;else{const e=Math.abs(f)-90*Math.floor(Math.abs(f)/90),t=1.5-(Math.sin(2*e*Math.PI/360)/2+Math.cos(2*e*Math.PI/360)/2),s=c.shadowScale,a=c.shadowScale/t,i=c.shadowOffset;m.style.transform=`scale3d(${s}, 1, ${a}) translate3d(0px, ${n/2+i}px, ${-n/2/a}px) rotateX(-90deg)`}const h=(d.isSafari||d.isWebView)&&d.needPerspectiveFix?-o/2:0;s.style.transform=`translate3d(0px,0,${h}px) rotateX(${e.isHorizontal()?0:f}deg) rotateY(${e.isHorizontal()?-f:0}deg)`,s.style.setProperty("--swiper-cube-translate-z",`${h}px`)},setTransition:t=>{const{el:s,slides:a}=e;if(a.forEach((e=>{e.style.transitionDuration=`${t}ms`,e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>{e.style.transitionDuration=`${t}ms`}))})),e.params.cubeEffect.shadow&&!e.isHorizontal()){const e=s.querySelector(".swiper-cube-shadow");e&&(e.style.transitionDuration=`${t}ms`)}},recreateShadows:()=>{const t=e.isHorizontal();e.slides.forEach((e=>{const s=Math.max(Math.min(e.progress,1),-1);a(e,s,t)}))},getEffectParams:()=>e.params.cubeEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0})})}function Pe(e,t,s){const a="swiper-slide-shadow"+(s?`-${s}`:""),i=g(t);let r=i.querySelector(`.${a}`);return r||(r=b("div","swiper-slide-shadow"+(s?`-${s}`:"")),i.append(r)),r}function Le({swiper:e,extendParams:t,on:s}){t({flipEffect:{slideShadows:!0,limitRotation:!0}});const a=(t,s,a)=>{let i=e.isHorizontal()?t.querySelector(".swiper-slide-shadow-left"):t.querySelector(".swiper-slide-shadow-top"),r=e.isHorizontal()?t.querySelector(".swiper-slide-shadow-right"):t.querySelector(".swiper-slide-shadow-bottom");i||(i=Pe(0,t,e.isHorizontal()?"left":"top")),r||(r=Pe(0,t,e.isHorizontal()?"right":"bottom")),i&&(i.style.opacity=Math.max(-s,0)),r&&(r.style.opacity=Math.max(s,0))};Ee({effect:"flip",swiper:e,on:s,setTranslate:()=>{const{slides:t,rtlTranslate:s}=e,i=e.params.flipEffect;for(let r=0;r<t.length;r+=1){const n=t[r];let l=n.progress;e.params.flipEffect.limitRotation&&(l=Math.max(Math.min(n.progress,1),-1));const o=n.swiperSlideOffset;let d=-180*l,c=0,p=e.params.cssMode?-o-e.translate:-o,u=0;e.isHorizontal()?s&&(d=-d):(u=p,p=0,c=-d,d=0),n.style.zIndex=-Math.abs(Math.round(l))+t.length,i.slideShadows&&a(n,l);const m=`translate3d(${p}px, ${u}px, 0px) rotateX(${c}deg) rotateY(${d}deg)`;Se(0,n).style.transform=m}},setTransition:t=>{const s=e.slides.map((e=>g(e)));s.forEach((e=>{e.style.transitionDuration=`${t}ms`,e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>{e.style.transitionDuration=`${t}ms`}))})),Te({swiper:e,duration:t,transformElements:s})},recreateShadows:()=>{e.params.flipEffect,e.slides.forEach((t=>{let s=t.progress;e.params.flipEffect.limitRotation&&(s=Math.max(Math.min(t.progress,1),-1)),a(t,s)}))},getEffectParams:()=>e.params.flipEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!e.params.cssMode})})}function ke({swiper:e,extendParams:t,on:s}){t({coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}}),Ee({effect:"coverflow",swiper:e,on:s,setTranslate:()=>{const{width:t,height:s,slides:a,slidesSizesGrid:i}=e,r=e.params.coverflowEffect,n=e.isHorizontal(),l=e.translate,o=n?t/2-l:s/2-l,d=n?r.rotate:-r.rotate,c=r.depth;for(let e=0,t=a.length;e<t;e+=1){const t=a[e],s=i[e],l=(o-t.swiperSlideOffset-s/2)/s,p="function"==typeof r.modifier?r.modifier(l):l*r.modifier;let u=n?d*p:0,m=n?0:d*p,f=-c*Math.abs(p),h=r.stretch;"string"==typeof h&&-1!==h.indexOf("%")&&(h=parseFloat(r.stretch)/100*s);let g=n?0:h*p,v=n?h*p:0,b=1-(1-r.scale)*Math.abs(p);Math.abs(v)<.001&&(v=0),Math.abs(g)<.001&&(g=0),Math.abs(f)<.001&&(f=0),Math.abs(u)<.001&&(u=0),Math.abs(m)<.001&&(m=0),Math.abs(b)<.001&&(b=0);const w=`translate3d(${v}px,${g}px,${f}px)  rotateX(${m}deg) rotateY(${u}deg) scale(${b})`;if(Se(0,t).style.transform=w,t.style.zIndex=1-Math.abs(Math.round(p)),r.slideShadows){let e=n?t.querySelector(".swiper-slide-shadow-left"):t.querySelector(".swiper-slide-shadow-top"),s=n?t.querySelector(".swiper-slide-shadow-right"):t.querySelector(".swiper-slide-shadow-bottom");e||(e=Pe(0,t,n?"left":"top")),s||(s=Pe(0,t,n?"right":"bottom")),e&&(e.style.opacity=p>0?p:0),s&&(s.style.opacity=-p>0?-p:0)}}},setTransition:t=>{e.slides.map((e=>g(e))).forEach((e=>{e.style.transitionDuration=`${t}ms`,e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>{e.style.transitionDuration=`${t}ms`}))}))},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0})})}function ze({swiper:e,extendParams:t,on:s}){t({creativeEffect:{limitProgress:1,shadowPerProgress:!1,progressMultiplier:1,perspective:!0,prev:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1},next:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1}}});const a=e=>"string"==typeof e?e:`${e}px`;Ee({effect:"creative",swiper:e,on:s,setTranslate:()=>{const{slides:t,wrapperEl:s,slidesSizesGrid:i}=e,r=e.params.creativeEffect,{progressMultiplier:n}=r,l=e.params.centeredSlides;if(l){const t=i[0]/2-e.params.slidesOffsetBefore||0;s.style.transform=`translateX(calc(50% - ${t}px))`}for(let s=0;s<t.length;s+=1){const i=t[s],o=i.progress,d=Math.min(Math.max(i.progress,-r.limitProgress),r.limitProgress);let c=d;l||(c=Math.min(Math.max(i.originalProgress,-r.limitProgress),r.limitProgress));const p=i.swiperSlideOffset,u=[e.params.cssMode?-p-e.translate:-p,0,0],m=[0,0,0];let f=!1;e.isHorizontal()||(u[1]=u[0],u[0]=0);let h={translate:[0,0,0],rotate:[0,0,0],scale:1,opacity:1};d<0?(h=r.next,f=!0):d>0&&(h=r.prev,f=!0),u.forEach(((e,t)=>{u[t]=`calc(${e}px + (${a(h.translate[t])} * ${Math.abs(d*n)}))`})),m.forEach(((e,t)=>{m[t]=h.rotate[t]*Math.abs(d*n)})),i.style.zIndex=-Math.abs(Math.round(o))+t.length;const g=u.join(", "),v=`rotateX(${m[0]}deg) rotateY(${m[1]}deg) rotateZ(${m[2]}deg)`,b=c<0?`scale(${1+(1-h.scale)*c*n})`:`scale(${1-(1-h.scale)*c*n})`,w=c<0?1+(1-h.opacity)*c*n:1-(1-h.opacity)*c*n,y=`translate3d(${g}) ${v} ${b}`;if(f&&h.shadow||!f){let e=i.querySelector(".swiper-slide-shadow");if(!e&&h.shadow&&(e=Pe(0,i)),e){const t=r.shadowPerProgress?d*(1/r.limitProgress):d;e.style.opacity=Math.min(Math.max(Math.abs(t),0),1)}}const x=Se(0,i);x.style.transform=y,x.style.opacity=w,h.origin&&(x.style.transformOrigin=h.origin)}},setTransition:t=>{const s=e.slides.map((e=>g(e)));s.forEach((e=>{e.style.transitionDuration=`${t}ms`,e.querySelectorAll(".swiper-slide-shadow").forEach((e=>{e.style.transitionDuration=`${t}ms`}))})),Te({swiper:e,duration:t,transformElements:s,allSlides:!0})},perspective:()=>e.params.creativeEffect.perspective,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!e.params.cssMode})})}function Ae({swiper:e,extendParams:t,on:s}){t({cardsEffect:{slideShadows:!0,rotate:!0,perSlideRotate:2,perSlideOffset:8}}),Ee({effect:"cards",swiper:e,on:s,setTranslate:()=>{const{slides:t,activeIndex:s}=e,a=e.params.cardsEffect,{startTranslate:i,isTouched:r}=e.touchEventsData,n=e.translate;for(let l=0;l<t.length;l+=1){const o=t[l],d=o.progress,c=Math.min(Math.max(d,-4),4);let p=o.swiperSlideOffset;e.params.centeredSlides&&!e.params.cssMode&&(e.wrapperEl.style.transform=`translateX(${e.minTranslate()}px)`),e.params.centeredSlides&&e.params.cssMode&&(p-=t[0].swiperSlideOffset);let u=e.params.cssMode?-p-e.translate:-p,m=0;const f=-100*Math.abs(c);let h=1,g=-a.perSlideRotate*c,v=a.perSlideOffset-.75*Math.abs(c);const b=e.virtual&&e.params.virtual.enabled?e.virtual.from+l:l,w=(b===s||b===s-1)&&c>0&&c<1&&(r||e.params.cssMode)&&n<i,y=(b===s||b===s+1)&&c<0&&c>-1&&(r||e.params.cssMode)&&n>i;if(w||y){const e=(1-Math.abs((Math.abs(c)-.5)/.5))**.5;g+=-28*c*e,h+=-.5*e,v+=96*e,m=-25*e*Math.abs(c)+"%"}if(u=c<0?`calc(${u}px + (${v*Math.abs(c)}%))`:c>0?`calc(${u}px + (-${v*Math.abs(c)}%))`:`${u}px`,!e.isHorizontal()){const e=m;m=u,u=e}const x=c<0?""+(1+(1-h)*c):""+(1-(1-h)*c),E=`\n        translate3d(${u}, ${m}, ${f}px)\n        rotateZ(${a.rotate?g:0}deg)\n        scale(${x})\n      `;if(a.slideShadows){let e=o.querySelector(".swiper-slide-shadow");e||(e=Pe(0,o)),e&&(e.style.opacity=Math.min(Math.max((Math.abs(c)-.5)/.5,0),1))}o.style.zIndex=-Math.abs(Math.round(d))+t.length,Se(0,o).style.transform=E}},setTransition:t=>{const s=e.slides.map((e=>g(e)));s.forEach((e=>{e.style.transitionDuration=`${t}ms`,e.querySelectorAll(".swiper-slide-shadow").forEach((e=>{e.style.transitionDuration=`${t}ms`}))})),Te({swiper:e,duration:t,transformElements:s})},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!e.params.cssMode})})}}},t={};function s(a){var i=t[a];if(void 0!==i)return i.exports;var r=t[a]={exports:{}};return e[a].call(r.exports,r,r.exports,s),r.exports}s.d=(e,t)=>{for(var a in t)s.o(t,a)&&!s.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e+"../"})(),s(9560)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9zcmMvdHMvc2VlZHMvc3dpcGVyRGF0YS50cyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL3NyYy90cy9zd2lwZXIudHMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9zcmMvdHMvc3dpcGVyL2NyZWF0ZS1ocC1oYXJkd2FyZS50cyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL3NyYy90cy9zd2lwZXIvY3JlYXRlLWhwLXRvcC50cyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL3NyYy90cy9zd2lwZXIvc3dpcGVyLXBhcmFtcy50cyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zc3Itd2luZG93L3Nzci13aW5kb3cuZXNtLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9nZXQtc3VwcG9ydC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2dldC1kZXZpY2UuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9nZXQtYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ldmVudHMtZW1pdHRlci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS91cGRhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL3VwZGF0ZVNpemUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL3VwZGF0ZVNsaWRlcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS91cGRhdGUvdXBkYXRlQXV0b0hlaWdodC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS91cGRhdGUvdXBkYXRlU2xpZGVzT2Zmc2V0LmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3VwZGF0ZS91cGRhdGVTbGlkZXNQcm9ncmVzcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS91cGRhdGUvdXBkYXRlUHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL3VwZGF0ZVNsaWRlc0NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL3VwZGF0ZUFjdGl2ZUluZGV4LmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3VwZGF0ZS91cGRhdGVDbGlja2VkU2xpZGUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdHJhbnNpdGlvbi90cmFuc2l0aW9uRW1pdC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9zbGlkZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9zbGlkZS9zbGlkZVRvLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3NsaWRlL3NsaWRlVG9Mb29wLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3NsaWRlL3NsaWRlTmV4dC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9zbGlkZS9zbGlkZVByZXYuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvc2xpZGUvc2xpZGVSZXNldC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9zbGlkZS9zbGlkZVRvQ2xvc2VzdC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9zbGlkZS9zbGlkZVRvQ2xpY2tlZFNsaWRlLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2V2ZW50cy9vblRvdWNoU3RhcnQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvZXZlbnRzL29uVG91Y2hNb3ZlLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2V2ZW50cy9vblRvdWNoRW5kLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2V2ZW50cy9vblJlc2l6ZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ldmVudHMvb25DbGljay5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ldmVudHMvb25TY3JvbGwuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9wcm9jZXNzLWxhenktcHJlbG9hZGVyLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2V2ZW50cy9vbkxvYWQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvZXZlbnRzL2luZGV4LmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2JyZWFrcG9pbnRzL3NldEJyZWFrcG9pbnQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvbW9kdWxlRXh0ZW5kUGFyYW1zLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2NvcmUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdHJhbnNsYXRlL2luZGV4LmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zbGF0ZS9nZXRUcmFuc2xhdGUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdHJhbnNsYXRlL3NldFRyYW5zbGF0ZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2xhdGUvbWluVHJhbnNsYXRlLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zbGF0ZS9tYXhUcmFuc2xhdGUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdHJhbnNsYXRlL3RyYW5zbGF0ZVRvLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zaXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdHJhbnNpdGlvbi9zZXRUcmFuc2l0aW9uLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zaXRpb24vdHJhbnNpdGlvblN0YXJ0LmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zaXRpb24vdHJhbnNpdGlvbkVuZC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9sb29wL2luZGV4LmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2xvb3AvbG9vcENyZWF0ZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9sb29wL2xvb3BGaXguanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvbG9vcC9sb29wRGVzdHJveS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ncmFiLWN1cnNvci9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ncmFiLWN1cnNvci9zZXRHcmFiQ3Vyc29yLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2dyYWItY3Vyc29yL3Vuc2V0R3JhYkN1cnNvci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9icmVha3BvaW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9icmVha3BvaW50cy9nZXRCcmVha3BvaW50LmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2NoZWNrLW92ZXJmbG93L2luZGV4LmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2NsYXNzZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvY2xhc3Nlcy9hZGRDbGFzc2VzLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2NsYXNzZXMvcmVtb3ZlQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9tb2R1bGVzL3Jlc2l6ZS9yZXNpemUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvbW9kdWxlcy9vYnNlcnZlci9vYnNlcnZlci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy92aXJ0dWFsL3ZpcnR1YWwuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMva2V5Ym9hcmQva2V5Ym9hcmQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbW91c2V3aGVlbC9tb3VzZXdoZWVsLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbmF2aWdhdGlvbi9uYXZpZ2F0aW9uLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY2xhc3Nlcy10by1zZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9wYWdpbmF0aW9uL3BhZ2luYXRpb24uanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvc2Nyb2xsYmFyL3Njcm9sbGJhci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9wYXJhbGxheC9wYXJhbGxheC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy96b29tL3pvb20uanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvY29udHJvbGxlci9jb250cm9sbGVyLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2ExMXkvYTExeS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9oaXN0b3J5L2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvaGFzaC1uYXZpZ2F0aW9uL2hhc2gtbmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9hdXRvcGxheS9hdXRvcGxheS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy90aHVtYnMvdGh1bWJzLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2ZyZWUtbW9kZS9mcmVlLW1vZGUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZ3JpZC9ncmlkLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL21hbmlwdWxhdGlvbi9tZXRob2RzL2FwcGVuZFNsaWRlLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL21hbmlwdWxhdGlvbi9tZXRob2RzL3ByZXBlbmRTbGlkZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9tYW5pcHVsYXRpb24vbWV0aG9kcy9hZGRTbGlkZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9tYW5pcHVsYXRpb24vbWV0aG9kcy9yZW1vdmVTbGlkZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9tYW5pcHVsYXRpb24vbWV0aG9kcy9yZW1vdmVBbGxTbGlkZXMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbWFuaXB1bGF0aW9uL21hbmlwdWxhdGlvbi5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2VmZmVjdC1pbml0LmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZWZmZWN0LXRhcmdldC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2VmZmVjdC12aXJ0dWFsLXRyYW5zaXRpb24tZW5kLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2VmZmVjdC1mYWRlL2VmZmVjdC1mYWRlLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2VmZmVjdC1jdWJlL2VmZmVjdC1jdWJlLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY3JlYXRlLXNoYWRvdy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9lZmZlY3QtZmxpcC9lZmZlY3QtZmxpcC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9lZmZlY3QtY292ZXJmbG93L2VmZmVjdC1jb3ZlcmZsb3cuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWNyZWF0aXZlL2VmZmVjdC1jcmVhdGl2ZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9lZmZlY3QtY2FyZHMvZWZmZWN0LWNhcmRzLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi93ZWJwYWNrL3N0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSVN3aXBlckhhcmR3YXJlLCBJU3dpcGVyVG9wIH0gZnJvbSAnLi4vbGlicy90eXBlcyc7XG5cbmltcG9ydCBEZWFkU3BhY2VMYXJnZSBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL3NsaWRlci90b3AvZGVhZF9zcGFjZS53ZWJwJztcbmltcG9ydCBEZWFkU3BhY2VMb2dvIGZyb20gJy4uLy4uL2Fzc2V0cy9pbWFnZXMvc2xpZGVyL3RvcC9kZWFkX3NwYWNlLWxvZ28ucG5nJztcbmltcG9ydCBEZWFkU3BhY2VNZWRpdW0gZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9zbGlkZXIvdG9wL2RlYWRfc3BhY2UtbWVkaXVtLndlYnAnO1xuaW1wb3J0IERlYWRTcGFjZU1vYmlsZSBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL3NsaWRlci90b3AvZGVhZF9zcGFjZS1tb2JpbGUud2VicCc7XG5pbXBvcnQgRGVhZFNwYWNlVGh1bWIgZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9zbGlkZXIvdG9wL2RlYWRfc3BhY2UtdGh1bWIucG5nJztcbmltcG9ydCBGb3JzcG9rZW5MYXJnZSBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL3NsaWRlci90b3AvZm9yc3Bva2VuLndlYnAnO1xuaW1wb3J0IEZvcnNwb2tlbkxvZ28gZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9zbGlkZXIvdG9wL2ZvcnNwb2tlbi1sb2dvLnBuZyc7XG5pbXBvcnQgRm9yc3Bva2VuTWVkaXVtIGZyb20gJy4uLy4uL2Fzc2V0cy9pbWFnZXMvc2xpZGVyL3RvcC9mb3JzcG9rZW4tbWVkaXVtLndlYnAnO1xuaW1wb3J0IEZvcnNwb2tlbk1vYmlsZSBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL3NsaWRlci90b3AvZm9yc3Bva2VuLW1vYmlsZS53ZWJwJztcbmltcG9ydCBGb3JzcG9rZW5UaHVtYiBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL3NsaWRlci90b3AvZm9yc3Bva2VuLXRodW1iLnBuZyc7XG5pbXBvcnQgTGl2ZVBTNUxhcmdlIGZyb20gJy4uLy4uL2Fzc2V0cy9pbWFnZXMvc2xpZGVyL3RvcC9saXZlX3BzNS53ZWJwJztcbmltcG9ydCBMaXZlUFM1TG9nbyBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL3NsaWRlci90b3AvbGl2ZV9wczUtbG9nby5wbmcnO1xuaW1wb3J0IExpdmVQUzVNZWRpdW0gZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9zbGlkZXIvdG9wL2xpdmVfcHM1LW1lZGl1bS53ZWJwJztcbmltcG9ydCBMaXZlUFM1TW9iaWxlIGZyb20gJy4uLy4uL2Fzc2V0cy9pbWFnZXMvc2xpZGVyL3RvcC9saXZlX3BzNS1tb2JpbGUud2VicCc7XG5pbXBvcnQgTGl2ZVBTNVRodW1iIGZyb20gJy4uLy4uL2Fzc2V0cy9pbWFnZXMvc2xpZGVyL3RvcC9saXZlX3BzNS10aHVtYi5wbmcnO1xuXG5pbXBvcnQgSGFyZHdhcmVDYW1lcmEgZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9zbGlkZXIvaGFyZHdhcmUvaGQtY2FtZXJhLndlYnAnO1xuaW1wb3J0IEhhcmR3YXJlRHVhbENvbGxlY3Rpb24gZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9zbGlkZXIvaGFyZHdhcmUvZHVhbHNlbnNlLWNvbGxlY3Rpb24ud2VicCc7XG5pbXBvcnQgSGFyZHdhcmVEdWFsRWRnZSBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL3NsaWRlci9oYXJkd2FyZS9kdWFsc2Vuc2UtZWRnZS53ZWJwJztcbmltcG9ydCBIYXJkd2FyZUhlYWRzZXQgZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9zbGlkZXIvaGFyZHdhcmUvM2QtcHVsc2UtaGVhZHNldC53ZWJwJztcbmltcG9ydCBIYXJkd2FyZVBTNUNvbnNvbGUgZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9zbGlkZXIvaGFyZHdhcmUvcGxheXN0YXRpb24tNS53ZWJwJztcbmltcG9ydCBIYXJkd2FyZVBTNUNvdmVyIGZyb20gJy4uLy4uL2Fzc2V0cy9pbWFnZXMvc2xpZGVyL2hhcmR3YXJlL3BzNS1jb25zb2xlLWNvdmVyLndlYnAnO1xuaW1wb3J0IEhhcmR3YXJlUmVtb3RlIGZyb20gJy4uLy4uL2Fzc2V0cy9pbWFnZXMvc2xpZGVyL2hhcmR3YXJlL21lZGlhLXJlbW90ZS53ZWJwJztcblxuaW1wb3J0IFJhbmRvbUdhbWVMYXJnZSBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL3NlY3Rpb24tcmFuZG9tLWdhbWUvZ29kLW9mLXdhci1yYWduYXJvay1oZXJvLWJhbm5lci1kZXNrdG9wLTAyLWVuLTA3c2VwMjEud2VicCc7XG5pbXBvcnQgUmFuZG9tR2FtZUxvZ28gZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9zZWN0aW9uLXJhbmRvbS1nYW1lL2dvZC1vZi13YXItcmFnbmFyb2staGVyby1iYW5uZXItbW9iaWxlLTAxLWVuLTA3c2VwMjEud2VicCc7XG5pbXBvcnQgUmFuZG9tR2FtZU1vYmlsZSBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL3NlY3Rpb24tcmFuZG9tLWdhbWUvR09XX1JhZ25hciUzRmtfbG9nby53ZWJwJztcblxuZXhwb3J0IGNvbnN0IHN3aXBlclRvcERhdGE6IElTd2lwZXJUb3BbXSA9IFtcbiAge1xuICAgIGlkOiAxLFxuICAgIGltZzoge1xuICAgICAgbGFyZ2U6IEZvcnNwb2tlbkxhcmdlLFxuICAgICAgbWVkaXVtOiBGb3JzcG9rZW5NZWRpdW0sXG4gICAgICBtb2JpbGU6IEZvcnNwb2tlbk1vYmlsZSxcbiAgICAgIHRodW1iOiBGb3JzcG9rZW5UaHVtYlxuICAgIH0sXG4gICAgYWx0OiAnZm9yc3Bva2VuIGdhbWUnLFxuICAgIGxvZ286IEZvcnNwb2tlbkxvZ28sXG4gICAgdGl0bGU6ICdGaW5kIHlvdXIgZmlnaHQnLFxuICAgIHRleHQ6ICdUcmF2ZXJzZSBzcHJhd2xpbmcgbGFuZHNjYXBlcyBhbmQgYmF0dGxlIG1vbnN0cm91cyBjcmVhdHVyZXMgd2l0aCBhIG1hc3NpdmUgdmFyaWV0eSBvZiBtYWdpZiBhYmlsaXRpZXMsIG91dCBub3cgb24gUFM1LicsXG4gICAgYnRuOiB7IHRleHQ6ICdQbGF5IG5vdycsIGhyZWY6ICcjJyB9XG4gIH0sXG4gIHtcbiAgICBpZDogMixcbiAgICBpbWc6IHtcbiAgICAgIGxhcmdlOiBEZWFkU3BhY2VMYXJnZSxcbiAgICAgIG1lZGl1bTogRGVhZFNwYWNlTWVkaXVtLFxuICAgICAgbW9iaWxlOiBEZWFkU3BhY2VNb2JpbGUsXG4gICAgICB0aHVtYjogRGVhZFNwYWNlVGh1bWJcbiAgICB9LFxuICAgIGFsdDogJ2RlYWQgc3BhY2UgZ2FtZScsXG4gICAgbG9nbzogRGVhZFNwYWNlTG9nbyxcbiAgICB0aXRsZTogJ0h1bWFuaXR5IGVuZHMgaGVyZScsXG4gICAgdGV4dDogJ1RoZSBzY2ktZmkgc3Vydml2YWwgaG9ycm9yIGNsYXNzaWMgcmV0dXJucywgcmVidWlsdCB0byBvZmZlciBhIGRlZXBlciBhbmQgbW9yZSBpbW1lcnNpdmUgZXhwZXJpZW5jZSwgb3V0IG5vdyBvbiBQUzUnLFxuICAgIGJ0bjogeyB0ZXh0OiAnRmluZCBvdXQgbW9yZScsIGhyZWY6ICcjJyB9XG4gIH0sXG4gIHtcbiAgICBpZDogMyxcbiAgICBpbWc6IHtcbiAgICAgIGxhcmdlOiBEZWFkU3BhY2VMYXJnZSxcbiAgICAgIG1lZGl1bTogRGVhZFNwYWNlTWVkaXVtLFxuICAgICAgbW9iaWxlOiBEZWFkU3BhY2VNb2JpbGUsXG4gICAgICB0aHVtYjogRGVhZFNwYWNlVGh1bWJcbiAgICB9LFxuICAgIGFsdDogJ2RlYWQgc3BhY2UgZ2FtZScsXG4gICAgbG9nbzogRGVhZFNwYWNlTG9nbyxcbiAgICB0aXRsZTogJ0h1bWFuaXR5IGVuZHMgaGVyZScsXG4gICAgdGV4dDogJ1RoZSBzY2ktZmkgc3Vydml2YWwgaG9ycm9yIGNsYXNzaWMgcmV0dXJucywgcmVidWlsdCB0byBvZmZlciBhIGRlZXBlciBhbmQgbW9yZSBpbW1lcnNpdmUgZXhwZXJpZW5jZSwgb3V0IG5vdyBvbiBQUzUnLFxuICAgIGJ0bjogeyB0ZXh0OiAnRmluZCBvdXQgbW9yZScsIGhyZWY6ICcjJyB9XG4gIH0sXG4gIHtcbiAgICBpZDogNCxcbiAgICBpbWc6IHtcbiAgICAgIGxhcmdlOiBEZWFkU3BhY2VMYXJnZSxcbiAgICAgIG1lZGl1bTogRGVhZFNwYWNlTWVkaXVtLFxuICAgICAgbW9iaWxlOiBEZWFkU3BhY2VNb2JpbGUsXG4gICAgICB0aHVtYjogRGVhZFNwYWNlVGh1bWJcbiAgICB9LFxuICAgIGFsdDogJ2RlYWQgc3BhY2UgZ2FtZScsXG4gICAgbG9nbzogRGVhZFNwYWNlTG9nbyxcbiAgICB0aXRsZTogJ0h1bWFuaXR5IGVuZHMgaGVyZScsXG4gICAgdGV4dDogJ1RoZSBzY2ktZmkgc3Vydml2YWwgaG9ycm9yIGNsYXNzaWMgcmV0dXJucywgcmVidWlsdCB0byBvZmZlciBhIGRlZXBlciBhbmQgbW9yZSBpbW1lcnNpdmUgZXhwZXJpZW5jZSwgb3V0IG5vdyBvbiBQUzUnLFxuICAgIGJ0bjogeyB0ZXh0OiAnRmluZCBvdXQgbW9yZScsIGhyZWY6ICcjJyB9XG4gIH0sXG4gIHtcbiAgICBpZDogNSxcbiAgICBpbWc6IHtcbiAgICAgIGxhcmdlOiBEZWFkU3BhY2VMYXJnZSxcbiAgICAgIG1lZGl1bTogRGVhZFNwYWNlTWVkaXVtLFxuICAgICAgbW9iaWxlOiBEZWFkU3BhY2VNb2JpbGUsXG4gICAgICB0aHVtYjogRGVhZFNwYWNlVGh1bWJcbiAgICB9LFxuICAgIGFsdDogJ2RlYWQgc3BhY2UgZ2FtZScsXG4gICAgbG9nbzogRGVhZFNwYWNlTG9nbyxcbiAgICB0aXRsZTogJ0h1bWFuaXR5IGVuZHMgaGVyZScsXG4gICAgdGV4dDogJ1RoZSBzY2ktZmkgc3Vydml2YWwgaG9ycm9yIGNsYXNzaWMgcmV0dXJucywgcmVidWlsdCB0byBvZmZlciBhIGRlZXBlciBhbmQgbW9yZSBpbW1lcnNpdmUgZXhwZXJpZW5jZSwgb3V0IG5vdyBvbiBQUzUnLFxuICAgIGJ0bjogeyB0ZXh0OiAnRmluZCBvdXQgbW9yZScsIGhyZWY6ICcjJyB9XG4gIH0sXG4gIHtcbiAgICBpZDogNixcbiAgICBpbWc6IHtcbiAgICAgIGxhcmdlOiBEZWFkU3BhY2VMYXJnZSxcbiAgICAgIG1lZGl1bTogRGVhZFNwYWNlTWVkaXVtLFxuICAgICAgbW9iaWxlOiBEZWFkU3BhY2VNb2JpbGUsXG4gICAgICB0aHVtYjogRGVhZFNwYWNlVGh1bWJcbiAgICB9LFxuICAgIGFsdDogJ2RlYWQgc3BhY2UgZ2FtZScsXG4gICAgbG9nbzogRGVhZFNwYWNlTG9nbyxcbiAgICB0aXRsZTogJ0h1bWFuaXR5IGVuZHMgaGVyZScsXG4gICAgdGV4dDogJ1RoZSBzY2ktZmkgc3Vydml2YWwgaG9ycm9yIGNsYXNzaWMgcmV0dXJucywgcmVidWlsdCB0byBvZmZlciBhIGRlZXBlciBhbmQgbW9yZSBpbW1lcnNpdmUgZXhwZXJpZW5jZSwgb3V0IG5vdyBvbiBQUzUnLFxuICAgIGJ0bjogeyB0ZXh0OiAnRmluZCBvdXQgbW9yZScsIGhyZWY6ICcjJyB9XG4gIH0sXG4gIHtcbiAgICBpZDogNyxcbiAgICBpbWc6IHtcbiAgICAgIGxhcmdlOiBMaXZlUFM1TGFyZ2UsXG4gICAgICBtZWRpdW06IExpdmVQUzVNZWRpdW0sXG4gICAgICBtb2JpbGU6IExpdmVQUzVNb2JpbGUsXG4gICAgICB0aHVtYjogTGl2ZVBTNVRodW1iXG4gICAgfSxcbiAgICBsb2dvOiBMaXZlUFM1TG9nbyxcbiAgICBjbGFzc0xvZ286ICdwcy1saXZlJyxcbiAgICBhbHQ6ICdsaXZlIHBzNSBnYW1lJyxcbiAgICB0aXRsZTogJ0JyaW5naW5nIHlvdXIgdGhlIGV4dHJhb3JkaW5hcnknLFxuICAgIHRleHQ6ICdFeHBsb3JlIGluY3JlZGlibGUgd29ybGRzIGFuZCBleHBlcmllbmNlIHRoZSB1bmV4cGVjdGVkLiBTdGFydCB5b3VyIHN0b3J5IHRvZGF5LicsXG4gICAgYnRuOiB7IHRleHQ6ICdGaW5kIG91dCBtb3JlJywgaHJlZjogJyMnIH1cbiAgfVxuXTtcblxuZXhwb3J0IGNvbnN0IHN3aXBlckhhcmR3YXJlRGF0YTogSVN3aXBlckhhcmR3YXJlW10gPSBbXG4gIHtcbiAgICBpZDogMSxcbiAgICBpbWc6IEhhcmR3YXJlUFM1Q29uc29sZSxcbiAgICBhbHQ6ICdQUzUgQ29uc29sZScsXG4gICAgdGl0bGU6ICdQbGF5U3RhdGlvbiA1IENvbnNvbGUnLFxuICAgIHRleHQ6ICdFeHBlcmllbmNlIGFuIGFsbC1uZXcgZ2VuZXJhdGlvbiBvZiBpbmNyZWRpYmxlIFBsYXlTdGF0aW9uIGdhbWVzLiBQUzUgY29uc29sZXMgYXJlIGN1cnJlbnRseSBpbiBzdG9jay4nLFxuICAgIGJ0bjoge1xuICAgICAgbW9yZTogeyB0ZXh0OiAnTGVhcm4gbW9yZScsIGhyZWY6ICcjJyB9LFxuICAgICAgYnV5OiB7IHRleHQ6ICdCdXkgbm93JywgaHJlZjogJyMnIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICBpZDogMixcbiAgICBpbWc6IEhhcmR3YXJlRHVhbENvbGxlY3Rpb24sXG4gICAgYWx0OiAnRHVhbFNlbnNl4oSiIFdpcmVsZXNzIENvbnRyb2xsZXInLFxuICAgIHRpdGxlOiAnRHVhbFNlbnNl4oSiIFdpcmVsZXNzIENvbnRyb2xsZXInLFxuICAgIHRleHQ6ICdJbW1lcnNlIHlvdXJzZWxmIGluIHRoZSBnYW1pbmcgZXhwZXJpZW5jZSB3aXRoIGEgY29udHJvbGxlciB0aGUgc3VwcG9ydHMgcmVzcG9uc2l2ZSBoYXB0aWMgZmVlZGJhY2sgYW5kIGR5bmFtaWMgdHJpZ2dlciBlZmZlY3RzLicsXG4gICAgYnRuOiB7IG1vcmU6IHsgdGV4dDogJ0xlYXJuIG1vcmUnLCBocmVmOiAnIycgfSB9XG4gIH0sXG4gIHtcbiAgICBpZDogMyxcbiAgICBpbWc6IEhhcmR3YXJlSGVhZHNldCxcbiAgICBhbHQ6ICdQVUxTRSAzROKEoiBXaXJlbGVzcyBIZWFkc2V0JyxcbiAgICB0aXRsZTogJ1BVTFNFIDNE4oSiIFdpcmVsZXNzIEhlYWRzZXQnLFxuICAgIHRleHQ6ICdFbmpveSBhIHNlYW1sZXNzIHdpcmVsZXNzIGV4cGVyaWVuY2Ugd2l0aCBhIGhlYWRzZXQgZmluZS10dW5lZCBmb3IgM0QgQXVkaW8gb24gUFM1IGNvbnNvbGVzLicsXG4gICAgYnRuOiB7IG1vcmU6IHsgdGV4dDogJ0xlYXJuIG1vcmUnLCBocmVmOiAnIycgfSB9XG4gIH0sXG4gIHtcbiAgICBpZDogNCxcbiAgICBpbWc6IEhhcmR3YXJlRHVhbEVkZ2UsXG4gICAgYWx0OiAnRHVhbFNlbnNlIEVkZ2XihKIgV2lyZWxlc3MgQ29udHJvbGxlcicsXG4gICAgdGl0bGU6ICdEdWFsU2Vuc2UgRWRnZeKEoiBXaXJlbGVzcyBDb250cm9sbGVyJyxcbiAgICB0ZXh0OiAnR2V0IGFuIGVkZ2UgaW4gZ2FtZXBsYXkgd2l0aCByZW1hcHBhYmxlIGJ1dHRvbnMsIHR1bmFibGUgdHJpZ2dlcnMgYW5kIHN0aWNrcywgY2hhbmdlYWJsZSBzdGljayBjYXBzLCBiYWNrIGJ1dHRvbnMsIGFuZCBtb3JlLicsXG4gICAgYnRuOiB7IG1vcmU6IHsgdGV4dDogJ0xlYXJuIG1vcmUnLCBocmVmOiAnIycgfSB9XG4gIH0sXG4gIHtcbiAgICBpZDogNSxcbiAgICBpbWc6IEhhcmR3YXJlUmVtb3RlLFxuICAgIGFsdDogJ01lZGlhIFJlbW90ZScsXG4gICAgdGl0bGU6ICdNZWRpYSBSZW1vdGUnLFxuICAgIHRleHQ6ICdDb252ZW5pZW50bHkgY29udHJvbCBtb3ZpZXMsIHN0cmVhbWluZyBzZXJ2aWNlcyBhbmQgbW9yZSBvbiB5b3VyIFBTNSBjb25zb2xlIHdpdGggYW4gaW50dWl0aXZlIGxheW91dC4nLFxuICAgIGJ0bjogeyBtb3JlOiB7IHRleHQ6ICdMZWFybiBtb3JlJywgaHJlZjogJyMnIH0gfVxuICB9LFxuICB7XG4gICAgaWQ6IDYsXG4gICAgaW1nOiBIYXJkd2FyZUNhbWVyYSxcbiAgICBhbHQ6ICdIRCBDYW1lcmEnLFxuICAgIHRpdGxlOiAnSEQgQ2FtZXJhJyxcbiAgICB0ZXh0OiAnQWRkIHlvdXJzZWxmIHRvIHlvdXIgZ2FtZXBsYXkgdmlkZW9zIGFuZCBicm9hZGNhc3RzIHdpdGggc21vb3RoLCBzaGFycCwgZnVsbC1IRCBjYXB0dXJlLicsXG4gICAgYnRuOiB7IG1vcmU6IHsgdGV4dDogJ0xlYXJuIG1vcmUnLCBocmVmOiAnIycgfSB9XG4gIH0sXG4gIHtcbiAgICBpZDogNyxcbiAgICBpbWc6IEhhcmR3YXJlUFM1Q292ZXIsXG4gICAgYWx0OiAnUFM1IENvbnNvbGUgQ292ZXJzJyxcbiAgICB0aXRsZTogJ1BTNSBDb25zb2xlIENvdmVycycsXG4gICAgdGV4dDogJ1BlcnNvbmFsaXNlIHlvdXIgUGxheVN0YXRpb24gNSBvciBQbGF5U3RhdGlvbiA1IERpZ2l0YWwgRWRpdGlvbiBjb25zb2xlIHdpdGggYSB2aWJyYW50IGFycmF5IG9mIG5ldyBjb2xvdXIgb3B0aW9ucy4nLFxuICAgIGJ0bjogeyBtb3JlOiB7IHRleHQ6ICdMZWFybiBtb3JlJywgaHJlZjogJyMnIH0gfVxuICB9XG5dO1xuXG5leHBvcnQgY29uc3Qgc3dpcGVyUmFuZG9tR2FtZURhdGE6IGFueSA9IHtcbiAgaW1nOiB7XG4gICAgbGFyZ2U6IFJhbmRvbUdhbWVMYXJnZSxcbiAgICBtb2JpbGU6IFJhbmRvbUdhbWVNb2JpbGVcbiAgfSxcbiAgYWx0OiAnR29kIG9mIFdhciBSYWduYXJvaycsXG4gIGxvZ286IFJhbmRvbUdhbWVMb2dvLFxuICB0aXRsZTogJ1RoZSBOb3JzZSBzYWdhIGNvbnRpbnVlcycsXG4gIHRleHQ6ICcgICBFbWJhcmsgb24gYW4gZXBpeCBhbmQgaGVhcnRmZWx0IGpvdXJuZXkgYXMgS3JhdG9zLCBhbmQgQXRyZXVzLCBzdHJ1Z2dsZSB3aXRoIGhvbGRpbmcgb24gYW5kIGxldHRpbmcgZ28sIGF2YWlsYWJsZSBub3cgb24gUFM0ICYgUFM1JyxcbiAgYnRuOiB7IHRleHQ6ICdCdXkgbm93JywgaHJlZjogJyMnIH1cbn07XG4iLCJpbXBvcnQgJy4vc3dpcGVyL2NyZWF0ZS1ocC10b3AnO1xuaW1wb3J0ICcuL3N3aXBlci9jcmVhdGUtaHAtaGFyZHdhcmUnO1xuXG5pbXBvcnQge1xuICBzbGlkZXJQYXJhbXMsXG4gIHNsaWRlclBhcmFtc0hhcmR3YXJlLFxuICBzbGlkZXJQYXJhbXNUb3Bcbn0gZnJvbSAnLi9zd2lwZXIvc3dpcGVyLXBhcmFtcyc7XG5pbXBvcnQgU3dpcGVyIGZyb20gJ3N3aXBlcic7XG5cbm5ldyBTd2lwZXIoJy5zZWN0aW9uLS10b3Atc3dpcGVyJywgeyAuLi5zbGlkZXJQYXJhbXMsIC4uLnNsaWRlclBhcmFtc1RvcCB9KTtcbm5ldyBTd2lwZXIoJy5zZWN0aW9uLS1oYXJkd2FyZS1zd2lwZXInLCB7IC4uLnNsaWRlclBhcmFtcywgLi4uc2xpZGVyUGFyYW1zSGFyZHdhcmUgfSk7XG4iLCJpbXBvcnQgeyBJU3dpcGVySGFyZHdhcmUgfSBmcm9tICcuLi9saWJzL3R5cGVzJztcbmltcG9ydCB7IHN3aXBlckhhcmR3YXJlRGF0YSB9IGZyb20gJy4uL3NlZWRzL3N3aXBlckRhdGEnO1xuXG5jb25zdCBjcmVhdGVIYXJkd2FyZVNsaWRlID0gKGRhdGE6IElTd2lwZXJIYXJkd2FyZSkgPT4ge1xuICBjb25zdCBkaXZTbGlkZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb25zdCBkaXZDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICBjb25zdCBpbWdUb3AgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuICBjb25zdCBkaXZEZXNjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnN0IGgxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDEnKTtcbiAgY29uc3QgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgY29uc3QgZGl2QnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnN0IGJ0bk1vcmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gIGNvbnN0IGJ0bkJ1eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblxuICBpbWdUb3AuY2xhc3NMaXN0LmFkZCgnc2xpZGUtaW1nJyk7XG4gIGltZ1RvcC5zcmMgPSBkYXRhLmltZztcbiAgaW1nVG9wLmFsdCA9IGAke2RhdGEuYWx0fSBpbWFnZSBzbGlkZWA7XG4gIGltZ1RvcC5sb2FkaW5nID0gJ2xhenknO1xuXG4gIGRpdkRlc2MuY2xhc3NMaXN0LmFkZCgnc2xpZGUtLWhhcmR3YXJlLWRlc2MnKTtcblxuICBoMS5jbGFzc0xpc3QuYWRkKCdzbGlkZS10aXRsZScpO1xuICBoMS50ZXh0Q29udGVudCA9IGRhdGEudGl0bGU7XG5cbiAgcC5jbGFzc0xpc3QuYWRkKCdzbGlkZS10ZXh0Jyk7XG4gIHAudGV4dENvbnRlbnQgPSBkYXRhLnRleHQ7XG5cbiAgZGl2QnRuLmNsYXNzTGlzdC5hZGQoJ3NsaWRlLWJ0bicpO1xuXG4gIGJ0bk1vcmUuY2xhc3NMaXN0LmFkZCgnYnV0dG9uJywgJ2J1dHRvbi0tYm9yZGVyJywgJ2J1dHRvbi0tY29sb3ItYmx1ZScpO1xuICBidG5Nb3JlLnRleHRDb250ZW50ID0gZGF0YS5idG4ubW9yZS50ZXh0O1xuICBidG5Nb3JlLmhyZWYgPSBkYXRhLmJ0bi5tb3JlLmhyZWY7XG4gIGRpdkJ0bi5hcHBlbmRDaGlsZChidG5Nb3JlKTtcbiAgaWYgKGRhdGEuYnRuLmJ1eSkge1xuICAgIGJ0bkJ1eS5jbGFzc0xpc3QuYWRkKCdidXR0b24nLCAnYnV0dG9uLS1ib3JkZXInLCAnYnV0dG9uLS1jb2xvci1vcmFuZ2UnKTtcbiAgICBidG5CdXkudGV4dENvbnRlbnQgPSBkYXRhLmJ0bi5idXkudGV4dDtcbiAgICBidG5CdXkuaHJlZiA9IGRhdGEuYnRuLmJ1eS5ocmVmO1xuICAgIGRpdkJ0bi5hcHBlbmRDaGlsZChidG5CdXkpO1xuICB9XG5cbiAgY29uc3QgZGl2TGF6eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXZMYXp5LmNsYXNzTGlzdC5hZGQoJ3N3aXBlci1sYXp5LXByZWxvYWRlcicsICdzd2lwZXItbGF6eS1wcmVsb2FkZXItd2hpdGUnKTtcblxuICBkaXZEZXNjLmFwcGVuZChoMSwgcCwgZGl2QnRuKTtcblxuICBkaXZTbGlkZS5jbGFzc0xpc3QuYWRkKCdzd2lwZXItc2xpZGUnLCAnc2VjdGlvbi0taGFyZHdhcmUtc2xpZGUnKTtcbiAgZGl2Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3NlY3Rpb24tLWhhcmR3YXJlLWNvbnRlbnQnKTtcbiAgZGl2Q29udGFpbmVyLmFwcGVuZChpbWdUb3AsIGRpdkRlc2MsIGRpdkxhenkpO1xuICBkaXZTbGlkZS5hcHBlbmRDaGlsZChkaXZDb250YWluZXIpO1xuICByZXR1cm4gZGl2U2xpZGU7XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVIYXJkd2FyZVRodW1icyhkYXRhOiBJU3dpcGVySGFyZHdhcmUpIHtcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnN0IGRpdkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb25zdCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgY29uc3QgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcblxuICBpbWcuY2xhc3NMaXN0LmFkZCgnc2VjdGlvbi0tdGh1bWJuYWlsLWltZycpO1xuICBpbWcuc3JjID0gZGF0YS5pbWc7XG4gIGltZy5hbHQgPSBgJHtkYXRhLmFsdH0gdGh1bWJuYWlsIHNsaWRlYDtcbiAgaW1nLmxvYWRpbmcgPSAnbGF6eSc7XG5cbiAgcC50ZXh0Q29udGVudCA9IGRhdGEuYWx0O1xuXG4gIGNvbnN0IGRpdkxhenkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZGl2TGF6eS5jbGFzc0xpc3QuYWRkKCdzd2lwZXItbGF6eS1wcmVsb2FkZXInLCAnc3dpcGVyLWxhenktcHJlbG9hZGVyLXdoaXRlJyk7XG5cbiAgZGl2Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3NlY3Rpb24tLWhhcmR3YXJlLWNvbnRlbnQnKTtcbiAgZGl2Q29udGFpbmVyLmFwcGVuZChpbWcsIHApO1xuICBkaXYuY2xhc3NMaXN0LmFkZChcbiAgICAnc3dpcGVyLXNsaWRlJyxcbiAgICAnc2VjdGlvbi0tdGh1bWJuYWlsLXNsaWRlJyxcbiAgICAnaGFyZHdhcmUtLXRodW1ibmFpbC1zbGlkZSdcbiAgKTtcbiAgZGl2LmFwcGVuZChkaXZDb250YWluZXIpO1xuXG4gIHJldHVybiBkaXY7XG59XG5cbmNvbnN0IHNlY3Rpb25IYXJkd2FyZVdyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAnLnNlY3Rpb24tLWhhcmR3YXJlLXdyYXBwZXInXG4pIGFzIEhUTUxEaXZFbGVtZW50O1xuY29uc3Qgc2VjdGlvbkhhcmR3YXJlVGh1bWJzV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICcuaGFyZHdhcmUtLXRodW1ibmFpbC13cmFwcGVyJ1xuKSBhcyBIVE1MRGl2RWxlbWVudDtcblxuc3dpcGVySGFyZHdhcmVEYXRhLm1hcChkYXRhID0+IHtcbiAgc2VjdGlvbkhhcmR3YXJlV3JhcHBlci5hcHBlbmRDaGlsZChjcmVhdGVIYXJkd2FyZVNsaWRlKGRhdGEpKTtcbiAgc2VjdGlvbkhhcmR3YXJlVGh1bWJzV3JhcHBlci5hcHBlbmRDaGlsZChjcmVhdGVIYXJkd2FyZVRodW1icyhkYXRhKSk7XG59KTtcbiIsImltcG9ydCB7IElTd2lwZXJUb3AgfSBmcm9tICcuLi9saWJzL3R5cGVzJztcbmltcG9ydCB7IHN3aXBlclRvcERhdGEgfSBmcm9tICcuLi9zZWVkcy9zd2lwZXJEYXRhJztcblxuY29uc3QgY3JlYXRlVG9wU2xpZGUgPSAoZGF0YTogSVN3aXBlclRvcCkgPT4ge1xuICBjb25zdCBkaXZTbGlkZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb25zdCBwaWN0dXJlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncGljdHVyZScpO1xuICBjb25zdCBzb3VyY2VMYXJnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NvdXJjZScpO1xuICBjb25zdCBzb3VyY2VNZWRpdW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzb3VyY2UnKTtcbiAgY29uc3Qgc291cmNlU21hbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzb3VyY2UnKTtcbiAgY29uc3QgaW1nVG9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gIGNvbnN0IGFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblxuICBjb25zdCBkaXZEZXNjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnN0IGxvZ28gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgY29uc3QgaDEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdoMScpO1xuICBjb25zdCBwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICBjb25zdCBkaXZCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29uc3QgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuXG4gIHNvdXJjZUxhcmdlLm1lZGlhID0gJyhtaW4td2lkdGg6MTAyNHB4KSc7XG4gIHNvdXJjZUxhcmdlLnNyY3NldCA9IGRhdGEuaW1nLmxhcmdlO1xuXG4gIHNvdXJjZU1lZGl1bS5tZWRpYSA9ICcobWluLXdpZHRoOjcwMHB4KSc7XG4gIHNvdXJjZU1lZGl1bS5zcmNzZXQgPSBkYXRhLmltZy5tZWRpdW07XG5cbiAgc291cmNlU21hbGwuc3Jjc2V0ID0gZGF0YS5pbWcubW9iaWxlO1xuXG4gIGltZ1RvcC5jbGFzc0xpc3QuYWRkKCdzbGlkZS1pbWcnKTtcbiAgaW1nVG9wLnNyYyA9IGRhdGEuaW1nLm1vYmlsZTtcbiAgaW1nVG9wLmFsdCA9IGAke2RhdGEuYWx0fSBpbWFnZSBzbGlkZWA7XG4gIGltZ1RvcC5sb2FkaW5nID0gJ2xhenknO1xuXG4gIHBpY3R1cmUuYXBwZW5kKHNvdXJjZUxhcmdlLCBzb3VyY2VNZWRpdW0sIHNvdXJjZVNtYWxsLCBpbWdUb3ApO1xuXG4gIGFuY2hvci5jbGFzc0xpc3QuYWRkKCdzbGlkZS1saW5rJyk7XG4gIGFuY2hvci5ocmVmID0gJyMnO1xuXG4gIGRpdkRlc2MuY2xhc3NMaXN0LmFkZCgnc2xpZGUtZGVzYycpO1xuXG4gIGxvZ28uY2xhc3NMaXN0LmFkZCgnc2xpZGUtbG9nbycpO1xuICBpZiAoZGF0YS5jbGFzc0xvZ28pIHtcbiAgICBsb2dvLmNsYXNzTGlzdC5hZGQoZGF0YS5jbGFzc0xvZ28pO1xuICB9XG4gIGxvZ28uc3JjID0gZGF0YS5sb2dvO1xuICBsb2dvLmFsdCA9IGAke2RhdGEuYWx0fSBsb2dvYDtcbiAgbG9nby5sb2FkaW5nID0gJ2xhenknO1xuXG4gIGgxLmNsYXNzTGlzdC5hZGQoJ3NsaWRlLXRpdGxlJyk7XG4gIGgxLnRleHRDb250ZW50ID0gZGF0YS50aXRsZTtcblxuICBwLmNsYXNzTGlzdC5hZGQoJ3NsaWRlLXRleHQnKTtcbiAgcC50ZXh0Q29udGVudCA9IGRhdGEudGV4dDtcblxuICBkaXZCdG4uY2xhc3NMaXN0LmFkZCgnc2xpZGUtYnRuJyk7XG5cbiAgYnRuLmNsYXNzTGlzdC5hZGQoJ2J1dHRvbicsICdidXR0b24tLWJvcmRlcicsICdidXR0b24tLWNvbG9yLXdoaXRlJyk7XG4gIGJ0bi50ZXh0Q29udGVudCA9IGRhdGEuYnRuLnRleHQ7XG4gIGJ0bi5ocmVmID0gZGF0YS5idG4uaHJlZjtcbiAgZGl2QnRuLmFwcGVuZENoaWxkKGJ0bik7XG5cbiAgY29uc3QgZGl2TGF6eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXZMYXp5LmNsYXNzTGlzdC5hZGQoJ3N3aXBlci1sYXp5LXByZWxvYWRlcicsICdzd2lwZXItbGF6eS1wcmVsb2FkZXItd2hpdGUnKTtcblxuICBkaXZEZXNjLmFwcGVuZChsb2dvLCBoMSwgcCwgZGl2QnRuKTtcblxuICBkaXZTbGlkZS5jbGFzc0xpc3QuYWRkKCdzd2lwZXItc2xpZGUnLCAnc2VjdGlvbi0tdG9wLXNsaWRlJyk7XG4gIGRpdlNsaWRlLmFwcGVuZChwaWN0dXJlLCBhbmNob3IsIGRpdkRlc2MsIGRpdkxhenkpO1xuXG4gIHJldHVybiBkaXZTbGlkZTtcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRvcFRodW1icyhkYXRhOiBJU3dpcGVyVG9wKSB7XG4gIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb25zdCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcblxuICBpbWcuY2xhc3NMaXN0LmFkZCgnc2VjdGlvbi0tdGh1bWJuYWlsLWltZycpO1xuICBpbWcuc3JjID0gZGF0YS5pbWcudGh1bWI7XG4gIGltZy5hbHQgPSBgJHtkYXRhLmFsdH0gdGh1bWJuYWlsIHNsaWRlYDtcbiAgaW1nLmxvYWRpbmcgPSAnbGF6eSc7XG5cbiAgY29uc3QgZGl2TGF6eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXZMYXp5LmNsYXNzTGlzdC5hZGQoJ3N3aXBlci1sYXp5LXByZWxvYWRlcicsICdzd2lwZXItbGF6eS1wcmVsb2FkZXItd2hpdGUnKTtcblxuICBkaXYuY2xhc3NMaXN0LmFkZCgnc3dpcGVyLXNsaWRlJywgJ3NlY3Rpb24tLXRodW1ibmFpbC1zbGlkZScsICd0b3AtLXRodW1ibmFpbC1zbGlkZScpO1xuICBkaXYuYXBwZW5kKGRpdkxhenksIGltZyk7XG5cbiAgcmV0dXJuIGRpdjtcbn1cblxuY29uc3Qgc2VjdGlvblRvcFdyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAnLnNlY3Rpb24tLXRvcC13cmFwcGVyJ1xuKSBhcyBIVE1MRGl2RWxlbWVudDtcbmNvbnN0IHNlY3Rpb25Ub3BUaHVtYnNXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgJy50b3AtLXRodW1ibmFpbC13cmFwcGVyJ1xuKSBhcyBIVE1MRGl2RWxlbWVudDtcblxuc3dpcGVyVG9wRGF0YS5tYXAoZGF0YSA9PiB7XG4gIHNlY3Rpb25Ub3BXcmFwcGVyLmFwcGVuZENoaWxkKGNyZWF0ZVRvcFNsaWRlKGRhdGEpKTtcbiAgc2VjdGlvblRvcFRodW1ic1dyYXBwZXIuYXBwZW5kQ2hpbGQoY3JlYXRlVG9wVGh1bWJzKGRhdGEpKTtcbn0pO1xuIiwiaW1wb3J0IFN3aXBlciwge1xuICBBdXRvcGxheSxcbiAgRWZmZWN0RmFkZSxcbiAgR3JpZCxcbiAgS2V5Ym9hcmQsXG4gIFBhZ2luYXRpb24sXG4gIFN3aXBlck9wdGlvbnMsXG4gIFRodW1ic1xufSBmcm9tICdzd2lwZXInO1xuaW1wb3J0IHsgc3dpcGVySGFyZHdhcmVEYXRhLCBzd2lwZXJUb3BEYXRhIH0gZnJvbSAnLi4vc2VlZHMvc3dpcGVyRGF0YSc7XG5cbmV4cG9ydCBjb25zdCBzbGlkZXJQYXJhbXM6IFN3aXBlck9wdGlvbnMgPSB7XG4gIG1vZHVsZXM6IFtFZmZlY3RGYWRlLCBUaHVtYnNdLFxuICBlZmZlY3Q6ICdmYWRlJyxcbiAgZmFkZUVmZmVjdDoge1xuICAgIGNyb3NzRmFkZTogdHJ1ZVxuICB9LFxuICBsb29wOiB0cnVlLFxuICB0b3VjaFJhdGlvOiAwLFxuICBzcGVlZDogNTAwXG59O1xuXG5leHBvcnQgY29uc3QgdGh1bWJzUGFyYW1zOiBTd2lwZXJPcHRpb25zID0ge1xuICBtb2R1bGVzOiBbS2V5Ym9hcmQsIEF1dG9wbGF5XSxcbiAgbG9vcDogdHJ1ZSxcbiAgc2xpZGVzUGVyVmlldzogJ2F1dG8nLFxuICBzcGFjZUJldHdlZW46ICcyJScsXG4gIGNlbnRlcmVkU2xpZGVzOiB0cnVlLFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiB0cnVlLFxuICBncmFiQ3Vyc29yOiB0cnVlLFxuICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICBrZXlib2FyZDogdHJ1ZSxcbiAgYXV0b3BsYXk6IHtcbiAgICBkZWxheTogMzAwMCxcbiAgICBzdG9wT25MYXN0U2xpZGU6IHRydWUsXG4gICAgZGlzYWJsZU9uSW50ZXJhY3Rpb246IHRydWUsXG4gICAgcGF1c2VPbk1vdXNlRW50ZXI6IHRydWUsXG4gICAgd2FpdEZvclRyYW5zaXRpb246IHRydWVcbiAgfSxcbiAgc3BlZWQ6IDUwMFxufTtcblxuLyoqIFNsaWRlciBIUCBUb3AgKiovXG5jb25zdCB0aHVtc1BhcmFtc1RvcDogU3dpcGVyT3B0aW9ucyA9IHtcbiAgYnJlYWtwb2ludHM6IHtcbiAgICA3MDA6IHtcbiAgICAgIGxvb3A6IGZhbHNlLFxuICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICAgICAgc3BhY2VCZXR3ZWVuOiA3LFxuICAgICAgc2xpZGVzUGVyVmlldzogc3dpcGVyVG9wRGF0YS5sZW5ndGhcbiAgICB9XG4gIH1cbn07XG5jb25zdCBnYWxsZXJ5VG9wVGh1bWJzID0gbmV3IFN3aXBlcignLnNlY3Rpb24tLXRvcC10aHVtYm5haWxzJywge1xuICAuLi50aHVtYnNQYXJhbXMsXG4gIC4uLnRodW1zUGFyYW1zVG9wXG59KTtcbmV4cG9ydCBjb25zdCBzbGlkZXJQYXJhbXNUb3A6IFN3aXBlck9wdGlvbnMgPSB7XG4gIGxvb3BlZFNsaWRlczogc3dpcGVyVG9wRGF0YS5sZW5ndGgsXG4gIHRodW1iczoge1xuICAgIHN3aXBlcjogZ2FsbGVyeVRvcFRodW1ic1xuICB9XG59O1xuXG4vKiogU2xpZGVyIEhQIEhhcmR3YXJlICoqL1xuY29uc3QgdGh1bXNQYXJhbXNIYXJkd2FyZTogU3dpcGVyT3B0aW9ucyA9IHtcbiAgYnJlYWtwb2ludHM6IHtcbiAgICA3MDA6IHtcbiAgICAgIGxvb3A6IGZhbHNlLFxuICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICAgICAgc3BhY2VCZXR3ZWVuOiA3LFxuICAgICAgc2xpZGVzUGVyVmlldzogc3dpcGVySGFyZHdhcmVEYXRhLmxlbmd0aFxuICAgIH1cbiAgfVxufTtcbmNvbnN0IGdhbGxlcnlIYXJkd2FyZVRodW1icyA9IG5ldyBTd2lwZXIoJy5zZWN0aW9uLS1oYXJkd2FyZS10aHVtYm5haWxzJywge1xuICAuLi50aHVtYnNQYXJhbXMsXG4gIC4uLnRodW1zUGFyYW1zSGFyZHdhcmVcbn0pO1xuZXhwb3J0IGNvbnN0IHNsaWRlclBhcmFtc0hhcmR3YXJlOiBTd2lwZXJPcHRpb25zID0ge1xuICBsb29wZWRTbGlkZXM6IHN3aXBlckhhcmR3YXJlRGF0YS5sZW5ndGgsXG4gIHRodW1iczoge1xuICAgIHN3aXBlcjogZ2FsbGVyeUhhcmR3YXJlVGh1bWJzXG4gIH1cbn07XG5cbi8qKiBTbGlkZXIgSFAgTGlzdCBHYW1lcyAqKi9cbmNvbnN0IGxpc3RHYW1lc1BhcmFtczogU3dpcGVyT3B0aW9ucyA9IHtcbiAgbW9kdWxlczogW1BhZ2luYXRpb24sIEdyaWQsIEtleWJvYXJkXSxcbiAgc2xpZGVzUGVyVmlldzogMixcbiAgc3BhY2VCZXR3ZWVuOiAyMCxcbiAga2V5Ym9hcmQ6IHRydWUsXG4gIHBhZ2luYXRpb246IHtcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIGNsaWNrYWJsZTogdHJ1ZSxcbiAgICB0eXBlOiAnYnVsbGV0cycsXG4gICAgZWw6ICcuc3dpcGVyLXBhZ2luYXRpb24nLFxuICAgIHJlbmRlckJ1bGxldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwic3dpcGVyLXBhZ2luYXRpb24tYnVsbGV0XCI+JyArICc8c3Bhbj48L3NwYW4+JyArICc8L2Rpdj4nO1xuICAgIH1cbiAgfSxcbiAgZ3JpZDoge1xuICAgIGZpbGw6ICdyb3cnLFxuICAgIHJvd3M6IDJcbiAgfSxcbiAgYnJlYWtwb2ludHM6IHtcbiAgICA3Njg6IHtcbiAgICAgIHNsaWRlc1BlclZpZXc6IDQsXG4gICAgICBzcGFjZUJldHdlZW46IDQwLFxuICAgICAgZ3JpZDoge1xuICAgICAgICBmaWxsOiAncm93JyxcbiAgICAgICAgcm93czogM1xuICAgICAgfSxcbiAgICAgIHBhZ2luYXRpb246IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICAgIH1cbiAgICB9LFxuICAgIDEwMjQ6IHtcbiAgICAgIHNsaWRlc1BlclZpZXc6IDYsXG4gICAgICBncmlkOiB7XG4gICAgICAgIHJvd3M6IDJcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbm5ldyBTd2lwZXIoJy5saXN0R2FtZXMtLWNvbnRhaW5lci1uZXdSZWxlYXNlcycsIGxpc3RHYW1lc1BhcmFtcyk7XG5uZXcgU3dpcGVyKCcubGlzdEdhbWVzLS1jb250YWluZXItY29taW5nU29vbicsIGxpc3RHYW1lc1BhcmFtcyk7XG4iLCIvKipcbiAqIFNTUiBXaW5kb3cgNC4wLjJcbiAqIEJldHRlciBoYW5kbGluZyBmb3Igd2luZG93IG9iamVjdCBpbiBTU1IgZW52aXJvbm1lbnRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2xpbWl0czR3ZWIvc3NyLXdpbmRvd1xuICpcbiAqIENvcHlyaWdodCAyMDIxLCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVFxuICpcbiAqIFJlbGVhc2VkIG9uOiBEZWNlbWJlciAxMywgMjAyMVxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gICAgcmV0dXJuIChvYmogIT09IG51bGwgJiZcbiAgICAgICAgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgJ2NvbnN0cnVjdG9yJyBpbiBvYmogJiZcbiAgICAgICAgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xufVxuZnVuY3Rpb24gZXh0ZW5kKHRhcmdldCA9IHt9LCBzcmMgPSB7fSkge1xuICAgIE9iamVjdC5rZXlzKHNyYykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0W2tleV0gPT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtcbiAgICAgICAgZWxzZSBpZiAoaXNPYmplY3Qoc3JjW2tleV0pICYmXG4gICAgICAgICAgICBpc09iamVjdCh0YXJnZXRba2V5XSkgJiZcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNyY1trZXldKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBleHRlbmQodGFyZ2V0W2tleV0sIHNyY1trZXldKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuXG5jb25zdCBzc3JEb2N1bWVudCA9IHtcbiAgICBib2R5OiB7fSxcbiAgICBhZGRFdmVudExpc3RlbmVyKCkgeyB9LFxuICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7IH0sXG4gICAgYWN0aXZlRWxlbWVudDoge1xuICAgICAgICBibHVyKCkgeyB9LFxuICAgICAgICBub2RlTmFtZTogJycsXG4gICAgfSxcbiAgICBxdWVyeVNlbGVjdG9yKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHF1ZXJ5U2VsZWN0b3JBbGwoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9LFxuICAgIGdldEVsZW1lbnRCeUlkKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIGNyZWF0ZUV2ZW50KCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5pdEV2ZW50KCkgeyB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgY3JlYXRlRWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcbiAgICAgICAgICAgIGNoaWxkTm9kZXM6IFtdLFxuICAgICAgICAgICAgc3R5bGU6IHt9LFxuICAgICAgICAgICAgc2V0QXR0cmlidXRlKCkgeyB9LFxuICAgICAgICAgICAgZ2V0RWxlbWVudHNCeVRhZ05hbWUoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUVsZW1lbnROUygpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAgaW1wb3J0Tm9kZSgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBsb2NhdGlvbjoge1xuICAgICAgICBoYXNoOiAnJyxcbiAgICAgICAgaG9zdDogJycsXG4gICAgICAgIGhvc3RuYW1lOiAnJyxcbiAgICAgICAgaHJlZjogJycsXG4gICAgICAgIG9yaWdpbjogJycsXG4gICAgICAgIHBhdGhuYW1lOiAnJyxcbiAgICAgICAgcHJvdG9jb2w6ICcnLFxuICAgICAgICBzZWFyY2g6ICcnLFxuICAgIH0sXG59O1xuZnVuY3Rpb24gZ2V0RG9jdW1lbnQoKSB7XG4gICAgY29uc3QgZG9jID0gdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDoge307XG4gICAgZXh0ZW5kKGRvYywgc3NyRG9jdW1lbnQpO1xuICAgIHJldHVybiBkb2M7XG59XG5cbmNvbnN0IHNzcldpbmRvdyA9IHtcbiAgICBkb2N1bWVudDogc3NyRG9jdW1lbnQsXG4gICAgbmF2aWdhdG9yOiB7XG4gICAgICAgIHVzZXJBZ2VudDogJycsXG4gICAgfSxcbiAgICBsb2NhdGlvbjoge1xuICAgICAgICBoYXNoOiAnJyxcbiAgICAgICAgaG9zdDogJycsXG4gICAgICAgIGhvc3RuYW1lOiAnJyxcbiAgICAgICAgaHJlZjogJycsXG4gICAgICAgIG9yaWdpbjogJycsXG4gICAgICAgIHBhdGhuYW1lOiAnJyxcbiAgICAgICAgcHJvdG9jb2w6ICcnLFxuICAgICAgICBzZWFyY2g6ICcnLFxuICAgIH0sXG4gICAgaGlzdG9yeToge1xuICAgICAgICByZXBsYWNlU3RhdGUoKSB7IH0sXG4gICAgICAgIHB1c2hTdGF0ZSgpIHsgfSxcbiAgICAgICAgZ28oKSB7IH0sXG4gICAgICAgIGJhY2soKSB7IH0sXG4gICAgfSxcbiAgICBDdXN0b21FdmVudDogZnVuY3Rpb24gQ3VzdG9tRXZlbnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcigpIHsgfSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyKCkgeyB9LFxuICAgIGdldENvbXB1dGVkU3R5bGUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRQcm9wZXJ0eVZhbHVlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBJbWFnZSgpIHsgfSxcbiAgICBEYXRlKCkgeyB9LFxuICAgIHNjcmVlbjoge30sXG4gICAgc2V0VGltZW91dCgpIHsgfSxcbiAgICBjbGVhclRpbWVvdXQoKSB7IH0sXG4gICAgbWF0Y2hNZWRpYSgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH0sXG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgMCk7XG4gICAgfSxcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShpZCkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGdldFdpbmRvdygpIHtcbiAgICBjb25zdCB3aW4gPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9O1xuICAgIGV4dGVuZCh3aW4sIHNzcldpbmRvdyk7XG4gICAgcmV0dXJuIHdpbjtcbn1cblxuZXhwb3J0IHsgZXh0ZW5kLCBnZXREb2N1bWVudCwgZ2V0V2luZG93LCBzc3JEb2N1bWVudCwgc3NyV2luZG93IH07XG4iLCJpbXBvcnQgeyBnZXRXaW5kb3csIGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5mdW5jdGlvbiBkZWxldGVQcm9wcyhvYmopIHtcbiAgY29uc3Qgb2JqZWN0ID0gb2JqO1xuICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goa2V5ID0+IHtcbiAgICB0cnkge1xuICAgICAgb2JqZWN0W2tleV0gPSBudWxsO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIG5vIGdldHRlciBmb3Igb2JqZWN0XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBkZWxldGUgb2JqZWN0W2tleV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gc29tZXRoaW5nIGdvdCB3cm9uZ1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBuZXh0VGljayhjYWxsYmFjaywgZGVsYXkgPSAwKSB7XG4gIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkZWxheSk7XG59XG5mdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBEYXRlLm5vdygpO1xufVxuZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IHN0eWxlO1xuICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcbiAgfVxuICBpZiAoIXN0eWxlICYmIGVsLmN1cnJlbnRTdHlsZSkge1xuICAgIHN0eWxlID0gZWwuY3VycmVudFN0eWxlO1xuICB9XG4gIGlmICghc3R5bGUpIHtcbiAgICBzdHlsZSA9IGVsLnN0eWxlO1xuICB9XG4gIHJldHVybiBzdHlsZTtcbn1cbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZShlbCwgYXhpcyA9ICd4Jykge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IG1hdHJpeDtcbiAgbGV0IGN1clRyYW5zZm9ybTtcbiAgbGV0IHRyYW5zZm9ybU1hdHJpeDtcbiAgY29uc3QgY3VyU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcbiAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIHtcbiAgICBjdXJUcmFuc2Zvcm0gPSBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgIGlmIChjdXJUcmFuc2Zvcm0uc3BsaXQoJywnKS5sZW5ndGggPiA2KSB7XG4gICAgICBjdXJUcmFuc2Zvcm0gPSBjdXJUcmFuc2Zvcm0uc3BsaXQoJywgJykubWFwKGEgPT4gYS5yZXBsYWNlKCcsJywgJy4nKSkuam9pbignLCAnKTtcbiAgICB9XG4gICAgLy8gU29tZSBvbGQgdmVyc2lvbnMgb2YgV2Via2l0IGNob2tlIHdoZW4gJ25vbmUnIGlzIHBhc3NlZDsgcGFzc1xuICAgIC8vIGVtcHR5IHN0cmluZyBpbnN0ZWFkIGluIHRoaXMgY2FzZVxuICAgIHRyYW5zZm9ybU1hdHJpeCA9IG5ldyB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KGN1clRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBjdXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zZm9ybU1hdHJpeCA9IGN1clN0eWxlLk1velRyYW5zZm9ybSB8fCBjdXJTdHlsZS5PVHJhbnNmb3JtIHx8IGN1clN0eWxlLk1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLm1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKS5yZXBsYWNlKCd0cmFuc2xhdGUoJywgJ21hdHJpeCgxLCAwLCAwLCAxLCcpO1xuICAgIG1hdHJpeCA9IHRyYW5zZm9ybU1hdHJpeC50b1N0cmluZygpLnNwbGl0KCcsJyk7XG4gIH1cbiAgaWYgKGF4aXMgPT09ICd4Jykge1xuICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDE7XG4gICAgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTJdKTtcbiAgICAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzRdKTtcbiAgfVxuICBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MjtcbiAgICAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxM10pO1xuICAgIC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNV0pO1xuICB9XG4gIHJldHVybiBjdXJUcmFuc2Zvcm0gfHwgMDtcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0KG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBvICE9PSBudWxsICYmIG8uY29uc3RydWN0b3IgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKSA9PT0gJ09iamVjdCc7XG59XG5mdW5jdGlvbiBpc05vZGUobm9kZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbiAgfVxuICByZXR1cm4gbm9kZSAmJiAobm9kZS5ub2RlVHlwZSA9PT0gMSB8fCBub2RlLm5vZGVUeXBlID09PSAxMSk7XG59XG5mdW5jdGlvbiBleHRlbmQoLi4uYXJncykge1xuICBjb25zdCB0byA9IE9iamVjdChhcmdzWzBdKTtcbiAgY29uc3Qgbm9FeHRlbmQgPSBbJ19fcHJvdG9fXycsICdjb25zdHJ1Y3RvcicsICdwcm90b3R5cGUnXTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmdzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgbmV4dFNvdXJjZSA9IGFyZ3NbaV07XG4gICAgaWYgKG5leHRTb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBuZXh0U291cmNlICE9PSBudWxsICYmICFpc05vZGUobmV4dFNvdXJjZSkpIHtcbiAgICAgIGNvbnN0IGtleXNBcnJheSA9IE9iamVjdC5rZXlzKE9iamVjdChuZXh0U291cmNlKSkuZmlsdGVyKGtleSA9PiBub0V4dGVuZC5pbmRleE9mKGtleSkgPCAwKTtcbiAgICAgIGZvciAobGV0IG5leHRJbmRleCA9IDAsIGxlbiA9IGtleXNBcnJheS5sZW5ndGg7IG5leHRJbmRleCA8IGxlbjsgbmV4dEluZGV4ICs9IDEpIHtcbiAgICAgICAgY29uc3QgbmV4dEtleSA9IGtleXNBcnJheVtuZXh0SW5kZXhdO1xuICAgICAgICBjb25zdCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihuZXh0U291cmNlLCBuZXh0S2V5KTtcbiAgICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCAmJiBkZXNjLmVudW1lcmFibGUpIHtcbiAgICAgICAgICBpZiAoaXNPYmplY3QodG9bbmV4dEtleV0pICYmIGlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICBpZiAobmV4dFNvdXJjZVtuZXh0S2V5XS5fX3N3aXBlcl9fKSB7XG4gICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICghaXNPYmplY3QodG9bbmV4dEtleV0pICYmIGlzT2JqZWN0KG5leHRTb3VyY2VbbmV4dEtleV0pKSB7XG4gICAgICAgICAgICB0b1tuZXh0S2V5XSA9IHt9O1xuICAgICAgICAgICAgaWYgKG5leHRTb3VyY2VbbmV4dEtleV0uX19zd2lwZXJfXykge1xuICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0bztcbn1cbmZ1bmN0aW9uIHNldENTU1Byb3BlcnR5KGVsLCB2YXJOYW1lLCB2YXJWYWx1ZSkge1xuICBlbC5zdHlsZS5zZXRQcm9wZXJ0eSh2YXJOYW1lLCB2YXJWYWx1ZSk7XG59XG5mdW5jdGlvbiBhbmltYXRlQ1NTTW9kZVNjcm9sbCh7XG4gIHN3aXBlcixcbiAgdGFyZ2V0UG9zaXRpb24sXG4gIHNpZGVcbn0pIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IHN0YXJ0UG9zaXRpb24gPSAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgbGV0IHN0YXJ0VGltZSA9IG51bGw7XG4gIGxldCB0aW1lO1xuICBjb25zdCBkdXJhdGlvbiA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnbm9uZSc7XG4gIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShzd2lwZXIuY3NzTW9kZUZyYW1lSUQpO1xuICBjb25zdCBkaXIgPSB0YXJnZXRQb3NpdGlvbiA+IHN0YXJ0UG9zaXRpb24gPyAnbmV4dCcgOiAncHJldic7XG4gIGNvbnN0IGlzT3V0T2ZCb3VuZCA9IChjdXJyZW50LCB0YXJnZXQpID0+IHtcbiAgICByZXR1cm4gZGlyID09PSAnbmV4dCcgJiYgY3VycmVudCA+PSB0YXJnZXQgfHwgZGlyID09PSAncHJldicgJiYgY3VycmVudCA8PSB0YXJnZXQ7XG4gIH07XG4gIGNvbnN0IGFuaW1hdGUgPSAoKSA9PiB7XG4gICAgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgIHN0YXJ0VGltZSA9IHRpbWU7XG4gICAgfVxuICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gZHVyYXRpb24sIDEpLCAwKTtcbiAgICBjb25zdCBlYXNlUHJvZ3Jlc3MgPSAwLjUgLSBNYXRoLmNvcyhwcm9ncmVzcyAqIE1hdGguUEkpIC8gMjtcbiAgICBsZXQgY3VycmVudFBvc2l0aW9uID0gc3RhcnRQb3NpdGlvbiArIGVhc2VQcm9ncmVzcyAqICh0YXJnZXRQb3NpdGlvbiAtIHN0YXJ0UG9zaXRpb24pO1xuICAgIGlmIChpc091dE9mQm91bmQoY3VycmVudFBvc2l0aW9uLCB0YXJnZXRQb3NpdGlvbikpIHtcbiAgICAgIGN1cnJlbnRQb3NpdGlvbiA9IHRhcmdldFBvc2l0aW9uO1xuICAgIH1cbiAgICBzd2lwZXIud3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgIFtzaWRlXTogY3VycmVudFBvc2l0aW9uXG4gICAgfSk7XG4gICAgaWYgKGlzT3V0T2ZCb3VuZChjdXJyZW50UG9zaXRpb24sIHRhcmdldFBvc2l0aW9uKSkge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICcnO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSAnJztcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgICAgW3NpZGVdOiBjdXJyZW50UG9zaXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShzd2lwZXIuY3NzTW9kZUZyYW1lSUQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZXIuY3NzTW9kZUZyYW1lSUQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xuICB9O1xuICBhbmltYXRlKCk7XG59XG5mdW5jdGlvbiBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpIHtcbiAgcmV0dXJuIHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS10cmFuc2Zvcm0nKSB8fCBzbGlkZUVsLnNoYWRvd0VsICYmIHNsaWRlRWwuc2hhZG93RWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS10cmFuc2Zvcm0nKSB8fCBzbGlkZUVsO1xufVxuZnVuY3Rpb24gZmluZEVsZW1lbnRzSW5FbGVtZW50cyhlbGVtZW50cyA9IFtdLCBzZWxlY3RvciA9ICcnKSB7XG4gIGNvbnN0IGZvdW5kID0gW107XG4gIGVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgIGZvdW5kLnB1c2goLi4uZWwucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xuICB9KTtcbiAgcmV0dXJuIGZvdW5kO1xufVxuZnVuY3Rpb24gZWxlbWVudENoaWxkcmVuKGVsZW1lbnQsIHNlbGVjdG9yID0gJycpIHtcbiAgcmV0dXJuIFsuLi5lbGVtZW50LmNoaWxkcmVuXS5maWx0ZXIoZWwgPT4gZWwubWF0Y2hlcyhzZWxlY3RvcikpO1xufVxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0YWcsIGNsYXNzZXMgPSBbXSkge1xuICBjb25zdCBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnKTtcbiAgZWwuY2xhc3NMaXN0LmFkZCguLi4oQXJyYXkuaXNBcnJheShjbGFzc2VzKSA/IGNsYXNzZXMgOiBbY2xhc3Nlc10pKTtcbiAgcmV0dXJuIGVsO1xufVxuZnVuY3Rpb24gZWxlbWVudE9mZnNldChlbCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCBib3ggPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3QgYm9keSA9IGRvY3VtZW50LmJvZHk7XG4gIGNvbnN0IGNsaWVudFRvcCA9IGVsLmNsaWVudFRvcCB8fCBib2R5LmNsaWVudFRvcCB8fCAwO1xuICBjb25zdCBjbGllbnRMZWZ0ID0gZWwuY2xpZW50TGVmdCB8fCBib2R5LmNsaWVudExlZnQgfHwgMDtcbiAgY29uc3Qgc2Nyb2xsVG9wID0gZWwgPT09IHdpbmRvdyA/IHdpbmRvdy5zY3JvbGxZIDogZWwuc2Nyb2xsVG9wO1xuICBjb25zdCBzY3JvbGxMZWZ0ID0gZWwgPT09IHdpbmRvdyA/IHdpbmRvdy5zY3JvbGxYIDogZWwuc2Nyb2xsTGVmdDtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IGJveC50b3AgKyBzY3JvbGxUb3AgLSBjbGllbnRUb3AsXG4gICAgbGVmdDogYm94LmxlZnQgKyBzY3JvbGxMZWZ0IC0gY2xpZW50TGVmdFxuICB9O1xufVxuZnVuY3Rpb24gZWxlbWVudFByZXZBbGwoZWwsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IHByZXZFbHMgPSBbXTtcbiAgd2hpbGUgKGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICBjb25zdCBwcmV2ID0gZWwucHJldmlvdXNFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKHByZXYubWF0Y2hlcyhzZWxlY3RvcikpIHByZXZFbHMucHVzaChwcmV2KTtcbiAgICB9IGVsc2UgcHJldkVscy5wdXNoKHByZXYpO1xuICAgIGVsID0gcHJldjtcbiAgfVxuICByZXR1cm4gcHJldkVscztcbn1cbmZ1bmN0aW9uIGVsZW1lbnROZXh0QWxsKGVsLCBzZWxlY3Rvcikge1xuICBjb25zdCBuZXh0RWxzID0gW107XG4gIHdoaWxlIChlbC5uZXh0RWxlbWVudFNpYmxpbmcpIHtcbiAgICBjb25zdCBuZXh0ID0gZWwubmV4dEVsZW1lbnRTaWJsaW5nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAobmV4dC5tYXRjaGVzKHNlbGVjdG9yKSkgbmV4dEVscy5wdXNoKG5leHQpO1xuICAgIH0gZWxzZSBuZXh0RWxzLnB1c2gobmV4dCk7XG4gICAgZWwgPSBuZXh0O1xuICB9XG4gIHJldHVybiBuZXh0RWxzO1xufVxuZnVuY3Rpb24gZWxlbWVudFN0eWxlKGVsLCBwcm9wKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUocHJvcCk7XG59XG5mdW5jdGlvbiBlbGVtZW50SW5kZXgoZWwpIHtcbiAgbGV0IGNoaWxkID0gZWw7XG4gIGxldCBpO1xuICBpZiAoY2hpbGQpIHtcbiAgICBpID0gMDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICB3aGlsZSAoKGNoaWxkID0gY2hpbGQucHJldmlvdXNTaWJsaW5nKSAhPT0gbnVsbCkge1xuICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSBpICs9IDE7XG4gICAgfVxuICAgIHJldHVybiBpO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBlbGVtZW50UGFyZW50cyhlbCwgc2VsZWN0b3IpIHtcbiAgY29uc3QgcGFyZW50cyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGxldCBwYXJlbnQgPSBlbC5wYXJlbnRFbGVtZW50OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIHdoaWxlIChwYXJlbnQpIHtcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChwYXJlbnQubWF0Y2hlcyhzZWxlY3RvcikpIHBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIHBhcmVudHM7XG59XG5mdW5jdGlvbiBlbGVtZW50VHJhbnNpdGlvbkVuZChlbCwgY2FsbGJhY2spIHtcbiAgZnVuY3Rpb24gZmlyZUNhbGxCYWNrKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgIT09IGVsKSByZXR1cm47XG4gICAgY2FsbGJhY2suY2FsbChlbCwgZSk7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGZpcmVDYWxsQmFjayk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVsZW1lbnRPdXRlclNpemUoZWwsIHNpemUsIGluY2x1ZGVNYXJnaW5zKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBpZiAoaW5jbHVkZU1hcmdpbnMpIHtcbiAgICByZXR1cm4gZWxbc2l6ZSA9PT0gJ3dpZHRoJyA/ICdvZmZzZXRXaWR0aCcgOiAnb2Zmc2V0SGVpZ2h0J10gKyBwYXJzZUZsb2F0KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHNpemUgPT09ICd3aWR0aCcgPyAnbWFyZ2luLXJpZ2h0JyA6ICdtYXJnaW4tdG9wJykpICsgcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShzaXplID09PSAnd2lkdGgnID8gJ21hcmdpbi1sZWZ0JyA6ICdtYXJnaW4tYm90dG9tJykpO1xuICB9XG4gIHJldHVybiBlbC5vZmZzZXRXaWR0aDtcbn1cbmV4cG9ydCB7IGFuaW1hdGVDU1NNb2RlU2Nyb2xsLCBkZWxldGVQcm9wcywgbmV4dFRpY2ssIG5vdywgZ2V0VHJhbnNsYXRlLCBpc09iamVjdCwgZXh0ZW5kLCBnZXRDb21wdXRlZFN0eWxlLCBzZXRDU1NQcm9wZXJ0eSwgZ2V0U2xpZGVUcmFuc2Zvcm1FbCxcbi8vIGRvbVxuZmluZEVsZW1lbnRzSW5FbGVtZW50cywgY3JlYXRlRWxlbWVudCwgZWxlbWVudENoaWxkcmVuLCBlbGVtZW50T2Zmc2V0LCBlbGVtZW50UHJldkFsbCwgZWxlbWVudE5leHRBbGwsIGVsZW1lbnRTdHlsZSwgZWxlbWVudEluZGV4LCBlbGVtZW50UGFyZW50cywgZWxlbWVudFRyYW5zaXRpb25FbmQsIGVsZW1lbnRPdXRlclNpemUgfTsiLCJpbXBvcnQgeyBnZXRXaW5kb3csIGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5sZXQgc3VwcG9ydDtcbmZ1bmN0aW9uIGNhbGNTdXBwb3J0KCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICByZXR1cm4ge1xuICAgIHNtb290aFNjcm9sbDogZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmICdzY3JvbGxCZWhhdmlvcicgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLFxuICAgIHRvdWNoOiAhISgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHwgd2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiB3aW5kb3cuRG9jdW1lbnRUb3VjaClcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFN1cHBvcnQoKSB7XG4gIGlmICghc3VwcG9ydCkge1xuICAgIHN1cHBvcnQgPSBjYWxjU3VwcG9ydCgpO1xuICB9XG4gIHJldHVybiBzdXBwb3J0O1xufVxuZXhwb3J0IHsgZ2V0U3VwcG9ydCB9OyIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0IHsgZ2V0U3VwcG9ydCB9IGZyb20gJy4vZ2V0LXN1cHBvcnQuanMnO1xubGV0IGRldmljZUNhY2hlZDtcbmZ1bmN0aW9uIGNhbGNEZXZpY2Uoe1xuICB1c2VyQWdlbnRcbn0gPSB7fSkge1xuICBjb25zdCBzdXBwb3J0ID0gZ2V0U3VwcG9ydCgpO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgcGxhdGZvcm0gPSB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtO1xuICBjb25zdCB1YSA9IHVzZXJBZ2VudCB8fCB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgY29uc3QgZGV2aWNlID0ge1xuICAgIGlvczogZmFsc2UsXG4gICAgYW5kcm9pZDogZmFsc2VcbiAgfTtcbiAgY29uc3Qgc2NyZWVuV2lkdGggPSB3aW5kb3cuc2NyZWVuLndpZHRoO1xuICBjb25zdCBzY3JlZW5IZWlnaHQgPSB3aW5kb3cuc2NyZWVuLmhlaWdodDtcbiAgY29uc3QgYW5kcm9pZCA9IHVhLm1hdGNoKC8oQW5kcm9pZCk7P1tcXHNcXC9dKyhbXFxkLl0rKT8vKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBsZXQgaXBhZCA9IHVhLm1hdGNoKC8oaVBhZCkuKk9TXFxzKFtcXGRfXSspLyk7XG4gIGNvbnN0IGlwb2QgPSB1YS5tYXRjaCgvKGlQb2QpKC4qT1NcXHMoW1xcZF9dKykpPy8pO1xuICBjb25zdCBpcGhvbmUgPSAhaXBhZCAmJiB1YS5tYXRjaCgvKGlQaG9uZVxcc09TfGlPUylcXHMoW1xcZF9dKykvKTtcbiAgY29uc3Qgd2luZG93cyA9IHBsYXRmb3JtID09PSAnV2luMzInO1xuICBsZXQgbWFjb3MgPSBwbGF0Zm9ybSA9PT0gJ01hY0ludGVsJztcblxuICAvLyBpUGFkT3MgMTMgZml4XG4gIGNvbnN0IGlQYWRTY3JlZW5zID0gWycxMDI0eDEzNjYnLCAnMTM2NngxMDI0JywgJzgzNHgxMTk0JywgJzExOTR4ODM0JywgJzgzNHgxMTEyJywgJzExMTJ4ODM0JywgJzc2OHgxMDI0JywgJzEwMjR4NzY4JywgJzgyMHgxMTgwJywgJzExODB4ODIwJywgJzgxMHgxMDgwJywgJzEwODB4ODEwJ107XG4gIGlmICghaXBhZCAmJiBtYWNvcyAmJiBzdXBwb3J0LnRvdWNoICYmIGlQYWRTY3JlZW5zLmluZGV4T2YoYCR7c2NyZWVuV2lkdGh9eCR7c2NyZWVuSGVpZ2h0fWApID49IDApIHtcbiAgICBpcGFkID0gdWEubWF0Y2goLyhWZXJzaW9uKVxcLyhbXFxkLl0rKS8pO1xuICAgIGlmICghaXBhZCkgaXBhZCA9IFswLCAxLCAnMTNfMF8wJ107XG4gICAgbWFjb3MgPSBmYWxzZTtcbiAgfVxuXG4gIC8vIEFuZHJvaWRcbiAgaWYgKGFuZHJvaWQgJiYgIXdpbmRvd3MpIHtcbiAgICBkZXZpY2Uub3MgPSAnYW5kcm9pZCc7XG4gICAgZGV2aWNlLmFuZHJvaWQgPSB0cnVlO1xuICB9XG4gIGlmIChpcGFkIHx8IGlwaG9uZSB8fCBpcG9kKSB7XG4gICAgZGV2aWNlLm9zID0gJ2lvcyc7XG4gICAgZGV2aWNlLmlvcyA9IHRydWU7XG4gIH1cblxuICAvLyBFeHBvcnQgb2JqZWN0XG4gIHJldHVybiBkZXZpY2U7XG59XG5mdW5jdGlvbiBnZXREZXZpY2Uob3ZlcnJpZGVzID0ge30pIHtcbiAgaWYgKCFkZXZpY2VDYWNoZWQpIHtcbiAgICBkZXZpY2VDYWNoZWQgPSBjYWxjRGV2aWNlKG92ZXJyaWRlcyk7XG4gIH1cbiAgcmV0dXJuIGRldmljZUNhY2hlZDtcbn1cbmV4cG9ydCB7IGdldERldmljZSB9OyIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xubGV0IGJyb3dzZXI7XG5mdW5jdGlvbiBjYWxjQnJvd3NlcigpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBuZWVkUGVyc3BlY3RpdmVGaXggPSBmYWxzZTtcbiAgZnVuY3Rpb24gaXNTYWZhcmkoKSB7XG4gICAgY29uc3QgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiB1YS5pbmRleE9mKCdzYWZhcmknKSA+PSAwICYmIHVhLmluZGV4T2YoJ2Nocm9tZScpIDwgMCAmJiB1YS5pbmRleE9mKCdhbmRyb2lkJykgPCAwO1xuICB9XG4gIGlmIChpc1NhZmFyaSgpKSB7XG4gICAgY29uc3QgdWEgPSBTdHJpbmcod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGlmICh1YS5pbmNsdWRlcygnVmVyc2lvbi8nKSkge1xuICAgICAgY29uc3QgW21ham9yLCBtaW5vcl0gPSB1YS5zcGxpdCgnVmVyc2lvbi8nKVsxXS5zcGxpdCgnICcpWzBdLnNwbGl0KCcuJykubWFwKG51bSA9PiBOdW1iZXIobnVtKSk7XG4gICAgICBuZWVkUGVyc3BlY3RpdmVGaXggPSBtYWpvciA8IDE2IHx8IG1ham9yID09PSAxNiAmJiBtaW5vciA8IDI7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgaXNTYWZhcmk6IG5lZWRQZXJzcGVjdGl2ZUZpeCB8fCBpc1NhZmFyaSgpLFxuICAgIG5lZWRQZXJzcGVjdGl2ZUZpeCxcbiAgICBpc1dlYlZpZXc6IC8oaVBob25lfGlQb2R8aVBhZCkuKkFwcGxlV2ViS2l0KD8hLipTYWZhcmkpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEJyb3dzZXIoKSB7XG4gIGlmICghYnJvd3Nlcikge1xuICAgIGJyb3dzZXIgPSBjYWxjQnJvd3NlcigpO1xuICB9XG4gIHJldHVybiBicm93c2VyO1xufVxuZXhwb3J0IHsgZ2V0QnJvd3NlciB9OyIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVyc2NvcmUtZGFuZ2xlICovXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgb24oZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgbWV0aG9kID0gcHJpb3JpdHkgPyAndW5zaGlmdCcgOiAncHVzaCc7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF1bbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb25jZShldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBmdW5jdGlvbiBvbmNlSGFuZGxlciguLi5hcmdzKSB7XG4gICAgICBzZWxmLm9mZihldmVudHMsIG9uY2VIYW5kbGVyKTtcbiAgICAgIGlmIChvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eSkge1xuICAgICAgICBkZWxldGUgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHk7XG4gICAgICB9XG4gICAgICBoYW5kbGVyLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICAgIH1cbiAgICBvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eSA9IGhhbmRsZXI7XG4gICAgcmV0dXJuIHNlbGYub24oZXZlbnRzLCBvbmNlSGFuZGxlciwgcHJpb3JpdHkpO1xuICB9LFxuICBvbkFueShoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgbWV0aG9kID0gcHJpb3JpdHkgPyAndW5zaGlmdCcgOiAncHVzaCc7XG4gICAgaWYgKHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcikgPCAwKSB7XG4gICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVyc1ttZXRob2RdKGhhbmRsZXIpO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb2ZmQW55KGhhbmRsZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAoIXNlbGYuZXZlbnRzQW55TGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBjb25zdCBpbmRleCA9IHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcik7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBvZmYoZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goKGV2ZW50SGFuZGxlciwgaW5kZXgpID0+IHtcbiAgICAgICAgICBpZiAoZXZlbnRIYW5kbGVyID09PSBoYW5kbGVyIHx8IGV2ZW50SGFuZGxlci5fX2VtaXR0ZXJQcm94eSAmJiBldmVudEhhbmRsZXIuX19lbWl0dGVyUHJveHkgPT09IGhhbmRsZXIpIHtcbiAgICAgICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIGVtaXQoLi4uYXJncykge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGxldCBldmVudHM7XG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGNvbnRleHQ7XG4gICAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAnc3RyaW5nJyB8fCBBcnJheS5pc0FycmF5KGFyZ3NbMF0pKSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdO1xuICAgICAgZGF0YSA9IGFyZ3Muc2xpY2UoMSwgYXJncy5sZW5ndGgpO1xuICAgICAgY29udGV4dCA9IHNlbGY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF0uZXZlbnRzO1xuICAgICAgZGF0YSA9IGFyZ3NbMF0uZGF0YTtcbiAgICAgIGNvbnRleHQgPSBhcmdzWzBdLmNvbnRleHQgfHwgc2VsZjtcbiAgICB9XG4gICAgZGF0YS51bnNoaWZ0KGNvbnRleHQpO1xuICAgIGNvbnN0IGV2ZW50c0FycmF5ID0gQXJyYXkuaXNBcnJheShldmVudHMpID8gZXZlbnRzIDogZXZlbnRzLnNwbGl0KCcgJyk7XG4gICAgZXZlbnRzQXJyYXkuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBpZiAoc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmZvckVhY2goZXZlbnRIYW5kbGVyID0+IHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgW2V2ZW50LCAuLi5kYXRhXSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaChldmVudEhhbmRsZXIgPT4ge1xuICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseShjb250ZXh0LCBkYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cbn07IiwiaW1wb3J0IHVwZGF0ZVNpemUgZnJvbSAnLi91cGRhdGVTaXplLmpzJztcbmltcG9ydCB1cGRhdGVTbGlkZXMgZnJvbSAnLi91cGRhdGVTbGlkZXMuanMnO1xuaW1wb3J0IHVwZGF0ZUF1dG9IZWlnaHQgZnJvbSAnLi91cGRhdGVBdXRvSGVpZ2h0LmpzJztcbmltcG9ydCB1cGRhdGVTbGlkZXNPZmZzZXQgZnJvbSAnLi91cGRhdGVTbGlkZXNPZmZzZXQuanMnO1xuaW1wb3J0IHVwZGF0ZVNsaWRlc1Byb2dyZXNzIGZyb20gJy4vdXBkYXRlU2xpZGVzUHJvZ3Jlc3MuanMnO1xuaW1wb3J0IHVwZGF0ZVByb2dyZXNzIGZyb20gJy4vdXBkYXRlUHJvZ3Jlc3MuanMnO1xuaW1wb3J0IHVwZGF0ZVNsaWRlc0NsYXNzZXMgZnJvbSAnLi91cGRhdGVTbGlkZXNDbGFzc2VzLmpzJztcbmltcG9ydCB1cGRhdGVBY3RpdmVJbmRleCBmcm9tICcuL3VwZGF0ZUFjdGl2ZUluZGV4LmpzJztcbmltcG9ydCB1cGRhdGVDbGlja2VkU2xpZGUgZnJvbSAnLi91cGRhdGVDbGlja2VkU2xpZGUuanMnO1xuZXhwb3J0IGRlZmF1bHQge1xuICB1cGRhdGVTaXplLFxuICB1cGRhdGVTbGlkZXMsXG4gIHVwZGF0ZUF1dG9IZWlnaHQsXG4gIHVwZGF0ZVNsaWRlc09mZnNldCxcbiAgdXBkYXRlU2xpZGVzUHJvZ3Jlc3MsXG4gIHVwZGF0ZVByb2dyZXNzLFxuICB1cGRhdGVTbGlkZXNDbGFzc2VzLFxuICB1cGRhdGVBY3RpdmVJbmRleCxcbiAgdXBkYXRlQ2xpY2tlZFNsaWRlXG59OyIsImltcG9ydCB7IGVsZW1lbnRTdHlsZSB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVTaXplKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBsZXQgd2lkdGg7XG4gIGxldCBoZWlnaHQ7XG4gIGNvbnN0IGVsID0gc3dpcGVyLmVsO1xuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMud2lkdGggIT09ICd1bmRlZmluZWQnICYmIHN3aXBlci5wYXJhbXMud2lkdGggIT09IG51bGwpIHtcbiAgICB3aWR0aCA9IHN3aXBlci5wYXJhbXMud2lkdGg7XG4gIH0gZWxzZSB7XG4gICAgd2lkdGggPSBlbC5jbGllbnRXaWR0aDtcbiAgfVxuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gbnVsbCkge1xuICAgIGhlaWdodCA9IHN3aXBlci5wYXJhbXMuaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGhlaWdodCA9IGVsLmNsaWVudEhlaWdodDtcbiAgfVxuICBpZiAod2lkdGggPT09IDAgJiYgc3dpcGVyLmlzSG9yaXpvbnRhbCgpIHx8IGhlaWdodCA9PT0gMCAmJiBzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gU3VidHJhY3QgcGFkZGluZ3NcbiAgd2lkdGggPSB3aWR0aCAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctbGVmdCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctcmlnaHQnKSB8fCAwLCAxMCk7XG4gIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctdG9wJykgfHwgMCwgMTApIC0gcGFyc2VJbnQoZWxlbWVudFN0eWxlKGVsLCAncGFkZGluZy1ib3R0b20nKSB8fCAwLCAxMCk7XG4gIGlmIChOdW1iZXIuaXNOYU4od2lkdGgpKSB3aWR0aCA9IDA7XG4gIGlmIChOdW1iZXIuaXNOYU4oaGVpZ2h0KSkgaGVpZ2h0ID0gMDtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgc2l6ZTogc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gd2lkdGggOiBoZWlnaHRcbiAgfSk7XG59IiwiaW1wb3J0IHsgZWxlbWVudENoaWxkcmVuLCBlbGVtZW50T3V0ZXJTaXplLCBlbGVtZW50U3R5bGUsIHNldENTU1Byb3BlcnR5IH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVNsaWRlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgZnVuY3Rpb24gZ2V0RGlyZWN0aW9uTGFiZWwocHJvcGVydHkpIHtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICByZXR1cm4gcHJvcGVydHk7XG4gICAgfVxuICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgIHJldHVybiB7XG4gICAgICAnd2lkdGgnOiAnaGVpZ2h0JyxcbiAgICAgICdtYXJnaW4tdG9wJzogJ21hcmdpbi1sZWZ0JyxcbiAgICAgICdtYXJnaW4tYm90dG9tICc6ICdtYXJnaW4tcmlnaHQnLFxuICAgICAgJ21hcmdpbi1sZWZ0JzogJ21hcmdpbi10b3AnLFxuICAgICAgJ21hcmdpbi1yaWdodCc6ICdtYXJnaW4tYm90dG9tJyxcbiAgICAgICdwYWRkaW5nLWxlZnQnOiAncGFkZGluZy10b3AnLFxuICAgICAgJ3BhZGRpbmctcmlnaHQnOiAncGFkZGluZy1ib3R0b20nLFxuICAgICAgJ21hcmdpblJpZ2h0JzogJ21hcmdpbkJvdHRvbSdcbiAgICB9W3Byb3BlcnR5XTtcbiAgfVxuICBmdW5jdGlvbiBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKG5vZGUsIGxhYmVsKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQobm9kZS5nZXRQcm9wZXJ0eVZhbHVlKGdldERpcmVjdGlvbkxhYmVsKGxhYmVsKSkgfHwgMCk7XG4gIH1cbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3Qge1xuICAgIHdyYXBwZXJFbCxcbiAgICBzbGlkZXNFbCxcbiAgICBzaXplOiBzd2lwZXJTaXplLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHdyb25nUlRMXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICBjb25zdCBzbGlkZXMgPSBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gIGxldCBzbmFwR3JpZCA9IFtdO1xuICBjb25zdCBzbGlkZXNHcmlkID0gW107XG4gIGNvbnN0IHNsaWRlc1NpemVzR3JpZCA9IFtdO1xuICBsZXQgb2Zmc2V0QmVmb3JlID0gcGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZTtcbiAgaWYgKHR5cGVvZiBvZmZzZXRCZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlLmNhbGwoc3dpcGVyKTtcbiAgfVxuICBsZXQgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXI7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0QWZ0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlci5jYWxsKHN3aXBlcik7XG4gIH1cbiAgY29uc3QgcHJldmlvdXNTbmFwR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCA9IHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aDtcbiAgbGV0IHNwYWNlQmV0d2VlbiA9IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gIGxldCBzbGlkZVBvc2l0aW9uID0gLW9mZnNldEJlZm9yZTtcbiAgbGV0IHByZXZTbGlkZVNpemUgPSAwO1xuICBsZXQgaW5kZXggPSAwO1xuICBpZiAodHlwZW9mIHN3aXBlclNpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbi5yZXBsYWNlKCclJywgJycpKSAvIDEwMCAqIHN3aXBlclNpemU7XG4gIH1cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gLXNwYWNlQmV0d2VlbjtcblxuICAvLyByZXNldCBtYXJnaW5zXG4gIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIGlmIChydGwpIHtcbiAgICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luTGVmdCA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZUVsLnN0eWxlLm1hcmdpblJpZ2h0ID0gJyc7XG4gICAgfVxuICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luQm90dG9tID0gJyc7XG4gICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5Ub3AgPSAnJztcbiAgfSk7XG5cbiAgLy8gcmVzZXQgY3NzTW9kZSBvZmZzZXRzXG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICBzZXRDU1NQcm9wZXJ0eSh3cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYmVmb3JlJywgJycpO1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlcicsICcnKTtcbiAgfVxuICBjb25zdCBncmlkRW5hYmxlZCA9IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxICYmIHN3aXBlci5ncmlkO1xuICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZ3JpZC5pbml0U2xpZGVzKHNsaWRlc0xlbmd0aCk7XG4gIH1cblxuICAvLyBDYWxjIHNsaWRlc1xuICBsZXQgc2xpZGVTaXplO1xuICBjb25zdCBzaG91bGRSZXNldFNsaWRlU2l6ZSA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLmJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKHBhcmFtcy5icmVha3BvaW50cykuZmlsdGVyKGtleSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBwYXJhbXMuYnJlYWtwb2ludHNba2V5XS5zbGlkZXNQZXJWaWV3ICE9PSAndW5kZWZpbmVkJztcbiAgfSkubGVuZ3RoID4gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNMZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlU2l6ZSA9IDA7XG4gICAgbGV0IHNsaWRlO1xuICAgIGlmIChzbGlkZXNbaV0pIHNsaWRlID0gc2xpZGVzW2ldO1xuICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgc3dpcGVyLmdyaWQudXBkYXRlU2xpZGUoaSwgc2xpZGUsIHNsaWRlc0xlbmd0aCwgZ2V0RGlyZWN0aW9uTGFiZWwpO1xuICAgIH1cbiAgICBpZiAoc2xpZGVzW2ldICYmIGVsZW1lbnRTdHlsZShzbGlkZSwgJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgIGlmIChzaG91bGRSZXNldFNsaWRlU2l6ZSkge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGVbZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYGA7XG4gICAgICB9XG4gICAgICBjb25zdCBzbGlkZVN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoc2xpZGUpO1xuICAgICAgY29uc3QgY3VycmVudFRyYW5zZm9ybSA9IHNsaWRlLnN0eWxlLnRyYW5zZm9ybTtcbiAgICAgIGNvbnN0IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0gPSBzbGlkZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgICAgICBzbGlkZVNpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBlbGVtZW50T3V0ZXJTaXplKHNsaWRlLCAnd2lkdGgnLCB0cnVlKSA6IGVsZW1lbnRPdXRlclNpemUoc2xpZGUsICdoZWlnaHQnLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBjb25zdCB3aWR0aCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICd3aWR0aCcpO1xuICAgICAgICBjb25zdCBwYWRkaW5nTGVmdCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdwYWRkaW5nLWxlZnQnKTtcbiAgICAgICAgY29uc3QgcGFkZGluZ1JpZ2h0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgY29uc3QgbWFyZ2luTGVmdCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdtYXJnaW4tbGVmdCcpO1xuICAgICAgICBjb25zdCBtYXJnaW5SaWdodCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgY29uc3QgYm94U2l6aW5nID0gc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnYm94LXNpemluZycpO1xuICAgICAgICBpZiAoYm94U2l6aW5nICYmIGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgY2xpZW50V2lkdGgsXG4gICAgICAgICAgICBvZmZzZXRXaWR0aFxuICAgICAgICAgIH0gPSBzbGlkZTtcbiAgICAgICAgICBzbGlkZVNpemUgPSB3aWR0aCArIHBhZGRpbmdMZWZ0ICsgcGFkZGluZ1JpZ2h0ICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0ICsgKG9mZnNldFdpZHRoIC0gY2xpZW50V2lkdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS50cmFuc2Zvcm0gPSBjdXJyZW50VHJhbnNmb3JtO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gY3VycmVudFdlYktpdFRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlU2l6ZSA9IChzd2lwZXJTaXplIC0gKHBhcmFtcy5zbGlkZXNQZXJWaWV3IC0gMSkgKiBzcGFjZUJldHdlZW4pIC8gcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGVbZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYCR7c2xpZGVTaXplfXB4YDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICB9XG4gICAgc2xpZGVzU2l6ZXNHcmlkLnB1c2goc2xpZGVTaXplKTtcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSAvIDIgKyBwcmV2U2xpZGVTaXplIC8gMiArIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChwcmV2U2xpZGVTaXplID09PSAwICYmIGkgIT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICBpZiAoaSA9PT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChNYXRoLmFicyhzbGlkZVBvc2l0aW9uKSA8IDEgLyAxMDAwKSBzbGlkZVBvc2l0aW9uID0gMDtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmIChpbmRleCAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKChpbmRleCAtIE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCkpICUgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuICAgIH1cbiAgICBzd2lwZXIudmlydHVhbFNpemUgKz0gc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuICAgIHByZXZTbGlkZVNpemUgPSBzbGlkZVNpemU7XG4gICAgaW5kZXggKz0gMTtcbiAgfVxuICBzd2lwZXIudmlydHVhbFNpemUgPSBNYXRoLm1heChzd2lwZXIudmlydHVhbFNpemUsIHN3aXBlclNpemUpICsgb2Zmc2V0QWZ0ZXI7XG4gIGlmIChydGwgJiYgd3JvbmdSVEwgJiYgKHBhcmFtcy5lZmZlY3QgPT09ICdzbGlkZScgfHwgcGFyYW1zLmVmZmVjdCA9PT0gJ2NvdmVyZmxvdycpKSB7XG4gICAgd3JhcHBlckVsLnN0eWxlLndpZHRoID0gYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbn1weGA7XG4gIH1cbiAgaWYgKHBhcmFtcy5zZXRXcmFwcGVyU2l6ZSkge1xuICAgIHdyYXBwZXJFbC5zdHlsZVtnZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBgJHtzd2lwZXIudmlydHVhbFNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVufXB4YDtcbiAgfVxuICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZ3JpZC51cGRhdGVXcmFwcGVyU2l6ZShzbGlkZVNpemUsIHNuYXBHcmlkLCBnZXREaXJlY3Rpb25MYWJlbCk7XG4gIH1cblxuICAvLyBSZW1vdmUgbGFzdCBncmlkIGVsZW1lbnRzIGRlcGVuZGluZyBvbiB3aWR0aFxuICBpZiAoIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgIGNvbnN0IG5ld1NsaWRlc0dyaWQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNuYXBHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBsZXQgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtpXTtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgaWYgKHNuYXBHcmlkW2ldIDw9IHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIHtcbiAgICAgICAgbmV3U2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc25hcEdyaWQgPSBuZXdTbGlkZXNHcmlkO1xuICAgIGlmIChNYXRoLmZsb29yKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIC0gTWF0aC5mbG9vcihzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSkgPiAxKSB7XG4gICAgICBzbmFwR3JpZC5wdXNoKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wKSB7XG4gICAgY29uc3Qgc2l6ZSA9IHNsaWRlc1NpemVzR3JpZFswXSArIHNwYWNlQmV0d2VlbjtcbiAgICBpZiAocGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSkge1xuICAgICAgY29uc3QgZ3JvdXBzID0gTWF0aC5jZWlsKChzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmUgKyBzd2lwZXIudmlydHVhbC5zbGlkZXNBZnRlcikgLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgY29uc3QgZ3JvdXBTaXplID0gc2l6ZSAqIHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXBzOyBpICs9IDEpIHtcbiAgICAgICAgc25hcEdyaWQucHVzaChzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSArIGdyb3VwU2l6ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQWZ0ZXI7IGkgKz0gMSkge1xuICAgICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSkge1xuICAgICAgICBzbmFwR3JpZC5wdXNoKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdICsgc2l6ZSk7XG4gICAgICB9XG4gICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdICsgc2l6ZSk7XG4gICAgICBzd2lwZXIudmlydHVhbFNpemUgKz0gc2l6ZTtcbiAgICB9XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmxlbmd0aCA9PT0gMCkgc25hcEdyaWQgPSBbMF07XG4gIGlmIChwYXJhbXMuc3BhY2VCZXR3ZWVuICE9PSAwKSB7XG4gICAgY29uc3Qga2V5ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHJ0bCA/ICdtYXJnaW5MZWZ0JyA6IGdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW5SaWdodCcpO1xuICAgIHNsaWRlcy5maWx0ZXIoKF8sIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgIGlmICghcGFyYW1zLmNzc01vZGUgfHwgcGFyYW1zLmxvb3ApIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHNsaWRlSW5kZXggPT09IHNsaWRlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBzbGlkZUVsLnN0eWxlW2tleV0gPSBgJHtzcGFjZUJldHdlZW59cHhgO1xuICAgIH0pO1xuICB9XG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKHNsaWRlU2l6ZVZhbHVlID0+IHtcbiAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAocGFyYW1zLnNwYWNlQmV0d2VlbiA/IHBhcmFtcy5zcGFjZUJldHdlZW4gOiAwKTtcbiAgICB9KTtcbiAgICBhbGxTbGlkZXNTaXplIC09IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgY29uc3QgbWF4U25hcCA9IGFsbFNsaWRlc1NpemUgLSBzd2lwZXJTaXplO1xuICAgIHNuYXBHcmlkID0gc25hcEdyaWQubWFwKHNuYXAgPT4ge1xuICAgICAgaWYgKHNuYXAgPCAwKSByZXR1cm4gLW9mZnNldEJlZm9yZTtcbiAgICAgIGlmIChzbmFwID4gbWF4U25hcCkgcmV0dXJuIG1heFNuYXAgKyBvZmZzZXRBZnRlcjtcbiAgICAgIHJldHVybiBzbmFwO1xuICAgIH0pO1xuICB9XG4gIGlmIChwYXJhbXMuY2VudGVySW5zdWZmaWNpZW50U2xpZGVzKSB7XG4gICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKHNsaWRlU2l6ZVZhbHVlID0+IHtcbiAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAocGFyYW1zLnNwYWNlQmV0d2VlbiA/IHBhcmFtcy5zcGFjZUJldHdlZW4gOiAwKTtcbiAgICB9KTtcbiAgICBhbGxTbGlkZXNTaXplIC09IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgaWYgKGFsbFNsaWRlc1NpemUgPCBzd2lwZXJTaXplKSB7XG4gICAgICBjb25zdCBhbGxTbGlkZXNPZmZzZXQgPSAoc3dpcGVyU2l6ZSAtIGFsbFNsaWRlc1NpemUpIC8gMjtcbiAgICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgICBzbmFwR3JpZFtzbmFwSW5kZXhdID0gc25hcCAtIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgICAgc2xpZGVzR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgICAgc2xpZGVzR3JpZFtzbmFwSW5kZXhdID0gc25hcCArIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHNsaWRlcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHNsaWRlc1NpemVzR3JpZFxuICB9KTtcbiAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY3NzTW9kZSAmJiAhcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZScsIGAkey1zbmFwR3JpZFswXX1weGApO1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlcicsIGAke3N3aXBlci5zaXplIC8gMiAtIHNsaWRlc1NpemVzR3JpZFtzbGlkZXNTaXplc0dyaWQubGVuZ3RoIC0gMV0gLyAyfXB4YCk7XG4gICAgY29uc3QgYWRkVG9TbmFwR3JpZCA9IC1zd2lwZXIuc25hcEdyaWRbMF07XG4gICAgY29uc3QgYWRkVG9TbGlkZXNHcmlkID0gLXN3aXBlci5zbGlkZXNHcmlkWzBdO1xuICAgIHN3aXBlci5zbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZC5tYXAodiA9PiB2ICsgYWRkVG9TbmFwR3JpZCk7XG4gICAgc3dpcGVyLnNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZC5tYXAodiA9PiB2ICsgYWRkVG9TbGlkZXNHcmlkKTtcbiAgfVxuICBpZiAoc2xpZGVzTGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0xlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAoc25hcEdyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICBzd2lwZXIuZW1pdCgnc25hcEdyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAoc2xpZGVzR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG4gIGlmICghaXNWaXJ0dWFsICYmICFwYXJhbXMuY3NzTW9kZSAmJiAocGFyYW1zLmVmZmVjdCA9PT0gJ3NsaWRlJyB8fCBwYXJhbXMuZWZmZWN0ID09PSAnZmFkZScpKSB7XG4gICAgY29uc3QgYmFja0ZhY2VIaWRkZW5DbGFzcyA9IGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWJhY2tmYWNlLWhpZGRlbmA7XG4gICAgY29uc3QgaGFzQ2xhc3NCYWNrZmFjZUNsYXNzQWRkZWQgPSBzd2lwZXIuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGJhY2tGYWNlSGlkZGVuQ2xhc3MpO1xuICAgIGlmIChzbGlkZXNMZW5ndGggPD0gcGFyYW1zLm1heEJhY2tmYWNlSGlkZGVuU2xpZGVzKSB7XG4gICAgICBpZiAoIWhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICB9XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVBdXRvSGVpZ2h0KHNwZWVkKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGFjdGl2ZVNsaWRlcyA9IFtdO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgbGV0IG5ld0hlaWdodCA9IDA7XG4gIGxldCBpO1xuICBpZiAodHlwZW9mIHNwZWVkID09PSAnbnVtYmVyJykge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgfSBlbHNlIGlmIChzcGVlZCA9PT0gdHJ1ZSkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHN3aXBlci5wYXJhbXMuc3BlZWQpO1xuICB9XG4gIGNvbnN0IGdldFNsaWRlQnlJbmRleCA9IGluZGV4ID0+IHtcbiAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICByZXR1cm4gc3dpcGVyLnNsaWRlcy5maWx0ZXIoZWwgPT4gcGFyc2VJbnQoZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCkgPT09IGluZGV4KVswXTtcbiAgICB9XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZXNbaW5kZXhdO1xuICB9O1xuICAvLyBGaW5kIHNsaWRlcyBjdXJyZW50bHkgaW4gdmlld1xuICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAoc3dpcGVyLnZpc2libGVTbGlkZXMgfHwgW10pLmZvckVhY2goc2xpZGUgPT4ge1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgaSA8IE1hdGguY2VpbChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcpOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggKyBpO1xuICAgICAgICBpZiAoaW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAmJiAhaXNWaXJ0dWFsKSBicmVhaztcbiAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goZ2V0U2xpZGVCeUluZGV4KGluZGV4KSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlcy5wdXNoKGdldFNsaWRlQnlJbmRleChzd2lwZXIuYWN0aXZlSW5kZXgpKTtcbiAgfVxuXG4gIC8vIEZpbmQgbmV3IGhlaWdodCBmcm9tIGhpZ2hlc3Qgc2xpZGUgaW4gdmlld1xuICBmb3IgKGkgPSAwOyBpIDwgYWN0aXZlU2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBhY3RpdmVTbGlkZXNbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBoZWlnaHQgPSBhY3RpdmVTbGlkZXNbaV0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgbmV3SGVpZ2h0ID0gaGVpZ2h0ID4gbmV3SGVpZ2h0ID8gaGVpZ2h0IDogbmV3SGVpZ2h0O1xuICAgIH1cbiAgfVxuXG4gIC8vIFVwZGF0ZSBIZWlnaHRcbiAgaWYgKG5ld0hlaWdodCB8fCBuZXdIZWlnaHQgPT09IDApIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuaGVpZ2h0ID0gYCR7bmV3SGVpZ2h0fXB4YDtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVTbGlkZXNPZmZzZXQoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBjb25zdCBtaW51c09mZnNldCA9IHN3aXBlci5pc0VsZW1lbnQgPyBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzd2lwZXIud3JhcHBlckVsLm9mZnNldExlZnQgOiBzd2lwZXIud3JhcHBlckVsLm9mZnNldFRvcCA6IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlT2Zmc2V0ID0gKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHNsaWRlc1tpXS5vZmZzZXRMZWZ0IDogc2xpZGVzW2ldLm9mZnNldFRvcCkgLSBtaW51c09mZnNldDtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc1Byb2dyZXNzKHRyYW5zbGF0ZSA9IHRoaXMgJiYgdGhpcy50cmFuc2xhdGUgfHwgMCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHNuYXBHcmlkXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChzbGlkZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0ID09PSAndW5kZWZpbmVkJykgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICBsZXQgb2Zmc2V0Q2VudGVyID0gLXRyYW5zbGF0ZTtcbiAgaWYgKHJ0bCkgb2Zmc2V0Q2VudGVyID0gdHJhbnNsYXRlO1xuXG4gIC8vIFZpc2libGUgU2xpZGVzXG4gIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpO1xuICB9KTtcbiAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzID0gW107XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3Qgc2xpZGUgPSBzbGlkZXNbaV07XG4gICAgbGV0IHNsaWRlT2Zmc2V0ID0gc2xpZGUuc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgaWYgKHBhcmFtcy5jc3NNb2RlICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgc2xpZGVPZmZzZXQgLT0gc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgIH1cbiAgICBjb25zdCBzbGlkZVByb2dyZXNzID0gKG9mZnNldENlbnRlciArIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSAtIHNsaWRlT2Zmc2V0KSAvIChzbGlkZS5zd2lwZXJTbGlkZVNpemUgKyBwYXJhbXMuc3BhY2VCZXR3ZWVuKTtcbiAgICBjb25zdCBvcmlnaW5hbFNsaWRlUHJvZ3Jlc3MgPSAob2Zmc2V0Q2VudGVyIC0gc25hcEdyaWRbMF0gKyAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogMCkgLSBzbGlkZU9mZnNldCkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbik7XG4gICAgY29uc3Qgc2xpZGVCZWZvcmUgPSAtKG9mZnNldENlbnRlciAtIHNsaWRlT2Zmc2V0KTtcbiAgICBjb25zdCBzbGlkZUFmdGVyID0gc2xpZGVCZWZvcmUgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgIGNvbnN0IGlzVmlzaWJsZSA9IHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPCBzd2lwZXIuc2l6ZSAtIDEgfHwgc2xpZGVBZnRlciA+IDEgJiYgc2xpZGVBZnRlciA8PSBzd2lwZXIuc2l6ZSB8fCBzbGlkZUJlZm9yZSA8PSAwICYmIHNsaWRlQWZ0ZXIgPj0gc3dpcGVyLnNpemU7XG4gICAgaWYgKGlzVmlzaWJsZSkge1xuICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgICAgIHNsaWRlc1tpXS5jbGFzc0xpc3QuYWRkKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG4gICAgfVxuICAgIHNsaWRlLnByb2dyZXNzID0gcnRsID8gLXNsaWRlUHJvZ3Jlc3MgOiBzbGlkZVByb2dyZXNzO1xuICAgIHNsaWRlLm9yaWdpbmFsUHJvZ3Jlc3MgPSBydGwgPyAtb3JpZ2luYWxTbGlkZVByb2dyZXNzIDogb3JpZ2luYWxTbGlkZVByb2dyZXNzO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICh0eXBlb2YgdHJhbnNsYXRlID09PSAndW5kZWZpbmVkJykge1xuICAgIGNvbnN0IG11bHRpcGxpZXIgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gLTEgOiAxO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHRyYW5zbGF0ZSA9IHN3aXBlciAmJiBzd2lwZXIudHJhbnNsYXRlICYmIHN3aXBlci50cmFuc2xhdGUgKiBtdWx0aXBsaWVyIHx8IDA7XG4gIH1cbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGxldCB7XG4gICAgcHJvZ3Jlc3MsXG4gICAgaXNCZWdpbm5pbmcsXG4gICAgaXNFbmQsXG4gICAgcHJvZ3Jlc3NMb29wXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHdhc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nO1xuICBjb25zdCB3YXNFbmQgPSBpc0VuZDtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgcHJvZ3Jlc3MgPSAwO1xuICAgIGlzQmVnaW5uaW5nID0gdHJ1ZTtcbiAgICBpc0VuZCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvIHRyYW5zbGF0ZXNEaWZmO1xuICAgIGNvbnN0IGlzQmVnaW5uaW5nUm91bmRlZCA9IE1hdGguYWJzKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgPCAxO1xuICAgIGNvbnN0IGlzRW5kUm91bmRlZCA9IE1hdGguYWJzKHRyYW5zbGF0ZSAtIHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgPCAxO1xuICAgIGlzQmVnaW5uaW5nID0gaXNCZWdpbm5pbmdSb3VuZGVkIHx8IHByb2dyZXNzIDw9IDA7XG4gICAgaXNFbmQgPSBpc0VuZFJvdW5kZWQgfHwgcHJvZ3Jlc3MgPj0gMTtcbiAgICBpZiAoaXNCZWdpbm5pbmdSb3VuZGVkKSBwcm9ncmVzcyA9IDA7XG4gICAgaWYgKGlzRW5kUm91bmRlZCkgcHJvZ3Jlc3MgPSAxO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGNvbnN0IGZpcnN0U2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KHN3aXBlci5zbGlkZXMuZmlsdGVyKGVsID0+IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSA9PT0gJzAnKVswXSk7XG4gICAgY29uc3QgbGFzdFNsaWRlSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleChzd2lwZXIuc2xpZGVzLmZpbHRlcihlbCA9PiBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgKiAxID09PSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEpWzBdKTtcbiAgICBjb25zdCBmaXJzdFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbZmlyc3RTbGlkZUluZGV4XTtcbiAgICBjb25zdCBsYXN0U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFtsYXN0U2xpZGVJbmRleF07XG4gICAgY29uc3QgdHJhbnNsYXRlTWF4ID0gc3dpcGVyLnNsaWRlc0dyaWRbc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgdHJhbnNsYXRlQWJzID0gTWF0aC5hYnModHJhbnNsYXRlKTtcbiAgICBpZiAodHJhbnNsYXRlQWJzID49IGZpcnN0U2xpZGVUcmFuc2xhdGUpIHtcbiAgICAgIHByb2dyZXNzTG9vcCA9ICh0cmFuc2xhdGVBYnMgLSBmaXJzdFNsaWRlVHJhbnNsYXRlKSAvIHRyYW5zbGF0ZU1heDtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvZ3Jlc3NMb29wID0gKHRyYW5zbGF0ZUFicyArIHRyYW5zbGF0ZU1heCAtIGxhc3RTbGlkZVRyYW5zbGF0ZSkgLyB0cmFuc2xhdGVNYXg7XG4gICAgfVxuICAgIGlmIChwcm9ncmVzc0xvb3AgPiAxKSBwcm9ncmVzc0xvb3AgLT0gMTtcbiAgfVxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHByb2dyZXNzLFxuICAgIHByb2dyZXNzTG9vcCxcbiAgICBpc0JlZ2lubmluZyxcbiAgICBpc0VuZFxuICB9KTtcbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuYXV0b0hlaWdodCkgc3dpcGVyLnVwZGF0ZVNsaWRlc1Byb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIGlmIChpc0JlZ2lubmluZyAmJiAhd2FzQmVnaW5uaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoQmVnaW5uaW5nIHRvRWRnZScpO1xuICB9XG4gIGlmIChpc0VuZCAmJiAhd2FzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWNoRW5kIHRvRWRnZScpO1xuICB9XG4gIGlmICh3YXNCZWdpbm5pbmcgJiYgIWlzQmVnaW5uaW5nIHx8IHdhc0VuZCAmJiAhaXNFbmQpIHtcbiAgICBzd2lwZXIuZW1pdCgnZnJvbUVkZ2UnKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgncHJvZ3Jlc3MnLCBwcm9ncmVzcyk7XG59IiwiaW1wb3J0IHsgZWxlbWVudENoaWxkcmVuLCBlbGVtZW50TmV4dEFsbCwgZWxlbWVudFByZXZBbGwgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2xpZGVzQ2xhc3NlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHNsaWRlcyxcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzRWwsXG4gICAgYWN0aXZlSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgY29uc3QgZ2V0RmlsdGVyZWRTbGlkZSA9IHNlbGVjdG9yID0+IHtcbiAgICByZXR1cm4gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9JHtzZWxlY3Rvcn0sIHN3aXBlci1zbGlkZSR7c2VsZWN0b3J9YClbMF07XG4gIH07XG4gIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcywgcGFyYW1zLnNsaWRlTmV4dENsYXNzLCBwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICB9KTtcbiAgbGV0IGFjdGl2ZVNsaWRlO1xuICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBsZXQgc2xpZGVJbmRleCA9IGFjdGl2ZUluZGV4IC0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlO1xuICAgICAgaWYgKHNsaWRlSW5kZXggPCAwKSBzbGlkZUluZGV4ID0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCArIHNsaWRlSW5kZXg7XG4gICAgICBpZiAoc2xpZGVJbmRleCA+PSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoKSBzbGlkZUluZGV4IC09IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGg7XG4gICAgICBhY3RpdmVTbGlkZSA9IGdldEZpbHRlcmVkU2xpZGUoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c2xpZGVJbmRleH1cIl1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aXZlU2xpZGUgPSBnZXRGaWx0ZXJlZFNsaWRlKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke2FjdGl2ZUluZGV4fVwiXWApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhY3RpdmVTbGlkZSA9IHNsaWRlc1thY3RpdmVJbmRleF07XG4gIH1cbiAgaWYgKGFjdGl2ZVNsaWRlKSB7XG4gICAgLy8gQWN0aXZlIGNsYXNzZXNcbiAgICBhY3RpdmVTbGlkZS5jbGFzc0xpc3QuYWRkKHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKTtcblxuICAgIC8vIE5leHQgU2xpZGVcbiAgICBsZXQgbmV4dFNsaWRlID0gZWxlbWVudE5leHRBbGwoYWN0aXZlU2xpZGUsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApWzBdO1xuICAgIGlmIChwYXJhbXMubG9vcCAmJiAhbmV4dFNsaWRlKSB7XG4gICAgICBuZXh0U2xpZGUgPSBzbGlkZXNbMF07XG4gICAgfVxuICAgIGlmIChuZXh0U2xpZGUpIHtcbiAgICAgIG5leHRTbGlkZS5jbGFzc0xpc3QuYWRkKHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gICAgfVxuICAgIC8vIFByZXYgU2xpZGVcbiAgICBsZXQgcHJldlNsaWRlID0gZWxlbWVudFByZXZBbGwoYWN0aXZlU2xpZGUsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApWzBdO1xuICAgIGlmIChwYXJhbXMubG9vcCAmJiAhcHJldlNsaWRlID09PSAwKSB7XG4gICAgICBwcmV2U2xpZGUgPSBzbGlkZXNbc2xpZGVzLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICBpZiAocHJldlNsaWRlKSB7XG4gICAgICBwcmV2U2xpZGUuY2xhc3NMaXN0LmFkZChwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICAgIH1cbiAgfVxuICBzd2lwZXIuZW1pdFNsaWRlc0NsYXNzZXMoKTtcbn0iLCJleHBvcnQgZnVuY3Rpb24gZ2V0QWN0aXZlSW5kZXhCeVRyYW5zbGF0ZShzd2lwZXIpIHtcbiAgY29uc3Qge1xuICAgIHNsaWRlc0dyaWQsXG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGxldCBhY3RpdmVJbmRleDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSAtIChzbGlkZXNHcmlkW2kgKyAxXSAtIHNsaWRlc0dyaWRbaV0pIC8gMikge1xuICAgICAgICBhY3RpdmVJbmRleCA9IGk7XG4gICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldICYmIHRyYW5zbGF0ZSA8IHNsaWRlc0dyaWRbaSArIDFdKSB7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gaSArIDE7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgIH1cbiAgfVxuICAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICBpZiAoYWN0aXZlSW5kZXggPCAwIHx8IHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIGFjdGl2ZUluZGV4ID0gMDtcbiAgfVxuICByZXR1cm4gYWN0aXZlSW5kZXg7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVBY3RpdmVJbmRleChuZXdBY3RpdmVJbmRleCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBjb25zdCB7XG4gICAgc25hcEdyaWQsXG4gICAgcGFyYW1zLFxuICAgIGFjdGl2ZUluZGV4OiBwcmV2aW91c0luZGV4LFxuICAgIHJlYWxJbmRleDogcHJldmlvdXNSZWFsSW5kZXgsXG4gICAgc25hcEluZGV4OiBwcmV2aW91c1NuYXBJbmRleFxuICB9ID0gc3dpcGVyO1xuICBsZXQgYWN0aXZlSW5kZXggPSBuZXdBY3RpdmVJbmRleDtcbiAgbGV0IHNuYXBJbmRleDtcbiAgY29uc3QgZ2V0VmlydHVhbFJlYWxJbmRleCA9IGFJbmRleCA9PiB7XG4gICAgbGV0IHJlYWxJbmRleCA9IGFJbmRleCAtIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICBpZiAocmVhbEluZGV4IDwgMCkge1xuICAgICAgcmVhbEluZGV4ID0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCArIHJlYWxJbmRleDtcbiAgICB9XG4gICAgaWYgKHJlYWxJbmRleCA+PSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoKSB7XG4gICAgICByZWFsSW5kZXggLT0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHJlYWxJbmRleDtcbiAgfTtcbiAgaWYgKHR5cGVvZiBhY3RpdmVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBhY3RpdmVJbmRleCA9IGdldEFjdGl2ZUluZGV4QnlUcmFuc2xhdGUoc3dpcGVyKTtcbiAgfVxuICBpZiAoc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpID49IDApIHtcbiAgICBzbmFwSW5kZXggPSBzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGFjdGl2ZUluZGV4KTtcbiAgICBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoYWN0aXZlSW5kZXggLSBza2lwKSAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIH1cbiAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG4gIGlmIChhY3RpdmVJbmRleCA9PT0gcHJldmlvdXNJbmRleCkge1xuICAgIGlmIChzbmFwSW5kZXggIT09IHByZXZpb3VzU25hcEluZGV4KSB7XG4gICAgICBzd2lwZXIuc25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wICYmIHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIucmVhbEluZGV4ID0gZ2V0VmlydHVhbFJlYWxJbmRleChhY3RpdmVJbmRleCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICAvLyBHZXQgcmVhbCBpbmRleFxuICBsZXQgcmVhbEluZGV4O1xuICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBwYXJhbXMubG9vcCkge1xuICAgIHJlYWxJbmRleCA9IGdldFZpcnR1YWxSZWFsSW5kZXgoYWN0aXZlSW5kZXgpO1xuICB9IGVsc2UgaWYgKHN3aXBlci5zbGlkZXNbYWN0aXZlSW5kZXhdKSB7XG4gICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoc3dpcGVyLnNsaWRlc1thY3RpdmVJbmRleF0uZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpIHx8IGFjdGl2ZUluZGV4LCAxMCk7XG4gIH0gZWxzZSB7XG4gICAgcmVhbEluZGV4ID0gYWN0aXZlSW5kZXg7XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBzbmFwSW5kZXgsXG4gICAgcmVhbEluZGV4LFxuICAgIHByZXZpb3VzSW5kZXgsXG4gICAgYWN0aXZlSW5kZXhcbiAgfSk7XG4gIHN3aXBlci5lbWl0KCdhY3RpdmVJbmRleENoYW5nZScpO1xuICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gIGlmIChwcmV2aW91c1JlYWxJbmRleCAhPT0gcmVhbEluZGV4KSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWxJbmRleENoYW5nZScpO1xuICB9XG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgfHwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVDaGFuZ2UnKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZUNsaWNrZWRTbGlkZShlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGNvbnN0IHNsaWRlID0gZS5jbG9zZXN0KGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICBsZXQgc2xpZGVGb3VuZCA9IGZhbHNlO1xuICBsZXQgc2xpZGVJbmRleDtcbiAgaWYgKHNsaWRlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlc1tpXSA9PT0gc2xpZGUpIHtcbiAgICAgICAgc2xpZGVGb3VuZCA9IHRydWU7XG4gICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHNsaWRlICYmIHNsaWRlRm91bmQpIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gc2xpZGU7XG4gICAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gcGFyc2VJbnQoc2xpZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBzbGlkZUluZGV4O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gdW5kZWZpbmVkO1xuICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMuc2xpZGVUb0NsaWNrZWRTbGlkZSAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSB1bmRlZmluZWQgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gc3dpcGVyLmFjdGl2ZUluZGV4KSB7XG4gICAgc3dpcGVyLnNsaWRlVG9DbGlja2VkU2xpZGUoKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb25FbWl0KHtcbiAgc3dpcGVyLFxuICBydW5DYWxsYmFja3MsXG4gIGRpcmVjdGlvbixcbiAgc3RlcFxufSkge1xuICBjb25zdCB7XG4gICAgYWN0aXZlSW5kZXgsXG4gICAgcHJldmlvdXNJbmRleFxuICB9ID0gc3dpcGVyO1xuICBsZXQgZGlyID0gZGlyZWN0aW9uO1xuICBpZiAoIWRpcikge1xuICAgIGlmIChhY3RpdmVJbmRleCA+IHByZXZpb3VzSW5kZXgpIGRpciA9ICduZXh0JztlbHNlIGlmIChhY3RpdmVJbmRleCA8IHByZXZpb3VzSW5kZXgpIGRpciA9ICdwcmV2JztlbHNlIGRpciA9ICdyZXNldCc7XG4gIH1cbiAgc3dpcGVyLmVtaXQoYHRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoZGlyID09PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIuZW1pdChgc2xpZGVSZXNldFRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KGBzbGlkZUNoYW5nZVRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgaWYgKGRpciA9PT0gJ25leHQnKSB7XG4gICAgICBzd2lwZXIuZW1pdChgc2xpZGVOZXh0VHJhbnNpdGlvbiR7c3RlcH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlUHJldlRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IHNsaWRlVG8gZnJvbSAnLi9zbGlkZVRvLmpzJztcbmltcG9ydCBzbGlkZVRvTG9vcCBmcm9tICcuL3NsaWRlVG9Mb29wLmpzJztcbmltcG9ydCBzbGlkZU5leHQgZnJvbSAnLi9zbGlkZU5leHQuanMnO1xuaW1wb3J0IHNsaWRlUHJldiBmcm9tICcuL3NsaWRlUHJldi5qcyc7XG5pbXBvcnQgc2xpZGVSZXNldCBmcm9tICcuL3NsaWRlUmVzZXQuanMnO1xuaW1wb3J0IHNsaWRlVG9DbG9zZXN0IGZyb20gJy4vc2xpZGVUb0Nsb3Nlc3QuanMnO1xuaW1wb3J0IHNsaWRlVG9DbGlja2VkU2xpZGUgZnJvbSAnLi9zbGlkZVRvQ2xpY2tlZFNsaWRlLmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2xpZGVUbyxcbiAgc2xpZGVUb0xvb3AsXG4gIHNsaWRlTmV4dCxcbiAgc2xpZGVQcmV2LFxuICBzbGlkZVJlc2V0LFxuICBzbGlkZVRvQ2xvc2VzdCxcbiAgc2xpZGVUb0NsaWNrZWRTbGlkZVxufTsiLCJpbXBvcnQgeyBhbmltYXRlQ1NTTW9kZVNjcm9sbCB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVRvKGluZGV4ID0gMCwgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgaW50ZXJuYWwsIGluaXRpYWwpIHtcbiAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3N0cmluZycpIHtcbiAgICBpbmRleCA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHNsaWRlSW5kZXggPSBpbmRleDtcbiAgaWYgKHNsaWRlSW5kZXggPCAwKSBzbGlkZUluZGV4ID0gMDtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHByZXZpb3VzSW5kZXgsXG4gICAgYWN0aXZlSW5kZXgsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgd3JhcHBlckVsLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbiB8fCAhZW5hYmxlZCAmJiAhaW50ZXJuYWwgJiYgIWluaXRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBzbGlkZUluZGV4KTtcbiAgbGV0IHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChzbGlkZUluZGV4IC0gc2tpcCkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IC1zbmFwR3JpZFtzbmFwSW5kZXhdO1xuICAvLyBOb3JtYWxpemUgc2xpZGVJbmRleFxuICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0dyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSAtTWF0aC5mbG9vcih0cmFuc2xhdGUgKiAxMDApO1xuICAgICAgY29uc3Qgbm9ybWFsaXplZEdyaWQgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaV0gKiAxMDApO1xuICAgICAgY29uc3Qgbm9ybWFsaXplZEdyaWROZXh0ID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkW2kgKyAxXSAqIDEwMCk7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIDFdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBub3JtYWxpemVkR3JpZCAmJiBub3JtYWxpemVkVHJhbnNsYXRlIDwgbm9ybWFsaXplZEdyaWROZXh0IC0gKG5vcm1hbGl6ZWRHcmlkTmV4dCAtIG5vcm1hbGl6ZWRHcmlkKSAvIDIpIHtcbiAgICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkICYmIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPCBub3JtYWxpemVkR3JpZE5leHQpIHtcbiAgICAgICAgICBzbGlkZUluZGV4ID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBub3JtYWxpemVkR3JpZCkge1xuICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gRGlyZWN0aW9ucyBsb2Nrc1xuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkICYmIHNsaWRlSW5kZXggIT09IGFjdGl2ZUluZGV4KSB7XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgdHJhbnNsYXRlIDwgc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPCBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGlmICgoYWN0aXZlSW5kZXggfHwgMCkgIT09IHNsaWRlSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoc2xpZGVJbmRleCAhPT0gKHByZXZpb3VzSW5kZXggfHwgMCkgJiYgcnVuQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVNsaWRlQ2hhbmdlU3RhcnQnKTtcbiAgfVxuXG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgbGV0IGRpcmVjdGlvbjtcbiAgaWYgKHNsaWRlSW5kZXggPiBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ25leHQnO2Vsc2UgaWYgKHNsaWRlSW5kZXggPCBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ3ByZXYnO2Vsc2UgZGlyZWN0aW9uID0gJ3Jlc2V0JztcblxuICAvLyBVcGRhdGUgSW5kZXhcbiAgaWYgKHJ0bCAmJiAtdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlIHx8ICFydGwgJiYgdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgIC8vIFVwZGF0ZSBIZWlnaHRcbiAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgfVxuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgaWYgKHBhcmFtcy5lZmZlY3QgIT09ICdzbGlkZScpIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICB9XG4gICAgaWYgKGRpcmVjdGlvbiAhPT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgdCA9IHJ0bCA/IHRyYW5zbGF0ZSA6IC10cmFuc2xhdGU7XG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICdub25lJztcbiAgICAgICAgc3dpcGVyLl9pbW1lZGlhdGVWaXJ0dWFsID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1ZpcnR1YWwgJiYgIXN3aXBlci5fY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0ICYmIHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlID4gMCkge1xuICAgICAgICBzd2lwZXIuX2Nzc01vZGVWaXJ0dWFsSW5pdGlhbFNldCA9IHRydWU7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICcnO1xuICAgICAgICAgIHN3aXBlci5faW1tZWRpYXRlVmlydHVhbCA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFzd2lwZXIuc3VwcG9ydC5zbW9vdGhTY3JvbGwpIHtcbiAgICAgICAgYW5pbWF0ZUNTU01vZGVTY3JvbGwoe1xuICAgICAgICAgIHN3aXBlcixcbiAgICAgICAgICB0YXJnZXRQb3NpdGlvbjogdCxcbiAgICAgICAgICBzaWRlOiBpc0ggPyAnbGVmdCcgOiAndG9wJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICBbaXNIID8gJ2xlZnQnIDogJ3RvcCddOiB0LFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gIGlmIChzcGVlZCA9PT0gMCkge1xuICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgfSBlbHNlIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgIGlmICghc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgZGVsZXRlIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgfTtcbiAgICB9XG4gICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVRvTG9vcChpbmRleCA9IDAsIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgaW5kZXhBc051bWJlciA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gICAgaW5kZXggPSBpbmRleEFzTnVtYmVyO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBuZXdJbmRleCA9IGluZGV4O1xuICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIG5ld0luZGV4ID0gbmV3SW5kZXggKyBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0luZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXgoc3dpcGVyLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSAqIDEgPT09IG5ld0luZGV4KVswXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufSIsIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVOZXh0KHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBlbmFibGVkLFxuICAgIHBhcmFtcyxcbiAgICBhbmltYXRpbmdcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm4gc3dpcGVyO1xuICBsZXQgcGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvKSB7XG4gICAgcGVyR3JvdXAgPSBNYXRoLm1heChzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoJ2N1cnJlbnQnLCB0cnVlKSwgMSk7XG4gIH1cbiAgY29uc3QgaW5jcmVtZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwZXJHcm91cDtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiAhaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgZGlyZWN0aW9uOiAnbmV4dCdcbiAgICB9KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIud3JhcHBlckVsLmNsaWVudExlZnQ7XG4gIH1cbiAgaWYgKHBhcmFtcy5yZXdpbmQgJiYgc3dpcGVyLmlzRW5kKSB7XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKDAsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfVxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgaW5jcmVtZW50LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59IiwiLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVByZXYoc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgaW50ZXJuYWwpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHJ0bFRyYW5zbGF0ZSxcbiAgICBlbmFibGVkLFxuICAgIGFuaW1hdGluZ1xuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybiBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChhbmltYXRpbmcgJiYgIWlzVmlydHVhbCAmJiBwYXJhbXMubG9vcFByZXZlbnRzU2xpZGluZykgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgIGRpcmVjdGlvbjogJ3ByZXYnXG4gICAgfSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLndyYXBwZXJFbC5jbGllbnRMZWZ0O1xuICB9XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgZnVuY3Rpb24gbm9ybWFsaXplKHZhbCkge1xuICAgIGlmICh2YWwgPCAwKSByZXR1cm4gLU1hdGguZmxvb3IoTWF0aC5hYnModmFsKSk7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodmFsKTtcbiAgfVxuICBjb25zdCBub3JtYWxpemVkVHJhbnNsYXRlID0gbm9ybWFsaXplKHRyYW5zbGF0ZSk7XG4gIGNvbnN0IG5vcm1hbGl6ZWRTbmFwR3JpZCA9IHNuYXBHcmlkLm1hcCh2YWwgPT4gbm9ybWFsaXplKHZhbCkpO1xuICBsZXQgcHJldlNuYXAgPSBzbmFwR3JpZFtub3JtYWxpemVkU25hcEdyaWQuaW5kZXhPZihub3JtYWxpemVkVHJhbnNsYXRlKSAtIDFdO1xuICBpZiAodHlwZW9mIHByZXZTbmFwID09PSAndW5kZWZpbmVkJyAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgIGxldCBwcmV2U25hcEluZGV4O1xuICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gc25hcCkge1xuICAgICAgICAvLyBwcmV2U25hcCA9IHNuYXA7XG4gICAgICAgIHByZXZTbmFwSW5kZXggPSBzbmFwSW5kZXg7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBwcmV2U25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcHJldlNuYXAgPSBzbmFwR3JpZFtwcmV2U25hcEluZGV4ID4gMCA/IHByZXZTbmFwSW5kZXggLSAxIDogcHJldlNuYXBJbmRleF07XG4gICAgfVxuICB9XG4gIGxldCBwcmV2SW5kZXggPSAwO1xuICBpZiAodHlwZW9mIHByZXZTbmFwICE9PSAndW5kZWZpbmVkJykge1xuICAgIHByZXZJbmRleCA9IHNsaWRlc0dyaWQuaW5kZXhPZihwcmV2U25hcCk7XG4gICAgaWYgKHByZXZJbmRleCA8IDApIHByZXZJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCAtIDE7XG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cEF1dG8pIHtcbiAgICAgIHByZXZJbmRleCA9IHByZXZJbmRleCAtIHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygncHJldmlvdXMnLCB0cnVlKSArIDE7XG4gICAgICBwcmV2SW5kZXggPSBNYXRoLm1heChwcmV2SW5kZXgsIDApO1xuICAgIH1cbiAgfVxuICBpZiAocGFyYW1zLnJld2luZCAmJiBzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICBjb25zdCBsYXN0SW5kZXggPSBzd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIC0gMSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obGFzdEluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHByZXZJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufSIsIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVSZXNldChzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCBpbnRlcm5hbCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59IiwiLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVRvQ2xvc2VzdChzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCBpbnRlcm5hbCwgdGhyZXNob2xkID0gMC41KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCk7XG4gIGNvbnN0IHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChpbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGlmICh0cmFuc2xhdGUgPj0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF0pIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgb24gb3IgYWZ0ZXIgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYWZ0ZXIgaXQuXG4gICAgY29uc3QgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICBjb25zdCBuZXh0U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggKyAxXTtcbiAgICBpZiAodHJhbnNsYXRlIC0gY3VycmVudFNuYXAgPiAobmV4dFNuYXAgLSBjdXJyZW50U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4ICs9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBiZWZvcmUgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYmVmb3JlIGl0LlxuICAgIGNvbnN0IHByZXZTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCAtIDFdO1xuICAgIGNvbnN0IGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG4gICAgaWYgKHRyYW5zbGF0ZSAtIHByZXZTbmFwIDw9IChjdXJyZW50U25hcCAtIHByZXZTbmFwKSAqIHRocmVzaG9sZCkge1xuICAgICAgaW5kZXggLT0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICB9XG4gIH1cbiAgaW5kZXggPSBNYXRoLm1heChpbmRleCwgMCk7XG4gIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDEpO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn0iLCJpbXBvcnQgeyBlbGVtZW50Q2hpbGRyZW4sIG5leHRUaWNrIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlVG9DbGlja2VkU2xpZGUoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzRWxcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICBsZXQgc2xpZGVUb0luZGV4ID0gc3dpcGVyLmNsaWNrZWRJbmRleDtcbiAgbGV0IHJlYWxJbmRleDtcbiAgY29uc3Qgc2xpZGVTZWxlY3RvciA9IHN3aXBlci5pc0VsZW1lbnQgPyBgc3dpcGVyLXNsaWRlYCA6IGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykgcmV0dXJuO1xuICAgIHJlYWxJbmRleCA9IHBhcnNlSW50KHN3aXBlci5jbGlja2VkU2xpZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgaWYgKHNsaWRlVG9JbmRleCA8IHN3aXBlci5sb29wZWRTbGlkZXMgLSBzbGlkZXNQZXJWaWV3IC8gMiB8fCBzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMgKyBzbGlkZXNQZXJWaWV3IC8gMikge1xuICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICBzbGlkZVRvSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleChlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAke3NsaWRlU2VsZWN0b3J9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdYClbMF0pO1xuICAgICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzbGlkZXNQZXJWaWV3KSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgc2xpZGVUb0luZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXgoZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgJHtzbGlkZVNlbGVjdG9yfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cmVhbEluZGV4fVwiXWApWzBdKTtcbiAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICB9XG59IiwiaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0IHsgbm93IH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcblxuLy8gTW9kaWZpZWQgZnJvbSBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81NDUyMDU1NC9jdXN0b20tZWxlbWVudC1nZXRyb290bm9kZS1jbG9zZXN0LWZ1bmN0aW9uLWNyb3NzaW5nLW11bHRpcGxlLXBhcmVudC1zaGFkb3dkXG5mdW5jdGlvbiBjbG9zZXN0RWxlbWVudChzZWxlY3RvciwgYmFzZSA9IHRoaXMpIHtcbiAgZnVuY3Rpb24gX19jbG9zZXN0RnJvbShlbCkge1xuICAgIGlmICghZWwgfHwgZWwgPT09IGdldERvY3VtZW50KCkgfHwgZWwgPT09IGdldFdpbmRvdygpKSByZXR1cm4gbnVsbDtcbiAgICBpZiAoZWwuYXNzaWduZWRTbG90KSBlbCA9IGVsLmFzc2lnbmVkU2xvdDtcbiAgICBjb25zdCBmb3VuZCA9IGVsLmNsb3Nlc3Qoc2VsZWN0b3IpO1xuICAgIGlmICghZm91bmQgJiYgIWVsLmdldFJvb3ROb2RlKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGZvdW5kIHx8IF9fY2xvc2VzdEZyb20oZWwuZ2V0Um9vdE5vZGUoKS5ob3N0KTtcbiAgfVxuICByZXR1cm4gX19jbG9zZXN0RnJvbShiYXNlKTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uVG91Y2hTdGFydChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgZGF0YS5ldkNhY2hlLnB1c2goZXZlbnQpO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHRvdWNoZXMsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgaWYgKCFwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiBldmVudC5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgcmV0dXJuO1xuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wRml4KCk7XG4gIH1cbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgbGV0IHRhcmdldEVsID0gZS50YXJnZXQ7XG4gIGlmIChwYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICd3cmFwcGVyJykge1xuICAgIGlmICghc3dpcGVyLndyYXBwZXJFbC5jb250YWlucyh0YXJnZXRFbCkpIHJldHVybjtcbiAgfVxuICBpZiAoJ3doaWNoJyBpbiBlICYmIGUud2hpY2ggPT09IDMpIHJldHVybjtcbiAgaWYgKCdidXR0b24nIGluIGUgJiYgZS5idXR0b24gPiAwKSByZXR1cm47XG4gIGlmIChkYXRhLmlzVG91Y2hlZCAmJiBkYXRhLmlzTW92ZWQpIHJldHVybjtcblxuICAvLyBjaGFuZ2UgdGFyZ2V0IGVsIGZvciBzaGFkb3cgcm9vdCBjb21wb25lbnRcbiAgY29uc3Qgc3dpcGluZ0NsYXNzSGFzVmFsdWUgPSAhIXBhcmFtcy5ub1N3aXBpbmdDbGFzcyAmJiBwYXJhbXMubm9Td2lwaW5nQ2xhc3MgIT09ICcnO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgY29uc3QgZXZlbnRQYXRoID0gZXZlbnQuY29tcG9zZWRQYXRoID8gZXZlbnQuY29tcG9zZWRQYXRoKCkgOiBldmVudC5wYXRoO1xuICBpZiAoc3dpcGluZ0NsYXNzSGFzVmFsdWUgJiYgZS50YXJnZXQgJiYgZS50YXJnZXQuc2hhZG93Um9vdCAmJiBldmVudFBhdGgpIHtcbiAgICB0YXJnZXRFbCA9IGV2ZW50UGF0aFswXTtcbiAgfVxuICBjb25zdCBub1N3aXBpbmdTZWxlY3RvciA9IHBhcmFtcy5ub1N3aXBpbmdTZWxlY3RvciA/IHBhcmFtcy5ub1N3aXBpbmdTZWxlY3RvciA6IGAuJHtwYXJhbXMubm9Td2lwaW5nQ2xhc3N9YDtcbiAgY29uc3QgaXNUYXJnZXRTaGFkb3cgPSAhIShlLnRhcmdldCAmJiBlLnRhcmdldC5zaGFkb3dSb290KTtcblxuICAvLyB1c2UgY2xvc2VzdEVsZW1lbnQgZm9yIHNoYWRvdyByb290IGVsZW1lbnQgdG8gZ2V0IHRoZSBhY3R1YWwgY2xvc2VzdCBmb3IgbmVzdGVkIHNoYWRvdyByb290IGVsZW1lbnRcbiAgaWYgKHBhcmFtcy5ub1N3aXBpbmcgJiYgKGlzVGFyZ2V0U2hhZG93ID8gY2xvc2VzdEVsZW1lbnQobm9Td2lwaW5nU2VsZWN0b3IsIHRhcmdldEVsKSA6IHRhcmdldEVsLmNsb3Nlc3Qobm9Td2lwaW5nU2VsZWN0b3IpKSkge1xuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy5zd2lwZUhhbmRsZXIpIHtcbiAgICBpZiAoIXRhcmdldEVsLmNsb3Nlc3QocGFyYW1zLnN3aXBlSGFuZGxlcikpIHJldHVybjtcbiAgfVxuICB0b3VjaGVzLmN1cnJlbnRYID0gZS5wYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IGUucGFnZVk7XG4gIGNvbnN0IHN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gIGNvbnN0IHN0YXJ0WSA9IHRvdWNoZXMuY3VycmVudFk7XG5cbiAgLy8gRG8gTk9UIHN0YXJ0IGlmIGlPUyBlZGdlIHN3aXBlIGlzIGRldGVjdGVkLiBPdGhlcndpc2UgaU9TIGFwcCBjYW5ub3Qgc3dpcGUtdG8tZ28tYmFjayBhbnltb3JlXG5cbiAgY29uc3QgZWRnZVN3aXBlRGV0ZWN0aW9uID0gcGFyYW1zLmVkZ2VTd2lwZURldGVjdGlvbiB8fCBwYXJhbXMuaU9TRWRnZVN3aXBlRGV0ZWN0aW9uO1xuICBjb25zdCBlZGdlU3dpcGVUaHJlc2hvbGQgPSBwYXJhbXMuZWRnZVN3aXBlVGhyZXNob2xkIHx8IHBhcmFtcy5pT1NFZGdlU3dpcGVUaHJlc2hvbGQ7XG4gIGlmIChlZGdlU3dpcGVEZXRlY3Rpb24gJiYgKHN0YXJ0WCA8PSBlZGdlU3dpcGVUaHJlc2hvbGQgfHwgc3RhcnRYID49IHdpbmRvdy5pbm5lcldpZHRoIC0gZWRnZVN3aXBlVGhyZXNob2xkKSkge1xuICAgIGlmIChlZGdlU3dpcGVEZXRlY3Rpb24gPT09ICdwcmV2ZW50Jykge1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBPYmplY3QuYXNzaWduKGRhdGEsIHtcbiAgICBpc1RvdWNoZWQ6IHRydWUsXG4gICAgaXNNb3ZlZDogZmFsc2UsXG4gICAgYWxsb3dUb3VjaENhbGxiYWNrczogdHJ1ZSxcbiAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWRcbiAgfSk7XG4gIHRvdWNoZXMuc3RhcnRYID0gc3RhcnRYO1xuICB0b3VjaGVzLnN0YXJ0WSA9IHN0YXJ0WTtcbiAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIHN3aXBlci51cGRhdGVTaXplKCk7XG4gIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IGZhbHNlO1xuICBsZXQgcHJldmVudERlZmF1bHQgPSB0cnVlO1xuICBpZiAodGFyZ2V0RWwubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgIHByZXZlbnREZWZhdWx0ID0gZmFsc2U7XG4gICAgaWYgKHRhcmdldEVsLm5vZGVOYW1lID09PSAnU0VMRUNUJykge1xuICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5tYXRjaGVzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgIT09IHRhcmdldEVsKSB7XG4gICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gIH1cbiAgY29uc3Qgc2hvdWxkUHJldmVudERlZmF1bHQgPSBwcmV2ZW50RGVmYXVsdCAmJiBzd2lwZXIuYWxsb3dUb3VjaE1vdmUgJiYgcGFyYW1zLnRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDtcbiAgaWYgKChwYXJhbXMudG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQgfHwgc2hvdWxkUHJldmVudERlZmF1bHQpICYmICF0YXJnZXRFbC5pc0NvbnRlbnRFZGl0YWJsZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiBzd2lwZXIucGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlICYmIHN3aXBlci5hbmltYXRpbmcgJiYgIXBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hTdGFydCgpO1xuICB9XG4gIHN3aXBlci5lbWl0KCd0b3VjaFN0YXJ0JywgZSk7XG59IiwiaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IG5vdyB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvblRvdWNoTW92ZShldmVudCkge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHRvdWNoZXMsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgaWYgKCFwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiBldmVudC5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgcmV0dXJuO1xuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgaWYgKGRhdGEuc3RhcnRNb3ZpbmcgJiYgZGF0YS5pc1Njcm9sbGluZykge1xuICAgICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBwb2ludGVySW5kZXggPSBkYXRhLmV2Q2FjaGUuZmluZEluZGV4KGNhY2hlZEV2ID0+IGNhY2hlZEV2LnBvaW50ZXJJZCA9PT0gZS5wb2ludGVySWQpO1xuICBpZiAocG9pbnRlckluZGV4ID49IDApIGRhdGEuZXZDYWNoZVtwb2ludGVySW5kZXhdID0gZTtcbiAgY29uc3QgdGFyZ2V0VG91Y2ggPSBkYXRhLmV2Q2FjaGUubGVuZ3RoID4gMSA/IGRhdGEuZXZDYWNoZVswXSA6IGU7XG4gIGNvbnN0IHBhZ2VYID0gdGFyZ2V0VG91Y2gucGFnZVg7XG4gIGNvbnN0IHBhZ2VZID0gdGFyZ2V0VG91Y2gucGFnZVk7XG4gIGlmIChlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyKSB7XG4gICAgdG91Y2hlcy5zdGFydFggPSBwYWdlWDtcbiAgICB0b3VjaGVzLnN0YXJ0WSA9IHBhZ2VZO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXN3aXBlci5hbGxvd1RvdWNoTW92ZSkge1xuICAgIGlmICghZS50YXJnZXQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGRhdGEuaXNUb3VjaGVkKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRvdWNoZXMsIHtcbiAgICAgICAgc3RhcnRYOiBwYWdlWCxcbiAgICAgICAgc3RhcnRZOiBwYWdlWSxcbiAgICAgICAgcHJldlg6IHN3aXBlci50b3VjaGVzLmN1cnJlbnRYLFxuICAgICAgICBwcmV2WTogc3dpcGVyLnRvdWNoZXMuY3VycmVudFksXG4gICAgICAgIGN1cnJlbnRYOiBwYWdlWCxcbiAgICAgICAgY3VycmVudFk6IHBhZ2VZXG4gICAgICB9KTtcbiAgICAgIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcyAmJiAhcGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc3dpcGVyLmlzVmVydGljYWwoKSkge1xuICAgICAgLy8gVmVydGljYWxcbiAgICAgIGlmIChwYWdlWSA8IHRvdWNoZXMuc3RhcnRZICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIHx8IHBhZ2VZID4gdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHBhZ2VYIDwgdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgfHwgcGFnZVggPiB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBlLnRhcmdldC5tYXRjaGVzKGRhdGEuZm9jdXNhYmxlRWxlbWVudHMpKSB7XG4gICAgICBkYXRhLmlzTW92ZWQgPSB0cnVlO1xuICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmUnLCBlKTtcbiAgfVxuICBpZiAoZS50YXJnZXRUb3VjaGVzICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAxKSByZXR1cm47XG4gIHRvdWNoZXMuY3VycmVudFggPSBwYWdlWDtcbiAgdG91Y2hlcy5jdXJyZW50WSA9IHBhZ2VZO1xuICBjb25zdCBkaWZmWCA9IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WDtcbiAgY29uc3QgZGlmZlkgPSB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5zdGFydFk7XG4gIGlmIChzd2lwZXIucGFyYW1zLnRocmVzaG9sZCAmJiBNYXRoLnNxcnQoZGlmZlggKiogMiArIGRpZmZZICoqIDIpIDwgc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQpIHJldHVybjtcbiAgaWYgKHR5cGVvZiBkYXRhLmlzU2Nyb2xsaW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGxldCB0b3VjaEFuZ2xlO1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgdG91Y2hlcy5jdXJyZW50WSA9PT0gdG91Y2hlcy5zdGFydFkgfHwgc3dpcGVyLmlzVmVydGljYWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRYID09PSB0b3VjaGVzLnN0YXJ0WCkge1xuICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmIChkaWZmWCAqIGRpZmZYICsgZGlmZlkgKiBkaWZmWSA+PSAyNSkge1xuICAgICAgICB0b3VjaEFuZ2xlID0gTWF0aC5hdGFuMihNYXRoLmFicyhkaWZmWSksIE1hdGguYWJzKGRpZmZYKSkgKiAxODAgLyBNYXRoLlBJO1xuICAgICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlIDogOTAgLSB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZU9wcG9zaXRlJywgZSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBkYXRhLnN0YXJ0TW92aW5nID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0b3VjaGVzLmN1cnJlbnRYICE9PSB0b3VjaGVzLnN0YXJ0WCB8fCB0b3VjaGVzLmN1cnJlbnRZICE9PSB0b3VjaGVzLnN0YXJ0WSkge1xuICAgICAgZGF0YS5zdGFydE1vdmluZyA9IHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmlzU2Nyb2xsaW5nIHx8IHN3aXBlci56b29tICYmIHN3aXBlci5wYXJhbXMuem9vbSAmJiBzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCAmJiBkYXRhLmV2Q2FjaGUubGVuZ3RoID4gMSkge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghZGF0YS5zdGFydE1vdmluZykge1xuICAgIHJldHVybjtcbiAgfVxuICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICBpZiAoIXBhcmFtcy5jc3NNb2RlICYmIGUuY2FuY2VsYWJsZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICBpZiAocGFyYW1zLnRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbiAmJiAhcGFyYW1zLm5lc3RlZCkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cbiAgbGV0IGRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBkaWZmWCA6IGRpZmZZO1xuICBsZXQgdG91Y2hlc0RpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5wcmV2aW91c1ggOiB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5wcmV2aW91c1k7XG4gIGlmIChwYXJhbXMub25lV2F5TW92ZW1lbnQpIHtcbiAgICBkaWZmID0gTWF0aC5hYnMoZGlmZikgKiAocnRsID8gMSA6IC0xKTtcbiAgICB0b3VjaGVzRGlmZiA9IE1hdGguYWJzKHRvdWNoZXNEaWZmKSAqIChydGwgPyAxIDogLTEpO1xuICB9XG4gIHRvdWNoZXMuZGlmZiA9IGRpZmY7XG4gIGRpZmYgKj0gcGFyYW1zLnRvdWNoUmF0aW87XG4gIGlmIChydGwpIHtcbiAgICBkaWZmID0gLWRpZmY7XG4gICAgdG91Y2hlc0RpZmYgPSAtdG91Y2hlc0RpZmY7XG4gIH1cbiAgY29uc3QgcHJldlRvdWNoZXNEaXJlY3Rpb24gPSBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbjtcbiAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gZGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gIHN3aXBlci50b3VjaGVzRGlyZWN0aW9uID0gdG91Y2hlc0RpZmYgPiAwID8gJ3ByZXYnIDogJ25leHQnO1xuICBjb25zdCBpc0xvb3AgPSBzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXBhcmFtcy5jc3NNb2RlO1xuICBpZiAoIWRhdGEuaXNNb3ZlZCkge1xuICAgIGlmIChpc0xvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgZGlyZWN0aW9uOiBzd2lwZXIuc3dpcGVEaXJlY3Rpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgICBkYXRhLnN0YXJ0VHJhbnNsYXRlID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpO1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBjb25zdCBldnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KCd0cmFuc2l0aW9uZW5kJywge1xuICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgIH1cbiAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSBmYWxzZTtcbiAgICAvLyBHcmFiIEN1cnNvclxuICAgIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKHRydWUpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVyRmlyc3RNb3ZlJywgZSk7XG4gIH1cbiAgbGV0IGxvb3BGaXhlZDtcbiAgaWYgKGRhdGEuaXNNb3ZlZCAmJiBwcmV2VG91Y2hlc0RpcmVjdGlvbiAhPT0gc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb24gJiYgaXNMb29wICYmIE1hdGguYWJzKGRpZmYpID49IDEpIHtcbiAgICAvLyBuZWVkIGFub3RoZXIgbG9vcCBmaXhcbiAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICBkaXJlY3Rpb246IHN3aXBlci5zd2lwZURpcmVjdGlvbixcbiAgICAgIHNldFRyYW5zbGF0ZTogdHJ1ZVxuICAgIH0pO1xuICAgIGxvb3BGaXhlZCA9IHRydWU7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NsaWRlck1vdmUnLCBlKTtcbiAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcbiAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGlmZiArIGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIGxldCBkaXNhYmxlUGFyZW50U3dpcGVyID0gdHJ1ZTtcbiAgbGV0IHJlc2lzdGFuY2VSYXRpbyA9IHBhcmFtcy5yZXNpc3RhbmNlUmF0aW87XG4gIGlmIChwYXJhbXMudG91Y2hSZWxlYXNlT25FZGdlcykge1xuICAgIHJlc2lzdGFuY2VSYXRpbyA9IDA7XG4gIH1cbiAgaWYgKGRpZmYgPiAwKSB7XG4gICAgaWYgKGlzTG9vcCAmJiAhbG9vcEZpeGVkICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgLSBzd2lwZXIuc2l6ZSAvIDIgOiBzd2lwZXIubWluVHJhbnNsYXRlKCkpKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogJ3ByZXYnLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgICBpZiAocGFyYW1zLnJlc2lzdGFuY2UpIHtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gMSArICgtc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgZGF0YS5zdGFydFRyYW5zbGF0ZSArIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoZGlmZiA8IDApIHtcbiAgICBpZiAoaXNMb29wICYmICFsb29wRml4ZWQgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIHN3aXBlci5zaXplIC8gMiA6IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgZGlyZWN0aW9uOiAnbmV4dCcsXG4gICAgICAgIHNldFRyYW5zbGF0ZTogdHJ1ZSxcbiAgICAgICAgYWN0aXZlU2xpZGVJbmRleDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogTWF0aC5jZWlsKHBhcnNlRmxvYXQocGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSkpXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSB7XG4gICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSArIDEgLSAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gZGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKGRpc2FibGVQYXJlbnRTd2lwZXIpIHtcbiAgICBlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgIXN3aXBlci5hbGxvd1NsaWRlTmV4dCkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cblxuICAvLyBUaHJlc2hvbGRcbiAgaWYgKHBhcmFtcy50aHJlc2hvbGQgPiAwKSB7XG4gICAgaWYgKE1hdGguYWJzKGRpZmYpID4gcGFyYW1zLnRocmVzaG9sZCB8fCBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgaWYgKCFkYXRhLmFsbG93VGhyZXNob2xkTW92ZSkge1xuICAgICAgICBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSA9IHRydWU7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgICAgICAgdG91Y2hlcy5zdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgICAgICB0b3VjaGVzLmRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFggOiB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5zdGFydFk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKCFwYXJhbXMuZm9sbG93RmluZ2VyIHx8IHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG5cbiAgLy8gVXBkYXRlIGFjdGl2ZSBpbmRleCBpbiBmcmVlIG1vZGVcbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBzd2lwZXIuZnJlZU1vZGUgfHwgcGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9XG4gIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmIHN3aXBlci5mcmVlTW9kZSkge1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoTW92ZSgpO1xuICB9XG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbiAgLy8gVXBkYXRlIHRyYW5zbGF0ZVxuICBzd2lwZXIuc2V0VHJhbnNsYXRlKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG59IiwiaW1wb3J0IHsgbm93LCBuZXh0VGljayB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvblRvdWNoRW5kKGV2ZW50KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICBjb25zdCBwb2ludGVySW5kZXggPSBkYXRhLmV2Q2FjaGUuZmluZEluZGV4KGNhY2hlZEV2ID0+IGNhY2hlZEV2LnBvaW50ZXJJZCA9PT0gZXZlbnQucG9pbnRlcklkKTtcbiAgaWYgKHBvaW50ZXJJbmRleCA+PSAwKSB7XG4gICAgZGF0YS5ldkNhY2hlLnNwbGljZShwb2ludGVySW5kZXgsIDEpO1xuICB9XG4gIGlmIChbJ3BvaW50ZXJjYW5jZWwnLCAncG9pbnRlcm91dCcsICdwb2ludGVybGVhdmUnXS5pbmNsdWRlcyhldmVudC50eXBlKSkge1xuICAgIGNvbnN0IHByb2NlZWQgPSBldmVudC50eXBlID09PSAncG9pbnRlcmNhbmNlbCcgJiYgKHN3aXBlci5icm93c2VyLmlzU2FmYXJpIHx8IHN3aXBlci5icm93c2VyLmlzV2ViVmlldyk7XG4gICAgaWYgKCFwcm9jZWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hlcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZXZlbnQucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHJldHVybjtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaEVuZCcsIGUpO1xuICB9XG4gIGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcyA9IGZhbHNlO1xuICBpZiAoIWRhdGEuaXNUb3VjaGVkKSB7XG4gICAgaWYgKGRhdGEuaXNNb3ZlZCAmJiBwYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICAgIH1cbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIFJldHVybiBHcmFiIEN1cnNvclxuICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgZGF0YS5pc01vdmVkICYmIGRhdGEuaXNUb3VjaGVkICYmIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSkge1xuICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKGZhbHNlKTtcbiAgfVxuXG4gIC8vIFRpbWUgZGlmZlxuICBjb25zdCB0b3VjaEVuZFRpbWUgPSBub3coKTtcbiAgY29uc3QgdGltZURpZmYgPSB0b3VjaEVuZFRpbWUgLSBkYXRhLnRvdWNoU3RhcnRUaW1lO1xuXG4gIC8vIFRhcCwgZG91YmxlVGFwLCBDbGlja1xuICBpZiAoc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICBjb25zdCBwYXRoVHJlZSA9IGUucGF0aCB8fCBlLmNvbXBvc2VkUGF0aCAmJiBlLmNvbXBvc2VkUGF0aCgpO1xuICAgIHN3aXBlci51cGRhdGVDbGlja2VkU2xpZGUocGF0aFRyZWUgJiYgcGF0aFRyZWVbMF0gfHwgZS50YXJnZXQpO1xuICAgIHN3aXBlci5lbWl0KCd0YXAgY2xpY2snLCBlKTtcbiAgICBpZiAodGltZURpZmYgPCAzMDAgJiYgdG91Y2hFbmRUaW1lIC0gZGF0YS5sYXN0Q2xpY2tUaW1lIDwgMzAwKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnZG91YmxlVGFwIGRvdWJsZUNsaWNrJywgZSk7XG4gICAgfVxuICB9XG4gIGRhdGEubGFzdENsaWNrVGltZSA9IG5vdygpO1xuICBuZXh0VGljaygoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIuZGVzdHJveWVkKSBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gIH0pO1xuICBpZiAoIWRhdGEuaXNUb3VjaGVkIHx8ICFkYXRhLmlzTW92ZWQgfHwgIXN3aXBlci5zd2lwZURpcmVjdGlvbiB8fCB0b3VjaGVzLmRpZmYgPT09IDAgfHwgZGF0YS5jdXJyZW50VHJhbnNsYXRlID09PSBkYXRhLnN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gIGxldCBjdXJyZW50UG9zO1xuICBpZiAocGFyYW1zLmZvbGxvd0Zpbmdlcikge1xuICAgIGN1cnJlbnRQb3MgPSBydGwgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgY3VycmVudFBvcyA9IC1kYXRhLmN1cnJlbnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkKSB7XG4gICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hFbmQoe1xuICAgICAgY3VycmVudFBvc1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZpbmQgY3VycmVudCBzbGlkZVxuICBsZXQgc3RvcEluZGV4ID0gMDtcbiAgbGV0IGdyb3VwU2l6ZSA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbMF07XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgY29uc3QgaW5jcmVtZW50ID0gaSA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICBpZiAodHlwZW9mIHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldICYmIGN1cnJlbnRQb3MgPCBzbGlkZXNHcmlkW2kgKyBpbmNyZW1lbnRdKSB7XG4gICAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0gLSBzbGlkZXNHcmlkW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY3VycmVudFBvcyA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdIC0gc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDJdO1xuICAgIH1cbiAgfVxuICBsZXQgcmV3aW5kRmlyc3RJbmRleCA9IG51bGw7XG4gIGxldCByZXdpbmRMYXN0SW5kZXggPSBudWxsO1xuICBpZiAocGFyYW1zLnJld2luZCkge1xuICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgIHJld2luZExhc3RJbmRleCA9IHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggLSAxIDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICByZXdpbmRGaXJzdEluZGV4ID0gMDtcbiAgICB9XG4gIH1cbiAgLy8gRmluZCBjdXJyZW50IHNsaWRlIHNpemVcbiAgY29uc3QgcmF0aW8gPSAoY3VycmVudFBvcyAtIHNsaWRlc0dyaWRbc3RvcEluZGV4XSkgLyBncm91cFNpemU7XG4gIGNvbnN0IGluY3JlbWVudCA9IHN0b3BJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgaWYgKHRpbWVEaWZmID4gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgIC8vIExvbmcgdG91Y2hlc1xuICAgIGlmICghcGFyYW1zLmxvbmdTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgaWYgKHJhdGlvID49IHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHN3aXBlci5zbGlkZVRvKHBhcmFtcy5yZXdpbmQgJiYgc3dpcGVyLmlzRW5kID8gcmV3aW5kRmlyc3RJbmRleCA6IHN0b3BJbmRleCArIGluY3JlbWVudCk7ZWxzZSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgIGlmIChyYXRpbyA+IDEgLSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgICB9IGVsc2UgaWYgKHJld2luZExhc3RJbmRleCAhPT0gbnVsbCAmJiByYXRpbyA8IDAgJiYgTWF0aC5hYnMocmF0aW8pID4gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhyZXdpbmRMYXN0SW5kZXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gU2hvcnQgc3dpcGVzXG4gICAgaWYgKCFwYXJhbXMuc2hvcnRTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGlzTmF2QnV0dG9uVGFyZ2V0ID0gc3dpcGVyLm5hdmlnYXRpb24gJiYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgfHwgZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCk7XG4gICAgaWYgKCFpc05hdkJ1dHRvblRhcmdldCkge1xuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHJld2luZEZpcnN0SW5kZXggIT09IG51bGwgPyByZXdpbmRGaXJzdEluZGV4IDogc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhyZXdpbmRMYXN0SW5kZXggIT09IG51bGwgPyByZXdpbmRMYXN0SW5kZXggOiBzdG9wSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG4gIH1cbn0iLCJsZXQgdGltZW91dDtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uUmVzaXplKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIGVsXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChlbCAmJiBlbC5vZmZzZXRXaWR0aCA9PT0gMCkgcmV0dXJuO1xuXG4gIC8vIEJyZWFrcG9pbnRzXG4gIGlmIChwYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICB9XG5cbiAgLy8gU2F2ZSBsb2Nrc1xuICBjb25zdCB7XG4gICAgYWxsb3dTbGlkZU5leHQsXG4gICAgYWxsb3dTbGlkZVByZXYsXG4gICAgc25hcEdyaWRcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG5cbiAgLy8gRGlzYWJsZSBsb2NrcyBvbiByZXNpemVcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcbiAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBjb25zdCBpc1ZpcnR1YWxMb29wID0gaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wO1xuICBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiAhaXNWaXJ0dWFsTG9vcCkge1xuICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSwgMCwgZmFsc2UsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgJiYgIWlzVmlydHVhbCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG9Mb29wKHN3aXBlci5yZWFsSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIGlmIChzd2lwZXIuYXV0b3BsYXkgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5ICYmIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nICYmIHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnJlc3VtZSgpO1xuICAgICAgfVxuICAgIH0sIDUwMCk7XG4gIH1cbiAgLy8gUmV0dXJuIGxvY2tzIGFmdGVyIHJlc2l6ZVxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvbkNsaWNrKGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICBpZiAoIXN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJldmVudENsaWNrcykgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbiAmJiBzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHdyYXBwZXJFbCxcbiAgICBydGxUcmFuc2xhdGUsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbExlZnQ7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnRyYW5zbGF0ZSA9IC13cmFwcGVyRWwuc2Nyb2xsVG9wO1xuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpZiAoc3dpcGVyLnRyYW5zbGF0ZSA9PT0gMCkgc3dpcGVyLnRyYW5zbGF0ZSA9IDA7XG4gIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBsZXQgbmV3UHJvZ3Jlc3M7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBuZXdQcm9ncmVzcyA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAoc3dpcGVyLnRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgfVxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHN3aXBlci5wcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBmYWxzZSk7XG59IiwiZXhwb3J0IGNvbnN0IHByb2Nlc3NMYXp5UHJlbG9hZGVyID0gKHN3aXBlciwgaW1hZ2VFbCkgPT4ge1xuICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIucGFyYW1zKSByZXR1cm47XG4gIGNvbnN0IHNsaWRlU2VsZWN0b3IgPSAoKSA9PiBzd2lwZXIuaXNFbGVtZW50ID8gYHN3aXBlci1zbGlkZWAgOiBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWA7XG4gIGNvbnN0IHNsaWRlRWwgPSBpbWFnZUVsLmNsb3Nlc3Qoc2xpZGVTZWxlY3RvcigpKTtcbiAgaWYgKHNsaWRlRWwpIHtcbiAgICBjb25zdCBsYXp5RWwgPSBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoYC4ke3N3aXBlci5wYXJhbXMubGF6eVByZWxvYWRlckNsYXNzfWApO1xuICAgIGlmIChsYXp5RWwpIGxhenlFbC5yZW1vdmUoKTtcbiAgfVxufTsiLCJpbXBvcnQgeyBwcm9jZXNzTGF6eVByZWxvYWRlciB9IGZyb20gJy4uLy4uL3NoYXJlZC9wcm9jZXNzLWxhenktcHJlbG9hZGVyLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9uTG9hZChlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgZS50YXJnZXQpO1xuICBzd2lwZXIudXBkYXRlKCk7XG59IiwiaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCBvblRvdWNoU3RhcnQgZnJvbSAnLi9vblRvdWNoU3RhcnQuanMnO1xuaW1wb3J0IG9uVG91Y2hNb3ZlIGZyb20gJy4vb25Ub3VjaE1vdmUuanMnO1xuaW1wb3J0IG9uVG91Y2hFbmQgZnJvbSAnLi9vblRvdWNoRW5kLmpzJztcbmltcG9ydCBvblJlc2l6ZSBmcm9tICcuL29uUmVzaXplLmpzJztcbmltcG9ydCBvbkNsaWNrIGZyb20gJy4vb25DbGljay5qcyc7XG5pbXBvcnQgb25TY3JvbGwgZnJvbSAnLi9vblNjcm9sbC5qcyc7XG5pbXBvcnQgb25Mb2FkIGZyb20gJy4vb25Mb2FkLmpzJztcbmxldCBkdW1teUV2ZW50QXR0YWNoZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIGR1bW15RXZlbnRMaXN0ZW5lcigpIHt9XG5jb25zdCBldmVudHMgPSAoc3dpcGVyLCBtZXRob2QpID0+IHtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIGVsLFxuICAgIHdyYXBwZXJFbCxcbiAgICBkZXZpY2VcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgY2FwdHVyZSA9ICEhcGFyYW1zLm5lc3RlZDtcbiAgY29uc3QgZG9tTWV0aG9kID0gbWV0aG9kID09PSAnb24nID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ3JlbW92ZUV2ZW50TGlzdGVuZXInO1xuICBjb25zdCBzd2lwZXJNZXRob2QgPSBtZXRob2Q7XG5cbiAgLy8gVG91Y2ggRXZlbnRzXG4gIGVsW2RvbU1ldGhvZF0oJ3BvaW50ZXJkb3duJywgc3dpcGVyLm9uVG91Y2hTdGFydCwge1xuICAgIHBhc3NpdmU6IGZhbHNlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVybW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwge1xuICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgIGNhcHR1cmVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJ1cCcsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcmNhbmNlbCcsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcm91dCcsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcmxlYXZlJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuXG4gIC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzXG4gIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgZWxbZG9tTWV0aG9kXSgnY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsW2RvbU1ldGhvZF0oJ3Njcm9sbCcsIHN3aXBlci5vblNjcm9sbCk7XG4gIH1cblxuICAvLyBSZXNpemUgaGFuZGxlclxuICBpZiAocGFyYW1zLnVwZGF0ZU9uV2luZG93UmVzaXplKSB7XG4gICAgc3dpcGVyW3N3aXBlck1ldGhvZF0oZGV2aWNlLmlvcyB8fCBkZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXJbc3dpcGVyTWV0aG9kXSgnb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH1cblxuICAvLyBJbWFnZXMgbG9hZGVyXG4gIGVsW2RvbU1ldGhvZF0oJ2xvYWQnLCBzd2lwZXIub25Mb2FkLCB7XG4gICAgY2FwdHVyZTogdHJ1ZVxuICB9KTtcbn07XG5mdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBzd2lwZXIub25Ub3VjaFN0YXJ0ID0gb25Ub3VjaFN0YXJ0LmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hNb3ZlID0gb25Ub3VjaE1vdmUuYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Ub3VjaEVuZCA9IG9uVG91Y2hFbmQuYmluZChzd2lwZXIpO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIub25TY3JvbGwgPSBvblNjcm9sbC5iaW5kKHN3aXBlcik7XG4gIH1cbiAgc3dpcGVyLm9uQ2xpY2sgPSBvbkNsaWNrLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uTG9hZCA9IG9uTG9hZC5iaW5kKHN3aXBlcik7XG4gIGlmICghZHVtbXlFdmVudEF0dGFjaGVkKSB7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGR1bW15RXZlbnRMaXN0ZW5lcik7XG4gICAgZHVtbXlFdmVudEF0dGFjaGVkID0gdHJ1ZTtcbiAgfVxuICBldmVudHMoc3dpcGVyLCAnb24nKTtcbn1cbmZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgZXZlbnRzKHN3aXBlciwgJ29mZicpO1xufVxuZXhwb3J0IGRlZmF1bHQge1xuICBhdHRhY2hFdmVudHMsXG4gIGRldGFjaEV2ZW50c1xufTsiLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuY29uc3QgaXNHcmlkRW5hYmxlZCA9IChzd2lwZXIsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0QnJlYWtwb2ludCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHJlYWxJbmRleCxcbiAgICBpbml0aWFsaXplZCxcbiAgICBwYXJhbXMsXG4gICAgZWxcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgYnJlYWtwb2ludHMgPSBwYXJhbXMuYnJlYWtwb2ludHM7XG4gIGlmICghYnJlYWtwb2ludHMgfHwgYnJlYWtwb2ludHMgJiYgT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gIC8vIEdldCBicmVha3BvaW50IGZvciB3aW5kb3cgd2lkdGggYW5kIHVwZGF0ZSBwYXJhbWV0ZXJzXG4gIGNvbnN0IGJyZWFrcG9pbnQgPSBzd2lwZXIuZ2V0QnJlYWtwb2ludChicmVha3BvaW50cywgc3dpcGVyLnBhcmFtcy5icmVha3BvaW50c0Jhc2UsIHN3aXBlci5lbCk7XG4gIGlmICghYnJlYWtwb2ludCB8fCBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgPT09IGJyZWFrcG9pbnQpIHJldHVybjtcbiAgY29uc3QgYnJlYWtwb2ludE9ubHlQYXJhbXMgPSBicmVha3BvaW50IGluIGJyZWFrcG9pbnRzID8gYnJlYWtwb2ludHNbYnJlYWtwb2ludF0gOiB1bmRlZmluZWQ7XG4gIGNvbnN0IGJyZWFrcG9pbnRQYXJhbXMgPSBicmVha3BvaW50T25seVBhcmFtcyB8fCBzd2lwZXIub3JpZ2luYWxQYXJhbXM7XG4gIGNvbnN0IHdhc011bHRpUm93ID0gaXNHcmlkRW5hYmxlZChzd2lwZXIsIHBhcmFtcyk7XG4gIGNvbnN0IGlzTXVsdGlSb3cgPSBpc0dyaWRFbmFibGVkKHN3aXBlciwgYnJlYWtwb2ludFBhcmFtcyk7XG4gIGNvbnN0IHdhc0VuYWJsZWQgPSBwYXJhbXMuZW5hYmxlZDtcbiAgaWYgKHdhc011bHRpUm93ICYmICFpc011bHRpUm93KSB7XG4gICAgZWwuY2xhc3NMaXN0LnJlbW92ZShgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkYCwgYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZC1jb2x1bW5gKTtcbiAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgfSBlbHNlIGlmICghd2FzTXVsdGlSb3cgJiYgaXNNdWx0aVJvdykge1xuICAgIGVsLmNsYXNzTGlzdC5hZGQoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZGApO1xuICAgIGlmIChicmVha3BvaW50UGFyYW1zLmdyaWQuZmlsbCAmJiBicmVha3BvaW50UGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbicgfHwgIWJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsICYmIHBhcmFtcy5ncmlkLmZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICB9XG5cbiAgLy8gVG9nZ2xlIG5hdmlnYXRpb24sIHBhZ2luYXRpb24sIHNjcm9sbGJhclxuICBbJ25hdmlnYXRpb24nLCAncGFnaW5hdGlvbicsICdzY3JvbGxiYXInXS5mb3JFYWNoKHByb3AgPT4ge1xuICAgIGNvbnN0IHdhc01vZHVsZUVuYWJsZWQgPSBwYXJhbXNbcHJvcF0gJiYgcGFyYW1zW3Byb3BdLmVuYWJsZWQ7XG4gICAgY29uc3QgaXNNb2R1bGVFbmFibGVkID0gYnJlYWtwb2ludFBhcmFtc1twcm9wXSAmJiBicmVha3BvaW50UGFyYW1zW3Byb3BdLmVuYWJsZWQ7XG4gICAgaWYgKHdhc01vZHVsZUVuYWJsZWQgJiYgIWlzTW9kdWxlRW5hYmxlZCkge1xuICAgICAgc3dpcGVyW3Byb3BdLmRpc2FibGUoKTtcbiAgICB9XG4gICAgaWYgKCF3YXNNb2R1bGVFbmFibGVkICYmIGlzTW9kdWxlRW5hYmxlZCkge1xuICAgICAgc3dpcGVyW3Byb3BdLmVuYWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGRpcmVjdGlvbkNoYW5nZWQgPSBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAmJiBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAhPT0gcGFyYW1zLmRpcmVjdGlvbjtcbiAgY29uc3QgbmVlZHNSZUxvb3AgPSBwYXJhbXMubG9vcCAmJiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSBwYXJhbXMuc2xpZGVzUGVyVmlldyB8fCBkaXJlY3Rpb25DaGFuZ2VkKTtcbiAgaWYgKGRpcmVjdGlvbkNoYW5nZWQgJiYgaW5pdGlhbGl6ZWQpIHtcbiAgICBzd2lwZXIuY2hhbmdlRGlyZWN0aW9uKCk7XG4gIH1cbiAgZXh0ZW5kKHN3aXBlci5wYXJhbXMsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICBjb25zdCBpc0VuYWJsZWQgPSBzd2lwZXIucGFyYW1zLmVuYWJsZWQ7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgYWxsb3dTbGlkZU5leHQ6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZU5leHQsXG4gICAgYWxsb3dTbGlkZVByZXY6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZVByZXZcbiAgfSk7XG4gIGlmICh3YXNFbmFibGVkICYmICFpc0VuYWJsZWQpIHtcbiAgICBzd2lwZXIuZGlzYWJsZSgpO1xuICB9IGVsc2UgaWYgKCF3YXNFbmFibGVkICYmIGlzRW5hYmxlZCkge1xuICAgIHN3aXBlci5lbmFibGUoKTtcbiAgfVxuICBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgPSBicmVha3BvaW50O1xuICBzd2lwZXIuZW1pdCgnX2JlZm9yZUJyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcbiAgaWYgKG5lZWRzUmVMb29wICYmIGluaXRpYWxpemVkKSB7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgc3dpcGVyLmxvb3BDcmVhdGUocmVhbEluZGV4KTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ2JyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcbn0iLCJleHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6IHRydWUsXG4gIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICBvbmVXYXlNb3ZlbWVudDogZmFsc2UsXG4gIHRvdWNoRXZlbnRzVGFyZ2V0OiAnd3JhcHBlcicsXG4gIGluaXRpYWxTbGlkZTogMCxcbiAgc3BlZWQ6IDMwMCxcbiAgY3NzTW9kZTogZmFsc2UsXG4gIHVwZGF0ZU9uV2luZG93UmVzaXplOiB0cnVlLFxuICByZXNpemVPYnNlcnZlcjogdHJ1ZSxcbiAgbmVzdGVkOiBmYWxzZSxcbiAgY3JlYXRlRWxlbWVudHM6IGZhbHNlLFxuICBlbmFibGVkOiB0cnVlLFxuICBmb2N1c2FibGVFbGVtZW50czogJ2lucHV0LCBzZWxlY3QsIG9wdGlvbiwgdGV4dGFyZWEsIGJ1dHRvbiwgdmlkZW8sIGxhYmVsJyxcbiAgLy8gT3ZlcnJpZGVzXG4gIHdpZHRoOiBudWxsLFxuICBoZWlnaHQ6IG51bGwsXG4gIC8vXG4gIHByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbjogZmFsc2UsXG4gIC8vIHNzclxuICB1c2VyQWdlbnQ6IG51bGwsXG4gIHVybDogbnVsbCxcbiAgLy8gVG8gc3VwcG9ydCBpT1MncyBzd2lwZS10by1nby1iYWNrIGdlc3R1cmUgKHdoZW4gYmVpbmcgdXNlZCBpbi1hcHApLlxuICBlZGdlU3dpcGVEZXRlY3Rpb246IGZhbHNlLFxuICBlZGdlU3dpcGVUaHJlc2hvbGQ6IDIwLFxuICAvLyBBdXRvaGVpZ2h0XG4gIGF1dG9IZWlnaHQ6IGZhbHNlLFxuICAvLyBTZXQgd3JhcHBlciB3aWR0aFxuICBzZXRXcmFwcGVyU2l6ZTogZmFsc2UsXG4gIC8vIFZpcnR1YWwgVHJhbnNsYXRlXG4gIHZpcnR1YWxUcmFuc2xhdGU6IGZhbHNlLFxuICAvLyBFZmZlY3RzXG4gIGVmZmVjdDogJ3NsaWRlJyxcbiAgLy8gJ3NsaWRlJyBvciAnZmFkZScgb3IgJ2N1YmUnIG9yICdjb3ZlcmZsb3cnIG9yICdmbGlwJ1xuXG4gIC8vIEJyZWFrcG9pbnRzXG4gIGJyZWFrcG9pbnRzOiB1bmRlZmluZWQsXG4gIGJyZWFrcG9pbnRzQmFzZTogJ3dpbmRvdycsXG4gIC8vIFNsaWRlcyBncmlkXG4gIHNwYWNlQmV0d2VlbjogMCxcbiAgc2xpZGVzUGVyVmlldzogMSxcbiAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gIHNsaWRlc1Blckdyb3VwU2tpcDogMCxcbiAgc2xpZGVzUGVyR3JvdXBBdXRvOiBmYWxzZSxcbiAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICBjZW50ZXJlZFNsaWRlc0JvdW5kczogZmFsc2UsXG4gIHNsaWRlc09mZnNldEJlZm9yZTogMCxcbiAgLy8gaW4gcHhcbiAgc2xpZGVzT2Zmc2V0QWZ0ZXI6IDAsXG4gIC8vIGluIHB4XG4gIG5vcm1hbGl6ZVNsaWRlSW5kZXg6IHRydWUsXG4gIGNlbnRlckluc3VmZmljaWVudFNsaWRlczogZmFsc2UsXG4gIC8vIERpc2FibGUgc3dpcGVyIGFuZCBoaWRlIG5hdmlnYXRpb24gd2hlbiBjb250YWluZXIgbm90IG92ZXJmbG93XG4gIHdhdGNoT3ZlcmZsb3c6IHRydWUsXG4gIC8vIFJvdW5kIGxlbmd0aFxuICByb3VuZExlbmd0aHM6IGZhbHNlLFxuICAvLyBUb3VjaGVzXG4gIHRvdWNoUmF0aW86IDEsXG4gIHRvdWNoQW5nbGU6IDQ1LFxuICBzaW11bGF0ZVRvdWNoOiB0cnVlLFxuICBzaG9ydFN3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlc1JhdGlvOiAwLjUsXG4gIGxvbmdTd2lwZXNNczogMzAwLFxuICBmb2xsb3dGaW5nZXI6IHRydWUsXG4gIGFsbG93VG91Y2hNb3ZlOiB0cnVlLFxuICB0aHJlc2hvbGQ6IDUsXG4gIHRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbjogZmFsc2UsXG4gIHRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDogdHJ1ZSxcbiAgdG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQ6IGZhbHNlLFxuICB0b3VjaFJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgLy8gVW5pcXVlIE5hdmlnYXRpb24gRWxlbWVudHNcbiAgdW5pcXVlTmF2RWxlbWVudHM6IHRydWUsXG4gIC8vIFJlc2lzdGFuY2VcbiAgcmVzaXN0YW5jZTogdHJ1ZSxcbiAgcmVzaXN0YW5jZVJhdGlvOiAwLjg1LFxuICAvLyBQcm9ncmVzc1xuICB3YXRjaFNsaWRlc1Byb2dyZXNzOiBmYWxzZSxcbiAgLy8gQ3Vyc29yXG4gIGdyYWJDdXJzb3I6IGZhbHNlLFxuICAvLyBDbGlja3NcbiAgcHJldmVudENsaWNrczogdHJ1ZSxcbiAgcHJldmVudENsaWNrc1Byb3BhZ2F0aW9uOiB0cnVlLFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcbiAgLy8gbG9vcFxuICBsb29wOiBmYWxzZSxcbiAgbG9vcGVkU2xpZGVzOiBudWxsLFxuICBsb29wUHJldmVudHNTbGlkaW5nOiB0cnVlLFxuICAvLyByZXdpbmRcbiAgcmV3aW5kOiBmYWxzZSxcbiAgLy8gU3dpcGluZy9ubyBzd2lwaW5nXG4gIGFsbG93U2xpZGVQcmV2OiB0cnVlLFxuICBhbGxvd1NsaWRlTmV4dDogdHJ1ZSxcbiAgc3dpcGVIYW5kbGVyOiBudWxsLFxuICAvLyAnLnN3aXBlLWhhbmRsZXInLFxuICBub1N3aXBpbmc6IHRydWUsXG4gIG5vU3dpcGluZ0NsYXNzOiAnc3dpcGVyLW5vLXN3aXBpbmcnLFxuICBub1N3aXBpbmdTZWxlY3RvcjogbnVsbCxcbiAgLy8gUGFzc2l2ZSBMaXN0ZW5lcnNcbiAgcGFzc2l2ZUxpc3RlbmVyczogdHJ1ZSxcbiAgbWF4QmFja2ZhY2VIaWRkZW5TbGlkZXM6IDEwLFxuICAvLyBOU1xuICBjb250YWluZXJNb2RpZmllckNsYXNzOiAnc3dpcGVyLScsXG4gIC8vIE5FV1xuICBzbGlkZUNsYXNzOiAnc3dpcGVyLXNsaWRlJyxcbiAgc2xpZGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1hY3RpdmUnLFxuICBzbGlkZVZpc2libGVDbGFzczogJ3N3aXBlci1zbGlkZS12aXNpYmxlJyxcbiAgc2xpZGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtbmV4dCcsXG4gIHNsaWRlUHJldkNsYXNzOiAnc3dpcGVyLXNsaWRlLXByZXYnLFxuICB3cmFwcGVyQ2xhc3M6ICdzd2lwZXItd3JhcHBlcicsXG4gIGxhenlQcmVsb2FkZXJDbGFzczogJ3N3aXBlci1sYXp5LXByZWxvYWRlcicsXG4gIC8vIENhbGxiYWNrc1xuICBydW5DYWxsYmFja3NPbkluaXQ6IHRydWUsXG4gIC8vIEludGVybmFsc1xuICBfZW1pdENsYXNzZXM6IGZhbHNlXG59OyIsImltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtb2R1bGVFeHRlbmRQYXJhbXMocGFyYW1zLCBhbGxNb2R1bGVzUGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbiBleHRlbmRQYXJhbXMob2JqID0ge30pIHtcbiAgICBjb25zdCBtb2R1bGVQYXJhbU5hbWUgPSBPYmplY3Qua2V5cyhvYmopWzBdO1xuICAgIGNvbnN0IG1vZHVsZVBhcmFtcyA9IG9ialttb2R1bGVQYXJhbU5hbWVdO1xuICAgIGlmICh0eXBlb2YgbW9kdWxlUGFyYW1zICE9PSAnb2JqZWN0JyB8fCBtb2R1bGVQYXJhbXMgPT09IG51bGwpIHtcbiAgICAgIGV4dGVuZChhbGxNb2R1bGVzUGFyYW1zLCBvYmopO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoWyduYXZpZ2F0aW9uJywgJ3BhZ2luYXRpb24nLCAnc2Nyb2xsYmFyJ10uaW5kZXhPZihtb2R1bGVQYXJhbU5hbWUpID49IDAgJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09IHRydWUpIHtcbiAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0ge1xuICAgICAgICBhdXRvOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoIShtb2R1bGVQYXJhbU5hbWUgaW4gcGFyYW1zICYmICdlbmFibGVkJyBpbiBtb2R1bGVQYXJhbXMpKSB7XG4gICAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSB0cnVlKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgICAgZW5hYmxlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gJ29iamVjdCcgJiYgISgnZW5hYmxlZCcgaW4gcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICBlbmFibGVkOiBmYWxzZVxuICAgIH07XG4gICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gIH07XG59IiwiLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiBcIm9mZlwiICovXG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0IHsgZXh0ZW5kLCBub3csIGRlbGV0ZVByb3BzLCBjcmVhdGVFbGVtZW50LCBlbGVtZW50Q2hpbGRyZW4sIGVsZW1lbnRTdHlsZSwgZWxlbWVudEluZGV4IH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLmpzJztcbmltcG9ydCB7IGdldFN1cHBvcnQgfSBmcm9tICcuLi9zaGFyZWQvZ2V0LXN1cHBvcnQuanMnO1xuaW1wb3J0IHsgZ2V0RGV2aWNlIH0gZnJvbSAnLi4vc2hhcmVkL2dldC1kZXZpY2UuanMnO1xuaW1wb3J0IHsgZ2V0QnJvd3NlciB9IGZyb20gJy4uL3NoYXJlZC9nZXQtYnJvd3Nlci5qcyc7XG5pbXBvcnQgUmVzaXplIGZyb20gJy4vbW9kdWxlcy9yZXNpemUvcmVzaXplLmpzJztcbmltcG9ydCBPYnNlcnZlciBmcm9tICcuL21vZHVsZXMvb2JzZXJ2ZXIvb2JzZXJ2ZXIuanMnO1xuaW1wb3J0IGV2ZW50c0VtaXR0ZXIgZnJvbSAnLi9ldmVudHMtZW1pdHRlci5qcyc7XG5pbXBvcnQgdXBkYXRlIGZyb20gJy4vdXBkYXRlL2luZGV4LmpzJztcbmltcG9ydCB0cmFuc2xhdGUgZnJvbSAnLi90cmFuc2xhdGUvaW5kZXguanMnO1xuaW1wb3J0IHRyYW5zaXRpb24gZnJvbSAnLi90cmFuc2l0aW9uL2luZGV4LmpzJztcbmltcG9ydCBzbGlkZSBmcm9tICcuL3NsaWRlL2luZGV4LmpzJztcbmltcG9ydCBsb29wIGZyb20gJy4vbG9vcC9pbmRleC5qcyc7XG5pbXBvcnQgZ3JhYkN1cnNvciBmcm9tICcuL2dyYWItY3Vyc29yL2luZGV4LmpzJztcbmltcG9ydCBldmVudHMgZnJvbSAnLi9ldmVudHMvaW5kZXguanMnO1xuaW1wb3J0IGJyZWFrcG9pbnRzIGZyb20gJy4vYnJlYWtwb2ludHMvaW5kZXguanMnO1xuaW1wb3J0IGNsYXNzZXMgZnJvbSAnLi9jbGFzc2VzL2luZGV4LmpzJztcbmltcG9ydCBjaGVja092ZXJmbG93IGZyb20gJy4vY2hlY2stb3ZlcmZsb3cvaW5kZXguanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4vZGVmYXVsdHMuanMnO1xuaW1wb3J0IG1vZHVsZUV4dGVuZFBhcmFtcyBmcm9tICcuL21vZHVsZUV4dGVuZFBhcmFtcy5qcyc7XG5pbXBvcnQgeyBwcm9jZXNzTGF6eVByZWxvYWRlciB9IGZyb20gJy4uL3NoYXJlZC9wcm9jZXNzLWxhenktcHJlbG9hZGVyLmpzJztcbmNvbnN0IHByb3RvdHlwZXMgPSB7XG4gIGV2ZW50c0VtaXR0ZXIsXG4gIHVwZGF0ZSxcbiAgdHJhbnNsYXRlLFxuICB0cmFuc2l0aW9uLFxuICBzbGlkZSxcbiAgbG9vcCxcbiAgZ3JhYkN1cnNvcixcbiAgZXZlbnRzLFxuICBicmVha3BvaW50cyxcbiAgY2hlY2tPdmVyZmxvdyxcbiAgY2xhc3Nlc1xufTtcbmNvbnN0IGV4dGVuZGVkRGVmYXVsdHMgPSB7fTtcbmNsYXNzIFN3aXBlciB7XG4gIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcbiAgICBsZXQgZWw7XG4gICAgbGV0IHBhcmFtcztcbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgYXJnc1swXS5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnc1swXSkuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jykge1xuICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgW2VsLCBwYXJhbXNdID0gYXJncztcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMpIHBhcmFtcyA9IHt9O1xuICAgIHBhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zKTtcbiAgICBpZiAoZWwgJiYgIXBhcmFtcy5lbCkgcGFyYW1zLmVsID0gZWw7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGlmIChwYXJhbXMuZWwgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnN0IHN3aXBlcnMgPSBbXTtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKS5mb3JFYWNoKGNvbnRhaW5lckVsID0+IHtcbiAgICAgICAgY29uc3QgbmV3UGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMsIHtcbiAgICAgICAgICBlbDogY29udGFpbmVyRWxcbiAgICAgICAgfSk7XG4gICAgICAgIHN3aXBlcnMucHVzaChuZXcgU3dpcGVyKG5ld1BhcmFtcykpO1xuICAgICAgfSk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgICByZXR1cm4gc3dpcGVycztcbiAgICB9XG5cbiAgICAvLyBTd2lwZXIgSW5zdGFuY2VcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5fX3N3aXBlcl9fID0gdHJ1ZTtcbiAgICBzd2lwZXIuc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgICBzd2lwZXIuZGV2aWNlID0gZ2V0RGV2aWNlKHtcbiAgICAgIHVzZXJBZ2VudDogcGFyYW1zLnVzZXJBZ2VudFxuICAgIH0pO1xuICAgIHN3aXBlci5icm93c2VyID0gZ2V0QnJvd3NlcigpO1xuICAgIHN3aXBlci5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcbiAgICBzd2lwZXIuZXZlbnRzQW55TGlzdGVuZXJzID0gW107XG4gICAgc3dpcGVyLm1vZHVsZXMgPSBbLi4uc3dpcGVyLl9fbW9kdWxlc19fXTtcbiAgICBpZiAocGFyYW1zLm1vZHVsZXMgJiYgQXJyYXkuaXNBcnJheShwYXJhbXMubW9kdWxlcykpIHtcbiAgICAgIHN3aXBlci5tb2R1bGVzLnB1c2goLi4ucGFyYW1zLm1vZHVsZXMpO1xuICAgIH1cbiAgICBjb25zdCBhbGxNb2R1bGVzUGFyYW1zID0ge307XG4gICAgc3dpcGVyLm1vZHVsZXMuZm9yRWFjaChtb2QgPT4ge1xuICAgICAgbW9kKHtcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICBzd2lwZXIsXG4gICAgICAgIGV4dGVuZFBhcmFtczogbW9kdWxlRXh0ZW5kUGFyYW1zKHBhcmFtcywgYWxsTW9kdWxlc1BhcmFtcyksXG4gICAgICAgIG9uOiBzd2lwZXIub24uYmluZChzd2lwZXIpLFxuICAgICAgICBvbmNlOiBzd2lwZXIub25jZS5iaW5kKHN3aXBlciksXG4gICAgICAgIG9mZjogc3dpcGVyLm9mZi5iaW5kKHN3aXBlciksXG4gICAgICAgIGVtaXQ6IHN3aXBlci5lbWl0LmJpbmQoc3dpcGVyKVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuICAgIGNvbnN0IHN3aXBlclBhcmFtcyA9IGV4dGVuZCh7fSwgZGVmYXVsdHMsIGFsbE1vZHVsZXNQYXJhbXMpO1xuXG4gICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggcGFzc2VkIHBhcmFtc1xuICAgIHN3aXBlci5wYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlclBhcmFtcywgZXh0ZW5kZWREZWZhdWx0cywgcGFyYW1zKTtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlci5wYXJhbXMpO1xuICAgIHN3aXBlci5wYXNzZWRQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7XG5cbiAgICAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG4gICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbikge1xuICAgICAgT2JqZWN0LmtleXMoc3dpcGVyLnBhcmFtcy5vbikuZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgICBzd2lwZXIub24oZXZlbnROYW1lLCBzd2lwZXIucGFyYW1zLm9uW2V2ZW50TmFtZV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zICYmIHN3aXBlci5wYXJhbXMub25BbnkpIHtcbiAgICAgIHN3aXBlci5vbkFueShzd2lwZXIucGFyYW1zLm9uQW55KTtcbiAgICB9XG5cbiAgICAvLyBFeHRlbmQgU3dpcGVyXG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICAgIGVuYWJsZWQ6IHN3aXBlci5wYXJhbXMuZW5hYmxlZCxcbiAgICAgIGVsLFxuICAgICAgLy8gQ2xhc3Nlc1xuICAgICAgY2xhc3NOYW1lczogW10sXG4gICAgICAvLyBTbGlkZXNcbiAgICAgIHNsaWRlczogW10sXG4gICAgICBzbGlkZXNHcmlkOiBbXSxcbiAgICAgIHNuYXBHcmlkOiBbXSxcbiAgICAgIHNsaWRlc1NpemVzR3JpZDogW10sXG4gICAgICAvLyBpc0RpcmVjdGlvblxuICAgICAgaXNIb3Jpem9udGFsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJztcbiAgICAgIH0sXG4gICAgICBpc1ZlcnRpY2FsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCc7XG4gICAgICB9LFxuICAgICAgLy8gSW5kZXhlc1xuICAgICAgYWN0aXZlSW5kZXg6IDAsXG4gICAgICByZWFsSW5kZXg6IDAsXG4gICAgICAvL1xuICAgICAgaXNCZWdpbm5pbmc6IHRydWUsXG4gICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAvLyBQcm9wc1xuICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgcHJldmlvdXNUcmFuc2xhdGU6IDAsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgIC8vIExvY2tzXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICB0b3VjaEV2ZW50c0RhdGE6IHtcbiAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICAgIGlzTW92ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxsb3dUb3VjaENhbGxiYWNrczogdW5kZWZpbmVkLFxuICAgICAgICB0b3VjaFN0YXJ0VGltZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgICAgICBjdXJyZW50VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VGhyZXNob2xkTW92ZTogdW5kZWZpbmVkLFxuICAgICAgICAvLyBGb3JtIGVsZW1lbnRzIHRvIG1hdGNoXG4gICAgICAgIGZvY3VzYWJsZUVsZW1lbnRzOiBzd2lwZXIucGFyYW1zLmZvY3VzYWJsZUVsZW1lbnRzLFxuICAgICAgICAvLyBMYXN0IGNsaWNrIHRpbWVcbiAgICAgICAgbGFzdENsaWNrVGltZTogbm93KCksXG4gICAgICAgIGNsaWNrVGltZW91dDogdW5kZWZpbmVkLFxuICAgICAgICAvLyBWZWxvY2l0aWVzXG4gICAgICAgIHZlbG9jaXRpZXM6IFtdLFxuICAgICAgICBhbGxvd01vbWVudHVtQm91bmNlOiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWQsXG4gICAgICAgIGV2Q2FjaGU6IFtdXG4gICAgICB9LFxuICAgICAgLy8gQ2xpY2tzXG4gICAgICBhbGxvd0NsaWNrOiB0cnVlLFxuICAgICAgLy8gVG91Y2hlc1xuICAgICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgICB0b3VjaGVzOiB7XG4gICAgICAgIHN0YXJ0WDogMCxcbiAgICAgICAgc3RhcnRZOiAwLFxuICAgICAgICBjdXJyZW50WDogMCxcbiAgICAgICAgY3VycmVudFk6IDAsXG4gICAgICAgIGRpZmY6IDBcbiAgICAgIH0sXG4gICAgICAvLyBJbWFnZXNcbiAgICAgIGltYWdlc1RvTG9hZDogW10sXG4gICAgICBpbWFnZXNMb2FkZWQ6IDBcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX3N3aXBlcicpO1xuXG4gICAgLy8gSW5pdFxuICAgIGlmIChzd2lwZXIucGFyYW1zLmluaXQpIHtcbiAgICAgIHN3aXBlci5pbml0KCk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFwcCBpbnN0YW5jZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG4gIGdldFNsaWRlSW5kZXgoc2xpZGVFbCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlc0VsLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IHRoaXM7XG4gICAgY29uc3Qgc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgICBjb25zdCBmaXJzdFNsaWRlSW5kZXggPSBlbGVtZW50SW5kZXgoc2xpZGVzWzBdKTtcbiAgICByZXR1cm4gZWxlbWVudEluZGV4KHNsaWRlRWwpIC0gZmlyc3RTbGlkZUluZGV4O1xuICB9XG4gIHJlY2FsY1NsaWRlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlc0VsLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IHN3aXBlcjtcbiAgICBzd2lwZXIuc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgfVxuICBlbmFibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBzd2lwZXIuZW5hYmxlZCA9IHRydWU7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ2VuYWJsZScpO1xuICB9XG4gIGRpc2FibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLmVuYWJsZWQgPSBmYWxzZTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIudW5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdkaXNhYmxlJyk7XG4gIH1cbiAgc2V0UHJvZ3Jlc3MocHJvZ3Jlc3MsIHNwZWVkKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBwcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHByb2dyZXNzLCAwKSwgMSk7XG4gICAgY29uc3QgbWluID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgIGNvbnN0IG1heCA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICBjb25zdCBjdXJyZW50ID0gKG1heCAtIG1pbikgKiBwcm9ncmVzcyArIG1pbjtcbiAgICBzd2lwZXIudHJhbnNsYXRlVG8oY3VycmVudCwgdHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJyA/IDAgOiBzcGVlZCk7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuICBlbWl0Q29udGFpbmVyQ2xhc3NlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IGNscyA9IHN3aXBlci5lbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoY2xhc3NOYW1lID0+IHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzKSA9PT0gMDtcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX2NvbnRhaW5lckNsYXNzZXMnLCBjbHMuam9pbignICcpKTtcbiAgfVxuICBnZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybiAnJztcbiAgICByZXR1cm4gc2xpZGVFbC5jbGFzc05hbWUuc3BsaXQoJyAnKS5maWx0ZXIoY2xhc3NOYW1lID0+IHtcbiAgICAgIHJldHVybiBjbGFzc05hbWUuaW5kZXhPZignc3dpcGVyLXNsaWRlJykgPT09IDAgfHwgY2xhc3NOYW1lLmluZGV4T2Yoc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKSA9PT0gMDtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH1cbiAgZW1pdFNsaWRlc0NsYXNzZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB1cGRhdGVzID0gW107XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgY29uc3QgY2xhc3NOYW1lcyA9IHN3aXBlci5nZXRTbGlkZUNsYXNzZXMoc2xpZGVFbCk7XG4gICAgICB1cGRhdGVzLnB1c2goe1xuICAgICAgICBzbGlkZUVsLFxuICAgICAgICBjbGFzc05hbWVzXG4gICAgICB9KTtcbiAgICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzcycsIHNsaWRlRWwsIGNsYXNzTmFtZXMpO1xuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfc2xpZGVDbGFzc2VzJywgdXBkYXRlcyk7XG4gIH1cbiAgc2xpZGVzUGVyVmlld0R5bmFtaWModmlldyA9ICdjdXJyZW50JywgZXhhY3QgPSBmYWxzZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgc2xpZGVzLFxuICAgICAgc2xpZGVzR3JpZCxcbiAgICAgIHNsaWRlc1NpemVzR3JpZCxcbiAgICAgIHNpemU6IHN3aXBlclNpemUsXG4gICAgICBhY3RpdmVJbmRleFxuICAgIH0gPSBzd2lwZXI7XG4gICAgbGV0IHNwdiA9IDE7XG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgbGV0IHNsaWRlU2l6ZSA9IHNsaWRlc1thY3RpdmVJbmRleF0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgbGV0IGJyZWFrTG9vcDtcbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0gJiYgIWJyZWFrTG9vcCkge1xuICAgICAgICAgIHNsaWRlU2l6ZSArPSBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgaWYgKHZpZXcgPT09ICdjdXJyZW50Jykge1xuICAgICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggKyAxOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgY29uc3Qgc2xpZGVJblZpZXcgPSBleGFjdCA/IHNsaWRlc0dyaWRbaV0gKyBzbGlkZXNTaXplc0dyaWRbaV0gLSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSA8IHN3aXBlclNpemUgOiBzbGlkZXNHcmlkW2ldIC0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gPCBzd2lwZXJTaXplO1xuICAgICAgICAgIGlmIChzbGlkZUluVmlldykge1xuICAgICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBwcmV2aW91c1xuICAgICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgIGNvbnN0IHNsaWRlSW5WaWV3ID0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gLSBzbGlkZXNHcmlkW2ldIDwgc3dpcGVyU2l6ZTtcbiAgICAgICAgICBpZiAoc2xpZGVJblZpZXcpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3B2O1xuICB9XG4gIHVwZGF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBjb25zdCB7XG4gICAgICBzbmFwR3JpZCxcbiAgICAgIHBhcmFtc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgLy8gQnJlYWtwb2ludHNcbiAgICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgIH1cbiAgICBbLi4uc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tsb2FkaW5nPVwibGF6eVwiXScpXS5mb3JFYWNoKGltYWdlRWwgPT4ge1xuICAgICAgaWYgKGltYWdlRWwuY29tcGxldGUpIHtcbiAgICAgICAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBpbWFnZUVsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIGNvbnN0IHRyYW5zbGF0ZVZhbHVlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgKiAtMSA6IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICBjb25zdCBuZXdUcmFuc2xhdGUgPSBNYXRoLm1pbihNYXRoLm1heCh0cmFuc2xhdGVWYWx1ZSwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKTtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG4gICAgbGV0IHRyYW5zbGF0ZWQ7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgc3dpcGVyLnBhcmFtcy5mcmVlTW9kZS5lbmFibGVkKSB7XG4gICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgdHJhbnNsYXRlZCA9IHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNsYXRlZCA9IHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKCF0cmFuc2xhdGVkKSB7XG4gICAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3VwZGF0ZScpO1xuICB9XG4gIGNoYW5nZURpcmVjdGlvbihuZXdEaXJlY3Rpb24sIG5lZWRVcGRhdGUgPSB0cnVlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBjdXJyZW50RGlyZWN0aW9uID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb247XG4gICAgaWYgKCFuZXdEaXJlY3Rpb24pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgbmV3RGlyZWN0aW9uID0gY3VycmVudERpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICB9XG4gICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gY3VycmVudERpcmVjdGlvbiB8fCBuZXdEaXJlY3Rpb24gIT09ICdob3Jpem9udGFsJyAmJiBuZXdEaXJlY3Rpb24gIT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgIHJldHVybiBzd2lwZXI7XG4gICAgfVxuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke2N1cnJlbnREaXJlY3Rpb259YCk7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7bmV3RGlyZWN0aW9ufWApO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICAgIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID0gbmV3RGlyZWN0aW9uO1xuICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIGlmIChuZXdEaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgc2xpZGVFbC5zdHlsZS53aWR0aCA9ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVFbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnY2hhbmdlRGlyZWN0aW9uJyk7XG4gICAgaWYgKG5lZWRVcGRhdGUpIHN3aXBlci51cGRhdGUoKTtcbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG4gIGNoYW5nZUxhbmd1YWdlRGlyZWN0aW9uKGRpcmVjdGlvbikge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5ydGwgJiYgZGlyZWN0aW9uID09PSAncnRsJyB8fCAhc3dpcGVyLnJ0bCAmJiBkaXJlY3Rpb24gPT09ICdsdHInKSByZXR1cm47XG4gICAgc3dpcGVyLnJ0bCA9IGRpcmVjdGlvbiA9PT0gJ3J0bCc7XG4gICAgc3dpcGVyLnJ0bFRyYW5zbGF0ZSA9IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgc3dpcGVyLnJ0bDtcbiAgICBpZiAoc3dpcGVyLnJ0bCkge1xuICAgICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfXJ0bGApO1xuICAgICAgc3dpcGVyLmVsLmRpciA9ICdydGwnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9cnRsYCk7XG4gICAgICBzd2lwZXIuZWwuZGlyID0gJ2x0cic7XG4gICAgfVxuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxuICBtb3VudChlbGVtZW50KSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLm1vdW50ZWQpIHJldHVybiB0cnVlO1xuXG4gICAgLy8gRmluZCBlbFxuICAgIGxldCBlbCA9IGVsZW1lbnQgfHwgc3dpcGVyLnBhcmFtcy5lbDtcbiAgICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgICAgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICB9XG4gICAgaWYgKCFlbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbC5zd2lwZXIgPSBzd2lwZXI7XG4gICAgaWYgKGVsLnNoYWRvd0VsKSB7XG4gICAgICBzd2lwZXIuaXNFbGVtZW50ID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZ2V0V3JhcHBlclNlbGVjdG9yID0gKCkgPT4ge1xuICAgICAgcmV0dXJuIGAuJHsoc3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3MgfHwgJycpLnRyaW0oKS5zcGxpdCgnICcpLmpvaW4oJy4nKX1gO1xuICAgIH07XG4gICAgY29uc3QgZ2V0V3JhcHBlciA9ICgpID0+IHtcbiAgICAgIGlmIChlbCAmJiBlbC5zaGFkb3dSb290ICYmIGVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3Rvcikge1xuICAgICAgICBjb25zdCByZXMgPSBlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoZ2V0V3JhcHBlclNlbGVjdG9yKCkpO1xuICAgICAgICAvLyBDaGlsZHJlbiBuZWVkcyB0byByZXR1cm4gc2xvdCBpdGVtc1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGVsZW1lbnRDaGlsZHJlbihlbCwgZ2V0V3JhcHBlclNlbGVjdG9yKCkpWzBdO1xuICAgIH07XG4gICAgLy8gRmluZCBXcmFwcGVyXG4gICAgbGV0IHdyYXBwZXJFbCA9IGdldFdyYXBwZXIoKTtcbiAgICBpZiAoIXdyYXBwZXJFbCAmJiBzd2lwZXIucGFyYW1zLmNyZWF0ZUVsZW1lbnRzKSB7XG4gICAgICB3cmFwcGVyRWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcyk7XG4gICAgICBlbC5hcHBlbmQod3JhcHBlckVsKTtcbiAgICAgIGVsZW1lbnRDaGlsZHJlbihlbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gKS5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICB3cmFwcGVyRWwuYXBwZW5kKHNsaWRlRWwpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgICBlbCxcbiAgICAgIHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlc0VsOiBzd2lwZXIuaXNFbGVtZW50ID8gZWwgOiB3cmFwcGVyRWwsXG4gICAgICBtb3VudGVkOiB0cnVlLFxuICAgICAgLy8gUlRMXG4gICAgICBydGw6IGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCBlbGVtZW50U3R5bGUoZWwsICdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcsXG4gICAgICBydGxUcmFuc2xhdGU6IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgKGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCBlbGVtZW50U3R5bGUoZWwsICdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcpLFxuICAgICAgd3JvbmdSVEw6IGVsZW1lbnRTdHlsZSh3cmFwcGVyRWwsICdkaXNwbGF5JykgPT09ICctd2Via2l0LWJveCdcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpbml0KGVsKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm4gc3dpcGVyO1xuICAgIGNvbnN0IG1vdW50ZWQgPSBzd2lwZXIubW91bnQoZWwpO1xuICAgIGlmIChtb3VudGVkID09PSBmYWxzZSkgcmV0dXJuIHN3aXBlcjtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlSW5pdCcpO1xuXG4gICAgLy8gU2V0IGJyZWFrcG9pbnRcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgQ2xhc3Nlc1xuICAgIHN3aXBlci5hZGRDbGFzc2VzKCk7XG5cbiAgICAvLyBVcGRhdGUgc2l6ZVxuICAgIHN3aXBlci51cGRhdGVTaXplKCk7XG5cbiAgICAvLyBVcGRhdGUgc2xpZGVzXG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHtcbiAgICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgfVxuXG4gICAgLy8gU2V0IEdyYWIgQ3Vyc29yXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvciAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG5cbiAgICAvLyBTbGlkZSBUbyBJbml0aWFsIFNsaWRlXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgKyBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmUsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCwgZmFsc2UsIHRydWUpO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBsb29wXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBBdHRhY2ggZXZlbnRzXG4gICAgc3dpcGVyLmF0dGFjaEV2ZW50cygpO1xuICAgIFsuLi5zd2lwZXIuZWwucXVlcnlTZWxlY3RvckFsbCgnW2xvYWRpbmc9XCJsYXp5XCJdJyldLmZvckVhY2goaW1hZ2VFbCA9PiB7XG4gICAgICBpZiAoaW1hZ2VFbC5jb21wbGV0ZSkge1xuICAgICAgICBwcm9jZXNzTGF6eVByZWxvYWRlcihzd2lwZXIsIGltYWdlRWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW1hZ2VFbC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZSA9PiB7XG4gICAgICAgICAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBlLnRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gSW5pdCBGbGFnXG4gICAgc3dpcGVyLmluaXRpYWxpemVkID0gdHJ1ZTtcblxuICAgIC8vIEVtaXRcbiAgICBzd2lwZXIuZW1pdCgnaW5pdCcpO1xuICAgIHN3aXBlci5lbWl0KCdhZnRlckluaXQnKTtcbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG4gIGRlc3Ryb3koZGVsZXRlSW5zdGFuY2UgPSB0cnVlLCBjbGVhblN0eWxlcyA9IHRydWUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmFtcyxcbiAgICAgIGVsLFxuICAgICAgd3JhcHBlckVsLFxuICAgICAgc2xpZGVzXG4gICAgfSA9IHN3aXBlcjtcbiAgICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlci5kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlRGVzdHJveScpO1xuXG4gICAgLy8gSW5pdCBGbGFnXG4gICAgc3dpcGVyLmluaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICAvLyBEZXRhY2ggZXZlbnRzXG4gICAgc3dpcGVyLmRldGFjaEV2ZW50cygpO1xuXG4gICAgLy8gRGVzdHJveSBsb29wXG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9XG5cbiAgICAvLyBDbGVhbnVwIHN0eWxlc1xuICAgIGlmIChjbGVhblN0eWxlcykge1xuICAgICAgc3dpcGVyLnJlbW92ZUNsYXNzZXMoKTtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgIHdyYXBwZXJFbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICBpZiAoc2xpZGVzICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgICAgc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcywgcGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MsIHBhcmFtcy5zbGlkZU5leHRDbGFzcywgcGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgICAgICAgICBzbGlkZUVsLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgICBzbGlkZUVsLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdkZXN0cm95Jyk7XG5cbiAgICAvLyBEZXRhY2ggZW1pdHRlciBldmVudHNcbiAgICBPYmplY3Qua2V5cyhzd2lwZXIuZXZlbnRzTGlzdGVuZXJzKS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICBzd2lwZXIub2ZmKGV2ZW50TmFtZSk7XG4gICAgfSk7XG4gICAgaWYgKGRlbGV0ZUluc3RhbmNlICE9PSBmYWxzZSkge1xuICAgICAgc3dpcGVyLmVsLnN3aXBlciA9IG51bGw7XG4gICAgICBkZWxldGVQcm9wcyhzd2lwZXIpO1xuICAgIH1cbiAgICBzd2lwZXIuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBzdGF0aWMgZXh0ZW5kRGVmYXVsdHMobmV3RGVmYXVsdHMpIHtcbiAgICBleHRlbmQoZXh0ZW5kZWREZWZhdWx0cywgbmV3RGVmYXVsdHMpO1xuICB9XG4gIHN0YXRpYyBnZXQgZXh0ZW5kZWREZWZhdWx0cygpIHtcbiAgICByZXR1cm4gZXh0ZW5kZWREZWZhdWx0cztcbiAgfVxuICBzdGF0aWMgZ2V0IGRlZmF1bHRzKCkge1xuICAgIHJldHVybiBkZWZhdWx0cztcbiAgfVxuICBzdGF0aWMgaW5zdGFsbE1vZHVsZShtb2QpIHtcbiAgICBpZiAoIVN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18pIFN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX18gPSBbXTtcbiAgICBjb25zdCBtb2R1bGVzID0gU3dpcGVyLnByb3RvdHlwZS5fX21vZHVsZXNfXztcbiAgICBpZiAodHlwZW9mIG1vZCA9PT0gJ2Z1bmN0aW9uJyAmJiBtb2R1bGVzLmluZGV4T2YobW9kKSA8IDApIHtcbiAgICAgIG1vZHVsZXMucHVzaChtb2QpO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgdXNlKG1vZHVsZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1vZHVsZSkpIHtcbiAgICAgIG1vZHVsZS5mb3JFYWNoKG0gPT4gU3dpcGVyLmluc3RhbGxNb2R1bGUobSkpO1xuICAgICAgcmV0dXJuIFN3aXBlcjtcbiAgICB9XG4gICAgU3dpcGVyLmluc3RhbGxNb2R1bGUobW9kdWxlKTtcbiAgICByZXR1cm4gU3dpcGVyO1xuICB9XG59XG5PYmplY3Qua2V5cyhwcm90b3R5cGVzKS5mb3JFYWNoKHByb3RvdHlwZUdyb3VwID0+IHtcbiAgT2JqZWN0LmtleXMocHJvdG90eXBlc1twcm90b3R5cGVHcm91cF0pLmZvckVhY2gocHJvdG9NZXRob2QgPT4ge1xuICAgIFN3aXBlci5wcm90b3R5cGVbcHJvdG9NZXRob2RdID0gcHJvdG90eXBlc1twcm90b3R5cGVHcm91cF1bcHJvdG9NZXRob2RdO1xuICB9KTtcbn0pO1xuU3dpcGVyLnVzZShbUmVzaXplLCBPYnNlcnZlcl0pO1xuZXhwb3J0IGRlZmF1bHQgU3dpcGVyOyIsImltcG9ydCBnZXRUcmFuc2xhdGUgZnJvbSAnLi9nZXRUcmFuc2xhdGUuanMnO1xuaW1wb3J0IHNldFRyYW5zbGF0ZSBmcm9tICcuL3NldFRyYW5zbGF0ZS5qcyc7XG5pbXBvcnQgbWluVHJhbnNsYXRlIGZyb20gJy4vbWluVHJhbnNsYXRlLmpzJztcbmltcG9ydCBtYXhUcmFuc2xhdGUgZnJvbSAnLi9tYXhUcmFuc2xhdGUuanMnO1xuaW1wb3J0IHRyYW5zbGF0ZVRvIGZyb20gJy4vdHJhbnNsYXRlVG8uanMnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBnZXRUcmFuc2xhdGUsXG4gIHNldFRyYW5zbGF0ZSxcbiAgbWluVHJhbnNsYXRlLFxuICBtYXhUcmFuc2xhdGUsXG4gIHRyYW5zbGF0ZVRvXG59OyIsImltcG9ydCB7IGdldFRyYW5zbGF0ZSB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTd2lwZXJUcmFuc2xhdGUoYXhpcyA9IHRoaXMuaXNIb3Jpem9udGFsKCkgPyAneCcgOiAneScpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICB0cmFuc2xhdGUsXG4gICAgd3JhcHBlckVsXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChwYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgIHJldHVybiBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICB9XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHJldHVybiB0cmFuc2xhdGU7XG4gIH1cbiAgbGV0IGN1cnJlbnRUcmFuc2xhdGUgPSBnZXRUcmFuc2xhdGUod3JhcHBlckVsLCBheGlzKTtcbiAgaWYgKHJ0bCkgY3VycmVudFRyYW5zbGF0ZSA9IC1jdXJyZW50VHJhbnNsYXRlO1xuICByZXR1cm4gY3VycmVudFRyYW5zbGF0ZSB8fCAwO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgcGFyYW1zLFxuICAgIHdyYXBwZXJFbCxcbiAgICBwcm9ncmVzc1xuICB9ID0gc3dpcGVyO1xuICBsZXQgeCA9IDA7XG4gIGxldCB5ID0gMDtcbiAgY29uc3QgeiA9IDA7XG4gIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICB4ID0gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICB5ID0gdHJhbnNsYXRlO1xuICB9XG4gIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgeCA9IE1hdGguZmxvb3IoeCk7XG4gICAgeSA9IE1hdGguZmxvb3IoeSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IC14IDogLXk7XG4gIH0gZWxzZSBpZiAoIXBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgd3JhcHBlckVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3h9cHgsICR7eX1weCwgJHt6fXB4KWA7XG4gIH1cbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgc3dpcGVyLnRyYW5zbGF0ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHggOiB5O1xuXG4gIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gdXBkYXRlIHByb2dyZXNzXG4gIGxldCBuZXdQcm9ncmVzcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cbiAgaWYgKG5ld1Byb2dyZXNzICE9PSBwcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pblRyYW5zbGF0ZSgpIHtcbiAgcmV0dXJuIC10aGlzLnNuYXBHcmlkWzBdO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1heFRyYW5zbGF0ZSgpIHtcbiAgcmV0dXJuIC10aGlzLnNuYXBHcmlkW3RoaXMuc25hcEdyaWQubGVuZ3RoIC0gMV07XG59IiwiaW1wb3J0IHsgYW5pbWF0ZUNTU01vZGVTY3JvbGwgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNsYXRlVG8odHJhbnNsYXRlID0gMCwgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgdHJhbnNsYXRlQm91bmRzID0gdHJ1ZSwgaW50ZXJuYWwpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB3cmFwcGVyRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBtaW5UcmFuc2xhdGUgPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGNvbnN0IG1heFRyYW5zbGF0ZSA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgbGV0IG5ld1RyYW5zbGF0ZTtcbiAgaWYgKHRyYW5zbGF0ZUJvdW5kcyAmJiB0cmFuc2xhdGUgPiBtaW5UcmFuc2xhdGUpIG5ld1RyYW5zbGF0ZSA9IG1pblRyYW5zbGF0ZTtlbHNlIGlmICh0cmFuc2xhdGVCb3VuZHMgJiYgdHJhbnNsYXRlIDwgbWF4VHJhbnNsYXRlKSBuZXdUcmFuc2xhdGUgPSBtYXhUcmFuc2xhdGU7ZWxzZSBuZXdUcmFuc2xhdGUgPSB0cmFuc2xhdGU7XG5cbiAgLy8gVXBkYXRlIHByb2dyZXNzXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdUcmFuc2xhdGUpO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gLW5ld1RyYW5zbGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFzd2lwZXIuc3VwcG9ydC5zbW9vdGhTY3JvbGwpIHtcbiAgICAgICAgYW5pbWF0ZUNTU01vZGVTY3JvbGwoe1xuICAgICAgICAgIHN3aXBlcixcbiAgICAgICAgICB0YXJnZXRQb3NpdGlvbjogLW5ld1RyYW5zbGF0ZSxcbiAgICAgICAgICBzaWRlOiBpc0ggPyAnbGVmdCcgOiAndG9wJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICBbaXNIID8gJ2xlZnQnIDogJ3RvcCddOiAtbmV3VHJhbnNsYXRlLFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgIGlmIChydW5DYWxsYmFja3MpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25TdGFydCcpO1xuICAgIH1cbiAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgaWYgKCFzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICAgIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IG51bGw7XG4gICAgICAgICAgZGVsZXRlIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG4gICAgICAgICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0IHNldFRyYW5zaXRpb24gZnJvbSAnLi9zZXRUcmFuc2l0aW9uLmpzJztcbmltcG9ydCB0cmFuc2l0aW9uU3RhcnQgZnJvbSAnLi90cmFuc2l0aW9uU3RhcnQuanMnO1xuaW1wb3J0IHRyYW5zaXRpb25FbmQgZnJvbSAnLi90cmFuc2l0aW9uRW5kLmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0VHJhbnNpdGlvbixcbiAgdHJhbnNpdGlvblN0YXJ0LFxuICB0cmFuc2l0aW9uRW5kXG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2l0aW9uJywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG59IiwiaW1wb3J0IHRyYW5zaXRpb25FbWl0IGZyb20gJy4vdHJhbnNpdGlvbkVtaXQuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcyA9IHRydWUsIGRpcmVjdGlvbikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICB9XG4gIHRyYW5zaXRpb25FbWl0KHtcbiAgICBzd2lwZXIsXG4gICAgcnVuQ2FsbGJhY2tzLFxuICAgIGRpcmVjdGlvbixcbiAgICBzdGVwOiAnU3RhcnQnXG4gIH0pO1xufSIsImltcG9ydCB0cmFuc2l0aW9uRW1pdCBmcm9tICcuL3RyYW5zaXRpb25FbWl0LmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzID0gdHJ1ZSwgZGlyZWN0aW9uKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gIHRyYW5zaXRpb25FbWl0KHtcbiAgICBzd2lwZXIsXG4gICAgcnVuQ2FsbGJhY2tzLFxuICAgIGRpcmVjdGlvbixcbiAgICBzdGVwOiAnRW5kJ1xuICB9KTtcbn0iLCJpbXBvcnQgbG9vcENyZWF0ZSBmcm9tICcuL2xvb3BDcmVhdGUuanMnO1xuaW1wb3J0IGxvb3BGaXggZnJvbSAnLi9sb29wRml4LmpzJztcbmltcG9ydCBsb29wRGVzdHJveSBmcm9tICcuL2xvb3BEZXN0cm95LmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbG9vcENyZWF0ZSxcbiAgbG9vcEZpeCxcbiAgbG9vcERlc3Ryb3lcbn07IiwiaW1wb3J0IHsgZWxlbWVudENoaWxkcmVuIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvb3BDcmVhdGUoc2xpZGVSZWFsSW5kZXgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIXBhcmFtcy5sb29wIHx8IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gIGNvbnN0IHNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gIHNsaWRlcy5mb3JFYWNoKChlbCwgaW5kZXgpID0+IHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICB9KTtcbiAgc3dpcGVyLmxvb3BGaXgoe1xuICAgIHNsaWRlUmVhbEluZGV4LFxuICAgIGRpcmVjdGlvbjogcGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gdW5kZWZpbmVkIDogJ25leHQnXG4gIH0pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvb3BGaXgoe1xuICBzbGlkZVJlYWxJbmRleCxcbiAgc2xpZGVUbyA9IHRydWUsXG4gIGRpcmVjdGlvbixcbiAgc2V0VHJhbnNsYXRlLFxuICBhY3RpdmVTbGlkZUluZGV4LFxuICBieUNvbnRyb2xsZXIsXG4gIGJ5TW91c2V3aGVlbFxufSA9IHt9KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSByZXR1cm47XG4gIHN3aXBlci5lbWl0KCdiZWZvcmVMb29wRml4Jyk7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXMsXG4gICAgYWxsb3dTbGlkZVByZXYsXG4gICAgYWxsb3dTbGlkZU5leHQsXG4gICAgc2xpZGVzRWwsXG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IHRydWU7XG4gIGlmIChzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgaWYgKHNsaWRlVG8pIHtcbiAgICAgIGlmICghcGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHN3aXBlci5zbmFwSW5kZXggPT09IDApIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnNuYXBJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJWaWV3KSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyBzd2lwZXIuc25hcEluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci5zbmFwSW5kZXggPT09IHN3aXBlci5zbmFwR3JpZC5sZW5ndGggLSAxKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgICBzd2lwZXIuZW1pdCgnbG9vcEZpeCcpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBzbGlkZXNQZXJWaWV3ID0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogTWF0aC5jZWlsKHBhcnNlRmxvYXQocGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSk7XG4gIGxldCBsb29wZWRTbGlkZXMgPSBwYXJhbXMubG9vcGVkU2xpZGVzIHx8IHNsaWRlc1BlclZpZXc7XG4gIGlmIChsb29wZWRTbGlkZXMgJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgIT09IDApIHtcbiAgICBsb29wZWRTbGlkZXMgKz0gcGFyYW1zLnNsaWRlc1Blckdyb3VwIC0gbG9vcGVkU2xpZGVzICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICB9XG4gIHN3aXBlci5sb29wZWRTbGlkZXMgPSBsb29wZWRTbGlkZXM7XG4gIGNvbnN0IHByZXBlbmRTbGlkZXNJbmRleGVzID0gW107XG4gIGNvbnN0IGFwcGVuZFNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgbGV0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICBpZiAodHlwZW9mIGFjdGl2ZVNsaWRlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgYWN0aXZlU2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KHN3aXBlci5zbGlkZXMuZmlsdGVyKGVsID0+IGVsLmNsYXNzTGlzdC5jb250YWlucygnc3dpcGVyLXNsaWRlLWFjdGl2ZScpKVswXSk7XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlSW5kZXggPSBhY3RpdmVTbGlkZUluZGV4O1xuICB9XG4gIGNvbnN0IGlzTmV4dCA9IGRpcmVjdGlvbiA9PT0gJ25leHQnIHx8ICFkaXJlY3Rpb247XG4gIGNvbnN0IGlzUHJldiA9IGRpcmVjdGlvbiA9PT0gJ3ByZXYnIHx8ICFkaXJlY3Rpb247XG4gIGxldCBzbGlkZXNQcmVwZW5kZWQgPSAwO1xuICBsZXQgc2xpZGVzQXBwZW5kZWQgPSAwO1xuICAvLyBwcmVwZW5kIGxhc3Qgc2xpZGVzIGJlZm9yZSBzdGFydFxuICBpZiAoYWN0aXZlU2xpZGVJbmRleCA8IGxvb3BlZFNsaWRlcykge1xuICAgIHNsaWRlc1ByZXBlbmRlZCA9IE1hdGgubWF4KGxvb3BlZFNsaWRlcyAtIGFjdGl2ZVNsaWRlSW5kZXgsIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsb29wZWRTbGlkZXMgLSBhY3RpdmVTbGlkZUluZGV4OyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gaSAtIE1hdGguZmxvb3IoaSAvIHNsaWRlcy5sZW5ndGgpICogc2xpZGVzLmxlbmd0aDtcbiAgICAgIHByZXBlbmRTbGlkZXNJbmRleGVzLnB1c2goc2xpZGVzLmxlbmd0aCAtIGluZGV4IC0gMSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGFjdGl2ZVNsaWRlSW5kZXggLyogKyBzbGlkZXNQZXJWaWV3ICovID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBsb29wZWRTbGlkZXMgKiAyKSB7XG4gICAgc2xpZGVzQXBwZW5kZWQgPSBNYXRoLm1heChhY3RpdmVTbGlkZUluZGV4IC0gKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gbG9vcGVkU2xpZGVzICogMiksIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNBcHBlbmRlZDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGkgLSBNYXRoLmZsb29yKGkgLyBzbGlkZXMubGVuZ3RoKSAqIHNsaWRlcy5sZW5ndGg7XG4gICAgICBhcHBlbmRTbGlkZXNJbmRleGVzLnB1c2goaW5kZXgpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNQcmV2KSB7XG4gICAgcHJlcGVuZFNsaWRlc0luZGV4ZXMuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICBzbGlkZXNFbC5wcmVwZW5kKHN3aXBlci5zbGlkZXNbaW5kZXhdKTtcbiAgICB9KTtcbiAgfVxuICBpZiAoaXNOZXh0KSB7XG4gICAgYXBwZW5kU2xpZGVzSW5kZXhlcy5mb3JFYWNoKGluZGV4ID0+IHtcbiAgICAgIHNsaWRlc0VsLmFwcGVuZChzd2lwZXIuc2xpZGVzW2luZGV4XSk7XG4gICAgfSk7XG4gIH1cbiAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG4gIH1cbiAgaWYgKHNsaWRlVG8pIHtcbiAgICBpZiAocHJlcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoID4gMCAmJiBpc1ByZXYpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVSZWFsSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2FjdGl2ZUluZGV4XTtcbiAgICAgICAgY29uc3QgbmV3U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleCArIHNsaWRlc1ByZXBlbmRlZF07XG4gICAgICAgIGNvbnN0IGRpZmYgPSBuZXdTbGlkZVRyYW5zbGF0ZSAtIGN1cnJlbnRTbGlkZVRyYW5zbGF0ZTtcbiAgICAgICAgaWYgKGJ5TW91c2V3aGVlbCkge1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoc3dpcGVyLnRyYW5zbGF0ZSAtIGRpZmYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4ICsgc2xpZGVzUHJlcGVuZGVkLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgaWYgKHNldFRyYW5zbGF0ZSkge1xuICAgICAgICAgICAgc3dpcGVyLnRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3N0YXJ0WCcgOiAnc3RhcnRZJ10gKz0gZGlmZjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzZXRUcmFuc2xhdGUpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUb0xvb3Aoc2xpZGVSZWFsSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXBwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggPiAwICYmIGlzTmV4dCkge1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZVJlYWxJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdO1xuICAgICAgICBjb25zdCBuZXdTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2FjdGl2ZUluZGV4IC0gc2xpZGVzQXBwZW5kZWRdO1xuICAgICAgICBjb25zdCBkaWZmID0gbmV3U2xpZGVUcmFuc2xhdGUgLSBjdXJyZW50U2xpZGVUcmFuc2xhdGU7XG4gICAgICAgIGlmIChieU1vdXNld2hlZWwpIHtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHN3aXBlci50cmFuc2xhdGUgLSBkaWZmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhhY3RpdmVJbmRleCAtIHNsaWRlc0FwcGVuZGVkLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgICAgaWYgKHNldFRyYW5zbGF0ZSkge1xuICAgICAgICAgICAgc3dpcGVyLnRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3N0YXJ0WCcgOiAnc3RhcnRZJ10gKz0gZGlmZjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvTG9vcChzbGlkZVJlYWxJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gIGlmIChzd2lwZXIuY29udHJvbGxlciAmJiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sICYmICFieUNvbnRyb2xsZXIpIHtcbiAgICBjb25zdCBsb29wUGFyYW1zID0ge1xuICAgICAgc2xpZGVSZWFsSW5kZXgsXG4gICAgICBzbGlkZVRvOiBmYWxzZSxcbiAgICAgIGRpcmVjdGlvbixcbiAgICAgIHNldFRyYW5zbGF0ZSxcbiAgICAgIGFjdGl2ZVNsaWRlSW5kZXgsXG4gICAgICBieUNvbnRyb2xsZXI6IHRydWVcbiAgICB9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpKSB7XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLmZvckVhY2goYyA9PiB7XG4gICAgICAgIGlmIChjLnBhcmFtcy5sb29wKSBjLmxvb3BGaXgobG9vcFBhcmFtcyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wgaW5zdGFuY2VvZiBzd2lwZXIuY29uc3RydWN0b3IgJiYgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbC5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbC5sb29wRml4KGxvb3BQYXJhbXMpO1xuICAgIH1cbiAgfVxuICBzd2lwZXIuZW1pdCgnbG9vcEZpeCcpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvb3BEZXN0cm95KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIXBhcmFtcy5sb29wIHx8IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgY29uc3QgbmV3U2xpZGVzT3JkZXIgPSBbXTtcbiAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgY29uc3QgaW5kZXggPSB0eXBlb2Ygc2xpZGVFbC5zd2lwZXJTbGlkZUluZGV4ID09PSAndW5kZWZpbmVkJyA/IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA6IHNsaWRlRWwuc3dpcGVyU2xpZGVJbmRleDtcbiAgICBuZXdTbGlkZXNPcmRlcltpbmRleF0gPSBzbGlkZUVsO1xuICB9KTtcbiAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gIH0pO1xuICBuZXdTbGlkZXNPcmRlci5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHNsaWRlc0VsLmFwcGVuZChzbGlkZUVsKTtcbiAgfSk7XG4gIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnJlYWxJbmRleCwgMCk7XG59IiwiaW1wb3J0IHNldEdyYWJDdXJzb3IgZnJvbSAnLi9zZXRHcmFiQ3Vyc29yLmpzJztcbmltcG9ydCB1bnNldEdyYWJDdXJzb3IgZnJvbSAnLi91bnNldEdyYWJDdXJzb3IuanMnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBzZXRHcmFiQ3Vyc29yLFxuICB1bnNldEdyYWJDdXJzb3Jcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0R3JhYkN1cnNvcihtb3ZpbmcpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIucGFyYW1zLnNpbXVsYXRlVG91Y2ggfHwgc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgY29uc3QgZWwgPSBzd2lwZXIucGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnY29udGFpbmVyJyA/IHN3aXBlci5lbCA6IHN3aXBlci53cmFwcGVyRWw7XG4gIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSB0cnVlO1xuICB9XG4gIGVsLnN0eWxlLmN1cnNvciA9ICdtb3ZlJztcbiAgZWwuc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJ2dyYWJiaW5nJyA6ICdncmFiJztcbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVuc2V0R3JhYkN1cnNvcigpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSB0cnVlO1xuICB9XG4gIHN3aXBlcltzd2lwZXIucGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnY29udGFpbmVyJyA/ICdlbCcgOiAnd3JhcHBlckVsJ10uc3R5bGUuY3Vyc29yID0gJyc7XG4gIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbn0iLCJpbXBvcnQgc2V0QnJlYWtwb2ludCBmcm9tICcuL3NldEJyZWFrcG9pbnQuanMnO1xuaW1wb3J0IGdldEJyZWFrcG9pbnQgZnJvbSAnLi9nZXRCcmVha3BvaW50LmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0QnJlYWtwb2ludCxcbiAgZ2V0QnJlYWtwb2ludFxufTsiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMsIGJhc2UgPSAnd2luZG93JywgY29udGFpbmVyRWwpIHtcbiAgaWYgKCFicmVha3BvaW50cyB8fCBiYXNlID09PSAnY29udGFpbmVyJyAmJiAhY29udGFpbmVyRWwpIHJldHVybiB1bmRlZmluZWQ7XG4gIGxldCBicmVha3BvaW50ID0gZmFsc2U7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBjdXJyZW50SGVpZ2h0ID0gYmFzZSA9PT0gJ3dpbmRvdycgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiBjb250YWluZXJFbC5jbGllbnRIZWlnaHQ7XG4gIGNvbnN0IHBvaW50cyA9IE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5tYXAocG9pbnQgPT4ge1xuICAgIGlmICh0eXBlb2YgcG9pbnQgPT09ICdzdHJpbmcnICYmIHBvaW50LmluZGV4T2YoJ0AnKSA9PT0gMCkge1xuICAgICAgY29uc3QgbWluUmF0aW8gPSBwYXJzZUZsb2F0KHBvaW50LnN1YnN0cigxKSk7XG4gICAgICBjb25zdCB2YWx1ZSA9IGN1cnJlbnRIZWlnaHQgKiBtaW5SYXRpbztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICBwb2ludFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBwb2ludCxcbiAgICAgIHBvaW50XG4gICAgfTtcbiAgfSk7XG4gIHBvaW50cy5zb3J0KChhLCBiKSA9PiBwYXJzZUludChhLnZhbHVlLCAxMCkgLSBwYXJzZUludChiLnZhbHVlLCAxMCkpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHBvaW50LFxuICAgICAgdmFsdWVcbiAgICB9ID0gcG9pbnRzW2ldO1xuICAgIGlmIChiYXNlID09PSAnd2luZG93Jykge1xuICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKGAobWluLXdpZHRoOiAke3ZhbHVlfXB4KWApLm1hdGNoZXMpIHtcbiAgICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFsdWUgPD0gY29udGFpbmVyRWwuY2xpZW50V2lkdGgpIHtcbiAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJyZWFrcG9pbnQgfHwgJ21heCc7XG59IiwiZnVuY3Rpb24gY2hlY2tPdmVyZmxvdygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGlzTG9ja2VkOiB3YXNMb2NrZWQsXG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXNPZmZzZXRCZWZvcmVcbiAgfSA9IHBhcmFtcztcbiAgaWYgKHNsaWRlc09mZnNldEJlZm9yZSkge1xuICAgIGNvbnN0IGxhc3RTbGlkZUluZGV4ID0gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGxhc3RTbGlkZVJpZ2h0RWRnZSA9IHN3aXBlci5zbGlkZXNHcmlkW2xhc3RTbGlkZUluZGV4XSArIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbbGFzdFNsaWRlSW5kZXhdICsgc2xpZGVzT2Zmc2V0QmVmb3JlICogMjtcbiAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc2l6ZSA+IGxhc3RTbGlkZVJpZ2h0RWRnZTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoID09PSAxO1xuICB9XG4gIGlmIChwYXJhbXMuYWxsb3dTbGlkZU5leHQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSAhc3dpcGVyLmlzTG9ja2VkO1xuICB9XG4gIGlmIChwYXJhbXMuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSAhc3dpcGVyLmlzTG9ja2VkO1xuICB9XG4gIGlmICh3YXNMb2NrZWQgJiYgd2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICBzd2lwZXIuaXNFbmQgPSBmYWxzZTtcbiAgfVxuICBpZiAod2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICBzd2lwZXIuZW1pdChzd2lwZXIuaXNMb2NrZWQgPyAnbG9jaycgOiAndW5sb2NrJyk7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY2hlY2tPdmVyZmxvd1xufTsiLCJpbXBvcnQgYWRkQ2xhc3NlcyBmcm9tICcuL2FkZENsYXNzZXMuanMnO1xuaW1wb3J0IHJlbW92ZUNsYXNzZXMgZnJvbSAnLi9yZW1vdmVDbGFzc2VzLmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgYWRkQ2xhc3NlcyxcbiAgcmVtb3ZlQ2xhc3Nlc1xufTsiLCJmdW5jdGlvbiBwcmVwYXJlQ2xhc3NlcyhlbnRyaWVzLCBwcmVmaXgpIHtcbiAgY29uc3QgcmVzdWx0Q2xhc3NlcyA9IFtdO1xuICBlbnRyaWVzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmtleXMoaXRlbSkuZm9yRWFjaChjbGFzc05hbWVzID0+IHtcbiAgICAgICAgaWYgKGl0ZW1bY2xhc3NOYW1lc10pIHtcbiAgICAgICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgY2xhc3NOYW1lcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgaXRlbSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdENsYXNzZXM7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lcyxcbiAgICBwYXJhbXMsXG4gICAgcnRsLFxuICAgIGVsLFxuICAgIGRldmljZVxuICB9ID0gc3dpcGVyO1xuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgY29uc3Qgc3VmZml4ZXMgPSBwcmVwYXJlQ2xhc3NlcyhbJ2luaXRpYWxpemVkJywgcGFyYW1zLmRpcmVjdGlvbiwge1xuICAgICdmcmVlLW1vZGUnOiBzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkXG4gIH0sIHtcbiAgICAnYXV0b2hlaWdodCc6IHBhcmFtcy5hdXRvSGVpZ2h0XG4gIH0sIHtcbiAgICAncnRsJzogcnRsXG4gIH0sIHtcbiAgICAnZ3JpZCc6IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxXG4gIH0sIHtcbiAgICAnZ3JpZC1jb2x1bW4nOiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMSAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJ1xuICB9LCB7XG4gICAgJ2FuZHJvaWQnOiBkZXZpY2UuYW5kcm9pZFxuICB9LCB7XG4gICAgJ2lvcyc6IGRldmljZS5pb3NcbiAgfSwge1xuICAgICdjc3MtbW9kZSc6IHBhcmFtcy5jc3NNb2RlXG4gIH0sIHtcbiAgICAnY2VudGVyZWQnOiBwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXNcbiAgfSwge1xuICAgICd3YXRjaC1wcm9ncmVzcyc6IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzXG4gIH1dLCBwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyk7XG4gIGNsYXNzTmFtZXMucHVzaCguLi5zdWZmaXhlcyk7XG4gIGVsLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3NOYW1lcyk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBlbCxcbiAgICBjbGFzc05hbWVzXG4gIH0gPSBzd2lwZXI7XG4gIGVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uY2xhc3NOYW1lcyk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufSIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUmVzaXplKHtcbiAgc3dpcGVyLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IG9ic2VydmVyID0gbnVsbDtcbiAgbGV0IGFuaW1hdGlvbkZyYW1lID0gbnVsbDtcbiAgY29uc3QgcmVzaXplSGFuZGxlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBlbWl0KCdiZWZvcmVSZXNpemUnKTtcbiAgICBlbWl0KCdyZXNpemUnKTtcbiAgfTtcbiAgY29uc3QgY3JlYXRlT2JzZXJ2ZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgICBhbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0XG4gICAgICAgIH0gPSBzd2lwZXI7XG4gICAgICAgIGxldCBuZXdXaWR0aCA9IHdpZHRoO1xuICAgICAgICBsZXQgbmV3SGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICBlbnRyaWVzLmZvckVhY2goKHtcbiAgICAgICAgICBjb250ZW50Qm94U2l6ZSxcbiAgICAgICAgICBjb250ZW50UmVjdCxcbiAgICAgICAgICB0YXJnZXRcbiAgICAgICAgfSkgPT4ge1xuICAgICAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0ICE9PSBzd2lwZXIuZWwpIHJldHVybjtcbiAgICAgICAgICBuZXdXaWR0aCA9IGNvbnRlbnRSZWN0ID8gY29udGVudFJlY3Qud2lkdGggOiAoY29udGVudEJveFNpemVbMF0gfHwgY29udGVudEJveFNpemUpLmlubGluZVNpemU7XG4gICAgICAgICAgbmV3SGVpZ2h0ID0gY29udGVudFJlY3QgPyBjb250ZW50UmVjdC5oZWlnaHQgOiAoY29udGVudEJveFNpemVbMF0gfHwgY29udGVudEJveFNpemUpLmJsb2NrU2l6ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChuZXdXaWR0aCAhPT0gd2lkdGggfHwgbmV3SGVpZ2h0ICE9PSBoZWlnaHQpIHtcbiAgICAgICAgICByZXNpemVIYW5kbGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUoc3dpcGVyLmVsKTtcbiAgfTtcbiAgY29uc3QgcmVtb3ZlT2JzZXJ2ZXIgPSAoKSA9PiB7XG4gICAgaWYgKGFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uRnJhbWUpO1xuICAgIH1cbiAgICBpZiAob2JzZXJ2ZXIgJiYgb2JzZXJ2ZXIudW5vYnNlcnZlICYmIHN3aXBlci5lbCkge1xuICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKHN3aXBlci5lbCk7XG4gICAgICBvYnNlcnZlciA9IG51bGw7XG4gICAgfVxuICB9O1xuICBjb25zdCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgZW1pdCgnb3JpZW50YXRpb25jaGFuZ2UnKTtcbiAgfTtcbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucmVzaXplT2JzZXJ2ZXIgJiYgdHlwZW9mIHdpbmRvdy5SZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNyZWF0ZU9ic2VydmVyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVIYW5kbGVyKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgcmVtb3ZlT2JzZXJ2ZXIoKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlcik7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgfSk7XG59IiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgeyBlbGVtZW50UGFyZW50cyB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBPYnNlcnZlcih7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBjb25zdCBvYnNlcnZlcnMgPSBbXTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGF0dGFjaCA9ICh0YXJnZXQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IE9ic2VydmVyRnVuYyA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJraXRNdXRhdGlvbk9ic2VydmVyO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE9ic2VydmVyRnVuYyhtdXRhdGlvbnMgPT4ge1xuICAgICAgLy8gVGhlIG9ic2VydmVyVXBkYXRlIGV2ZW50IHNob3VsZCBvbmx5IGJlIHRyaWdnZXJlZFxuICAgICAgLy8gb25jZSBkZXNwaXRlIHRoZSBudW1iZXIgb2YgbXV0YXRpb25zLiAgQWRkaXRpb25hbFxuICAgICAgLy8gdHJpZ2dlcnMgYXJlIHJlZHVuZGFudCBhbmQgYXJlIHZlcnkgY29zdGx5XG4gICAgICBpZiAoc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18pIHJldHVybjtcbiAgICAgIGlmIChtdXRhdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgb2JzZXJ2ZXJVcGRhdGUgPSBmdW5jdGlvbiBvYnNlcnZlclVwZGF0ZSgpIHtcbiAgICAgICAgZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgfTtcbiAgICAgIGlmICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUob2JzZXJ2ZXJVcGRhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQob2JzZXJ2ZXJVcGRhdGUsIDApO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0LCB7XG4gICAgICBhdHRyaWJ1dGVzOiB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmF0dHJpYnV0ZXMsXG4gICAgICBjaGlsZExpc3Q6IHR5cGVvZiBvcHRpb25zLmNoaWxkTGlzdCA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGlsZExpc3QsXG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0eXBlb2Ygb3B0aW9ucy5jaGFyYWN0ZXJEYXRhID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoYXJhY3RlckRhdGFcbiAgICB9KTtcbiAgICBvYnNlcnZlcnMucHVzaChvYnNlcnZlcik7XG4gIH07XG4gIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLm9ic2VydmVyKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5wYXJhbXMub2JzZXJ2ZVBhcmVudHMpIHtcbiAgICAgIGNvbnN0IGNvbnRhaW5lclBhcmVudHMgPSBlbGVtZW50UGFyZW50cyhzd2lwZXIuZWwpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250YWluZXJQYXJlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGF0dGFjaChjb250YWluZXJQYXJlbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gT2JzZXJ2ZSBjb250YWluZXJcbiAgICBhdHRhY2goc3dpcGVyLmVsLCB7XG4gICAgICBjaGlsZExpc3Q6IHN3aXBlci5wYXJhbXMub2JzZXJ2ZVNsaWRlQ2hpbGRyZW5cbiAgICB9KTtcblxuICAgIC8vIE9ic2VydmUgd3JhcHBlclxuICAgIGF0dGFjaChzd2lwZXIud3JhcHBlckVsLCB7XG4gICAgICBhdHRyaWJ1dGVzOiBmYWxzZVxuICAgIH0pO1xuICB9O1xuICBjb25zdCBkZXN0cm95ID0gKCkgPT4ge1xuICAgIG9ic2VydmVycy5mb3JFYWNoKG9ic2VydmVyID0+IHtcbiAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9KTtcbiAgICBvYnNlcnZlcnMuc3BsaWNlKDAsIG9ic2VydmVycy5sZW5ndGgpO1xuICB9O1xuICBleHRlbmRQYXJhbXMoe1xuICAgIG9ic2VydmVyOiBmYWxzZSxcbiAgICBvYnNlcnZlUGFyZW50czogZmFsc2UsXG4gICAgb2JzZXJ2ZVNsaWRlQ2hpbGRyZW46IGZhbHNlXG4gIH0pO1xuICBvbignaW5pdCcsIGluaXQpO1xuICBvbignZGVzdHJveScsIGRlc3Ryb3kpO1xufSIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50LCBlbGVtZW50Q2hpbGRyZW4sIHNldENTU1Byb3BlcnR5IH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFZpcnR1YWwoe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtcyxcbiAgb24sXG4gIGVtaXRcbn0pIHtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICB2aXJ0dWFsOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHNsaWRlczogW10sXG4gICAgICBjYWNoZTogdHJ1ZSxcbiAgICAgIHJlbmRlclNsaWRlOiBudWxsLFxuICAgICAgcmVuZGVyRXh0ZXJuYWw6IG51bGwsXG4gICAgICByZW5kZXJFeHRlcm5hbFVwZGF0ZTogdHJ1ZSxcbiAgICAgIGFkZFNsaWRlc0JlZm9yZTogMCxcbiAgICAgIGFkZFNsaWRlc0FmdGVyOiAwXG4gICAgfVxuICB9KTtcbiAgbGV0IGNzc01vZGVUaW1lb3V0O1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHN3aXBlci52aXJ0dWFsID0ge1xuICAgIGNhY2hlOiB7fSxcbiAgICBmcm9tOiB1bmRlZmluZWQsXG4gICAgdG86IHVuZGVmaW5lZCxcbiAgICBzbGlkZXM6IFtdLFxuICAgIG9mZnNldDogMCxcbiAgICBzbGlkZXNHcmlkOiBbXVxuICB9O1xuICBjb25zdCB0ZW1wRE9NID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGZ1bmN0aW9uIHJlbmRlclNsaWRlKHNsaWRlLCBpbmRleCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMudmlydHVhbDtcbiAgICBpZiAocGFyYW1zLmNhY2hlICYmIHN3aXBlci52aXJ0dWFsLmNhY2hlW2luZGV4XSkge1xuICAgICAgcmV0dXJuIHN3aXBlci52aXJ0dWFsLmNhY2hlW2luZGV4XTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgbGV0IHNsaWRlRWw7XG4gICAgaWYgKHBhcmFtcy5yZW5kZXJTbGlkZSkge1xuICAgICAgc2xpZGVFbCA9IHBhcmFtcy5yZW5kZXJTbGlkZS5jYWxsKHN3aXBlciwgc2xpZGUsIGluZGV4KTtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVFbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGVtcERPTS5pbm5lckhUTUwgPSBzbGlkZUVsO1xuICAgICAgICBzbGlkZUVsID0gdGVtcERPTS5jaGlsZHJlblswXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIHNsaWRlRWwgPSBjcmVhdGVFbGVtZW50KCdzd2lwZXItc2xpZGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcyk7XG4gICAgfVxuICAgIHNsaWRlRWwuc2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIGluZGV4KTtcbiAgICBpZiAoIXBhcmFtcy5yZW5kZXJTbGlkZSkge1xuICAgICAgc2xpZGVFbC5pbm5lckhUTUwgPSBzbGlkZTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5jYWNoZSkgc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdID0gc2xpZGVFbDtcbiAgICByZXR1cm4gc2xpZGVFbDtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoZm9yY2UpIHtcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNQZXJWaWV3LFxuICAgICAgc2xpZGVzUGVyR3JvdXAsXG4gICAgICBjZW50ZXJlZFNsaWRlcyxcbiAgICAgIGxvb3A6IGlzTG9vcFxuICAgIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgIGNvbnN0IHtcbiAgICAgIGFkZFNsaWRlc0JlZm9yZSxcbiAgICAgIGFkZFNsaWRlc0FmdGVyXG4gICAgfSA9IHN3aXBlci5wYXJhbXMudmlydHVhbDtcbiAgICBjb25zdCB7XG4gICAgICBmcm9tOiBwcmV2aW91c0Zyb20sXG4gICAgICB0bzogcHJldmlvdXNUbyxcbiAgICAgIHNsaWRlcyxcbiAgICAgIHNsaWRlc0dyaWQ6IHByZXZpb3VzU2xpZGVzR3JpZCxcbiAgICAgIG9mZnNldDogcHJldmlvdXNPZmZzZXRcbiAgICB9ID0gc3dpcGVyLnZpcnR1YWw7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIH1cbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCB8fCAwO1xuICAgIGxldCBvZmZzZXRQcm9wO1xuICAgIGlmIChzd2lwZXIucnRsVHJhbnNsYXRlKSBvZmZzZXRQcm9wID0gJ3JpZ2h0JztlbHNlIG9mZnNldFByb3AgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJztcbiAgICBsZXQgc2xpZGVzQWZ0ZXI7XG4gICAgbGV0IHNsaWRlc0JlZm9yZTtcbiAgICBpZiAoY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlc0FmdGVyID0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0FmdGVyO1xuICAgICAgc2xpZGVzQmVmb3JlID0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0JlZm9yZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVzQWZ0ZXIgPSBzbGlkZXNQZXJWaWV3ICsgKHNsaWRlc1Blckdyb3VwIC0gMSkgKyBhZGRTbGlkZXNBZnRlcjtcbiAgICAgIHNsaWRlc0JlZm9yZSA9IChpc0xvb3AgPyBzbGlkZXNQZXJWaWV3IDogc2xpZGVzUGVyR3JvdXApICsgYWRkU2xpZGVzQmVmb3JlO1xuICAgIH1cbiAgICBsZXQgZnJvbSA9IGFjdGl2ZUluZGV4IC0gc2xpZGVzQmVmb3JlO1xuICAgIGxldCB0byA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzQWZ0ZXI7XG4gICAgaWYgKCFpc0xvb3ApIHtcbiAgICAgIGZyb20gPSBNYXRoLm1heChmcm9tLCAwKTtcbiAgICAgIHRvID0gTWF0aC5taW4odG8sIHNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICB9XG4gICAgbGV0IG9mZnNldCA9IChzd2lwZXIuc2xpZGVzR3JpZFtmcm9tXSB8fCAwKSAtIChzd2lwZXIuc2xpZGVzR3JpZFswXSB8fCAwKTtcbiAgICBpZiAoaXNMb29wICYmIGFjdGl2ZUluZGV4ID49IHNsaWRlc0JlZm9yZSkge1xuICAgICAgZnJvbSAtPSBzbGlkZXNCZWZvcmU7XG4gICAgICBpZiAoIWNlbnRlcmVkU2xpZGVzKSBvZmZzZXQgKz0gc3dpcGVyLnNsaWRlc0dyaWRbMF07XG4gICAgfSBlbHNlIGlmIChpc0xvb3AgJiYgYWN0aXZlSW5kZXggPCBzbGlkZXNCZWZvcmUpIHtcbiAgICAgIGZyb20gPSAtc2xpZGVzQmVmb3JlO1xuICAgICAgaWYgKGNlbnRlcmVkU2xpZGVzKSBvZmZzZXQgKz0gc3dpcGVyLnNsaWRlc0dyaWRbMF07XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnZpcnR1YWwsIHtcbiAgICAgIGZyb20sXG4gICAgICB0byxcbiAgICAgIG9mZnNldCxcbiAgICAgIHNsaWRlc0dyaWQ6IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgICAgc2xpZGVzQmVmb3JlLFxuICAgICAgc2xpZGVzQWZ0ZXJcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBvblJlbmRlcmVkKCkge1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgZW1pdCgndmlydHVhbFVwZGF0ZScpO1xuICAgIH1cbiAgICBpZiAocHJldmlvdXNGcm9tID09PSBmcm9tICYmIHByZXZpb3VzVG8gPT09IHRvICYmICFmb3JjZSkge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNHcmlkICE9PSBwcmV2aW91c1NsaWRlc0dyaWQgJiYgb2Zmc2V0ICE9PSBwcmV2aW91c09mZnNldCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgICAgc2xpZGVFbC5zdHlsZVtvZmZzZXRQcm9wXSA9IGAke29mZnNldH1weGA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICBlbWl0KCd2aXJ0dWFsVXBkYXRlJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwucmVuZGVyRXh0ZXJuYWwpIHtcbiAgICAgIHN3aXBlci5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbC5jYWxsKHN3aXBlciwge1xuICAgICAgICBvZmZzZXQsXG4gICAgICAgIGZyb20sXG4gICAgICAgIHRvLFxuICAgICAgICBzbGlkZXM6IGZ1bmN0aW9uIGdldFNsaWRlcygpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZXNUb1JlbmRlciA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IGkgPSBmcm9tOyBpIDw9IHRvOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHNsaWRlc1RvUmVuZGVyLnB1c2goc2xpZGVzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHNsaWRlc1RvUmVuZGVyO1xuICAgICAgICB9KClcbiAgICAgIH0pO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbFVwZGF0ZSkge1xuICAgICAgICBvblJlbmRlcmVkKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbWl0KCd2aXJ0dWFsVXBkYXRlJyk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHByZXBlbmRJbmRleGVzID0gW107XG4gICAgY29uc3QgYXBwZW5kSW5kZXhlcyA9IFtdO1xuICAgIGNvbnN0IGdldFNsaWRlSW5kZXggPSBpbmRleCA9PiB7XG4gICAgICBsZXQgc2xpZGVJbmRleCA9IGluZGV4O1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBzbGlkZUluZGV4ID0gc2xpZGVzLmxlbmd0aCArIGluZGV4O1xuICAgICAgfSBlbHNlIGlmIChzbGlkZUluZGV4ID49IHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHNsaWRlSW5kZXggPSBzbGlkZUluZGV4IC0gc2xpZGVzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzbGlkZUluZGV4O1xuICAgIH07XG4gICAgaWYgKGZvcmNlKSB7XG4gICAgICBzd2lwZXIuc2xpZGVzRWwucXVlcnlTZWxlY3RvckFsbChgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCkuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgc2xpZGVFbC5yZW1vdmUoKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gcHJldmlvdXNGcm9tOyBpIDw9IHByZXZpb3VzVG87IGkgKz0gMSkge1xuICAgICAgICBpZiAoaSA8IGZyb20gfHwgaSA+IHRvKSB7XG4gICAgICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IGdldFNsaWRlSW5kZXgoaSk7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlc0VsLnF1ZXJ5U2VsZWN0b3JBbGwoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlSW5kZXh9XCJdLCBzd2lwZXItc2xpZGVbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlSW5kZXh9XCJdYCkuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgICAgIHNsaWRlRWwucmVtb3ZlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbG9vcEZyb20gPSBpc0xvb3AgPyAtc2xpZGVzLmxlbmd0aCA6IDA7XG4gICAgY29uc3QgbG9vcFRvID0gaXNMb29wID8gc2xpZGVzLmxlbmd0aCAqIDIgOiBzbGlkZXMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSBsb29wRnJvbTsgaSA8IGxvb3BUbzsgaSArPSAxKSB7XG4gICAgICBpZiAoaSA+PSBmcm9tICYmIGkgPD0gdG8pIHtcbiAgICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IGdldFNsaWRlSW5kZXgoaSk7XG4gICAgICAgIGlmICh0eXBlb2YgcHJldmlvdXNUbyA9PT0gJ3VuZGVmaW5lZCcgfHwgZm9yY2UpIHtcbiAgICAgICAgICBhcHBlbmRJbmRleGVzLnB1c2goc2xpZGVJbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGkgPiBwcmV2aW91c1RvKSBhcHBlbmRJbmRleGVzLnB1c2goc2xpZGVJbmRleCk7XG4gICAgICAgICAgaWYgKGkgPCBwcmV2aW91c0Zyb20pIHByZXBlbmRJbmRleGVzLnB1c2goc2xpZGVJbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgYXBwZW5kSW5kZXhlcy5mb3JFYWNoKGluZGV4ID0+IHtcbiAgICAgIHN3aXBlci5zbGlkZXNFbC5hcHBlbmQocmVuZGVyU2xpZGUoc2xpZGVzW2luZGV4XSwgaW5kZXgpKTtcbiAgICB9KTtcbiAgICBpZiAoaXNMb29wKSB7XG4gICAgICBmb3IgKGxldCBpID0gcHJlcGVuZEluZGV4ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBwcmVwZW5kSW5kZXhlc1tpXTtcbiAgICAgICAgc3dpcGVyLnNsaWRlc0VsLnByZXBlbmQocmVuZGVyU2xpZGUoc2xpZGVzW2luZGV4XSwgaW5kZXgpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcHJlcGVuZEluZGV4ZXMuc29ydCgoYSwgYikgPT4gYiAtIGEpO1xuICAgICAgcHJlcGVuZEluZGV4ZXMuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICAgIHN3aXBlci5zbGlkZXNFbC5wcmVwZW5kKHJlbmRlclNsaWRlKHNsaWRlc1tpbmRleF0sIGluZGV4KSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxlbWVudENoaWxkcmVuKHN3aXBlci5zbGlkZXNFbCwgJy5zd2lwZXItc2xpZGUsIHN3aXBlci1zbGlkZScpLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBzbGlkZUVsLnN0eWxlW29mZnNldFByb3BdID0gYCR7b2Zmc2V0fXB4YDtcbiAgICB9KTtcbiAgICBvblJlbmRlcmVkKCk7XG4gIH1cbiAgZnVuY3Rpb24gYXBwZW5kU2xpZGUoc2xpZGVzKSB7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSkgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnB1c2goc2xpZGVzW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnB1c2goc2xpZGVzKTtcbiAgICB9XG4gICAgdXBkYXRlKHRydWUpO1xuICB9XG4gIGZ1bmN0aW9uIHByZXBlbmRTbGlkZShzbGlkZXMpIHtcbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICBsZXQgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIDE7XG4gICAgbGV0IG51bWJlck9mTmV3U2xpZGVzID0gMTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzbGlkZXMpKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldKSBzd2lwZXIudmlydHVhbC5zbGlkZXMudW5zaGlmdChzbGlkZXNbaV0pO1xuICAgICAgfVxuICAgICAgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIHNsaWRlcy5sZW5ndGg7XG4gICAgICBudW1iZXJPZk5ld1NsaWRlcyA9IHNsaWRlcy5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy51bnNoaWZ0KHNsaWRlcyk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgIGNvbnN0IGNhY2hlID0gc3dpcGVyLnZpcnR1YWwuY2FjaGU7XG4gICAgICBjb25zdCBuZXdDYWNoZSA9IHt9O1xuICAgICAgT2JqZWN0LmtleXMoY2FjaGUpLmZvckVhY2goY2FjaGVkSW5kZXggPT4ge1xuICAgICAgICBjb25zdCBjYWNoZWRFbCA9IGNhY2hlW2NhY2hlZEluZGV4XTtcbiAgICAgICAgY29uc3QgY2FjaGVkRWxJbmRleCA9IGNhY2hlZEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgICAgaWYgKGNhY2hlZEVsSW5kZXgpIHtcbiAgICAgICAgICBjYWNoZWRFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgcGFyc2VJbnQoY2FjaGVkRWxJbmRleCwgMTApICsgbnVtYmVyT2ZOZXdTbGlkZXMpO1xuICAgICAgICB9XG4gICAgICAgIG5ld0NhY2hlW3BhcnNlSW50KGNhY2hlZEluZGV4LCAxMCkgKyBudW1iZXJPZk5ld1NsaWRlc10gPSBjYWNoZWRFbDtcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGUgPSBuZXdDYWNoZTtcbiAgICB9XG4gICAgdXBkYXRlKHRydWUpO1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgfVxuICBmdW5jdGlvbiByZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKSB7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNJbmRleGVzID09PSAndW5kZWZpbmVkJyB8fCBzbGlkZXNJbmRleGVzID09PSBudWxsKSByZXR1cm47XG4gICAgbGV0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNsaWRlc0luZGV4ZXMpKSB7XG4gICAgICBmb3IgKGxldCBpID0gc2xpZGVzSW5kZXhlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMuc3BsaWNlKHNsaWRlc0luZGV4ZXNbaV0sIDEpO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICAgICAgZGVsZXRlIHN3aXBlci52aXJ0dWFsLmNhY2hlW3NsaWRlc0luZGV4ZXNbaV1dO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzbGlkZXNJbmRleGVzW2ldIDwgYWN0aXZlSW5kZXgpIGFjdGl2ZUluZGV4IC09IDE7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gTWF0aC5tYXgoYWN0aXZlSW5kZXgsIDApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMuc3BsaWNlKHNsaWRlc0luZGV4ZXMsIDEpO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgICBkZWxldGUgc3dpcGVyLnZpcnR1YWwuY2FjaGVbc2xpZGVzSW5kZXhlc107XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVzSW5kZXhlcyA8IGFjdGl2ZUluZGV4KSBhY3RpdmVJbmRleCAtPSAxO1xuICAgICAgYWN0aXZlSW5kZXggPSBNYXRoLm1heChhY3RpdmVJbmRleCwgMCk7XG4gICAgfVxuICAgIHVwZGF0ZSh0cnVlKTtcbiAgICBzd2lwZXIuc2xpZGVUbyhhY3RpdmVJbmRleCwgMCk7XG4gIH1cbiAgZnVuY3Rpb24gcmVtb3ZlQWxsU2xpZGVzKCkge1xuICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcyA9IFtdO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLmNhY2hlID0ge307XG4gICAgfVxuICAgIHVwZGF0ZSh0cnVlKTtcbiAgICBzd2lwZXIuc2xpZGVUbygwLCAwKTtcbiAgfVxuICBvbignYmVmb3JlSW5pdCcsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gICAgbGV0IGRvbVNsaWRlc0Fzc2lnbmVkO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhc3NlZFBhcmFtcy52aXJ0dWFsLnNsaWRlcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IHNsaWRlcyA9IFsuLi5zd2lwZXIuc2xpZGVzRWwuY2hpbGRyZW5dLmZpbHRlcihlbCA9PiBlbC5tYXRjaGVzKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKSk7XG4gICAgICBpZiAoc2xpZGVzICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzID0gWy4uLnNsaWRlc107XG4gICAgICAgIGRvbVNsaWRlc0Fzc2lnbmVkID0gdHJ1ZTtcbiAgICAgICAgc2xpZGVzLmZvckVhY2goKHNsaWRlRWwsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgICAgICBzbGlkZUVsLnNldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBzbGlkZUluZGV4KTtcbiAgICAgICAgICBzd2lwZXIudmlydHVhbC5jYWNoZVtzbGlkZUluZGV4XSA9IHNsaWRlRWw7XG4gICAgICAgICAgc2xpZGVFbC5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghZG9tU2xpZGVzQXNzaWduZWQpIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcyA9IHN3aXBlci5wYXJhbXMudmlydHVhbC5zbGlkZXM7XG4gICAgfVxuICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfXZpcnR1YWxgKTtcbiAgICBzd2lwZXIucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlKSB7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignc2V0VHJhbnNsYXRlJywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlICYmICFzd2lwZXIuX2ltbWVkaWF0ZVZpcnR1YWwpIHtcbiAgICAgIGNsZWFyVGltZW91dChjc3NNb2RlVGltZW91dCk7XG4gICAgICBjc3NNb2RlVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB1cGRhdGUoKTtcbiAgICAgIH0sIDEwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdpbml0IHVwZGF0ZSByZXNpemUnLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHNldENTU1Byb3BlcnR5KHN3aXBlci53cmFwcGVyRWwsICctLXN3aXBlci12aXJ0dWFsLXNpemUnLCBgJHtzd2lwZXIudmlydHVhbFNpemV9cHhgKTtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuYXNzaWduKHN3aXBlci52aXJ0dWFsLCB7XG4gICAgYXBwZW5kU2xpZGUsXG4gICAgcHJlcGVuZFNsaWRlLFxuICAgIHJlbW92ZVNsaWRlLFxuICAgIHJlbW92ZUFsbFNsaWRlcyxcbiAgICB1cGRhdGVcbiAgfSk7XG59IiwiLyogZXNsaW50LWRpc2FibGUgY29uc2lzdGVudC1yZXR1cm4gKi9cbmltcG9ydCB7IGdldFdpbmRvdywgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IGVsZW1lbnRPZmZzZXQsIGVsZW1lbnRQYXJlbnRzIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEtleWJvYXJkKHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uLFxuICBlbWl0XG59KSB7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHN3aXBlci5rZXlib2FyZCA9IHtcbiAgICBlbmFibGVkOiBmYWxzZVxuICB9O1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGtleWJvYXJkOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIG9ubHlJblZpZXdwb3J0OiB0cnVlLFxuICAgICAgcGFnZVVwRG93bjogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIGhhbmRsZShldmVudCkge1xuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBjb25zdCB7XG4gICAgICBydGxUcmFuc2xhdGU6IHJ0bFxuICAgIH0gPSBzd2lwZXI7XG4gICAgbGV0IGUgPSBldmVudDtcbiAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50OyAvLyBqcXVlcnkgZml4XG4gICAgY29uc3Qga2MgPSBlLmtleUNvZGUgfHwgZS5jaGFyQ29kZTtcbiAgICBjb25zdCBwYWdlVXBEb3duID0gc3dpcGVyLnBhcmFtcy5rZXlib2FyZC5wYWdlVXBEb3duO1xuICAgIGNvbnN0IGlzUGFnZVVwID0gcGFnZVVwRG93biAmJiBrYyA9PT0gMzM7XG4gICAgY29uc3QgaXNQYWdlRG93biA9IHBhZ2VVcERvd24gJiYga2MgPT09IDM0O1xuICAgIGNvbnN0IGlzQXJyb3dMZWZ0ID0ga2MgPT09IDM3O1xuICAgIGNvbnN0IGlzQXJyb3dSaWdodCA9IGtjID09PSAzOTtcbiAgICBjb25zdCBpc0Fycm93VXAgPSBrYyA9PT0gMzg7XG4gICAgY29uc3QgaXNBcnJvd0Rvd24gPSBrYyA9PT0gNDA7XG4gICAgLy8gRGlyZWN0aW9ucyBsb2Nrc1xuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgaXNBcnJvd1JpZ2h0IHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgaXNBcnJvd0Rvd24gfHwgaXNQYWdlRG93bikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBpc0Fycm93TGVmdCB8fCBzd2lwZXIuaXNWZXJ0aWNhbCgpICYmIGlzQXJyb3dVcCB8fCBpc1BhZ2VVcCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGUuc2hpZnRLZXkgfHwgZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZSAmJiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJykpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmtleWJvYXJkLm9ubHlJblZpZXdwb3J0ICYmIChpc1BhZ2VVcCB8fCBpc1BhZ2VEb3duIHx8IGlzQXJyb3dMZWZ0IHx8IGlzQXJyb3dSaWdodCB8fCBpc0Fycm93VXAgfHwgaXNBcnJvd0Rvd24pKSB7XG4gICAgICBsZXQgaW5WaWV3ID0gZmFsc2U7XG4gICAgICAvLyBDaGVjayB0aGF0IHN3aXBlciBzaG91bGQgYmUgaW5zaWRlIG9mIHZpc2libGUgYXJlYSBvZiB3aW5kb3dcbiAgICAgIGlmIChlbGVtZW50UGFyZW50cyhzd2lwZXIuZWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKS5sZW5ndGggPiAwICYmIGVsZW1lbnRQYXJlbnRzKHN3aXBlci5lbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzc31gKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVsID0gc3dpcGVyLmVsO1xuICAgICAgY29uc3Qgc3dpcGVyV2lkdGggPSBlbC5jbGllbnRXaWR0aDtcbiAgICAgIGNvbnN0IHN3aXBlckhlaWdodCA9IGVsLmNsaWVudEhlaWdodDtcbiAgICAgIGNvbnN0IHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICBjb25zdCB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICBjb25zdCBzd2lwZXJPZmZzZXQgPSBlbGVtZW50T2Zmc2V0KGVsKTtcbiAgICAgIGlmIChydGwpIHN3aXBlck9mZnNldC5sZWZ0IC09IGVsLnNjcm9sbExlZnQ7XG4gICAgICBjb25zdCBzd2lwZXJDb29yZCA9IFtbc3dpcGVyT2Zmc2V0LmxlZnQsIHN3aXBlck9mZnNldC50b3BdLCBbc3dpcGVyT2Zmc2V0LmxlZnQgKyBzd2lwZXJXaWR0aCwgc3dpcGVyT2Zmc2V0LnRvcF0sIFtzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcCArIHN3aXBlckhlaWdodF0sIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlcldpZHRoLCBzd2lwZXJPZmZzZXQudG9wICsgc3dpcGVySGVpZ2h0XV07XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlckNvb3JkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gc3dpcGVyQ29vcmRbaV07XG4gICAgICAgIGlmIChwb2ludFswXSA+PSAwICYmIHBvaW50WzBdIDw9IHdpbmRvd1dpZHRoICYmIHBvaW50WzFdID49IDAgJiYgcG9pbnRbMV0gPD0gd2luZG93SGVpZ2h0KSB7XG4gICAgICAgICAgaWYgKHBvaW50WzBdID09PSAwICYmIHBvaW50WzFdID09PSAwKSBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgIGluVmlldyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghaW5WaWV3KSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBpZiAoaXNQYWdlVXAgfHwgaXNQYWdlRG93biB8fCBpc0Fycm93TGVmdCB8fCBpc0Fycm93UmlnaHQpIHtcbiAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICgoaXNQYWdlRG93biB8fCBpc0Fycm93UmlnaHQpICYmICFydGwgfHwgKGlzUGFnZVVwIHx8IGlzQXJyb3dMZWZ0KSAmJiBydGwpIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgIGlmICgoaXNQYWdlVXAgfHwgaXNBcnJvd0xlZnQpICYmICFydGwgfHwgKGlzUGFnZURvd24gfHwgaXNBcnJvd1JpZ2h0KSAmJiBydGwpIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzUGFnZVVwIHx8IGlzUGFnZURvd24gfHwgaXNBcnJvd1VwIHx8IGlzQXJyb3dEb3duKSB7XG4gICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaXNQYWdlRG93biB8fCBpc0Fycm93RG93bikgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgaWYgKGlzUGFnZVVwIHx8IGlzQXJyb3dVcCkgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgIH1cbiAgICBlbWl0KCdrZXlQcmVzcycsIGtjKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICBpZiAoc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQpIHJldHVybjtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlKTtcbiAgICBzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCA9IHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBpZiAoIXN3aXBlci5rZXlib2FyZC5lbmFibGVkKSByZXR1cm47XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZSk7XG4gICAgc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQgPSBmYWxzZTtcbiAgfVxuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5rZXlib2FyZC5lbmFibGVkKSB7XG4gICAgICBlbmFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQpIHtcbiAgICAgIGRpc2FibGUoKTtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5rZXlib2FyZCwge1xuICAgIGVuYWJsZSxcbiAgICBkaXNhYmxlXG4gIH0pO1xufSIsIi8qIGVzbGludC1kaXNhYmxlIGNvbnNpc3RlbnQtcmV0dXJuICovXG5pbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IG5vdywgbmV4dFRpY2sgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTW91c2V3aGVlbCh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBtb3VzZXdoZWVsOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgICAgIGludmVydDogZmFsc2UsXG4gICAgICBmb3JjZVRvQXhpczogZmFsc2UsXG4gICAgICBzZW5zaXRpdml0eTogMSxcbiAgICAgIGV2ZW50c1RhcmdldDogJ2NvbnRhaW5lcicsXG4gICAgICB0aHJlc2hvbGREZWx0YTogbnVsbCxcbiAgICAgIHRocmVzaG9sZFRpbWU6IG51bGxcbiAgICB9XG4gIH0pO1xuICBzd2lwZXIubW91c2V3aGVlbCA9IHtcbiAgICBlbmFibGVkOiBmYWxzZVxuICB9O1xuICBsZXQgdGltZW91dDtcbiAgbGV0IGxhc3RTY3JvbGxUaW1lID0gbm93KCk7XG4gIGxldCBsYXN0RXZlbnRCZWZvcmVTbmFwO1xuICBjb25zdCByZWNlbnRXaGVlbEV2ZW50cyA9IFtdO1xuICBmdW5jdGlvbiBub3JtYWxpemUoZSkge1xuICAgIC8vIFJlYXNvbmFibGUgZGVmYXVsdHNcbiAgICBjb25zdCBQSVhFTF9TVEVQID0gMTA7XG4gICAgY29uc3QgTElORV9IRUlHSFQgPSA0MDtcbiAgICBjb25zdCBQQUdFX0hFSUdIVCA9IDgwMDtcbiAgICBsZXQgc1ggPSAwO1xuICAgIGxldCBzWSA9IDA7IC8vIHNwaW5YLCBzcGluWVxuICAgIGxldCBwWCA9IDA7XG4gICAgbGV0IHBZID0gMDsgLy8gcGl4ZWxYLCBwaXhlbFlcblxuICAgIC8vIExlZ2FjeVxuICAgIGlmICgnZGV0YWlsJyBpbiBlKSB7XG4gICAgICBzWSA9IGUuZGV0YWlsO1xuICAgIH1cbiAgICBpZiAoJ3doZWVsRGVsdGEnIGluIGUpIHtcbiAgICAgIHNZID0gLWUud2hlZWxEZWx0YSAvIDEyMDtcbiAgICB9XG4gICAgaWYgKCd3aGVlbERlbHRhWScgaW4gZSkge1xuICAgICAgc1kgPSAtZS53aGVlbERlbHRhWSAvIDEyMDtcbiAgICB9XG4gICAgaWYgKCd3aGVlbERlbHRhWCcgaW4gZSkge1xuICAgICAgc1ggPSAtZS53aGVlbERlbHRhWCAvIDEyMDtcbiAgICB9XG5cbiAgICAvLyBzaWRlIHNjcm9sbGluZyBvbiBGRiB3aXRoIERPTU1vdXNlU2Nyb2xsXG4gICAgaWYgKCdheGlzJyBpbiBlICYmIGUuYXhpcyA9PT0gZS5IT1JJWk9OVEFMX0FYSVMpIHtcbiAgICAgIHNYID0gc1k7XG4gICAgICBzWSA9IDA7XG4gICAgfVxuICAgIHBYID0gc1ggKiBQSVhFTF9TVEVQO1xuICAgIHBZID0gc1kgKiBQSVhFTF9TVEVQO1xuICAgIGlmICgnZGVsdGFZJyBpbiBlKSB7XG4gICAgICBwWSA9IGUuZGVsdGFZO1xuICAgIH1cbiAgICBpZiAoJ2RlbHRhWCcgaW4gZSkge1xuICAgICAgcFggPSBlLmRlbHRhWDtcbiAgICB9XG4gICAgaWYgKGUuc2hpZnRLZXkgJiYgIXBYKSB7XG4gICAgICAvLyBpZiB1c2VyIHNjcm9sbHMgd2l0aCBzaGlmdCBoZSB3YW50cyBob3Jpem9udGFsIHNjcm9sbFxuICAgICAgcFggPSBwWTtcbiAgICAgIHBZID0gMDtcbiAgICB9XG4gICAgaWYgKChwWCB8fCBwWSkgJiYgZS5kZWx0YU1vZGUpIHtcbiAgICAgIGlmIChlLmRlbHRhTW9kZSA9PT0gMSkge1xuICAgICAgICAvLyBkZWx0YSBpbiBMSU5FIHVuaXRzXG4gICAgICAgIHBYICo9IExJTkVfSEVJR0hUO1xuICAgICAgICBwWSAqPSBMSU5FX0hFSUdIVDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlbHRhIGluIFBBR0UgdW5pdHNcbiAgICAgICAgcFggKj0gUEFHRV9IRUlHSFQ7XG4gICAgICAgIHBZICo9IFBBR0VfSEVJR0hUO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZhbGwtYmFjayBpZiBzcGluIGNhbm5vdCBiZSBkZXRlcm1pbmVkXG4gICAgaWYgKHBYICYmICFzWCkge1xuICAgICAgc1ggPSBwWCA8IDEgPyAtMSA6IDE7XG4gICAgfVxuICAgIGlmIChwWSAmJiAhc1kpIHtcbiAgICAgIHNZID0gcFkgPCAxID8gLTEgOiAxO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgc3Bpblg6IHNYLFxuICAgICAgc3Bpblk6IHNZLFxuICAgICAgcGl4ZWxYOiBwWCxcbiAgICAgIHBpeGVsWTogcFlcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZU1vdXNlRW50ZXIoKSB7XG4gICAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5tb3VzZUVudGVyZWQgPSB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZU1vdXNlTGVhdmUoKSB7XG4gICAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5tb3VzZUVudGVyZWQgPSBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiBhbmltYXRlU2xpZGVyKG5ld0V2ZW50KSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGREZWx0YSAmJiBuZXdFdmVudC5kZWx0YSA8IHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGREZWx0YSkge1xuICAgICAgLy8gUHJldmVudCBpZiBkZWx0YSBvZiB3aGVlbCBzY3JvbGwgZGVsdGEgaXMgYmVsb3cgY29uZmlndXJlZCB0aHJlc2hvbGRcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGRUaW1lICYmIG5vdygpIC0gbGFzdFNjcm9sbFRpbWUgPCBzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkVGltZSkge1xuICAgICAgLy8gUHJldmVudCBpZiB0aW1lIGJldHdlZW4gc2Nyb2xscyBpcyBiZWxvdyBjb25maWd1cmVkIHRocmVzaG9sZFxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBtb3ZlbWVudCBpcyBOT1QgYmlnIGVub3VnaCBhbmRcbiAgICAvLyBpZiB0aGUgbGFzdCB0aW1lIHRoZSB1c2VyIHNjcm9sbGVkIHdhcyB0b28gY2xvc2UgdG8gdGhlIGN1cnJlbnQgb25lIChhdm9pZCBjb250aW51b3VzbHkgdHJpZ2dlcmluZyB0aGUgc2xpZGVyKTpcbiAgICAvLyAgIERvbid0IGdvIGFueSBmdXJ0aGVyIChhdm9pZCBpbnNpZ25pZmljYW50IHNjcm9sbCBtb3ZlbWVudCkuXG4gICAgaWYgKG5ld0V2ZW50LmRlbHRhID49IDYgJiYgbm93KCkgLSBsYXN0U2Nyb2xsVGltZSA8IDYwKSB7XG4gICAgICAvLyBSZXR1cm4gZmFsc2UgYXMgYSBkZWZhdWx0XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gSWYgdXNlciBpcyBzY3JvbGxpbmcgdG93YXJkcyB0aGUgZW5kOlxuICAgIC8vICAgSWYgdGhlIHNsaWRlciBoYXNuJ3QgaGl0IHRoZSBsYXRlc3Qgc2xpZGUgb3JcbiAgICAvLyAgIGlmIHRoZSBzbGlkZXIgaXMgYSBsb29wIGFuZFxuICAgIC8vICAgaWYgdGhlIHNsaWRlciBpc24ndCBtb3ZpbmcgcmlnaHQgbm93OlxuICAgIC8vICAgICBHbyB0byBuZXh0IHNsaWRlIGFuZFxuICAgIC8vICAgICBlbWl0IGEgc2Nyb2xsIGV2ZW50LlxuICAgIC8vIEVsc2UgKHRoZSB1c2VyIGlzIHNjcm9sbGluZyB0b3dhcmRzIHRoZSBiZWdpbm5pbmcpIGFuZFxuICAgIC8vIGlmIHRoZSBzbGlkZXIgaGFzbid0IGhpdCB0aGUgZmlyc3Qgc2xpZGUgb3JcbiAgICAvLyBpZiB0aGUgc2xpZGVyIGlzIGEgbG9vcCBhbmRcbiAgICAvLyBpZiB0aGUgc2xpZGVyIGlzbid0IG1vdmluZyByaWdodCBub3c6XG4gICAgLy8gICBHbyB0byBwcmV2IHNsaWRlIGFuZFxuICAgIC8vICAgZW1pdCBhIHNjcm9sbCBldmVudC5cbiAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uIDwgMCkge1xuICAgICAgaWYgKCghc3dpcGVyLmlzRW5kIHx8IHN3aXBlci5wYXJhbXMubG9vcCkgJiYgIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgICBlbWl0KCdzY3JvbGwnLCBuZXdFdmVudC5yYXcpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKCFzd2lwZXIuaXNCZWdpbm5pbmcgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSAmJiAhc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgZW1pdCgnc2Nyb2xsJywgbmV3RXZlbnQucmF3KTtcbiAgICB9XG4gICAgLy8gSWYgeW91IGdvdCBoZXJlIGlzIGJlY2F1c2UgYW4gYW5pbWF0aW9uIGhhcyBiZWVuIHRyaWdnZXJlZCBzbyBzdG9yZSB0aGUgY3VycmVudCB0aW1lXG4gICAgbGFzdFNjcm9sbFRpbWUgPSBuZXcgd2luZG93LkRhdGUoKS5nZXRUaW1lKCk7XG4gICAgLy8gUmV0dXJuIGZhbHNlIGFzIGEgZGVmYXVsdFxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiByZWxlYXNlU2Nyb2xsKG5ld0V2ZW50KSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsO1xuICAgIGlmIChuZXdFdmVudC5kaXJlY3Rpb24gPCAwKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgcGFyYW1zLnJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgICAgIC8vIFJldHVybiB0cnVlIHRvIGFuaW1hdGUgc2Nyb2xsIG9uIGVkZ2VzXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgcGFyYW1zLnJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgICAvLyBSZXR1cm4gdHJ1ZSB0byBhbmltYXRlIHNjcm9sbCBvbiBlZGdlc1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcbiAgICBsZXQgZSA9IGV2ZW50O1xuICAgIGxldCBkaXNhYmxlUGFyZW50U3dpcGVyID0gdHJ1ZTtcbiAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgbGV0IHRhcmdldEVsID0gc3dpcGVyLmVsO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0ICE9PSAnY29udGFpbmVyJykge1xuICAgICAgdGFyZ2V0RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQpO1xuICAgIH1cbiAgICBjb25zdCB0YXJnZXRFbENvbnRhaW5zVGFyZ2V0ID0gdGFyZ2V0RWwgJiYgdGFyZ2V0RWwuY29udGFpbnMoZS50YXJnZXQpO1xuICAgIGlmICghc3dpcGVyLm1vdXNlRW50ZXJlZCAmJiAhdGFyZ2V0RWxDb250YWluc1RhcmdldCAmJiAhcGFyYW1zLnJlbGVhc2VPbkVkZ2VzKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50OyAvLyBqcXVlcnkgZml4XG4gICAgbGV0IGRlbHRhID0gMDtcbiAgICBjb25zdCBydGxGYWN0b3IgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gLTEgOiAxO1xuICAgIGNvbnN0IGRhdGEgPSBub3JtYWxpemUoZSk7XG4gICAgaWYgKHBhcmFtcy5mb3JjZVRvQXhpcykge1xuICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICBpZiAoTWF0aC5hYnMoZGF0YS5waXhlbFgpID4gTWF0aC5hYnMoZGF0YS5waXhlbFkpKSBkZWx0YSA9IC1kYXRhLnBpeGVsWCAqIHJ0bEZhY3RvcjtlbHNlIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhkYXRhLnBpeGVsWSkgPiBNYXRoLmFicyhkYXRhLnBpeGVsWCkpIGRlbHRhID0gLWRhdGEucGl4ZWxZO2Vsc2UgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbHRhID0gTWF0aC5hYnMoZGF0YS5waXhlbFgpID4gTWF0aC5hYnMoZGF0YS5waXhlbFkpID8gLWRhdGEucGl4ZWxYICogcnRsRmFjdG9yIDogLWRhdGEucGl4ZWxZO1xuICAgIH1cbiAgICBpZiAoZGVsdGEgPT09IDApIHJldHVybiB0cnVlO1xuICAgIGlmIChwYXJhbXMuaW52ZXJ0KSBkZWx0YSA9IC1kZWx0YTtcblxuICAgIC8vIEdldCB0aGUgc2Nyb2xsIHBvc2l0aW9uc1xuICAgIGxldCBwb3NpdGlvbnMgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCkgKyBkZWx0YSAqIHBhcmFtcy5zZW5zaXRpdml0eTtcbiAgICBpZiAocG9zaXRpb25zID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkgcG9zaXRpb25zID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgIGlmIChwb3NpdGlvbnMgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSBwb3NpdGlvbnMgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG5cbiAgICAvLyBXaGVuIGxvb3AgaXMgdHJ1ZTpcbiAgICAvLyAgICAgdGhlIGRpc2FibGVQYXJlbnRTd2lwZXIgd2lsbCBiZSB0cnVlLlxuICAgIC8vIFdoZW4gbG9vcCBpcyBmYWxzZTpcbiAgICAvLyAgICAgaWYgdGhlIHNjcm9sbCBwb3NpdGlvbnMgaXMgbm90IG9uIGVkZ2UsXG4gICAgLy8gICAgIHRoZW4gdGhlIGRpc2FibGVQYXJlbnRTd2lwZXIgd2lsbCBiZSB0cnVlLlxuICAgIC8vICAgICBpZiB0aGUgc2Nyb2xsIG9uIGVkZ2UgcG9zaXRpb25zLFxuICAgIC8vICAgICB0aGVuIHRoZSBkaXNhYmxlUGFyZW50U3dpcGVyIHdpbGwgYmUgZmFsc2UuXG4gICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IHN3aXBlci5wYXJhbXMubG9vcCA/IHRydWUgOiAhKHBvc2l0aW9ucyA9PT0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIHx8IHBvc2l0aW9ucyA9PT0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKTtcbiAgICBpZiAoZGlzYWJsZVBhcmVudFN3aXBlciAmJiBzd2lwZXIucGFyYW1zLm5lc3RlZCkgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuZnJlZU1vZGUgfHwgIXN3aXBlci5wYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCkge1xuICAgICAgLy8gUmVnaXN0ZXIgdGhlIG5ldyBldmVudCBpbiBhIHZhcmlhYmxlIHdoaWNoIHN0b3JlcyB0aGUgcmVsZXZhbnQgZGF0YVxuICAgICAgY29uc3QgbmV3RXZlbnQgPSB7XG4gICAgICAgIHRpbWU6IG5vdygpLFxuICAgICAgICBkZWx0YTogTWF0aC5hYnMoZGVsdGEpLFxuICAgICAgICBkaXJlY3Rpb246IE1hdGguc2lnbihkZWx0YSksXG4gICAgICAgIHJhdzogZXZlbnRcbiAgICAgIH07XG5cbiAgICAgIC8vIEtlZXAgdGhlIG1vc3QgcmVjZW50IGV2ZW50c1xuICAgICAgaWYgKHJlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnNoaWZ0KCk7IC8vIG9ubHkgc3RvcmUgdGhlIGxhc3QgTiBldmVudHNcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJldkV2ZW50ID0gcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID8gcmVjZW50V2hlZWxFdmVudHNbcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgICByZWNlbnRXaGVlbEV2ZW50cy5wdXNoKG5ld0V2ZW50KTtcblxuICAgICAgLy8gSWYgdGhlcmUgaXMgYXQgbGVhc3Qgb25lIHByZXZpb3VzIHJlY29yZGVkIGV2ZW50OlxuICAgICAgLy8gICBJZiBkaXJlY3Rpb24gaGFzIGNoYW5nZWQgb3JcbiAgICAgIC8vICAgaWYgdGhlIHNjcm9sbCBpcyBxdWlja2VyIHRoYW4gdGhlIHByZXZpb3VzIG9uZTpcbiAgICAgIC8vICAgICBBbmltYXRlIHRoZSBzbGlkZXIuXG4gICAgICAvLyBFbHNlICh0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIHRoZSB3aGVlbCBpcyBtb3ZlZCk6XG4gICAgICAvLyAgICAgQW5pbWF0ZSB0aGUgc2xpZGVyLlxuICAgICAgaWYgKHByZXZFdmVudCkge1xuICAgICAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uICE9PSBwcmV2RXZlbnQuZGlyZWN0aW9uIHx8IG5ld0V2ZW50LmRlbHRhID4gcHJldkV2ZW50LmRlbHRhIHx8IG5ld0V2ZW50LnRpbWUgPiBwcmV2RXZlbnQudGltZSArIDE1MCkge1xuICAgICAgICAgIGFuaW1hdGVTbGlkZXIobmV3RXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbmltYXRlU2xpZGVyKG5ld0V2ZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgaXQncyB0aW1lIHRvIHJlbGVhc2UgdGhlIHNjcm9sbDpcbiAgICAgIC8vICAgUmV0dXJuIG5vdyBzbyB5b3UgZG9uJ3QgaGl0IHRoZSBwcmV2ZW50RGVmYXVsdC5cbiAgICAgIGlmIChyZWxlYXNlU2Nyb2xsKG5ld0V2ZW50KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRnJlZW1vZGUgb3Igc2Nyb2xsQ29udGFpbmVyOlxuXG4gICAgICAvLyBJZiB3ZSByZWNlbnRseSBzbmFwcGVkIGFmdGVyIGEgbW9tZW50dW0gc2Nyb2xsLCB0aGVuIGlnbm9yZSB3aGVlbCBldmVudHNcbiAgICAgIC8vIHRvIGdpdmUgdGltZSBmb3IgdGhlIGRlY2VsZXJhdGlvbiB0byBmaW5pc2guIFN0b3AgaWdub3JpbmcgYWZ0ZXIgNTAwIG1zZWNzXG4gICAgICAvLyBvciBpZiBpdCdzIGEgbmV3IHNjcm9sbCAobGFyZ2VyIGRlbHRhIG9yIGludmVyc2Ugc2lnbiBhcyBsYXN0IGV2ZW50IGJlZm9yZVxuICAgICAgLy8gYW4gZW5kLW9mLW1vbWVudHVtIHNuYXApLlxuICAgICAgY29uc3QgbmV3RXZlbnQgPSB7XG4gICAgICAgIHRpbWU6IG5vdygpLFxuICAgICAgICBkZWx0YTogTWF0aC5hYnMoZGVsdGEpLFxuICAgICAgICBkaXJlY3Rpb246IE1hdGguc2lnbihkZWx0YSlcbiAgICAgIH07XG4gICAgICBjb25zdCBpZ25vcmVXaGVlbEV2ZW50cyA9IGxhc3RFdmVudEJlZm9yZVNuYXAgJiYgbmV3RXZlbnQudGltZSA8IGxhc3RFdmVudEJlZm9yZVNuYXAudGltZSArIDUwMCAmJiBuZXdFdmVudC5kZWx0YSA8PSBsYXN0RXZlbnRCZWZvcmVTbmFwLmRlbHRhICYmIG5ld0V2ZW50LmRpcmVjdGlvbiA9PT0gbGFzdEV2ZW50QmVmb3JlU25hcC5kaXJlY3Rpb247XG4gICAgICBpZiAoIWlnbm9yZVdoZWVsRXZlbnRzKSB7XG4gICAgICAgIGxhc3RFdmVudEJlZm9yZVNuYXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCBwb3NpdGlvbiA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKSArIGRlbHRhICogcGFyYW1zLnNlbnNpdGl2aXR5O1xuICAgICAgICBjb25zdCB3YXNCZWdpbm5pbmcgPSBzd2lwZXIuaXNCZWdpbm5pbmc7XG4gICAgICAgIGNvbnN0IHdhc0VuZCA9IHN3aXBlci5pc0VuZDtcbiAgICAgICAgaWYgKHBvc2l0aW9uID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkgcG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgIGlmIChwb3NpdGlvbiA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHBvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShwb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgICAgaWYgKCF3YXNCZWdpbm5pbmcgJiYgc3dpcGVyLmlzQmVnaW5uaW5nIHx8ICF3YXNFbmQgJiYgc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICAgICAgZGlyZWN0aW9uOiBuZXdFdmVudC5kaXJlY3Rpb24gPCAwID8gJ25leHQnIDogJ3ByZXYnLFxuICAgICAgICAgICAgYnlNb3VzZXdoZWVsOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUuc3RpY2t5KSB7XG4gICAgICAgICAgLy8gV2hlbiB3aGVlbCBzY3JvbGxpbmcgc3RhcnRzIHdpdGggc3RpY2t5IChha2Egc25hcCkgZW5hYmxlZCwgdGhlbiBkZXRlY3RcbiAgICAgICAgICAvLyB0aGUgZW5kIG9mIGEgbW9tZW50dW0gc2Nyb2xsIGJ5IHN0b3JpbmcgcmVjZW50IChOPTE1Pykgd2hlZWwgZXZlbnRzLlxuICAgICAgICAgIC8vIDEuIGRvIGFsbCBOIGV2ZW50cyBoYXZlIGRlY3JlYXNpbmcgb3Igc2FtZSAoYWJzb2x1dGUgdmFsdWUpIGRlbHRhP1xuICAgICAgICAgIC8vIDIuIGRpZCBhbGwgTiBldmVudHMgYXJyaXZlIGluIHRoZSBsYXN0IE0gKE09NTAwPykgbXNlY3M/XG4gICAgICAgICAgLy8gMy4gZG9lcyB0aGUgZWFybGllc3QgZXZlbnQgaGF2ZSBhbiAoYWJzb2x1dGUgdmFsdWUpIGRlbHRhIHRoYXQnc1xuICAgICAgICAgIC8vICAgIGF0IGxlYXN0IFAgKFA9MT8pIGxhcmdlciB0aGFuIHRoZSBtb3N0IHJlY2VudCBldmVudCdzIGRlbHRhP1xuICAgICAgICAgIC8vIDQuIGRvZXMgdGhlIGxhdGVzdCBldmVudCBoYXZlIGEgZGVsdGEgdGhhdCdzIHNtYWxsZXIgdGhhbiBRIChRPTY/KSBwaXhlbHM/XG4gICAgICAgICAgLy8gSWYgMS00IGFyZSBcInllc1wiIHRoZW4gd2UncmUgbmVhciB0aGUgZW5kIG9mIGEgbW9tZW50dW0gc2Nyb2xsIGRlY2VsZXJhdGlvbi5cbiAgICAgICAgICAvLyBTbmFwIGltbWVkaWF0ZWx5IGFuZCBpZ25vcmUgcmVtYWluaW5nIHdoZWVsIGV2ZW50cyBpbiB0aGlzIHNjcm9sbC5cbiAgICAgICAgICAvLyBTZWUgY29tbWVudCBhYm92ZSBmb3IgXCJyZW1haW5pbmcgd2hlZWwgZXZlbnRzIGluIHRoaXMgc2Nyb2xsXCIgZGV0ZXJtaW5hdGlvbi5cbiAgICAgICAgICAvLyBJZiAxLTQgYXJlbid0IHNhdGlzZmllZCwgdGhlbiB3YWl0IHRvIHNuYXAgdW50aWwgNTAwbXMgYWZ0ZXIgdGhlIGxhc3QgZXZlbnQuXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKHJlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCA+PSAxNSkge1xuICAgICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMuc2hpZnQoKTsgLy8gb25seSBzdG9yZSB0aGUgbGFzdCBOIGV2ZW50c1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHByZXZFdmVudCA9IHJlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCA/IHJlY2VudFdoZWVsRXZlbnRzW3JlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGNvbnN0IGZpcnN0RXZlbnQgPSByZWNlbnRXaGVlbEV2ZW50c1swXTtcbiAgICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5wdXNoKG5ld0V2ZW50KTtcbiAgICAgICAgICBpZiAocHJldkV2ZW50ICYmIChuZXdFdmVudC5kZWx0YSA+IHByZXZFdmVudC5kZWx0YSB8fCBuZXdFdmVudC5kaXJlY3Rpb24gIT09IHByZXZFdmVudC5kaXJlY3Rpb24pKSB7XG4gICAgICAgICAgICAvLyBJbmNyZWFzaW5nIG9yIHJldmVyc2Utc2lnbiBkZWx0YSBtZWFucyB0aGUgdXNlciBzdGFydGVkIHNjcm9sbGluZyBhZ2Fpbi4gQ2xlYXIgdGhlIHdoZWVsIGV2ZW50IGxvZy5cbiAgICAgICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnNwbGljZSgwKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCA+PSAxNSAmJiBuZXdFdmVudC50aW1lIC0gZmlyc3RFdmVudC50aW1lIDwgNTAwICYmIGZpcnN0RXZlbnQuZGVsdGEgLSBuZXdFdmVudC5kZWx0YSA+PSAxICYmIG5ld0V2ZW50LmRlbHRhIDw9IDYpIHtcbiAgICAgICAgICAgIC8vIFdlJ3JlIGF0IHRoZSBlbmQgb2YgdGhlIGRlY2VsZXJhdGlvbiBvZiBhIG1vbWVudHVtIHNjcm9sbCwgc28gdGhlcmUncyBubyBuZWVkXG4gICAgICAgICAgICAvLyB0byB3YWl0IGZvciBtb3JlIGV2ZW50cy4gU25hcCBBU0FQIG9uIHRoZSBuZXh0IHRpY2suXG4gICAgICAgICAgICAvLyBBbHNvLCBiZWNhdXNlIHRoZXJlJ3Mgc29tZSByZW1haW5pbmcgbW9tZW50dW0gd2UnbGwgYmlhcyB0aGUgc25hcCBpbiB0aGVcbiAgICAgICAgICAgIC8vIGRpcmVjdGlvbiBvZiB0aGUgb25nb2luZyBzY3JvbGwgYmVjYXVzZSBpdCdzIGJldHRlciBVWCBmb3IgdGhlIHNjcm9sbCB0byBzbmFwXG4gICAgICAgICAgICAvLyBpbiB0aGUgc2FtZSBkaXJlY3Rpb24gYXMgdGhlIHNjcm9sbCBpbnN0ZWFkIG9mIHJldmVyc2luZyB0byBzbmFwLiAgVGhlcmVmb3JlLFxuICAgICAgICAgICAgLy8gaWYgaXQncyBhbHJlYWR5IHNjcm9sbGVkIG1vcmUgdGhhbiAyMCUgaW4gdGhlIGN1cnJlbnQgZGlyZWN0aW9uLCBrZWVwIGdvaW5nLlxuICAgICAgICAgICAgY29uc3Qgc25hcFRvVGhyZXNob2xkID0gZGVsdGEgPiAwID8gMC44IDogMC4yO1xuICAgICAgICAgICAgbGFzdEV2ZW50QmVmb3JlU25hcCA9IG5ld0V2ZW50O1xuICAgICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMuc3BsaWNlKDApO1xuICAgICAgICAgICAgdGltZW91dCA9IG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHVuZGVmaW5lZCwgc25hcFRvVGhyZXNob2xkKTtcbiAgICAgICAgICAgIH0sIDApOyAvLyBubyBkZWxheTsgbW92ZSBvbiBuZXh0IHRpY2tcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgICAgICAgIC8vIGlmIHdlIGdldCBoZXJlLCB0aGVuIHdlIGhhdmVuJ3QgZGV0ZWN0ZWQgdGhlIGVuZCBvZiBhIG1vbWVudHVtIHNjcm9sbCwgc29cbiAgICAgICAgICAgIC8vIHdlJ2xsIGNvbnNpZGVyIGEgc2Nyb2xsIFwiY29tcGxldGVcIiB3aGVuIHRoZXJlIGhhdmVuJ3QgYmVlbiBhbnkgd2hlZWwgZXZlbnRzXG4gICAgICAgICAgICAvLyBmb3IgNTAwbXMuXG4gICAgICAgICAgICB0aW1lb3V0ID0gbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBzbmFwVG9UaHJlc2hvbGQgPSAwLjU7XG4gICAgICAgICAgICAgIGxhc3RFdmVudEJlZm9yZVNuYXAgPSBuZXdFdmVudDtcbiAgICAgICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMuc3BsaWNlKDApO1xuICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3Qoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdW5kZWZpbmVkLCBzbmFwVG9UaHJlc2hvbGQpO1xuICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFbWl0IGV2ZW50XG4gICAgICAgIGlmICghaWdub3JlV2hlZWxFdmVudHMpIGVtaXQoJ3Njcm9sbCcsIGUpO1xuXG4gICAgICAgIC8vIFN0b3AgYXV0b3BsYXlcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkgJiYgc3dpcGVyLnBhcmFtcy5hdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uKSBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICAvLyBSZXR1cm4gcGFnZSBzY3JvbGwgb24gZWRnZSBwb3NpdGlvbnNcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSBzd2lwZXIubWluVHJhbnNsYXRlKCkgfHwgcG9zaXRpb24gPT09IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZ1bmN0aW9uIGV2ZW50cyhtZXRob2QpIHtcbiAgICBsZXQgdGFyZ2V0RWwgPSBzd2lwZXIuZWw7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQgIT09ICdjb250YWluZXInKSB7XG4gICAgICB0YXJnZXRFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCk7XG4gICAgfVxuICAgIHRhcmdldEVsW21ldGhvZF0oJ21vdXNlZW50ZXInLCBoYW5kbGVNb3VzZUVudGVyKTtcbiAgICB0YXJnZXRFbFttZXRob2RdKCdtb3VzZWxlYXZlJywgaGFuZGxlTW91c2VMZWF2ZSk7XG4gICAgdGFyZ2V0RWxbbWV0aG9kXSgnd2hlZWwnLCBoYW5kbGUpO1xuICB9XG4gIGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3doZWVsJywgaGFuZGxlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCkgcmV0dXJuIGZhbHNlO1xuICAgIGV2ZW50cygnYWRkRXZlbnRMaXN0ZW5lcicpO1xuICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSB0cnVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCkgcmV0dXJuIGZhbHNlO1xuICAgIGV2ZW50cygncmVtb3ZlRXZlbnRMaXN0ZW5lcicpO1xuICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgZGlzYWJsZSgpO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmVuYWJsZWQpIGVuYWJsZSgpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgZW5hYmxlKCk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSBkaXNhYmxlKCk7XG4gIH0pO1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5tb3VzZXdoZWVsLCB7XG4gICAgZW5hYmxlLFxuICAgIGRpc2FibGVcbiAgfSk7XG59IiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgZWxlbWVudENoaWxkcmVuIH0gZnJvbSAnLi91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgb3JpZ2luYWxQYXJhbXMsIHBhcmFtcywgY2hlY2tQcm9wcykge1xuICBpZiAoc3dpcGVyLnBhcmFtcy5jcmVhdGVFbGVtZW50cykge1xuICAgIE9iamVjdC5rZXlzKGNoZWNrUHJvcHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmICghcGFyYW1zW2tleV0gJiYgcGFyYW1zLmF1dG8gPT09IHRydWUpIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBlbGVtZW50Q2hpbGRyZW4oc3dpcGVyLmVsLCBgLiR7Y2hlY2tQcm9wc1trZXldfWApWzBdO1xuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnZGl2JywgY2hlY2tQcm9wc1trZXldKTtcbiAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGNoZWNrUHJvcHNba2V5XTtcbiAgICAgICAgICBzd2lwZXIuZWwuYXBwZW5kKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtc1trZXldID0gZWxlbWVudDtcbiAgICAgICAgb3JpZ2luYWxQYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhcmFtcztcbn0iLCJpbXBvcnQgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCBmcm9tICcuLi8uLi9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTmF2aWdhdGlvbih7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIG5hdmlnYXRpb246IHtcbiAgICAgIG5leHRFbDogbnVsbCxcbiAgICAgIHByZXZFbDogbnVsbCxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWRpc2FibGVkJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLWJ1dHRvbi1oaWRkZW4nLFxuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLWJ1dHRvbi1sb2NrJyxcbiAgICAgIG5hdmlnYXRpb25EaXNhYmxlZENsYXNzOiAnc3dpcGVyLW5hdmlnYXRpb24tZGlzYWJsZWQnXG4gICAgfVxuICB9KTtcbiAgc3dpcGVyLm5hdmlnYXRpb24gPSB7XG4gICAgbmV4dEVsOiBudWxsLFxuICAgIHByZXZFbDogbnVsbFxuICB9O1xuICBjb25zdCBtYWtlRWxlbWVudHNBcnJheSA9IGVsID0+IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZWwpKSBlbCA9IFtlbF0uZmlsdGVyKGUgPT4gISFlKTtcbiAgICByZXR1cm4gZWw7XG4gIH07XG4gIGZ1bmN0aW9uIGdldEVsKGVsKSB7XG4gICAgbGV0IHJlcztcbiAgICBpZiAoZWwgJiYgdHlwZW9mIGVsID09PSAnc3RyaW5nJyAmJiBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICByZXMgPSBzd2lwZXIuZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICAgIGlmIChyZXMpIHJldHVybiByZXM7XG4gICAgfVxuICAgIGlmIChlbCkge1xuICAgICAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHJlcyA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsKV07XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgZWwgPT09ICdzdHJpbmcnICYmIHJlcy5sZW5ndGggPiAxICYmIHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKGVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmVzID0gc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZWwgJiYgIXJlcykgcmV0dXJuIGVsO1xuICAgIC8vIGlmIChBcnJheS5pc0FycmF5KHJlcykgJiYgcmVzLmxlbmd0aCA9PT0gMSkgcmVzID0gcmVzWzBdO1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgZnVuY3Rpb24gdG9nZ2xlRWwoZWwsIGRpc2FibGVkKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgaWYgKHN1YkVsKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdFtkaXNhYmxlZCA/ICdhZGQnIDogJ3JlbW92ZSddKC4uLnBhcmFtcy5kaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgICBpZiAoc3ViRWwudGFnTmFtZSA9PT0gJ0JVVFRPTicpIHN1YkVsLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICAgICBzdWJFbC5jbGFzc0xpc3Rbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZCcgOiAncmVtb3ZlJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgLy8gVXBkYXRlIE5hdmlnYXRpb24gQnV0dG9uc1xuICAgIGNvbnN0IHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICB0b2dnbGVFbChwcmV2RWwsIGZhbHNlKTtcbiAgICAgIHRvZ2dsZUVsKG5leHRFbCwgZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0b2dnbGVFbChwcmV2RWwsIHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpO1xuICAgIHRvZ2dsZUVsKG5leHRFbCwgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLnJld2luZCk7XG4gIH1cbiAgZnVuY3Rpb24gb25QcmV2Q2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgIGVtaXQoJ25hdmlnYXRpb25QcmV2Jyk7XG4gIH1cbiAgZnVuY3Rpb24gb25OZXh0Q2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgIGVtaXQoJ25hdmlnYXRpb25OZXh0Jyk7XG4gIH1cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb247XG4gICAgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5uYXZpZ2F0aW9uLCBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24sIHtcbiAgICAgIG5leHRFbDogJ3N3aXBlci1idXR0b24tbmV4dCcsXG4gICAgICBwcmV2RWw6ICdzd2lwZXItYnV0dG9uLXByZXYnXG4gICAgfSk7XG4gICAgaWYgKCEocGFyYW1zLm5leHRFbCB8fCBwYXJhbXMucHJldkVsKSkgcmV0dXJuO1xuICAgIGxldCBuZXh0RWwgPSBnZXRFbChwYXJhbXMubmV4dEVsKTtcbiAgICBsZXQgcHJldkVsID0gZ2V0RWwocGFyYW1zLnByZXZFbCk7XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIubmF2aWdhdGlvbiwge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSk7XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGNvbnN0IGluaXRCdXR0b24gPSAoZWwsIGRpcikgPT4ge1xuICAgICAgaWYgKGVsKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGlyID09PSAnbmV4dCcgPyBvbk5leHRDbGljayA6IG9uUHJldkNsaWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQgJiYgZWwpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCguLi5wYXJhbXMubG9ja0NsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgfVxuICAgIH07XG4gICAgbmV4dEVsLmZvckVhY2goZWwgPT4gaW5pdEJ1dHRvbihlbCwgJ25leHQnKSk7XG4gICAgcHJldkVsLmZvckVhY2goZWwgPT4gaW5pdEJ1dHRvbihlbCwgJ3ByZXYnKSk7XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBjb25zdCBkZXN0cm95QnV0dG9uID0gKGVsLCBkaXIpID0+IHtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGlyID09PSAnbmV4dCcgPyBvbk5leHRDbGljayA6IG9uUHJldkNsaWNrKTtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmRpc2FibGVkQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgfTtcbiAgICBuZXh0RWwuZm9yRWFjaChlbCA9PiBkZXN0cm95QnV0dG9uKGVsLCAnbmV4dCcpKTtcbiAgICBwcmV2RWwuZm9yRWFjaChlbCA9PiBkZXN0cm95QnV0dG9uKGVsLCAncHJldicpKTtcbiAgfVxuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGRpc2FibGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdCgpO1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3RvRWRnZSBmcm9tRWRnZSBsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRlc3Ryb3koKTtcbiAgfSk7XG4gIG9uKCdlbmFibGUgZGlzYWJsZScsICgpID0+IHtcbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBbLi4ubmV4dEVsLCAuLi5wcmV2RWxdLmZpbHRlcihlbCA9PiAhIWVsKS5mb3JFYWNoKGVsID0+IGVsLmNsYXNzTGlzdFtzd2lwZXIuZW5hYmxlZCA/ICdyZW1vdmUnIDogJ2FkZCddKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5sb2NrQ2xhc3MpKTtcbiAgfSk7XG4gIG9uKCdjbGljaycsIChfcywgZSkgPT4ge1xuICAgIGxldCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGNvbnN0IHRhcmdldEVsID0gZS50YXJnZXQ7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRlT25DbGljayAmJiAhcHJldkVsLmluY2x1ZGVzKHRhcmdldEVsKSAmJiAhbmV4dEVsLmluY2x1ZGVzKHRhcmdldEVsKSkge1xuICAgICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlICYmIChzd2lwZXIucGFnaW5hdGlvbi5lbCA9PT0gdGFyZ2V0RWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uZWwuY29udGFpbnModGFyZ2V0RWwpKSkgcmV0dXJuO1xuICAgICAgbGV0IGlzSGlkZGVuO1xuICAgICAgaWYgKG5leHRFbC5sZW5ndGgpIHtcbiAgICAgICAgaXNIaWRkZW4gPSBuZXh0RWxbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICB9IGVsc2UgaWYgKHByZXZFbC5sZW5ndGgpIHtcbiAgICAgICAgaXNIaWRkZW4gPSBwcmV2RWxbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICB9XG4gICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgZW1pdCgnbmF2aWdhdGlvblNob3cnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVtaXQoJ25hdmlnYXRpb25IaWRlJyk7XG4gICAgICB9XG4gICAgICBbLi4ubmV4dEVsLCAuLi5wcmV2RWxdLmZpbHRlcihlbCA9PiAhIWVsKS5mb3JFYWNoKGVsID0+IGVsLmNsYXNzTGlzdC50b2dnbGUoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZW5hYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKC4uLnN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5uYXZpZ2F0aW9uRGlzYWJsZWRDbGFzcy5zcGxpdCgnICcpKTtcbiAgICBpbml0KCk7XG4gICAgdXBkYXRlKCk7XG4gIH07XG4gIGNvbnN0IGRpc2FibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoLi4uc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLm5hdmlnYXRpb25EaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgIGRlc3Ryb3koKTtcbiAgfTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIubmF2aWdhdGlvbiwge1xuICAgIGVuYWJsZSxcbiAgICBkaXNhYmxlLFxuICAgIHVwZGF0ZSxcbiAgICBpbml0LFxuICAgIGRlc3Ryb3lcbiAgfSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xhc3Nlc1RvU2VsZWN0b3IoY2xhc3NlcyA9ICcnKSB7XG4gIHJldHVybiBgLiR7Y2xhc3Nlcy50cmltKCkucmVwbGFjZSgvKFtcXC46IVxcL10pL2csICdcXFxcJDEnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIC5yZXBsYWNlKC8gL2csICcuJyl9YDtcbn0iLCJpbXBvcnQgY2xhc3Nlc1RvU2VsZWN0b3IgZnJvbSAnLi4vLi4vc2hhcmVkL2NsYXNzZXMtdG8tc2VsZWN0b3IuanMnO1xuaW1wb3J0IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgZnJvbSAnLi4vLi4vc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLmpzJztcbmltcG9ydCB7IGVsZW1lbnRJbmRleCwgZWxlbWVudE91dGVyU2l6ZSwgZWxlbWVudFBhcmVudHMgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGFnaW5hdGlvbih7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBjb25zdCBwZnggPSAnc3dpcGVyLXBhZ2luYXRpb24nO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIGVsOiBudWxsLFxuICAgICAgYnVsbGV0RWxlbWVudDogJ3NwYW4nLFxuICAgICAgY2xpY2thYmxlOiBmYWxzZSxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIHJlbmRlckJ1bGxldDogbnVsbCxcbiAgICAgIHJlbmRlclByb2dyZXNzYmFyOiBudWxsLFxuICAgICAgcmVuZGVyRnJhY3Rpb246IG51bGwsXG4gICAgICByZW5kZXJDdXN0b206IG51bGwsXG4gICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlOiBmYWxzZSxcbiAgICAgIHR5cGU6ICdidWxsZXRzJyxcbiAgICAgIC8vICdidWxsZXRzJyBvciAncHJvZ3Jlc3NiYXInIG9yICdmcmFjdGlvbicgb3IgJ2N1c3RvbSdcbiAgICAgIGR5bmFtaWNCdWxsZXRzOiBmYWxzZSxcbiAgICAgIGR5bmFtaWNNYWluQnVsbGV0czogMSxcbiAgICAgIGZvcm1hdEZyYWN0aW9uQ3VycmVudDogbnVtYmVyID0+IG51bWJlcixcbiAgICAgIGZvcm1hdEZyYWN0aW9uVG90YWw6IG51bWJlciA9PiBudW1iZXIsXG4gICAgICBidWxsZXRDbGFzczogYCR7cGZ4fS1idWxsZXRgLFxuICAgICAgYnVsbGV0QWN0aXZlQ2xhc3M6IGAke3BmeH0tYnVsbGV0LWFjdGl2ZWAsXG4gICAgICBtb2RpZmllckNsYXNzOiBgJHtwZnh9LWAsXG4gICAgICBjdXJyZW50Q2xhc3M6IGAke3BmeH0tY3VycmVudGAsXG4gICAgICB0b3RhbENsYXNzOiBgJHtwZnh9LXRvdGFsYCxcbiAgICAgIGhpZGRlbkNsYXNzOiBgJHtwZnh9LWhpZGRlbmAsXG4gICAgICBwcm9ncmVzc2JhckZpbGxDbGFzczogYCR7cGZ4fS1wcm9ncmVzc2Jhci1maWxsYCxcbiAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzczogYCR7cGZ4fS1wcm9ncmVzc2Jhci1vcHBvc2l0ZWAsXG4gICAgICBjbGlja2FibGVDbGFzczogYCR7cGZ4fS1jbGlja2FibGVgLFxuICAgICAgbG9ja0NsYXNzOiBgJHtwZnh9LWxvY2tgLFxuICAgICAgaG9yaXpvbnRhbENsYXNzOiBgJHtwZnh9LWhvcml6b250YWxgLFxuICAgICAgdmVydGljYWxDbGFzczogYCR7cGZ4fS12ZXJ0aWNhbGAsXG4gICAgICBwYWdpbmF0aW9uRGlzYWJsZWRDbGFzczogYCR7cGZ4fS1kaXNhYmxlZGBcbiAgICB9XG4gIH0pO1xuICBzd2lwZXIucGFnaW5hdGlvbiA9IHtcbiAgICBlbDogbnVsbCxcbiAgICBidWxsZXRzOiBbXVxuICB9O1xuICBsZXQgYnVsbGV0U2l6ZTtcbiAgbGV0IGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gIGNvbnN0IG1ha2VFbGVtZW50c0FycmF5ID0gZWwgPT4ge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShlbCkpIGVsID0gW2VsXS5maWx0ZXIoZSA9PiAhIWUpO1xuICAgIHJldHVybiBlbDtcbiAgfTtcbiAgZnVuY3Rpb24gaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSB7XG4gICAgcmV0dXJuICFzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLmVsIHx8IEFycmF5LmlzQXJyYXkoc3dpcGVyLnBhZ2luYXRpb24uZWwpICYmIHN3aXBlci5wYWdpbmF0aW9uLmVsLmxlbmd0aCA9PT0gMDtcbiAgfVxuICBmdW5jdGlvbiBzZXRTaWRlQnVsbGV0cyhidWxsZXRFbCwgcG9zaXRpb24pIHtcbiAgICBjb25zdCB7XG4gICAgICBidWxsZXRBY3RpdmVDbGFzc1xuICAgIH0gPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKCFidWxsZXRFbCkgcmV0dXJuO1xuICAgIGJ1bGxldEVsID0gYnVsbGV0RWxbYCR7cG9zaXRpb24gPT09ICdwcmV2JyA/ICdwcmV2aW91cycgOiAnbmV4dCd9RWxlbWVudFNpYmxpbmdgXTtcbiAgICBpZiAoYnVsbGV0RWwpIHtcbiAgICAgIGJ1bGxldEVsLmNsYXNzTGlzdC5hZGQoYCR7YnVsbGV0QWN0aXZlQ2xhc3N9LSR7cG9zaXRpb259YCk7XG4gICAgICBidWxsZXRFbCA9IGJ1bGxldEVsW2Ake3Bvc2l0aW9uID09PSAncHJldicgPyAncHJldmlvdXMnIDogJ25leHQnfUVsZW1lbnRTaWJsaW5nYF07XG4gICAgICBpZiAoYnVsbGV0RWwpIHtcbiAgICAgICAgYnVsbGV0RWwuY2xhc3NMaXN0LmFkZChgJHtidWxsZXRBY3RpdmVDbGFzc30tJHtwb3NpdGlvbn0tJHtwb3NpdGlvbn1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gb25CdWxsZXRDbGljayhlKSB7XG4gICAgY29uc3QgYnVsbGV0RWwgPSBlLnRhcmdldC5jbG9zZXN0KGNsYXNzZXNUb1NlbGVjdG9yKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpO1xuICAgIGlmICghYnVsbGV0RWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGluZGV4ID0gZWxlbWVudEluZGV4KGJ1bGxldEVsKSAqIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgaWYgKHN3aXBlci5yZWFsSW5kZXggPT09IGluZGV4KSByZXR1cm47XG4gICAgICBpZiAoaW5kZXggPCBzd2lwZXIubG9vcGVkU2xpZGVzIHx8IGluZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgICBkaXJlY3Rpb246IGluZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcyA/ICdwcmV2JyA6ICduZXh0JyxcbiAgICAgICAgICBhY3RpdmVTbGlkZUluZGV4OiBpbmRleCxcbiAgICAgICAgICBzbGlkZVRvOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci5zbGlkZVRvTG9vcChpbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIC8vIFJlbmRlciB8fCBVcGRhdGUgUGFnaW5hdGlvbiBidWxsZXRzL2l0ZW1zXG4gICAgY29uc3QgcnRsID0gc3dpcGVyLnJ0bDtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKGlzUGFnaW5hdGlvbkRpc2FibGVkKCkpIHJldHVybjtcbiAgICBsZXQgZWwgPSBzd2lwZXIucGFnaW5hdGlvbi5lbDtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAvLyBDdXJyZW50L1RvdGFsXG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgY29uc3QgdG90YWwgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBNYXRoLmNlaWwoc2xpZGVzTGVuZ3RoIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIGN1cnJlbnQgPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSA/IE1hdGguZmxvb3Ioc3dpcGVyLnJlYWxJbmRleCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnJlYWxJbmRleDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY3VycmVudCA9IHN3aXBlci5zbmFwSW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDtcbiAgICB9XG4gICAgLy8gVHlwZXNcbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgYnVsbGV0cyA9IHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHM7XG4gICAgICBsZXQgZmlyc3RJbmRleDtcbiAgICAgIGxldCBsYXN0SW5kZXg7XG4gICAgICBsZXQgbWlkSW5kZXg7XG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgIGJ1bGxldFNpemUgPSBlbGVtZW50T3V0ZXJTaXplKGJ1bGxldHNbMF0sIHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd3aWR0aCcgOiAnaGVpZ2h0JywgdHJ1ZSk7XG4gICAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgICAgIHN1YkVsLnN0eWxlW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gPSBgJHtidWxsZXRTaXplICogKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgKyA0KX1weGA7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA+IDEgJiYgc3dpcGVyLnByZXZpb3VzSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCArPSBjdXJyZW50IC0gKHN3aXBlci5wcmV2aW91c0luZGV4IHx8IDApO1xuICAgICAgICAgIGlmIChkeW5hbWljQnVsbGV0SW5kZXggPiBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkge1xuICAgICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDE7XG4gICAgICAgICAgfSBlbHNlIGlmIChkeW5hbWljQnVsbGV0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmaXJzdEluZGV4ID0gTWF0aC5tYXgoY3VycmVudCAtIGR5bmFtaWNCdWxsZXRJbmRleCwgMCk7XG4gICAgICAgIGxhc3RJbmRleCA9IGZpcnN0SW5kZXggKyAoTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMpIC0gMSk7XG4gICAgICAgIG1pZEluZGV4ID0gKGxhc3RJbmRleCArIGZpcnN0SW5kZXgpIC8gMjtcbiAgICAgIH1cbiAgICAgIGJ1bGxldHMuZm9yRWFjaChidWxsZXRFbCA9PiB7XG4gICAgICAgIGJ1bGxldEVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uWycnLCAnLW5leHQnLCAnLW5leHQtbmV4dCcsICctcHJldicsICctcHJldi1wcmV2JywgJy1tYWluJ10ubWFwKHN1ZmZpeCA9PiBgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9JHtzdWZmaXh9YCkpO1xuICAgICAgfSk7XG4gICAgICBpZiAoZWwubGVuZ3RoID4gMSkge1xuICAgICAgICBidWxsZXRzLmZvckVhY2goYnVsbGV0ID0+IHtcbiAgICAgICAgICBjb25zdCBidWxsZXRJbmRleCA9IGVsZW1lbnRJbmRleChidWxsZXQpO1xuICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID49IGZpcnN0SW5kZXggJiYgYnVsbGV0SW5kZXggPD0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgIGJ1bGxldC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBmaXJzdEluZGV4KSB7XG4gICAgICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGJ1bGxldCwgJ3ByZXYnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGJ1bGxldCwgJ25leHQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgYnVsbGV0ID0gYnVsbGV0c1tjdXJyZW50XTtcbiAgICAgICAgaWYgKGJ1bGxldCkge1xuICAgICAgICAgIGJ1bGxldC5jbGFzc0xpc3QuYWRkKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgIGNvbnN0IGZpcnN0RGlzcGxheWVkQnVsbGV0ID0gYnVsbGV0c1tmaXJzdEluZGV4XTtcbiAgICAgICAgICBjb25zdCBsYXN0RGlzcGxheWVkQnVsbGV0ID0gYnVsbGV0c1tsYXN0SW5kZXhdO1xuICAgICAgICAgIGZvciAobGV0IGkgPSBmaXJzdEluZGV4OyBpIDw9IGxhc3RJbmRleDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoYnVsbGV0c1tpXSkge1xuICAgICAgICAgICAgICBidWxsZXRzW2ldLmNsYXNzTGlzdC5hZGQoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1tYWluYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGZpcnN0RGlzcGxheWVkQnVsbGV0LCAncHJldicpO1xuICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGxhc3REaXNwbGF5ZWRCdWxsZXQsICduZXh0Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgY29uc3QgZHluYW1pY0J1bGxldHNMZW5ndGggPSBNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpO1xuICAgICAgICBjb25zdCBidWxsZXRzT2Zmc2V0ID0gKGJ1bGxldFNpemUgKiBkeW5hbWljQnVsbGV0c0xlbmd0aCAtIGJ1bGxldFNpemUpIC8gMiAtIG1pZEluZGV4ICogYnVsbGV0U2l6ZTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0UHJvcCA9IHJ0bCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgIGJ1bGxldHMuZm9yRWFjaChidWxsZXQgPT4ge1xuICAgICAgICAgIGJ1bGxldC5zdHlsZVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBvZmZzZXRQcm9wIDogJ3RvcCddID0gYCR7YnVsbGV0c09mZnNldH1weGA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBlbC5mb3JFYWNoKChzdWJFbCwgc3ViRWxJbmRleCkgPT4ge1xuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICAgIHN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmN1cnJlbnRDbGFzcykpLmZvckVhY2goZnJhY3Rpb25FbCA9PiB7XG4gICAgICAgICAgZnJhY3Rpb25FbC50ZXh0Q29udGVudCA9IHBhcmFtcy5mb3JtYXRGcmFjdGlvbkN1cnJlbnQoY3VycmVudCArIDEpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMudG90YWxDbGFzcykpLmZvckVhY2godG90YWxFbCA9PiB7XG4gICAgICAgICAgdG90YWxFbC50ZXh0Q29udGVudCA9IHBhcmFtcy5mb3JtYXRGcmFjdGlvblRvdGFsKHRvdGFsKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgICAgbGV0IHByb2dyZXNzYmFyRGlyZWN0aW9uO1xuICAgICAgICBpZiAocGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjYWxlID0gKGN1cnJlbnQgKyAxKSAvIHRvdGFsO1xuICAgICAgICBsZXQgc2NhbGVYID0gMTtcbiAgICAgICAgbGV0IHNjYWxlWSA9IDE7XG4gICAgICAgIGlmIChwcm9ncmVzc2JhckRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgc2NhbGVYID0gc2NhbGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2NhbGVZID0gc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpKS5mb3JFYWNoKHByb2dyZXNzRWwgPT4ge1xuICAgICAgICAgIHByb2dyZXNzRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoJHtzY2FsZVh9KSBzY2FsZVkoJHtzY2FsZVl9KWA7XG4gICAgICAgICAgcHJvZ3Jlc3NFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtzd2lwZXIucGFyYW1zLnNwZWVkfW1zYDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdjdXN0b20nICYmIHBhcmFtcy5yZW5kZXJDdXN0b20pIHtcbiAgICAgICAgc3ViRWwuaW5uZXJIVE1MID0gcGFyYW1zLnJlbmRlckN1c3RvbShzd2lwZXIsIGN1cnJlbnQgKyAxLCB0b3RhbCk7XG4gICAgICAgIGlmIChzdWJFbEluZGV4ID09PSAwKSBlbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgc3ViRWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN1YkVsSW5kZXggPT09IDApIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzdWJFbCk7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25VcGRhdGUnLCBzdWJFbCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkJyA6ICdyZW1vdmUnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgLy8gUmVuZGVyIENvbnRhaW5lclxuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGxldCBwYWdpbmF0aW9uSFRNTCA9ICcnO1xuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnKSB7XG4gICAgICBsZXQgbnVtYmVyT2ZCdWxsZXRzID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHN3aXBlci5wYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBudW1iZXJPZkJ1bGxldHMgPiBzbGlkZXNMZW5ndGgpIHtcbiAgICAgICAgbnVtYmVyT2ZCdWxsZXRzID0gc2xpZGVzTGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZkJ1bGxldHM7IGkgKz0gMSkge1xuICAgICAgICBpZiAocGFyYW1zLnJlbmRlckJ1bGxldCkge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IHBhcmFtcy5yZW5kZXJCdWxsZXQuY2FsbChzd2lwZXIsIGksIHBhcmFtcy5idWxsZXRDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gYDwke3BhcmFtcy5idWxsZXRFbGVtZW50fSBjbGFzcz1cIiR7cGFyYW1zLmJ1bGxldENsYXNzfVwiPjwvJHtwYXJhbXMuYnVsbGV0RWxlbWVudH0+YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyRnJhY3Rpb24pIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyRnJhY3Rpb24uY2FsbChzd2lwZXIsIHBhcmFtcy5jdXJyZW50Q2xhc3MsIHBhcmFtcy50b3RhbENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gYDxzcGFuIGNsYXNzPVwiJHtwYXJhbXMuY3VycmVudENsYXNzfVwiPjwvc3Bhbj5gICsgJyAvICcgKyBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy50b3RhbENsYXNzfVwiPjwvc3Bhbj5gO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIpIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIuY2FsbChzd2lwZXIsIHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzfVwiPjwvc3Bhbj5gO1xuICAgICAgfVxuICAgIH1cbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ2N1c3RvbScpIHtcbiAgICAgICAgc3ViRWwuaW5uZXJIVE1MID0gcGFnaW5hdGlvbkhUTUwgfHwgJyc7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJykge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzID0gWy4uLnN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmJ1bGxldENsYXNzKSldO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ2N1c3RvbScpIHtcbiAgICAgIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBlbFswXSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5wYWdpbmF0aW9uLCBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24sIHtcbiAgICAgIGVsOiAnc3dpcGVyLXBhZ2luYXRpb24nXG4gICAgfSk7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsKSByZXR1cm47XG4gICAgbGV0IGVsO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBlbCA9IHN3aXBlci5lbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IocGFyYW1zLmVsKTtcbiAgICB9XG4gICAgaWYgKCFlbCAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJykge1xuICAgICAgZWwgPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpXTtcbiAgICB9XG4gICAgaWYgKCFlbCkge1xuICAgICAgZWwgPSBwYXJhbXMuZWw7XG4gICAgfVxuICAgIGlmICghZWwgfHwgZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgQXJyYXkuaXNBcnJheShlbCkgJiYgZWwubGVuZ3RoID4gMSkge1xuICAgICAgZWwgPSBbLi4uc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKV07XG4gICAgICAvLyBjaGVjayBpZiBpdCBiZWxvbmdzIHRvIGFub3RoZXIgbmVzdGVkIFN3aXBlclxuICAgICAgaWYgKGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZWwgPSBlbC5maWx0ZXIoc3ViRWwgPT4ge1xuICAgICAgICAgIGlmIChlbGVtZW50UGFyZW50cyhzdWJFbCwgJy5zd2lwZXInKVswXSAhPT0gc3dpcGVyLmVsKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pWzBdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShlbCkgJiYgZWwubGVuZ3RoID09PSAxKSBlbCA9IGVsWzBdO1xuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnBhZ2luYXRpb24sIHtcbiAgICAgIGVsXG4gICAgfSk7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQocGFyYW1zLmNsaWNrYWJsZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG4gICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMubW9kaWZpZXJDbGFzc30ke3BhcmFtcy50eXBlfS1keW5hbWljYCk7XG4gICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIDwgMSkge1xuICAgICAgICAgIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicgJiYgcGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAgIHN1YkVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25CdWxsZXRDbGljayk7XG4gICAgICB9XG4gICAgICBpZiAoIXN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKGlzUGFnaW5hdGlvbkRpc2FibGVkKCkpIHJldHVybjtcbiAgICBsZXQgZWwgPSBzd2lwZXIucGFnaW5hdGlvbi5lbDtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUocGFyYW1zLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBwYXJhbXMuaG9yaXpvbnRhbENsYXNzIDogcGFyYW1zLnZlcnRpY2FsQ2xhc3MpO1xuICAgICAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgICAgIHN1YkVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25CdWxsZXRDbGljayk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cykgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5mb3JFYWNoKHN1YkVsID0+IHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKSk7XG4gIH1cbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBkaXNhYmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluaXQoKTtcbiAgICAgIHJlbmRlcigpO1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ2FjdGl2ZUluZGV4Q2hhbmdlJywgKCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLnNuYXBJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdzbmFwSW5kZXhDaGFuZ2UnLCAoKSA9PiB7XG4gICAgdXBkYXRlKCk7XG4gIH0pO1xuICBvbignc25hcEdyaWRMZW5ndGhDaGFuZ2UnLCAoKSA9PiB7XG4gICAgcmVuZGVyKCk7XG4gICAgdXBkYXRlKCk7XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBkZXN0cm95KCk7XG4gIH0pO1xuICBvbignZW5hYmxlIGRpc2FibGUnLCAoKSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlci5wYWdpbmF0aW9uO1xuICAgIGlmIChlbCkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHN1YkVsLmNsYXNzTGlzdFtzd2lwZXIuZW5hYmxlZCA/ICdyZW1vdmUnIDogJ2FkZCddKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5sb2NrQ2xhc3MpKTtcbiAgICB9XG4gIH0pO1xuICBvbignbG9jayB1bmxvY2snLCAoKSA9PiB7XG4gICAgdXBkYXRlKCk7XG4gIH0pO1xuICBvbignY2xpY2snLCAoX3MsIGUpID0+IHtcbiAgICBjb25zdCB0YXJnZXRFbCA9IGUudGFyZ2V0O1xuICAgIGxldCB7XG4gICAgICBlbFxuICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZWwpKSBlbCA9IFtlbF0uZmlsdGVyKGVsZW1lbnQgPT4gISFlbGVtZW50KTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRlT25DbGljayAmJiBlbCAmJiBlbC5sZW5ndGggPiAwICYmICF0YXJnZXRFbC5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSkge1xuICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIChzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgJiYgdGFyZ2V0RWwgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwgJiYgdGFyZ2V0RWwgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCkpIHJldHVybjtcbiAgICAgIGNvbnN0IGlzSGlkZGVuID0gZWxbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgZW1pdCgncGFnaW5hdGlvblNob3cnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25IaWRlJyk7XG4gICAgICB9XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHN1YkVsLmNsYXNzTGlzdC50b2dnbGUoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZW5hYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcyk7XG4gICAgbGV0IHtcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlci5wYWdpbmF0aW9uO1xuICAgIGlmIChlbCkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKSk7XG4gICAgfVxuICAgIGluaXQoKTtcbiAgICByZW5kZXIoKTtcbiAgICB1cGRhdGUoKTtcbiAgfTtcbiAgY29uc3QgZGlzYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpO1xuICAgIGxldCB7XG4gICAgICBlbFxuICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcykpO1xuICAgIH1cbiAgICBkZXN0cm95KCk7XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLnBhZ2luYXRpb24sIHtcbiAgICBlbmFibGUsXG4gICAgZGlzYWJsZSxcbiAgICByZW5kZXIsXG4gICAgdXBkYXRlLFxuICAgIGluaXQsXG4gICAgZGVzdHJveVxuICB9KTtcbn0iLCJpbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgZWxlbWVudE9mZnNldCwgbmV4dFRpY2sgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuaW1wb3J0IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgZnJvbSAnLi4vLi4vc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNjcm9sbGJhcih7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGxldCBpc1RvdWNoZWQgPSBmYWxzZTtcbiAgbGV0IHRpbWVvdXQgPSBudWxsO1xuICBsZXQgZHJhZ1RpbWVvdXQgPSBudWxsO1xuICBsZXQgZHJhZ1N0YXJ0UG9zO1xuICBsZXQgZHJhZ1NpemU7XG4gIGxldCB0cmFja1NpemU7XG4gIGxldCBkaXZpZGVyO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIHNjcm9sbGJhcjoge1xuICAgICAgZWw6IG51bGwsXG4gICAgICBkcmFnU2l6ZTogJ2F1dG8nLFxuICAgICAgaGlkZTogZmFsc2UsXG4gICAgICBkcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgc25hcE9uUmVsZWFzZTogdHJ1ZSxcbiAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1zY3JvbGxiYXItbG9jaycsXG4gICAgICBkcmFnQ2xhc3M6ICdzd2lwZXItc2Nyb2xsYmFyLWRyYWcnLFxuICAgICAgc2Nyb2xsYmFyRGlzYWJsZWRDbGFzczogJ3N3aXBlci1zY3JvbGxiYXItZGlzYWJsZWQnLFxuICAgICAgaG9yaXpvbnRhbENsYXNzOiBgc3dpcGVyLXNjcm9sbGJhci1ob3Jpem9udGFsYCxcbiAgICAgIHZlcnRpY2FsQ2xhc3M6IGBzd2lwZXItc2Nyb2xsYmFyLXZlcnRpY2FsYFxuICAgIH1cbiAgfSk7XG4gIHN3aXBlci5zY3JvbGxiYXIgPSB7XG4gICAgZWw6IG51bGwsXG4gICAgZHJhZ0VsOiBudWxsXG4gIH07XG4gIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyLFxuICAgICAgcnRsVHJhbnNsYXRlOiBydGxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHtcbiAgICAgIGRyYWdFbCxcbiAgICAgIGVsXG4gICAgfSA9IHNjcm9sbGJhcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICBjb25zdCBwcm9ncmVzcyA9IHN3aXBlci5wYXJhbXMubG9vcCA/IHN3aXBlci5wcm9ncmVzc0xvb3AgOiBzd2lwZXIucHJvZ3Jlc3M7XG4gICAgbGV0IG5ld1NpemUgPSBkcmFnU2l6ZTtcbiAgICBsZXQgbmV3UG9zID0gKHRyYWNrU2l6ZSAtIGRyYWdTaXplKSAqIHByb2dyZXNzO1xuICAgIGlmIChydGwpIHtcbiAgICAgIG5ld1BvcyA9IC1uZXdQb3M7XG4gICAgICBpZiAobmV3UG9zID4gMCkge1xuICAgICAgICBuZXdTaXplID0gZHJhZ1NpemUgLSBuZXdQb3M7XG4gICAgICAgIG5ld1BvcyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKC1uZXdQb3MgKyBkcmFnU2l6ZSA+IHRyYWNrU2l6ZSkge1xuICAgICAgICBuZXdTaXplID0gdHJhY2tTaXplICsgbmV3UG9zO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV3UG9zIDwgMCkge1xuICAgICAgbmV3U2l6ZSA9IGRyYWdTaXplICsgbmV3UG9zO1xuICAgICAgbmV3UG9zID0gMDtcbiAgICB9IGVsc2UgaWYgKG5ld1BvcyArIGRyYWdTaXplID4gdHJhY2tTaXplKSB7XG4gICAgICBuZXdTaXplID0gdHJhY2tTaXplIC0gbmV3UG9zO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBkcmFnRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7bmV3UG9zfXB4LCAwLCAwKWA7XG4gICAgICBkcmFnRWwuc3R5bGUud2lkdGggPSBgJHtuZXdTaXplfXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgZHJhZ0VsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwcHgsICR7bmV3UG9zfXB4LCAwKWA7XG4gICAgICBkcmFnRWwuc3R5bGUuaGVpZ2h0ID0gYCR7bmV3U2l6ZX1weGA7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICBlbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnNDAwbXMnO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgc3dpcGVyLnNjcm9sbGJhci5kcmFnRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZVNpemUoKSB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIHNjcm9sbGJhclxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3Qge1xuICAgICAgZHJhZ0VsLFxuICAgICAgZWxcbiAgICB9ID0gc2Nyb2xsYmFyO1xuICAgIGRyYWdFbC5zdHlsZS53aWR0aCA9ICcnO1xuICAgIGRyYWdFbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICB0cmFja1NpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBlbC5vZmZzZXRXaWR0aCA6IGVsLm9mZnNldEhlaWdodDtcbiAgICBkaXZpZGVyID0gc3dpcGVyLnNpemUgLyAoc3dpcGVyLnZpcnR1YWxTaXplICsgc3dpcGVyLnBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUgLSAoc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5zbmFwR3JpZFswXSA6IDApKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ1NpemUgPT09ICdhdXRvJykge1xuICAgICAgZHJhZ1NpemUgPSB0cmFja1NpemUgKiBkaXZpZGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBkcmFnU2l6ZSA9IHBhcnNlSW50KHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdTaXplLCAxMCk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIGRyYWdFbC5zdHlsZS53aWR0aCA9IGAke2RyYWdTaXplfXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgZHJhZ0VsLnN0eWxlLmhlaWdodCA9IGAke2RyYWdTaXplfXB4YDtcbiAgICB9XG4gICAgaWYgKGRpdmlkZXIgPj0gMSkge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuaGlkZSkge1xuICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgIHNjcm9sbGJhci5lbC5jbGFzc0xpc3Rbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZCcgOiAncmVtb3ZlJ10oc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0UG9pbnRlclBvc2l0aW9uKGUpIHtcbiAgICByZXR1cm4gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZS5jbGllbnRYIDogZS5jbGllbnRZO1xuICB9XG4gIGZ1bmN0aW9uIHNldERyYWdQb3NpdGlvbihlKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyLFxuICAgICAgcnRsVHJhbnNsYXRlOiBydGxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHtcbiAgICAgIGVsXG4gICAgfSA9IHNjcm9sbGJhcjtcbiAgICBsZXQgcG9zaXRpb25SYXRpbztcbiAgICBwb3NpdGlvblJhdGlvID0gKGdldFBvaW50ZXJQb3NpdGlvbihlKSAtIGVsZW1lbnRPZmZzZXQoZWwpW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnXSAtIChkcmFnU3RhcnRQb3MgIT09IG51bGwgPyBkcmFnU3RhcnRQb3MgOiBkcmFnU2l6ZSAvIDIpKSAvICh0cmFja1NpemUgLSBkcmFnU2l6ZSk7XG4gICAgcG9zaXRpb25SYXRpbyA9IE1hdGgubWF4KE1hdGgubWluKHBvc2l0aW9uUmF0aW8sIDEpLCAwKTtcbiAgICBpZiAocnRsKSB7XG4gICAgICBwb3NpdGlvblJhdGlvID0gMSAtIHBvc2l0aW9uUmF0aW87XG4gICAgfVxuICAgIGNvbnN0IHBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBwb3NpdGlvblJhdGlvO1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhwb3NpdGlvbik7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShwb3NpdGlvbik7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuICBmdW5jdGlvbiBvbkRyYWdTdGFydChlKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyLFxuICAgICAgd3JhcHBlckVsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCB7XG4gICAgICBlbCxcbiAgICAgIGRyYWdFbFxuICAgIH0gPSBzY3JvbGxiYXI7XG4gICAgaXNUb3VjaGVkID0gdHJ1ZTtcbiAgICBkcmFnU3RhcnRQb3MgPSBlLnRhcmdldCA9PT0gZHJhZ0VsID8gZ2V0UG9pbnRlclBvc2l0aW9uKGUpIC0gZS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddIDogbnVsbDtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB3cmFwcGVyRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzEwMG1zJztcbiAgICBkcmFnRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzEwMG1zJztcbiAgICBzZXREcmFnUG9zaXRpb24oZSk7XG4gICAgY2xlYXJUaW1lb3V0KGRyYWdUaW1lb3V0KTtcbiAgICBlbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMG1zJztcbiAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlWydzY3JvbGwtc25hcC10eXBlJ10gPSAnbm9uZSc7XG4gICAgfVxuICAgIGVtaXQoJ3Njcm9sbGJhckRyYWdTdGFydCcsIGUpO1xuICB9XG4gIGZ1bmN0aW9uIG9uRHJhZ01vdmUoZSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNjcm9sbGJhcixcbiAgICAgIHdyYXBwZXJFbFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3Qge1xuICAgICAgZWwsXG4gICAgICBkcmFnRWxcbiAgICB9ID0gc2Nyb2xsYmFyO1xuICAgIGlmICghaXNUb3VjaGVkKSByZXR1cm47XG4gICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICBzZXREcmFnUG9zaXRpb24oZSk7XG4gICAgd3JhcHBlckVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwbXMnO1xuICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwbXMnO1xuICAgIGRyYWdFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMG1zJztcbiAgICBlbWl0KCdzY3JvbGxiYXJEcmFnTW92ZScsIGUpO1xuICB9XG4gIGZ1bmN0aW9uIG9uRHJhZ0VuZChlKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyLFxuICAgICAgd3JhcHBlckVsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCB7XG4gICAgICBlbFxuICAgIH0gPSBzY3JvbGxiYXI7XG4gICAgaWYgKCFpc1RvdWNoZWQpIHJldHVybjtcbiAgICBpc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlWydzY3JvbGwtc25hcC10eXBlJ10gPSAnJztcbiAgICAgIHdyYXBwZXJFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICBjbGVhclRpbWVvdXQoZHJhZ1RpbWVvdXQpO1xuICAgICAgZHJhZ1RpbWVvdXQgPSBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICBlbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnNDAwbXMnO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICAgIGVtaXQoJ3Njcm9sbGJhckRyYWdFbmQnLCBlKTtcbiAgICBpZiAocGFyYW1zLnNuYXBPblJlbGVhc2UpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBldmVudHMobWV0aG9kKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBlbCA9IHNjcm9sbGJhci5lbDtcbiAgICBpZiAoIWVsKSByZXR1cm47XG4gICAgY29uc3QgdGFyZ2V0ID0gZWw7XG4gICAgY29uc3QgYWN0aXZlTGlzdGVuZXIgPSBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9IDogZmFsc2U7XG4gICAgY29uc3QgcGFzc2l2ZUxpc3RlbmVyID0gcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9IDogZmFsc2U7XG4gICAgaWYgKCF0YXJnZXQpIHJldHVybjtcbiAgICBjb25zdCBldmVudE1ldGhvZCA9IG1ldGhvZCA9PT0gJ29uJyA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdyZW1vdmVFdmVudExpc3RlbmVyJztcbiAgICB0YXJnZXRbZXZlbnRNZXRob2RdKCdwb2ludGVyZG93bicsIG9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgZG9jdW1lbnRbZXZlbnRNZXRob2RdKCdwb2ludGVybW92ZScsIG9uRHJhZ01vdmUsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICBkb2N1bWVudFtldmVudE1ldGhvZF0oJ3BvaW50ZXJ1cCcsIG9uRHJhZ0VuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgfVxuICBmdW5jdGlvbiBlbmFibGVEcmFnZ2FibGUoKSB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIGV2ZW50cygnb24nKTtcbiAgfVxuICBmdW5jdGlvbiBkaXNhYmxlRHJhZ2dhYmxlKCkge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICBldmVudHMoJ29mZicpO1xuICB9XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyLFxuICAgICAgZWw6IHN3aXBlckVsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBzd2lwZXIucGFyYW1zLnNjcm9sbGJhciA9IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoc3dpcGVyLCBzd2lwZXIub3JpZ2luYWxQYXJhbXMuc2Nyb2xsYmFyLCBzd2lwZXIucGFyYW1zLnNjcm9sbGJhciwge1xuICAgICAgZWw6ICdzd2lwZXItc2Nyb2xsYmFyJ1xuICAgIH0pO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIGlmICghcGFyYW1zLmVsKSByZXR1cm47XG4gICAgbGV0IGVsO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBlbCA9IHN3aXBlci5lbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IocGFyYW1zLmVsKTtcbiAgICB9XG4gICAgaWYgKCFlbCAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJykge1xuICAgICAgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCk7XG4gICAgfSBlbHNlIGlmICghZWwpIHtcbiAgICAgIGVsID0gcGFyYW1zLmVsO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBlbC5sZW5ndGggPiAxICYmIHN3aXBlckVsLnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGVsID0gc3dpcGVyRWwucXVlcnlTZWxlY3RvcihwYXJhbXMuZWwpO1xuICAgIH1cbiAgICBpZiAoZWwubGVuZ3RoID4gMCkgZWwgPSBlbFswXTtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgbGV0IGRyYWdFbDtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGRyYWdFbCA9IGVsLnF1ZXJ5U2VsZWN0b3IoYC4ke3N3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdDbGFzc31gKTtcbiAgICAgIGlmICghZHJhZ0VsKSB7XG4gICAgICAgIGRyYWdFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdDbGFzcyk7XG4gICAgICAgIGVsLmFwcGVuZChkcmFnRWwpO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHNjcm9sbGJhciwge1xuICAgICAgZWwsXG4gICAgICBkcmFnRWxcbiAgICB9KTtcbiAgICBpZiAocGFyYW1zLmRyYWdnYWJsZSkge1xuICAgICAgZW5hYmxlRHJhZ2dhYmxlKCk7XG4gICAgfVxuICAgIGlmIChlbCkge1xuICAgICAgZWwuY2xhc3NMaXN0W3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZScgOiAnYWRkJ10oc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICBjb25zdCBlbCA9IHN3aXBlci5zY3JvbGxiYXIuZWw7XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgfVxuICAgIGRpc2FibGVEcmFnZ2FibGUoKTtcbiAgfVxuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgZGlzYWJsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbml0KCk7XG4gICAgICB1cGRhdGVTaXplKCk7XG4gICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbigndXBkYXRlIHJlc2l6ZSBvYnNlcnZlclVwZGF0ZSBsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICB1cGRhdGVTaXplKCk7XG4gIH0pO1xuICBvbignc2V0VHJhbnNsYXRlJywgKCkgPT4ge1xuICAgIHNldFRyYW5zbGF0ZSgpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zaXRpb24nLCAoX3MsIGR1cmF0aW9uKSA9PiB7XG4gICAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH0pO1xuICBvbignZW5hYmxlIGRpc2FibGUnLCAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnNjcm9sbGJhcjtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsLmNsYXNzTGlzdFtzd2lwZXIuZW5hYmxlZCA/ICdyZW1vdmUnIDogJ2FkZCddKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmxvY2tDbGFzcyk7XG4gICAgfVxuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgZGVzdHJveSgpO1xuICB9KTtcbiAgY29uc3QgZW5hYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLnNjcm9sbGJhckRpc2FibGVkQ2xhc3MpO1xuICAgIGlmIChzd2lwZXIuc2Nyb2xsYmFyLmVsKSB7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLmVsLmNsYXNzTGlzdC5yZW1vdmUoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuc2Nyb2xsYmFyRGlzYWJsZWRDbGFzcyk7XG4gICAgfVxuICAgIGluaXQoKTtcbiAgICB1cGRhdGVTaXplKCk7XG4gICAgc2V0VHJhbnNsYXRlKCk7XG4gIH07XG4gIGNvbnN0IGRpc2FibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuc2Nyb2xsYmFyRGlzYWJsZWRDbGFzcyk7XG4gICAgaWYgKHN3aXBlci5zY3JvbGxiYXIuZWwpIHtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuZWwuY2xhc3NMaXN0LmFkZChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5zY3JvbGxiYXJEaXNhYmxlZENsYXNzKTtcbiAgICB9XG4gICAgZGVzdHJveSgpO1xuICB9O1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5zY3JvbGxiYXIsIHtcbiAgICBlbmFibGUsXG4gICAgZGlzYWJsZSxcbiAgICB1cGRhdGVTaXplLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBpbml0LFxuICAgIGRlc3Ryb3lcbiAgfSk7XG59IiwiaW1wb3J0IHsgZWxlbWVudENoaWxkcmVuIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBhcmFsbGF4KHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uXG59KSB7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgcGFyYWxsYXg6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgfVxuICB9KTtcbiAgY29uc3Qgc2V0VHJhbnNmb3JtID0gKGVsLCBwcm9ncmVzcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHJ0bFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgcnRsRmFjdG9yID0gcnRsID8gLTEgOiAxO1xuICAgIGNvbnN0IHAgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4JykgfHwgJzAnO1xuICAgIGxldCB4ID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1wYXJhbGxheC14Jyk7XG4gICAgbGV0IHkgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXknKTtcbiAgICBjb25zdCBzY2FsZSA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGUnKTtcbiAgICBjb25zdCBvcGFjaXR5ID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5Jyk7XG4gICAgY29uc3Qgcm90YXRlID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1wYXJhbGxheC1yb3RhdGUnKTtcbiAgICBpZiAoeCB8fCB5KSB7XG4gICAgICB4ID0geCB8fCAnMCc7XG4gICAgICB5ID0geSB8fCAnMCc7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHggPSBwO1xuICAgICAgeSA9ICcwJztcbiAgICB9IGVsc2Uge1xuICAgICAgeSA9IHA7XG4gICAgICB4ID0gJzAnO1xuICAgIH1cbiAgICBpZiAoeC5pbmRleE9mKCclJykgPj0gMCkge1xuICAgICAgeCA9IGAke3BhcnNlSW50KHgsIDEwKSAqIHByb2dyZXNzICogcnRsRmFjdG9yfSVgO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0gYCR7eCAqIHByb2dyZXNzICogcnRsRmFjdG9yfXB4YDtcbiAgICB9XG4gICAgaWYgKHkuaW5kZXhPZignJScpID49IDApIHtcbiAgICAgIHkgPSBgJHtwYXJzZUludCh5LCAxMCkgKiBwcm9ncmVzc30lYDtcbiAgICB9IGVsc2Uge1xuICAgICAgeSA9IGAke3kgKiBwcm9ncmVzc31weGA7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3BhY2l0eSAhPT0gJ3VuZGVmaW5lZCcgJiYgb3BhY2l0eSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgY3VycmVudE9wYWNpdHkgPSBvcGFjaXR5IC0gKG9wYWNpdHkgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKTtcbiAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSBjdXJyZW50T3BhY2l0eTtcbiAgICB9XG4gICAgbGV0IHRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3h9LCAke3l9LCAwcHgpYDtcbiAgICBpZiAodHlwZW9mIHNjYWxlICE9PSAndW5kZWZpbmVkJyAmJiBzY2FsZSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgY3VycmVudFNjYWxlID0gc2NhbGUgLSAoc2NhbGUgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKTtcbiAgICAgIHRyYW5zZm9ybSArPSBgIHNjYWxlKCR7Y3VycmVudFNjYWxlfSlgO1xuICAgIH1cbiAgICBpZiAocm90YXRlICYmIHR5cGVvZiByb3RhdGUgIT09ICd1bmRlZmluZWQnICYmIHJvdGF0ZSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgY3VycmVudFJvdGF0ZSA9IHJvdGF0ZSAqIHByb2dyZXNzICogLTE7XG4gICAgICB0cmFuc2Zvcm0gKz0gYCByb3RhdGUoJHtjdXJyZW50Um90YXRlfWRlZylgO1xuICAgIH1cbiAgICBlbC5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gIH07XG4gIGNvbnN0IHNldFRyYW5zbGF0ZSA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBlbCxcbiAgICAgIHNsaWRlcyxcbiAgICAgIHByb2dyZXNzLFxuICAgICAgc25hcEdyaWRcbiAgICB9ID0gc3dpcGVyO1xuICAgIGVsZW1lbnRDaGlsZHJlbihlbCwgJ1tkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZV0nKS5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHNldFRyYW5zZm9ybShzdWJFbCwgcHJvZ3Jlc3MpO1xuICAgIH0pO1xuICAgIHNsaWRlcy5mb3JFYWNoKChzbGlkZUVsLCBzbGlkZUluZGV4KSA9PiB7XG4gICAgICBsZXQgc2xpZGVQcm9ncmVzcyA9IHNsaWRlRWwucHJvZ3Jlc3M7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycpIHtcbiAgICAgICAgc2xpZGVQcm9ncmVzcyArPSBNYXRoLmNlaWwoc2xpZGVJbmRleCAvIDIpIC0gcHJvZ3Jlc3MgKiAoc25hcEdyaWQubGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICBzbGlkZVByb2dyZXNzID0gTWF0aC5taW4oTWF0aC5tYXgoc2xpZGVQcm9ncmVzcywgLTEpLCAxKTtcbiAgICAgIHNsaWRlRWwucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlXSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXJvdGF0ZV0nKS5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgICAgc2V0VHJhbnNmb3JtKHN1YkVsLCBzbGlkZVByb2dyZXNzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gKGR1cmF0aW9uID0gc3dpcGVyLnBhcmFtcy5zcGVlZCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBlbC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJykuZm9yRWFjaChwYXJhbGxheEVsID0+IHtcbiAgICAgIGxldCBwYXJhbGxheER1cmF0aW9uID0gcGFyc2VJbnQocGFyYWxsYXhFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LWR1cmF0aW9uJyksIDEwKSB8fCBkdXJhdGlvbjtcbiAgICAgIGlmIChkdXJhdGlvbiA9PT0gMCkgcGFyYWxsYXhEdXJhdGlvbiA9IDA7XG4gICAgICBwYXJhbGxheEVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke3BhcmFsbGF4RHVyYXRpb259bXNgO1xuICAgIH0pO1xuICB9O1xuICBvbignYmVmb3JlSW5pdCcsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICB9KTtcbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICBzZXRUcmFuc2xhdGUoKTtcbiAgfSk7XG4gIG9uKCdzZXRUcmFuc2xhdGUnLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICBzZXRUcmFuc2xhdGUoKTtcbiAgfSk7XG4gIG9uKCdzZXRUcmFuc2l0aW9uJywgKF9zd2lwZXIsIGR1cmF0aW9uKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfSk7XG59IiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgeyBlbGVtZW50Q2hpbGRyZW4sIGVsZW1lbnRPZmZzZXQsIGVsZW1lbnRQYXJlbnRzLCBnZXRUcmFuc2xhdGUgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gWm9vbSh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICB6b29tOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIG1heFJhdGlvOiAzLFxuICAgICAgbWluUmF0aW86IDEsXG4gICAgICB0b2dnbGU6IHRydWUsXG4gICAgICBjb250YWluZXJDbGFzczogJ3N3aXBlci16b29tLWNvbnRhaW5lcicsXG4gICAgICB6b29tZWRTbGlkZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXpvb21lZCdcbiAgICB9XG4gIH0pO1xuICBzd2lwZXIuem9vbSA9IHtcbiAgICBlbmFibGVkOiBmYWxzZVxuICB9O1xuICBsZXQgY3VycmVudFNjYWxlID0gMTtcbiAgbGV0IGlzU2NhbGluZyA9IGZhbHNlO1xuICBsZXQgZmFrZUdlc3R1cmVUb3VjaGVkO1xuICBsZXQgZmFrZUdlc3R1cmVNb3ZlZDtcbiAgY29uc3QgZXZDYWNoZSA9IFtdO1xuICBjb25zdCBnZXN0dXJlID0ge1xuICAgIHNsaWRlRWw6IHVuZGVmaW5lZCxcbiAgICBzbGlkZVdpZHRoOiB1bmRlZmluZWQsXG4gICAgc2xpZGVIZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICBpbWFnZUVsOiB1bmRlZmluZWQsXG4gICAgaW1hZ2VXcmFwRWw6IHVuZGVmaW5lZCxcbiAgICBtYXhSYXRpbzogM1xuICB9O1xuICBjb25zdCBpbWFnZSA9IHtcbiAgICBpc1RvdWNoZWQ6IHVuZGVmaW5lZCxcbiAgICBpc01vdmVkOiB1bmRlZmluZWQsXG4gICAgY3VycmVudFg6IHVuZGVmaW5lZCxcbiAgICBjdXJyZW50WTogdW5kZWZpbmVkLFxuICAgIG1pblg6IHVuZGVmaW5lZCxcbiAgICBtaW5ZOiB1bmRlZmluZWQsXG4gICAgbWF4WDogdW5kZWZpbmVkLFxuICAgIG1heFk6IHVuZGVmaW5lZCxcbiAgICB3aWR0aDogdW5kZWZpbmVkLFxuICAgIGhlaWdodDogdW5kZWZpbmVkLFxuICAgIHN0YXJ0WDogdW5kZWZpbmVkLFxuICAgIHN0YXJ0WTogdW5kZWZpbmVkLFxuICAgIHRvdWNoZXNTdGFydDoge30sXG4gICAgdG91Y2hlc0N1cnJlbnQ6IHt9XG4gIH07XG4gIGNvbnN0IHZlbG9jaXR5ID0ge1xuICAgIHg6IHVuZGVmaW5lZCxcbiAgICB5OiB1bmRlZmluZWQsXG4gICAgcHJldlBvc2l0aW9uWDogdW5kZWZpbmVkLFxuICAgIHByZXZQb3NpdGlvblk6IHVuZGVmaW5lZCxcbiAgICBwcmV2VGltZTogdW5kZWZpbmVkXG4gIH07XG4gIGxldCBzY2FsZSA9IDE7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzd2lwZXIuem9vbSwgJ3NjYWxlJywge1xuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiBzY2FsZTtcbiAgICB9LFxuICAgIHNldCh2YWx1ZSkge1xuICAgICAgaWYgKHNjYWxlICE9PSB2YWx1ZSkge1xuICAgICAgICBjb25zdCBpbWFnZUVsID0gZ2VzdHVyZS5pbWFnZUVsO1xuICAgICAgICBjb25zdCBzbGlkZUVsID0gZ2VzdHVyZS5zbGlkZUVsO1xuICAgICAgICBlbWl0KCd6b29tQ2hhbmdlJywgdmFsdWUsIGltYWdlRWwsIHNsaWRlRWwpO1xuICAgICAgfVxuICAgICAgc2NhbGUgPSB2YWx1ZTtcbiAgICB9XG4gIH0pO1xuICBmdW5jdGlvbiBnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKCkge1xuICAgIGlmIChldkNhY2hlLmxlbmd0aCA8IDIpIHJldHVybiAxO1xuICAgIGNvbnN0IHgxID0gZXZDYWNoZVswXS5wYWdlWDtcbiAgICBjb25zdCB5MSA9IGV2Q2FjaGVbMF0ucGFnZVk7XG4gICAgY29uc3QgeDIgPSBldkNhY2hlWzFdLnBhZ2VYO1xuICAgIGNvbnN0IHkyID0gZXZDYWNoZVsxXS5wYWdlWTtcbiAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguc3FydCgoeDIgLSB4MSkgKiogMiArICh5MiAtIHkxKSAqKiAyKTtcbiAgICByZXR1cm4gZGlzdGFuY2U7XG4gIH1cbiAgZnVuY3Rpb24gZ2V0U2NhbGVPcmlnaW4oKSB7XG4gICAgaWYgKGV2Q2FjaGUubGVuZ3RoIDwgMikgcmV0dXJuIHtcbiAgICAgIHg6IG51bGwsXG4gICAgICB5OiBudWxsXG4gICAgfTtcbiAgICBjb25zdCBib3ggPSBnZXN0dXJlLmltYWdlRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIFsoZXZDYWNoZVswXS5wYWdlWCArIChldkNhY2hlWzFdLnBhZ2VYIC0gZXZDYWNoZVswXS5wYWdlWCkgLyAyIC0gYm94LngpIC8gY3VycmVudFNjYWxlLCAoZXZDYWNoZVswXS5wYWdlWSArIChldkNhY2hlWzFdLnBhZ2VZIC0gZXZDYWNoZVswXS5wYWdlWSkgLyAyIC0gYm94LnkpIC8gY3VycmVudFNjYWxlXTtcbiAgfVxuICBmdW5jdGlvbiBnZXRTbGlkZVNlbGVjdG9yKCkge1xuICAgIHJldHVybiBzd2lwZXIuaXNFbGVtZW50ID8gYHN3aXBlci1zbGlkZWAgOiBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWA7XG4gIH1cbiAgZnVuY3Rpb24gZXZlbnRXaXRoaW5TbGlkZShlKSB7XG4gICAgY29uc3Qgc2xpZGVTZWxlY3RvciA9IGdldFNsaWRlU2VsZWN0b3IoKTtcbiAgICBpZiAoZS50YXJnZXQubWF0Y2hlcyhzbGlkZVNlbGVjdG9yKSkgcmV0dXJuIHRydWU7XG4gICAgaWYgKHN3aXBlci5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5jb250YWlucyhlLnRhcmdldCkpLmxlbmd0aCA+IDApIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiBldmVudFdpdGhpblpvb21Db250YWluZXIoZSkge1xuICAgIGNvbnN0IHNlbGVjdG9yID0gYC4ke3N3aXBlci5wYXJhbXMuem9vbS5jb250YWluZXJDbGFzc31gO1xuICAgIGlmIChlLnRhcmdldC5tYXRjaGVzKHNlbGVjdG9yKSkgcmV0dXJuIHRydWU7XG4gICAgaWYgKFsuLi5zd2lwZXIuZWwucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcildLmZpbHRlcihjb250YWluZXJFbCA9PiBjb250YWluZXJFbC5jb250YWlucyhlLnRhcmdldCkpLmxlbmd0aCA+IDApIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIEV2ZW50c1xuICBmdW5jdGlvbiBvbkdlc3R1cmVTdGFydChlKSB7XG4gICAgaWYgKGUucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHtcbiAgICAgIGV2Q2FjaGUuc3BsaWNlKDAsIGV2Q2FjaGUubGVuZ3RoKTtcbiAgICB9XG4gICAgaWYgKCFldmVudFdpdGhpblNsaWRlKGUpKSByZXR1cm47XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIGZha2VHZXN0dXJlVG91Y2hlZCA9IGZhbHNlO1xuICAgIGZha2VHZXN0dXJlTW92ZWQgPSBmYWxzZTtcbiAgICBldkNhY2hlLnB1c2goZSk7XG4gICAgaWYgKGV2Q2FjaGUubGVuZ3RoIDwgMikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmYWtlR2VzdHVyZVRvdWNoZWQgPSB0cnVlO1xuICAgIGdlc3R1cmUuc2NhbGVTdGFydCA9IGdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoKTtcbiAgICBpZiAoIWdlc3R1cmUuc2xpZGVFbCkge1xuICAgICAgZ2VzdHVyZS5zbGlkZUVsID0gZS50YXJnZXQuY2xvc2VzdChgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gICAgICBpZiAoIWdlc3R1cmUuc2xpZGVFbCkgZ2VzdHVyZS5zbGlkZUVsID0gc3dpcGVyLnNsaWRlc1tzd2lwZXIuYWN0aXZlSW5kZXhdO1xuICAgICAgbGV0IGltYWdlRWwgPSBnZXN0dXJlLnNsaWRlRWwucXVlcnlTZWxlY3RvcihgLiR7cGFyYW1zLmNvbnRhaW5lckNsYXNzfWApO1xuICAgICAgaWYgKGltYWdlRWwpIHtcbiAgICAgICAgaW1hZ2VFbCA9IGltYWdlRWwucXVlcnlTZWxlY3RvckFsbCgncGljdHVyZSwgaW1nLCBzdmcsIGNhbnZhcywgLnN3aXBlci16b29tLXRhcmdldCcpWzBdO1xuICAgICAgfVxuICAgICAgZ2VzdHVyZS5pbWFnZUVsID0gaW1hZ2VFbDtcbiAgICAgIGlmIChpbWFnZUVsKSB7XG4gICAgICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwgPSBlbGVtZW50UGFyZW50cyhnZXN0dXJlLmltYWdlRWwsIGAuJHtwYXJhbXMuY29udGFpbmVyQ2xhc3N9YClbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZXN0dXJlLmltYWdlV3JhcEVsID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKCFnZXN0dXJlLmltYWdlV3JhcEVsKSB7XG4gICAgICAgIGdlc3R1cmUuaW1hZ2VFbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZ2VzdHVyZS5tYXhSYXRpbyA9IGdlc3R1cmUuaW1hZ2VXcmFwRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci16b29tJykgfHwgcGFyYW1zLm1heFJhdGlvO1xuICAgIH1cbiAgICBpZiAoZ2VzdHVyZS5pbWFnZUVsKSB7XG4gICAgICBjb25zdCBbb3JpZ2luWCwgb3JpZ2luWV0gPSBnZXRTY2FsZU9yaWdpbigpO1xuICAgICAgZ2VzdHVyZS5pbWFnZUVsLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IGAke29yaWdpblh9cHggJHtvcmlnaW5ZfXB4YDtcbiAgICAgIGdlc3R1cmUuaW1hZ2VFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMG1zJztcbiAgICB9XG4gICAgaXNTY2FsaW5nID0gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBvbkdlc3R1cmVDaGFuZ2UoZSkge1xuICAgIGlmICghZXZlbnRXaXRoaW5TbGlkZShlKSkgcmV0dXJuO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgcG9pbnRlckluZGV4ID0gZXZDYWNoZS5maW5kSW5kZXgoY2FjaGVkRXYgPT4gY2FjaGVkRXYucG9pbnRlcklkID09PSBlLnBvaW50ZXJJZCk7XG4gICAgaWYgKHBvaW50ZXJJbmRleCA+PSAwKSBldkNhY2hlW3BvaW50ZXJJbmRleF0gPSBlO1xuICAgIGlmIChldkNhY2hlLmxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZmFrZUdlc3R1cmVNb3ZlZCA9IHRydWU7XG4gICAgZ2VzdHVyZS5zY2FsZU1vdmUgPSBnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKCk7XG4gICAgaWYgKCFnZXN0dXJlLmltYWdlRWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgem9vbS5zY2FsZSA9IGdlc3R1cmUuc2NhbGVNb3ZlIC8gZ2VzdHVyZS5zY2FsZVN0YXJ0ICogY3VycmVudFNjYWxlO1xuICAgIGlmICh6b29tLnNjYWxlID4gZ2VzdHVyZS5tYXhSYXRpbykge1xuICAgICAgem9vbS5zY2FsZSA9IGdlc3R1cmUubWF4UmF0aW8gLSAxICsgKHpvb20uc2NhbGUgLSBnZXN0dXJlLm1heFJhdGlvICsgMSkgKiogMC41O1xuICAgIH1cbiAgICBpZiAoem9vbS5zY2FsZSA8IHBhcmFtcy5taW5SYXRpbykge1xuICAgICAgem9vbS5zY2FsZSA9IHBhcmFtcy5taW5SYXRpbyArIDEgLSAocGFyYW1zLm1pblJhdGlvIC0gem9vbS5zY2FsZSArIDEpICoqIDAuNTtcbiAgICB9XG4gICAgZ2VzdHVyZS5pbWFnZUVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoJHt6b29tLnNjYWxlfSlgO1xuICB9XG4gIGZ1bmN0aW9uIG9uR2VzdHVyZUVuZChlKSB7XG4gICAgaWYgKCFldmVudFdpdGhpblNsaWRlKGUpKSByZXR1cm47XG4gICAgaWYgKGUucG9pbnRlclR5cGUgPT09ICdtb3VzZScgJiYgZS50eXBlID09PSAncG9pbnRlcm91dCcpIHJldHVybjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHBvaW50ZXJJbmRleCA9IGV2Q2FjaGUuZmluZEluZGV4KGNhY2hlZEV2ID0+IGNhY2hlZEV2LnBvaW50ZXJJZCA9PT0gZS5wb2ludGVySWQpO1xuICAgIGlmIChwb2ludGVySW5kZXggPj0gMCkgZXZDYWNoZS5zcGxpY2UocG9pbnRlckluZGV4LCAxKTtcbiAgICBpZiAoIWZha2VHZXN0dXJlVG91Y2hlZCB8fCAhZmFrZUdlc3R1cmVNb3ZlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmYWtlR2VzdHVyZVRvdWNoZWQgPSBmYWxzZTtcbiAgICBmYWtlR2VzdHVyZU1vdmVkID0gZmFsc2U7XG4gICAgaWYgKCFnZXN0dXJlLmltYWdlRWwpIHJldHVybjtcbiAgICB6b29tLnNjYWxlID0gTWF0aC5tYXgoTWF0aC5taW4oem9vbS5zY2FsZSwgZ2VzdHVyZS5tYXhSYXRpbyksIHBhcmFtcy5taW5SYXRpbyk7XG4gICAgZ2VzdHVyZS5pbWFnZUVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke3N3aXBlci5wYXJhbXMuc3BlZWR9bXNgO1xuICAgIGdlc3R1cmUuaW1hZ2VFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKCR7em9vbS5zY2FsZX0pYDtcbiAgICBjdXJyZW50U2NhbGUgPSB6b29tLnNjYWxlO1xuICAgIGlzU2NhbGluZyA9IGZhbHNlO1xuICAgIGlmICh6b29tLnNjYWxlID09PSAxKSBnZXN0dXJlLnNsaWRlRWwgPSB1bmRlZmluZWQ7XG4gIH1cbiAgZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGUpIHtcbiAgICBjb25zdCBkZXZpY2UgPSBzd2lwZXIuZGV2aWNlO1xuICAgIGlmICghZ2VzdHVyZS5pbWFnZUVsKSByZXR1cm47XG4gICAgaWYgKGltYWdlLmlzVG91Y2hlZCkgcmV0dXJuO1xuICAgIGlmIChkZXZpY2UuYW5kcm9pZCAmJiBlLmNhbmNlbGFibGUpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpbWFnZS5pc1RvdWNoZWQgPSB0cnVlO1xuICAgIGltYWdlLnRvdWNoZXNTdGFydC54ID0gZS5wYWdlWDtcbiAgICBpbWFnZS50b3VjaGVzU3RhcnQueSA9IGUucGFnZVk7XG4gIH1cbiAgZnVuY3Rpb24gb25Ub3VjaE1vdmUoZSkge1xuICAgIGlmICghZXZlbnRXaXRoaW5TbGlkZShlKSB8fCAhZXZlbnRXaXRoaW5ab29tQ29udGFpbmVyKGUpKSByZXR1cm47XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGlmICghZ2VzdHVyZS5pbWFnZUVsKSByZXR1cm47XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICBpZiAoIWltYWdlLmlzVG91Y2hlZCB8fCAhZ2VzdHVyZS5zbGlkZUVsKSByZXR1cm47XG4gICAgaWYgKCFpbWFnZS5pc01vdmVkKSB7XG4gICAgICBpbWFnZS53aWR0aCA9IGdlc3R1cmUuaW1hZ2VFbC5vZmZzZXRXaWR0aDtcbiAgICAgIGltYWdlLmhlaWdodCA9IGdlc3R1cmUuaW1hZ2VFbC5vZmZzZXRIZWlnaHQ7XG4gICAgICBpbWFnZS5zdGFydFggPSBnZXRUcmFuc2xhdGUoZ2VzdHVyZS5pbWFnZVdyYXBFbCwgJ3gnKSB8fCAwO1xuICAgICAgaW1hZ2Uuc3RhcnRZID0gZ2V0VHJhbnNsYXRlKGdlc3R1cmUuaW1hZ2VXcmFwRWwsICd5JykgfHwgMDtcbiAgICAgIGdlc3R1cmUuc2xpZGVXaWR0aCA9IGdlc3R1cmUuc2xpZGVFbC5vZmZzZXRXaWR0aDtcbiAgICAgIGdlc3R1cmUuc2xpZGVIZWlnaHQgPSBnZXN0dXJlLnNsaWRlRWwub2Zmc2V0SGVpZ2h0O1xuICAgICAgZ2VzdHVyZS5pbWFnZVdyYXBFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMG1zJztcbiAgICB9XG4gICAgLy8gRGVmaW5lIGlmIHdlIG5lZWQgaW1hZ2UgZHJhZ1xuICAgIGNvbnN0IHNjYWxlZFdpZHRoID0gaW1hZ2Uud2lkdGggKiB6b29tLnNjYWxlO1xuICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IGltYWdlLmhlaWdodCAqIHpvb20uc2NhbGU7XG4gICAgaWYgKHNjYWxlZFdpZHRoIDwgZ2VzdHVyZS5zbGlkZVdpZHRoICYmIHNjYWxlZEhlaWdodCA8IGdlc3R1cmUuc2xpZGVIZWlnaHQpIHJldHVybjtcbiAgICBpbWFnZS5taW5YID0gTWF0aC5taW4oZ2VzdHVyZS5zbGlkZVdpZHRoIC8gMiAtIHNjYWxlZFdpZHRoIC8gMiwgMCk7XG4gICAgaW1hZ2UubWF4WCA9IC1pbWFnZS5taW5YO1xuICAgIGltYWdlLm1pblkgPSBNYXRoLm1pbihnZXN0dXJlLnNsaWRlSGVpZ2h0IC8gMiAtIHNjYWxlZEhlaWdodCAvIDIsIDApO1xuICAgIGltYWdlLm1heFkgPSAtaW1hZ2UubWluWTtcbiAgICBpbWFnZS50b3VjaGVzQ3VycmVudC54ID0gZXZDYWNoZS5sZW5ndGggPiAwID8gZXZDYWNoZVswXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA9IGV2Q2FjaGUubGVuZ3RoID4gMCA/IGV2Q2FjaGVbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICAgIGlmICghaW1hZ2UuaXNNb3ZlZCAmJiAhaXNTY2FsaW5nKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIChNYXRoLmZsb29yKGltYWdlLm1pblgpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WCkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueCA8IGltYWdlLnRvdWNoZXNTdGFydC54IHx8IE1hdGguZmxvb3IoaW1hZ2UubWF4WCkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRYKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC54ID4gaW1hZ2UudG91Y2hlc1N0YXJ0LngpKSB7XG4gICAgICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSAmJiAoTWF0aC5mbG9vcihpbWFnZS5taW5ZKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFkpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPCBpbWFnZS50b3VjaGVzU3RhcnQueSB8fCBNYXRoLmZsb29yKGltYWdlLm1heFkpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WSkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA+IGltYWdlLnRvdWNoZXNTdGFydC55KSkge1xuICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZS5jYW5jZWxhYmxlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaW1hZ2UuaXNNb3ZlZCA9IHRydWU7XG4gICAgaW1hZ2UuY3VycmVudFggPSBpbWFnZS50b3VjaGVzQ3VycmVudC54IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LnggKyBpbWFnZS5zdGFydFg7XG4gICAgaW1hZ2UuY3VycmVudFkgPSBpbWFnZS50b3VjaGVzQ3VycmVudC55IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LnkgKyBpbWFnZS5zdGFydFk7XG4gICAgaWYgKGltYWdlLmN1cnJlbnRYIDwgaW1hZ2UubWluWCkge1xuICAgICAgaW1hZ2UuY3VycmVudFggPSBpbWFnZS5taW5YICsgMSAtIChpbWFnZS5taW5YIC0gaW1hZ2UuY3VycmVudFggKyAxKSAqKiAwLjg7XG4gICAgfVxuICAgIGlmIChpbWFnZS5jdXJyZW50WCA+IGltYWdlLm1heFgpIHtcbiAgICAgIGltYWdlLmN1cnJlbnRYID0gaW1hZ2UubWF4WCAtIDEgKyAoaW1hZ2UuY3VycmVudFggLSBpbWFnZS5tYXhYICsgMSkgKiogMC44O1xuICAgIH1cbiAgICBpZiAoaW1hZ2UuY3VycmVudFkgPCBpbWFnZS5taW5ZKSB7XG4gICAgICBpbWFnZS5jdXJyZW50WSA9IGltYWdlLm1pblkgKyAxIC0gKGltYWdlLm1pblkgLSBpbWFnZS5jdXJyZW50WSArIDEpICoqIDAuODtcbiAgICB9XG4gICAgaWYgKGltYWdlLmN1cnJlbnRZID4gaW1hZ2UubWF4WSkge1xuICAgICAgaW1hZ2UuY3VycmVudFkgPSBpbWFnZS5tYXhZIC0gMSArIChpbWFnZS5jdXJyZW50WSAtIGltYWdlLm1heFkgKyAxKSAqKiAwLjg7XG4gICAgfVxuXG4gICAgLy8gVmVsb2NpdHlcbiAgICBpZiAoIXZlbG9jaXR5LnByZXZQb3NpdGlvblgpIHZlbG9jaXR5LnByZXZQb3NpdGlvblggPSBpbWFnZS50b3VjaGVzQ3VycmVudC54O1xuICAgIGlmICghdmVsb2NpdHkucHJldlBvc2l0aW9uWSkgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7XG4gICAgaWYgKCF2ZWxvY2l0eS5wcmV2VGltZSkgdmVsb2NpdHkucHJldlRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHZlbG9jaXR5LnggPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblgpIC8gKERhdGUubm93KCkgLSB2ZWxvY2l0eS5wcmV2VGltZSkgLyAyO1xuICAgIHZlbG9jaXR5LnkgPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblkpIC8gKERhdGUubm93KCkgLSB2ZWxvY2l0eS5wcmV2VGltZSkgLyAyO1xuICAgIGlmIChNYXRoLmFicyhpbWFnZS50b3VjaGVzQ3VycmVudC54IC0gdmVsb2NpdHkucHJldlBvc2l0aW9uWCkgPCAyKSB2ZWxvY2l0eS54ID0gMDtcbiAgICBpZiAoTWF0aC5hYnMoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblkpIDwgMikgdmVsb2NpdHkueSA9IDA7XG4gICAgdmVsb2NpdHkucHJldlBvc2l0aW9uWCA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lng7XG4gICAgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7XG4gICAgdmVsb2NpdHkucHJldlRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7aW1hZ2UuY3VycmVudFh9cHgsICR7aW1hZ2UuY3VycmVudFl9cHgsMClgO1xuICB9XG4gIGZ1bmN0aW9uIG9uVG91Y2hFbmQoKSB7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGlmICghZ2VzdHVyZS5pbWFnZUVsKSByZXR1cm47XG4gICAgaWYgKCFpbWFnZS5pc1RvdWNoZWQgfHwgIWltYWdlLmlzTW92ZWQpIHtcbiAgICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgaW1hZ2UuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBpbWFnZS5pc01vdmVkID0gZmFsc2U7XG4gICAgbGV0IG1vbWVudHVtRHVyYXRpb25YID0gMzAwO1xuICAgIGxldCBtb21lbnR1bUR1cmF0aW9uWSA9IDMwMDtcbiAgICBjb25zdCBtb21lbnR1bURpc3RhbmNlWCA9IHZlbG9jaXR5LnggKiBtb21lbnR1bUR1cmF0aW9uWDtcbiAgICBjb25zdCBuZXdQb3NpdGlvblggPSBpbWFnZS5jdXJyZW50WCArIG1vbWVudHVtRGlzdGFuY2VYO1xuICAgIGNvbnN0IG1vbWVudHVtRGlzdGFuY2VZID0gdmVsb2NpdHkueSAqIG1vbWVudHVtRHVyYXRpb25ZO1xuICAgIGNvbnN0IG5ld1Bvc2l0aW9uWSA9IGltYWdlLmN1cnJlbnRZICsgbW9tZW50dW1EaXN0YW5jZVk7XG5cbiAgICAvLyBGaXggZHVyYXRpb25cbiAgICBpZiAodmVsb2NpdHkueCAhPT0gMCkgbW9tZW50dW1EdXJhdGlvblggPSBNYXRoLmFicygobmV3UG9zaXRpb25YIC0gaW1hZ2UuY3VycmVudFgpIC8gdmVsb2NpdHkueCk7XG4gICAgaWYgKHZlbG9jaXR5LnkgIT09IDApIG1vbWVudHVtRHVyYXRpb25ZID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uWSAtIGltYWdlLmN1cnJlbnRZKSAvIHZlbG9jaXR5LnkpO1xuICAgIGNvbnN0IG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLm1heChtb21lbnR1bUR1cmF0aW9uWCwgbW9tZW50dW1EdXJhdGlvblkpO1xuICAgIGltYWdlLmN1cnJlbnRYID0gbmV3UG9zaXRpb25YO1xuICAgIGltYWdlLmN1cnJlbnRZID0gbmV3UG9zaXRpb25ZO1xuXG4gICAgLy8gRGVmaW5lIGlmIHdlIG5lZWQgaW1hZ2UgZHJhZ1xuICAgIGNvbnN0IHNjYWxlZFdpZHRoID0gaW1hZ2Uud2lkdGggKiB6b29tLnNjYWxlO1xuICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IGltYWdlLmhlaWdodCAqIHpvb20uc2NhbGU7XG4gICAgaW1hZ2UubWluWCA9IE1hdGgubWluKGdlc3R1cmUuc2xpZGVXaWR0aCAvIDIgLSBzY2FsZWRXaWR0aCAvIDIsIDApO1xuICAgIGltYWdlLm1heFggPSAtaW1hZ2UubWluWDtcbiAgICBpbWFnZS5taW5ZID0gTWF0aC5taW4oZ2VzdHVyZS5zbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyLCAwKTtcbiAgICBpbWFnZS5tYXhZID0gLWltYWdlLm1pblk7XG4gICAgaW1hZ2UuY3VycmVudFggPSBNYXRoLm1heChNYXRoLm1pbihpbWFnZS5jdXJyZW50WCwgaW1hZ2UubWF4WCksIGltYWdlLm1pblgpO1xuICAgIGltYWdlLmN1cnJlbnRZID0gTWF0aC5tYXgoTWF0aC5taW4oaW1hZ2UuY3VycmVudFksIGltYWdlLm1heFkpLCBpbWFnZS5taW5ZKTtcbiAgICBnZXN0dXJlLmltYWdlV3JhcEVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke21vbWVudHVtRHVyYXRpb259bXNgO1xuICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7aW1hZ2UuY3VycmVudFh9cHgsICR7aW1hZ2UuY3VycmVudFl9cHgsMClgO1xuICB9XG4gIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgaWYgKGdlc3R1cmUuc2xpZGVFbCAmJiBzd2lwZXIucHJldmlvdXNJbmRleCAhPT0gc3dpcGVyLmFjdGl2ZUluZGV4KSB7XG4gICAgICBpZiAoZ2VzdHVyZS5pbWFnZUVsKSB7XG4gICAgICAgIGdlc3R1cmUuaW1hZ2VFbC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpJztcbiAgICAgIH1cbiAgICAgIGlmIChnZXN0dXJlLmltYWdlV3JhcEVsKSB7XG4gICAgICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZTNkKDAsMCwwKSc7XG4gICAgICB9XG4gICAgICB6b29tLnNjYWxlID0gMTtcbiAgICAgIGN1cnJlbnRTY2FsZSA9IDE7XG4gICAgICBnZXN0dXJlLnNsaWRlRWwgPSB1bmRlZmluZWQ7XG4gICAgICBnZXN0dXJlLmltYWdlRWwgPSB1bmRlZmluZWQ7XG4gICAgICBnZXN0dXJlLmltYWdlV3JhcEVsID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB6b29tSW4oZSkge1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgaWYgKCFnZXN0dXJlLnNsaWRlRWwpIHtcbiAgICAgIGlmIChlICYmIGUudGFyZ2V0KSB7XG4gICAgICAgIGdlc3R1cmUuc2xpZGVFbCA9IGUudGFyZ2V0LmNsb3Nlc3QoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICAgICAgfVxuICAgICAgaWYgKCFnZXN0dXJlLnNsaWRlRWwpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCkge1xuICAgICAgICAgIGdlc3R1cmUuc2xpZGVFbCA9IGVsZW1lbnRDaGlsZHJlbihzd2lwZXIuc2xpZGVzRWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3N9YClbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2VzdHVyZS5zbGlkZUVsID0gc3dpcGVyLnNsaWRlc1tzd2lwZXIuYWN0aXZlSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgaW1hZ2VFbCA9IGdlc3R1cmUuc2xpZGVFbC5xdWVyeVNlbGVjdG9yKGAuJHtwYXJhbXMuY29udGFpbmVyQ2xhc3N9YCk7XG4gICAgICBpZiAoaW1hZ2VFbCkge1xuICAgICAgICBpbWFnZUVsID0gaW1hZ2VFbC5xdWVyeVNlbGVjdG9yQWxsKCdwaWN0dXJlLCBpbWcsIHN2ZywgY2FudmFzLCAuc3dpcGVyLXpvb20tdGFyZ2V0JylbMF07XG4gICAgICB9XG4gICAgICBnZXN0dXJlLmltYWdlRWwgPSBpbWFnZUVsO1xuICAgICAgaWYgKGltYWdlRWwpIHtcbiAgICAgICAgZ2VzdHVyZS5pbWFnZVdyYXBFbCA9IGVsZW1lbnRQYXJlbnRzKGdlc3R1cmUuaW1hZ2VFbCwgYC4ke3BhcmFtcy5jb250YWluZXJDbGFzc31gKVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghZ2VzdHVyZS5pbWFnZUVsIHx8ICFnZXN0dXJlLmltYWdlV3JhcEVsKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS50b3VjaEFjdGlvbiA9ICdub25lJztcbiAgICB9XG4gICAgZ2VzdHVyZS5zbGlkZUVsLmNsYXNzTGlzdC5hZGQoYCR7cGFyYW1zLnpvb21lZFNsaWRlQ2xhc3N9YCk7XG4gICAgbGV0IHRvdWNoWDtcbiAgICBsZXQgdG91Y2hZO1xuICAgIGxldCBvZmZzZXRYO1xuICAgIGxldCBvZmZzZXRZO1xuICAgIGxldCBkaWZmWDtcbiAgICBsZXQgZGlmZlk7XG4gICAgbGV0IHRyYW5zbGF0ZVg7XG4gICAgbGV0IHRyYW5zbGF0ZVk7XG4gICAgbGV0IGltYWdlV2lkdGg7XG4gICAgbGV0IGltYWdlSGVpZ2h0O1xuICAgIGxldCBzY2FsZWRXaWR0aDtcbiAgICBsZXQgc2NhbGVkSGVpZ2h0O1xuICAgIGxldCB0cmFuc2xhdGVNaW5YO1xuICAgIGxldCB0cmFuc2xhdGVNaW5ZO1xuICAgIGxldCB0cmFuc2xhdGVNYXhYO1xuICAgIGxldCB0cmFuc2xhdGVNYXhZO1xuICAgIGxldCBzbGlkZVdpZHRoO1xuICAgIGxldCBzbGlkZUhlaWdodDtcbiAgICBpZiAodHlwZW9mIGltYWdlLnRvdWNoZXNTdGFydC54ID09PSAndW5kZWZpbmVkJyAmJiBlKSB7XG4gICAgICB0b3VjaFggPSBlLnBhZ2VYO1xuICAgICAgdG91Y2hZID0gZS5wYWdlWTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG91Y2hYID0gaW1hZ2UudG91Y2hlc1N0YXJ0Lng7XG4gICAgICB0b3VjaFkgPSBpbWFnZS50b3VjaGVzU3RhcnQueTtcbiAgICB9XG4gICAgY29uc3QgZm9yY2Vab29tUmF0aW8gPSB0eXBlb2YgZSA9PT0gJ251bWJlcicgPyBlIDogbnVsbDtcbiAgICBpZiAoY3VycmVudFNjYWxlID09PSAxICYmIGZvcmNlWm9vbVJhdGlvKSB7XG4gICAgICB0b3VjaFggPSB1bmRlZmluZWQ7XG4gICAgICB0b3VjaFkgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHpvb20uc2NhbGUgPSBmb3JjZVpvb21SYXRpbyB8fCBnZXN0dXJlLmltYWdlV3JhcEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcbiAgICBjdXJyZW50U2NhbGUgPSBmb3JjZVpvb21SYXRpbyB8fCBnZXN0dXJlLmltYWdlV3JhcEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcbiAgICBpZiAoZSAmJiAhKGN1cnJlbnRTY2FsZSA9PT0gMSAmJiBmb3JjZVpvb21SYXRpbykpIHtcbiAgICAgIHNsaWRlV2lkdGggPSBnZXN0dXJlLnNsaWRlRWwub2Zmc2V0V2lkdGg7XG4gICAgICBzbGlkZUhlaWdodCA9IGdlc3R1cmUuc2xpZGVFbC5vZmZzZXRIZWlnaHQ7XG4gICAgICBvZmZzZXRYID0gZWxlbWVudE9mZnNldChnZXN0dXJlLnNsaWRlRWwpLmxlZnQgKyB3aW5kb3cuc2Nyb2xsWDtcbiAgICAgIG9mZnNldFkgPSBlbGVtZW50T2Zmc2V0KGdlc3R1cmUuc2xpZGVFbCkudG9wICsgd2luZG93LnNjcm9sbFk7XG4gICAgICBkaWZmWCA9IG9mZnNldFggKyBzbGlkZVdpZHRoIC8gMiAtIHRvdWNoWDtcbiAgICAgIGRpZmZZID0gb2Zmc2V0WSArIHNsaWRlSGVpZ2h0IC8gMiAtIHRvdWNoWTtcbiAgICAgIGltYWdlV2lkdGggPSBnZXN0dXJlLmltYWdlRWwub2Zmc2V0V2lkdGg7XG4gICAgICBpbWFnZUhlaWdodCA9IGdlc3R1cmUuaW1hZ2VFbC5vZmZzZXRIZWlnaHQ7XG4gICAgICBzY2FsZWRXaWR0aCA9IGltYWdlV2lkdGggKiB6b29tLnNjYWxlO1xuICAgICAgc2NhbGVkSGVpZ2h0ID0gaW1hZ2VIZWlnaHQgKiB6b29tLnNjYWxlO1xuICAgICAgdHJhbnNsYXRlTWluWCA9IE1hdGgubWluKHNsaWRlV2lkdGggLyAyIC0gc2NhbGVkV2lkdGggLyAyLCAwKTtcbiAgICAgIHRyYW5zbGF0ZU1pblkgPSBNYXRoLm1pbihzbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyLCAwKTtcbiAgICAgIHRyYW5zbGF0ZU1heFggPSAtdHJhbnNsYXRlTWluWDtcbiAgICAgIHRyYW5zbGF0ZU1heFkgPSAtdHJhbnNsYXRlTWluWTtcbiAgICAgIHRyYW5zbGF0ZVggPSBkaWZmWCAqIHpvb20uc2NhbGU7XG4gICAgICB0cmFuc2xhdGVZID0gZGlmZlkgKiB6b29tLnNjYWxlO1xuICAgICAgaWYgKHRyYW5zbGF0ZVggPCB0cmFuc2xhdGVNaW5YKSB7XG4gICAgICAgIHRyYW5zbGF0ZVggPSB0cmFuc2xhdGVNaW5YO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zbGF0ZVggPiB0cmFuc2xhdGVNYXhYKSB7XG4gICAgICAgIHRyYW5zbGF0ZVggPSB0cmFuc2xhdGVNYXhYO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zbGF0ZVkgPCB0cmFuc2xhdGVNaW5ZKSB7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVNaW5ZO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zbGF0ZVkgPiB0cmFuc2xhdGVNYXhZKSB7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVNYXhZO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2xhdGVYID0gMDtcbiAgICAgIHRyYW5zbGF0ZVkgPSAwO1xuICAgIH1cbiAgICBnZXN0dXJlLmltYWdlV3JhcEVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICczMDBtcyc7XG4gICAgZ2VzdHVyZS5pbWFnZVdyYXBFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVYfXB4LCAke3RyYW5zbGF0ZVl9cHgsMClgO1xuICAgIGdlc3R1cmUuaW1hZ2VFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMzAwbXMnO1xuICAgIGdlc3R1cmUuaW1hZ2VFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKCR7em9vbS5zY2FsZX0pYDtcbiAgfVxuICBmdW5jdGlvbiB6b29tT3V0KCkge1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgaWYgKCFnZXN0dXJlLnNsaWRlRWwpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwpIHtcbiAgICAgICAgZ2VzdHVyZS5zbGlkZUVsID0gZWxlbWVudENoaWxkcmVuKHN3aXBlci5zbGlkZXNFbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzc31gKVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdlc3R1cmUuc2xpZGVFbCA9IHN3aXBlci5zbGlkZXNbc3dpcGVyLmFjdGl2ZUluZGV4XTtcbiAgICAgIH1cbiAgICAgIGxldCBpbWFnZUVsID0gZ2VzdHVyZS5zbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoYC4ke3BhcmFtcy5jb250YWluZXJDbGFzc31gKTtcbiAgICAgIGlmIChpbWFnZUVsKSB7XG4gICAgICAgIGltYWdlRWwgPSBpbWFnZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ3BpY3R1cmUsIGltZywgc3ZnLCBjYW52YXMsIC5zd2lwZXItem9vbS10YXJnZXQnKVswXTtcbiAgICAgIH1cbiAgICAgIGdlc3R1cmUuaW1hZ2VFbCA9IGltYWdlRWw7XG4gICAgICBpZiAoaW1hZ2VFbCkge1xuICAgICAgICBnZXN0dXJlLmltYWdlV3JhcEVsID0gZWxlbWVudFBhcmVudHMoZ2VzdHVyZS5pbWFnZUVsLCBgLiR7cGFyYW1zLmNvbnRhaW5lckNsYXNzfWApWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2VzdHVyZS5pbWFnZVdyYXBFbCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFnZXN0dXJlLmltYWdlRWwgfHwgIWdlc3R1cmUuaW1hZ2VXcmFwRWwpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLm92ZXJmbG93ID0gJyc7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnRvdWNoQWN0aW9uID0gJyc7XG4gICAgfVxuICAgIHpvb20uc2NhbGUgPSAxO1xuICAgIGN1cnJlbnRTY2FsZSA9IDE7XG4gICAgZ2VzdHVyZS5pbWFnZVdyYXBFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMzAwbXMnO1xuICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZTNkKDAsMCwwKSc7XG4gICAgZ2VzdHVyZS5pbWFnZUVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICczMDBtcyc7XG4gICAgZ2VzdHVyZS5pbWFnZUVsLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSknO1xuICAgIGdlc3R1cmUuc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKGAke3BhcmFtcy56b29tZWRTbGlkZUNsYXNzfWApO1xuICAgIGdlc3R1cmUuc2xpZGVFbCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIFRvZ2dsZSBab29tXG4gIGZ1bmN0aW9uIHpvb21Ub2dnbGUoZSkge1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBpZiAoem9vbS5zY2FsZSAmJiB6b29tLnNjYWxlICE9PSAxKSB7XG4gICAgICAvLyBab29tIE91dFxuICAgICAgem9vbU91dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBab29tIEluXG4gICAgICB6b29tSW4oZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdldExpc3RlbmVycygpIHtcbiAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPSBzd2lwZXIucGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9IDogZmFsc2U7XG4gICAgY29uc3QgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSA9IHN3aXBlci5wYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH0gOiB0cnVlO1xuICAgIHJldHVybiB7XG4gICAgICBwYXNzaXZlTGlzdGVuZXIsXG4gICAgICBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlXG4gICAgfTtcbiAgfVxuXG4gIC8vIEF0dGFjaC9EZXRhY2ggRXZlbnRzXG4gIGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgaWYgKHpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgIHpvb20uZW5hYmxlZCA9IHRydWU7XG4gICAgY29uc3Qge1xuICAgICAgcGFzc2l2ZUxpc3RlbmVyLFxuICAgICAgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZVxuICAgIH0gPSBnZXRMaXN0ZW5lcnMoKTtcblxuICAgIC8vIFNjYWxlIGltYWdlXG5cbiAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgb25HZXN0dXJlU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIG9uR2VzdHVyZUNoYW5nZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gICAgWydwb2ludGVydXAnLCAncG9pbnRlcmNhbmNlbCcsICdwb2ludGVyb3V0J10uZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgb25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH0pO1xuXG4gICAgLy8gTW92ZSBpbWFnZVxuICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvblRvdWNoTW92ZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gIH1cbiAgZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgaWYgKCF6b29tLmVuYWJsZWQpIHJldHVybjtcbiAgICB6b29tLmVuYWJsZWQgPSBmYWxzZTtcbiAgICBjb25zdCB7XG4gICAgICBwYXNzaXZlTGlzdGVuZXIsXG4gICAgICBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlXG4gICAgfSA9IGdldExpc3RlbmVycygpO1xuXG4gICAgLy8gU2NhbGUgaW1hZ2VcbiAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgb25HZXN0dXJlU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIG9uR2VzdHVyZUNoYW5nZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gICAgWydwb2ludGVydXAnLCAncG9pbnRlcmNhbmNlbCcsICdwb2ludGVyb3V0J10uZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgb25HZXN0dXJlRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH0pO1xuXG4gICAgLy8gTW92ZSBpbWFnZVxuICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvblRvdWNoTW92ZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gIH1cbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkKSB7XG4gICAgICBlbmFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBkaXNhYmxlKCk7XG4gIH0pO1xuICBvbigndG91Y2hTdGFydCcsIChfcywgZSkgPT4ge1xuICAgIGlmICghc3dpcGVyLnpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgIG9uVG91Y2hTdGFydChlKTtcbiAgfSk7XG4gIG9uKCd0b3VjaEVuZCcsIChfcywgZSkgPT4ge1xuICAgIGlmICghc3dpcGVyLnpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgIG9uVG91Y2hFbmQoZSk7XG4gIH0pO1xuICBvbignZG91YmxlVGFwJywgKF9zLCBlKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nICYmIHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkICYmIHN3aXBlci56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy56b29tLnRvZ2dsZSkge1xuICAgICAgem9vbVRvZ2dsZShlKTtcbiAgICB9XG4gIH0pO1xuICBvbigndHJhbnNpdGlvbkVuZCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCkge1xuICAgICAgb25UcmFuc2l0aW9uRW5kKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3NsaWRlQ2hhbmdlJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgb25UcmFuc2l0aW9uRW5kKCk7XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIuem9vbSwge1xuICAgIGVuYWJsZSxcbiAgICBkaXNhYmxlLFxuICAgIGluOiB6b29tSW4sXG4gICAgb3V0OiB6b29tT3V0LFxuICAgIHRvZ2dsZTogem9vbVRvZ2dsZVxuICB9KTtcbn0iLCIvKiBlc2xpbnQgbm8tYml0d2lzZTogW1wiZXJyb3JcIiwgeyBcImFsbG93XCI6IFtcIj4+XCJdIH1dICovXG5pbXBvcnQgeyBlbGVtZW50VHJhbnNpdGlvbkVuZCwgbmV4dFRpY2sgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQ29udHJvbGxlcih7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvblxufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGNvbnRyb2xsZXI6IHtcbiAgICAgIGNvbnRyb2w6IHVuZGVmaW5lZCxcbiAgICAgIGludmVyc2U6IGZhbHNlLFxuICAgICAgYnk6ICdzbGlkZScgLy8gb3IgJ2NvbnRhaW5lcidcbiAgICB9XG4gIH0pO1xuXG4gIHN3aXBlci5jb250cm9sbGVyID0ge1xuICAgIGNvbnRyb2w6IHVuZGVmaW5lZFxuICB9O1xuICBmdW5jdGlvbiBMaW5lYXJTcGxpbmUoeCwgeSkge1xuICAgIGNvbnN0IGJpbmFyeVNlYXJjaCA9IGZ1bmN0aW9uIHNlYXJjaCgpIHtcbiAgICAgIGxldCBtYXhJbmRleDtcbiAgICAgIGxldCBtaW5JbmRleDtcbiAgICAgIGxldCBndWVzcztcbiAgICAgIHJldHVybiAoYXJyYXksIHZhbCkgPT4ge1xuICAgICAgICBtaW5JbmRleCA9IC0xO1xuICAgICAgICBtYXhJbmRleCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKG1heEluZGV4IC0gbWluSW5kZXggPiAxKSB7XG4gICAgICAgICAgZ3Vlc3MgPSBtYXhJbmRleCArIG1pbkluZGV4ID4+IDE7XG4gICAgICAgICAgaWYgKGFycmF5W2d1ZXNzXSA8PSB2YWwpIHtcbiAgICAgICAgICAgIG1pbkluZGV4ID0gZ3Vlc3M7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1heEluZGV4ID0gZ3Vlc3M7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXhJbmRleDtcbiAgICAgIH07XG4gICAgfSgpO1xuICAgIHRoaXMueCA9IHg7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLmxhc3RJbmRleCA9IHgubGVuZ3RoIC0gMTtcbiAgICAvLyBHaXZlbiBhbiB4IHZhbHVlICh4MiksIHJldHVybiB0aGUgZXhwZWN0ZWQgeTIgdmFsdWU6XG4gICAgLy8gKHgxLHkxKSBpcyB0aGUga25vd24gcG9pbnQgYmVmb3JlIGdpdmVuIHZhbHVlLFxuICAgIC8vICh4Myx5MykgaXMgdGhlIGtub3duIHBvaW50IGFmdGVyIGdpdmVuIHZhbHVlLlxuICAgIGxldCBpMTtcbiAgICBsZXQgaTM7XG4gICAgdGhpcy5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKHgyKSB7XG4gICAgICBpZiAoIXgyKSByZXR1cm4gMDtcblxuICAgICAgLy8gR2V0IHRoZSBpbmRleGVzIG9mIHgxIGFuZCB4MyAodGhlIGFycmF5IGluZGV4ZXMgYmVmb3JlIGFuZCBhZnRlciBnaXZlbiB4Mik6XG4gICAgICBpMyA9IGJpbmFyeVNlYXJjaCh0aGlzLngsIHgyKTtcbiAgICAgIGkxID0gaTMgLSAxO1xuXG4gICAgICAvLyBXZSBoYXZlIG91ciBpbmRleGVzIGkxICYgaTMsIHNvIHdlIGNhbiBjYWxjdWxhdGUgYWxyZWFkeTpcbiAgICAgIC8vIHkyIDo9ICgoeDLiiJJ4MSkgw5cgKHkz4oiSeTEpKSDDtyAoeDPiiJJ4MSkgKyB5MVxuICAgICAgcmV0dXJuICh4MiAtIHRoaXMueFtpMV0pICogKHRoaXMueVtpM10gLSB0aGlzLnlbaTFdKSAvICh0aGlzLnhbaTNdIC0gdGhpcy54W2kxXSkgKyB0aGlzLnlbaTFdO1xuICAgIH07XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLy8geHh4OiBmb3Igbm93IGkgd2lsbCBqdXN0IHNhdmUgb25lIHNwbGluZSBmdW5jdGlvbiB0byB0b1xuICBmdW5jdGlvbiBnZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gc3dpcGVyLnBhcmFtcy5sb29wID8gbmV3IExpbmVhclNwbGluZShzd2lwZXIuc2xpZGVzR3JpZCwgYy5zbGlkZXNHcmlkKSA6IG5ldyBMaW5lYXJTcGxpbmUoc3dpcGVyLnNuYXBHcmlkLCBjLnNuYXBHcmlkKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc2V0VHJhbnNsYXRlKF90LCBieUNvbnRyb2xsZXIpIHtcbiAgICBjb25zdCBjb250cm9sbGVkID0gc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbDtcbiAgICBsZXQgbXVsdGlwbGllcjtcbiAgICBsZXQgY29udHJvbGxlZFRyYW5zbGF0ZTtcbiAgICBjb25zdCBTd2lwZXIgPSBzd2lwZXIuY29uc3RydWN0b3I7XG4gICAgZnVuY3Rpb24gc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjKSB7XG4gICAgICAvLyB0aGlzIHdpbGwgY3JlYXRlIGFuIEludGVycG9sYXRlIGZ1bmN0aW9uIGJhc2VkIG9uIHRoZSBzbmFwR3JpZHNcbiAgICAgIC8vIHggaXMgdGhlIEdyaWQgb2YgdGhlIHNjcm9sbGVkIHNjcm9sbGVyIGFuZCB5IHdpbGwgYmUgdGhlIGNvbnRyb2xsZWQgc2Nyb2xsZXJcbiAgICAgIC8vIGl0IG1ha2VzIHNlbnNlIHRvIGNyZWF0ZSB0aGlzIG9ubHkgb25jZSBhbmQgcmVjYWxsIGl0IGZvciB0aGUgaW50ZXJwb2xhdGlvblxuICAgICAgLy8gdGhlIGZ1bmN0aW9uIGRvZXMgYSBsb3Qgb2YgdmFsdWUgY2FjaGluZyBmb3IgcGVyZm9ybWFuY2VcbiAgICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmJ5ID09PSAnc2xpZGUnKSB7XG4gICAgICAgIGdldEludGVycG9sYXRlRnVuY3Rpb24oYyk7XG4gICAgICAgIC8vIGkgYW0gbm90IHN1cmUgd2h5IHRoZSB2YWx1ZXMgaGF2ZSB0byBiZSBtdWx0aXBsaWNhdGVkIHRoaXMgd2F5LCB0cmllZCB0byBpbnZlcnQgdGhlIHNuYXBHcmlkXG4gICAgICAgIC8vIGJ1dCBpdCBkaWQgbm90IHdvcmsgb3V0XG4gICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSAtc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lLmludGVycG9sYXRlKC10cmFuc2xhdGUpO1xuICAgICAgfVxuICAgICAgaWYgKCFjb250cm9sbGVkVHJhbnNsYXRlIHx8IHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5ieSA9PT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgICAgbXVsdGlwbGllciA9IChjLm1heFRyYW5zbGF0ZSgpIC0gYy5taW5UcmFuc2xhdGUoKSkgLyAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKTtcbiAgICAgICAgY29udHJvbGxlZFRyYW5zbGF0ZSA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpICogbXVsdGlwbGllciArIGMubWluVHJhbnNsYXRlKCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmludmVyc2UpIHtcbiAgICAgICAgY29udHJvbGxlZFRyYW5zbGF0ZSA9IGMubWF4VHJhbnNsYXRlKCkgLSBjb250cm9sbGVkVHJhbnNsYXRlO1xuICAgICAgfVxuICAgICAgYy51cGRhdGVQcm9ncmVzcyhjb250cm9sbGVkVHJhbnNsYXRlKTtcbiAgICAgIGMuc2V0VHJhbnNsYXRlKGNvbnRyb2xsZWRUcmFuc2xhdGUsIHN3aXBlcik7XG4gICAgICBjLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBjLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29udHJvbGxlZCkpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udHJvbGxlZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoY29udHJvbGxlZFtpXSAhPT0gYnlDb250cm9sbGVyICYmIGNvbnRyb2xsZWRbaV0gaW5zdGFuY2VvZiBTd2lwZXIpIHtcbiAgICAgICAgICBzZXRDb250cm9sbGVkVHJhbnNsYXRlKGNvbnRyb2xsZWRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb250cm9sbGVkIGluc3RhbmNlb2YgU3dpcGVyICYmIGJ5Q29udHJvbGxlciAhPT0gY29udHJvbGxlZCkge1xuICAgICAgc2V0Q29udHJvbGxlZFRyYW5zbGF0ZShjb250cm9sbGVkKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gICAgY29uc3QgU3dpcGVyID0gc3dpcGVyLmNvbnN0cnVjdG9yO1xuICAgIGNvbnN0IGNvbnRyb2xsZWQgPSBzd2lwZXIuY29udHJvbGxlci5jb250cm9sO1xuICAgIGxldCBpO1xuICAgIGZ1bmN0aW9uIHNldENvbnRyb2xsZWRUcmFuc2l0aW9uKGMpIHtcbiAgICAgIGMuc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgc3dpcGVyKTtcbiAgICAgIGlmIChkdXJhdGlvbiAhPT0gMCkge1xuICAgICAgICBjLnRyYW5zaXRpb25TdGFydCgpO1xuICAgICAgICBpZiAoYy5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgIGMudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnRUcmFuc2l0aW9uRW5kKGMud3JhcHBlckVsLCAoKSA9PiB7XG4gICAgICAgICAgaWYgKCFjb250cm9sbGVkKSByZXR1cm47XG4gICAgICAgICAgYy50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNvbnRyb2xsZWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGNvbnRyb2xsZWRbaV0gIT09IGJ5Q29udHJvbGxlciAmJiBjb250cm9sbGVkW2ldIGluc3RhbmNlb2YgU3dpcGVyKSB7XG4gICAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oY29udHJvbGxlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7XG4gICAgICBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjb250cm9sbGVkKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcmVtb3ZlU3BsaW5lKCkge1xuICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHVuZGVmaW5lZDtcbiAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7XG4gICAgfVxuICB9XG4gIG9uKCdiZWZvcmVJbml0JywgKCkgPT4ge1xuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHR5cGVvZiBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbCA9PT0gJ3N0cmluZycgfHwgc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmNvbnRyb2wgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkpIHtcbiAgICAgIGNvbnN0IGNvbnRyb2xFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbCk7XG4gICAgICBpZiAoY29udHJvbEVsZW1lbnQgJiYgY29udHJvbEVsZW1lbnQuc3dpcGVyKSB7XG4gICAgICAgIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wgPSBjb250cm9sRWxlbWVudC5zd2lwZXI7XG4gICAgICB9IGVsc2UgaWYgKGNvbnRyb2xFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IG9uQ29udHJvbGxlclN3aXBlciA9IGUgPT4ge1xuICAgICAgICAgIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wgPSBlLmRldGFpbFswXTtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlKCk7XG4gICAgICAgICAgY29udHJvbEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5pdCcsIG9uQ29udHJvbGxlclN3aXBlcik7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnRyb2xFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2luaXQnLCBvbkNvbnRyb2xsZXJTd2lwZXIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZXIuY29udHJvbGxlci5jb250cm9sID0gc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmNvbnRyb2w7XG4gIH0pO1xuICBvbigndXBkYXRlJywgKCkgPT4ge1xuICAgIHJlbW92ZVNwbGluZSgpO1xuICB9KTtcbiAgb24oJ3Jlc2l6ZScsICgpID0+IHtcbiAgICByZW1vdmVTcGxpbmUoKTtcbiAgfSk7XG4gIG9uKCdvYnNlcnZlclVwZGF0ZScsICgpID0+IHtcbiAgICByZW1vdmVTcGxpbmUoKTtcbiAgfSk7XG4gIG9uKCdzZXRUcmFuc2xhdGUnLCAoX3MsIHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSByZXR1cm47XG4gICAgc3dpcGVyLmNvbnRyb2xsZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKTtcbiAgfSk7XG4gIG9uKCdzZXRUcmFuc2l0aW9uJywgKF9zLCBkdXJhdGlvbiwgYnlDb250cm9sbGVyKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSByZXR1cm47XG4gICAgc3dpcGVyLmNvbnRyb2xsZXIuc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKTtcbiAgfSk7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLmNvbnRyb2xsZXIsIHtcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgc2V0VHJhbnNpdGlvblxuICB9KTtcbn0iLCJpbXBvcnQgY2xhc3Nlc1RvU2VsZWN0b3IgZnJvbSAnLi4vLi4vc2hhcmVkL2NsYXNzZXMtdG8tc2VsZWN0b3IuanMnO1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgZWxlbWVudEluZGV4IH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEExMXkoe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtcyxcbiAgb25cbn0pIHtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBhMTF5OiB7XG4gICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgbm90aWZpY2F0aW9uQ2xhc3M6ICdzd2lwZXItbm90aWZpY2F0aW9uJyxcbiAgICAgIHByZXZTbGlkZU1lc3NhZ2U6ICdQcmV2aW91cyBzbGlkZScsXG4gICAgICBuZXh0U2xpZGVNZXNzYWdlOiAnTmV4dCBzbGlkZScsXG4gICAgICBmaXJzdFNsaWRlTWVzc2FnZTogJ1RoaXMgaXMgdGhlIGZpcnN0IHNsaWRlJyxcbiAgICAgIGxhc3RTbGlkZU1lc3NhZ2U6ICdUaGlzIGlzIHRoZSBsYXN0IHNsaWRlJyxcbiAgICAgIHBhZ2luYXRpb25CdWxsZXRNZXNzYWdlOiAnR28gdG8gc2xpZGUge3tpbmRleH19JyxcbiAgICAgIHNsaWRlTGFiZWxNZXNzYWdlOiAne3tpbmRleH19IC8ge3tzbGlkZXNMZW5ndGh9fScsXG4gICAgICBjb250YWluZXJNZXNzYWdlOiBudWxsLFxuICAgICAgY29udGFpbmVyUm9sZURlc2NyaXB0aW9uTWVzc2FnZTogbnVsbCxcbiAgICAgIGl0ZW1Sb2xlRGVzY3JpcHRpb25NZXNzYWdlOiBudWxsLFxuICAgICAgc2xpZGVSb2xlOiAnZ3JvdXAnLFxuICAgICAgaWQ6IG51bGxcbiAgICB9XG4gIH0pO1xuICBzd2lwZXIuYTExeSA9IHtcbiAgICBjbGlja2VkOiBmYWxzZVxuICB9O1xuICBsZXQgbGl2ZVJlZ2lvbiA9IG51bGw7XG4gIGZ1bmN0aW9uIG5vdGlmeShtZXNzYWdlKSB7XG4gICAgY29uc3Qgbm90aWZpY2F0aW9uID0gbGl2ZVJlZ2lvbjtcbiAgICBpZiAobm90aWZpY2F0aW9uLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIG5vdGlmaWNhdGlvbi5pbm5lckhUTUwgPSAnJztcbiAgICBub3RpZmljYXRpb24uaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgfVxuICBjb25zdCBtYWtlRWxlbWVudHNBcnJheSA9IGVsID0+IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZWwpKSBlbCA9IFtlbF0uZmlsdGVyKGUgPT4gISFlKTtcbiAgICByZXR1cm4gZWw7XG4gIH07XG4gIGZ1bmN0aW9uIGdldFJhbmRvbU51bWJlcihzaXplID0gMTYpIHtcbiAgICBjb25zdCByYW5kb21DaGFyID0gKCkgPT4gTWF0aC5yb3VuZCgxNiAqIE1hdGgucmFuZG9tKCkpLnRvU3RyaW5nKDE2KTtcbiAgICByZXR1cm4gJ3gnLnJlcGVhdChzaXplKS5yZXBsYWNlKC94L2csIHJhbmRvbUNoYXIpO1xuICB9XG4gIGZ1bmN0aW9uIG1ha2VFbEZvY3VzYWJsZShlbCkge1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCd0YWJJbmRleCcsICcwJyk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gbWFrZUVsTm90Rm9jdXNhYmxlKGVsKSB7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ3RhYkluZGV4JywgJy0xJyk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYWRkRWxSb2xlKGVsLCByb2xlKSB7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCByb2xlKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBhZGRFbFJvbGVEZXNjcmlwdGlvbihlbCwgZGVzY3JpcHRpb24pIHtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgnYXJpYS1yb2xlZGVzY3JpcHRpb24nLCBkZXNjcmlwdGlvbik7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYWRkRWxDb250cm9scyhlbCwgY29udHJvbHMpIHtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgnYXJpYS1jb250cm9scycsIGNvbnRyb2xzKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBhZGRFbExhYmVsKGVsLCBsYWJlbCkge1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgbGFiZWwpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGFkZEVsSWQoZWwsIGlkKSB7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGFkZEVsTGl2ZShlbCwgbGl2ZSkge1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCdhcmlhLWxpdmUnLCBsaXZlKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBkaXNhYmxlRWwoZWwpIHtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcsIHRydWUpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGVuYWJsZUVsKGVsKSB7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnLCBmYWxzZSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gb25FbnRlck9yU3BhY2VLZXkoZSkge1xuICAgIGlmIChlLmtleUNvZGUgIT09IDEzICYmIGUua2V5Q29kZSAhPT0gMzIpIHJldHVybjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG4gICAgY29uc3QgdGFyZ2V0RWwgPSBlLnRhcmdldDtcbiAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhZ2luYXRpb24uZWwgJiYgKHRhcmdldEVsID09PSBzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCBzd2lwZXIucGFnaW5hdGlvbi5lbC5jb250YWlucyhlLnRhcmdldCkpKSB7XG4gICAgICBpZiAoIWUudGFyZ2V0Lm1hdGNoZXMoY2xhc3Nlc1RvU2VsZWN0b3Ioc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSkpIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCAmJiB0YXJnZXRFbCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsKSB7XG4gICAgICBpZiAoIShzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICBub3RpZnkocGFyYW1zLmxhc3RTbGlkZU1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm90aWZ5KHBhcmFtcy5uZXh0U2xpZGVNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCAmJiB0YXJnZXRFbCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKSB7XG4gICAgICBpZiAoIShzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICBub3RpZnkocGFyYW1zLmZpcnN0U2xpZGVNZXNzYWdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vdGlmeShwYXJhbXMucHJldlNsaWRlTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiB0YXJnZXRFbC5tYXRjaGVzKGNsYXNzZXNUb1NlbGVjdG9yKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpKSB7XG4gICAgICB0YXJnZXRFbC5jbGljaygpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVOYXZpZ2F0aW9uKCkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgfHwgc3dpcGVyLnBhcmFtcy5yZXdpbmQgfHwgIXN3aXBlci5uYXZpZ2F0aW9uKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgZGlzYWJsZUVsKHByZXZFbCk7XG4gICAgICAgIG1ha2VFbE5vdEZvY3VzYWJsZShwcmV2RWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5hYmxlRWwocHJldkVsKTtcbiAgICAgICAgbWFrZUVsRm9jdXNhYmxlKHByZXZFbCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChuZXh0RWwpIHtcbiAgICAgIGlmIChzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgZGlzYWJsZUVsKG5leHRFbCk7XG4gICAgICAgIG1ha2VFbE5vdEZvY3VzYWJsZShuZXh0RWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5hYmxlRWwobmV4dEVsKTtcbiAgICAgICAgbWFrZUVsRm9jdXNhYmxlKG5leHRFbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGhhc1BhZ2luYXRpb24oKSB7XG4gICAgcmV0dXJuIHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGg7XG4gIH1cbiAgZnVuY3Rpb24gaGFzQ2xpY2thYmxlUGFnaW5hdGlvbigpIHtcbiAgICByZXR1cm4gaGFzUGFnaW5hdGlvbigpICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGU7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlUGFnaW5hdGlvbigpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG4gICAgaWYgKCFoYXNQYWdpbmF0aW9uKCkpIHJldHVybjtcbiAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmZvckVhY2goYnVsbGV0RWwgPT4ge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUpIHtcbiAgICAgICAgbWFrZUVsRm9jdXNhYmxlKGJ1bGxldEVsKTtcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucmVuZGVyQnVsbGV0KSB7XG4gICAgICAgICAgYWRkRWxSb2xlKGJ1bGxldEVsLCAnYnV0dG9uJyk7XG4gICAgICAgICAgYWRkRWxMYWJlbChidWxsZXRFbCwgcGFyYW1zLnBhZ2luYXRpb25CdWxsZXRNZXNzYWdlLnJlcGxhY2UoL1xce1xce2luZGV4XFx9XFx9LywgZWxlbWVudEluZGV4KGJ1bGxldEVsKSArIDEpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGJ1bGxldEVsLm1hdGNoZXMoYC4ke3N3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRBY3RpdmVDbGFzc31gKSkge1xuICAgICAgICBidWxsZXRFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtY3VycmVudCcsICd0cnVlJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBidWxsZXRFbC5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtY3VycmVudCcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGNvbnN0IGluaXROYXZFbCA9IChlbCwgd3JhcHBlcklkLCBtZXNzYWdlKSA9PiB7XG4gICAgbWFrZUVsRm9jdXNhYmxlKGVsKTtcbiAgICBpZiAoZWwudGFnTmFtZSAhPT0gJ0JVVFRPTicpIHtcbiAgICAgIGFkZEVsUm9sZShlbCwgJ2J1dHRvbicpO1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uRW50ZXJPclNwYWNlS2V5KTtcbiAgICB9XG4gICAgYWRkRWxMYWJlbChlbCwgbWVzc2FnZSk7XG4gICAgYWRkRWxDb250cm9scyhlbCwgd3JhcHBlcklkKTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlUG9pbnRlckRvd24gPSAoKSA9PiB7XG4gICAgc3dpcGVyLmExMXkuY2xpY2tlZCA9IHRydWU7XG4gIH07XG4gIGNvbnN0IGhhbmRsZVBvaW50ZXJVcCA9ICgpID0+IHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgaWYgKCFzd2lwZXIuZGVzdHJveWVkKSB7XG4gICAgICAgICAgc3dpcGVyLmExMXkuY2xpY2tlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlRm9jdXMgPSBlID0+IHtcbiAgICBpZiAoc3dpcGVyLmExMXkuY2xpY2tlZCkgcmV0dXJuO1xuICAgIGNvbnN0IHNsaWRlRWwgPSBlLnRhcmdldC5jbG9zZXN0KGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgICBpZiAoIXNsaWRlRWwgfHwgIXN3aXBlci5zbGlkZXMuaW5jbHVkZXMoc2xpZGVFbCkpIHJldHVybjtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IHN3aXBlci5zbGlkZXMuaW5kZXhPZihzbGlkZUVsKSA9PT0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIGNvbnN0IGlzVmlzaWJsZSA9IHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyAmJiBzd2lwZXIudmlzaWJsZVNsaWRlcyAmJiBzd2lwZXIudmlzaWJsZVNsaWRlcy5pbmNsdWRlcyhzbGlkZUVsKTtcbiAgICBpZiAoaXNBY3RpdmUgfHwgaXNWaXNpYmxlKSByZXR1cm47XG4gICAgaWYgKGUuc291cmNlQ2FwYWJpbGl0aWVzICYmIGUuc291cmNlQ2FwYWJpbGl0aWVzLmZpcmVzVG91Y2hFdmVudHMpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBzd2lwZXIuZWwuc2Nyb2xsTGVmdCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbC5zY3JvbGxUb3AgPSAwO1xuICAgIH1cbiAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmluZGV4T2Yoc2xpZGVFbCksIDApO1xuICB9O1xuICBjb25zdCBpbml0U2xpZGVzID0gKCkgPT4ge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICBpZiAocGFyYW1zLml0ZW1Sb2xlRGVzY3JpcHRpb25NZXNzYWdlKSB7XG4gICAgICBhZGRFbFJvbGVEZXNjcmlwdGlvbihzd2lwZXIuc2xpZGVzLCBwYXJhbXMuaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnNsaWRlUm9sZSkge1xuICAgICAgYWRkRWxSb2xlKHN3aXBlci5zbGlkZXMsIHBhcmFtcy5zbGlkZVJvbGUpO1xuICAgIH1cbiAgICBjb25zdCBzbGlkZXNMZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICBpZiAocGFyYW1zLnNsaWRlTGFiZWxNZXNzYWdlKSB7XG4gICAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goKHNsaWRlRWwsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHNsaWRlSW5kZXggPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBwYXJzZUludChzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApIDogaW5kZXg7XG4gICAgICAgIGNvbnN0IGFyaWFMYWJlbE1lc3NhZ2UgPSBwYXJhbXMuc2xpZGVMYWJlbE1lc3NhZ2UucmVwbGFjZSgvXFx7XFx7aW5kZXhcXH1cXH0vLCBzbGlkZUluZGV4ICsgMSkucmVwbGFjZSgvXFx7XFx7c2xpZGVzTGVuZ3RoXFx9XFx9Lywgc2xpZGVzTGVuZ3RoKTtcbiAgICAgICAgYWRkRWxMYWJlbChzbGlkZUVsLCBhcmlhTGFiZWxNZXNzYWdlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG4gICAgc3dpcGVyLmVsLmFwcGVuZChsaXZlUmVnaW9uKTtcblxuICAgIC8vIENvbnRhaW5lclxuICAgIGNvbnN0IGNvbnRhaW5lckVsID0gc3dpcGVyLmVsO1xuICAgIGlmIChwYXJhbXMuY29udGFpbmVyUm9sZURlc2NyaXB0aW9uTWVzc2FnZSkge1xuICAgICAgYWRkRWxSb2xlRGVzY3JpcHRpb24oY29udGFpbmVyRWwsIHBhcmFtcy5jb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5jb250YWluZXJNZXNzYWdlKSB7XG4gICAgICBhZGRFbExhYmVsKGNvbnRhaW5lckVsLCBwYXJhbXMuY29udGFpbmVyTWVzc2FnZSk7XG4gICAgfVxuXG4gICAgLy8gV3JhcHBlclxuICAgIGNvbnN0IHdyYXBwZXJFbCA9IHN3aXBlci53cmFwcGVyRWw7XG4gICAgY29uc3Qgd3JhcHBlcklkID0gcGFyYW1zLmlkIHx8IHdyYXBwZXJFbC5nZXRBdHRyaWJ1dGUoJ2lkJykgfHwgYHN3aXBlci13cmFwcGVyLSR7Z2V0UmFuZG9tTnVtYmVyKDE2KX1gO1xuICAgIGNvbnN0IGxpdmUgPSBzd2lwZXIucGFyYW1zLmF1dG9wbGF5ICYmIHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZW5hYmxlZCA/ICdvZmYnIDogJ3BvbGl0ZSc7XG4gICAgYWRkRWxJZCh3cmFwcGVyRWwsIHdyYXBwZXJJZCk7XG4gICAgYWRkRWxMaXZlKHdyYXBwZXJFbCwgbGl2ZSk7XG5cbiAgICAvLyBTbGlkZVxuICAgIGluaXRTbGlkZXMoKTtcblxuICAgIC8vIE5hdmlnYXRpb25cbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uID8gc3dpcGVyLm5hdmlnYXRpb24gOiB7fTtcbiAgICBuZXh0RWwgPSBtYWtlRWxlbWVudHNBcnJheShuZXh0RWwpO1xuICAgIHByZXZFbCA9IG1ha2VFbGVtZW50c0FycmF5KHByZXZFbCk7XG4gICAgaWYgKG5leHRFbCkge1xuICAgICAgbmV4dEVsLmZvckVhY2goZWwgPT4gaW5pdE5hdkVsKGVsLCB3cmFwcGVySWQsIHBhcmFtcy5uZXh0U2xpZGVNZXNzYWdlKSk7XG4gICAgfVxuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIHByZXZFbC5mb3JFYWNoKGVsID0+IGluaXROYXZFbChlbCwgd3JhcHBlcklkLCBwYXJhbXMucHJldlNsaWRlTWVzc2FnZSkpO1xuICAgIH1cblxuICAgIC8vIFBhZ2luYXRpb25cbiAgICBpZiAoaGFzQ2xpY2thYmxlUGFnaW5hdGlvbigpKSB7XG4gICAgICBjb25zdCBwYWdpbmF0aW9uRWwgPSBBcnJheS5pc0FycmF5KHN3aXBlci5wYWdpbmF0aW9uLmVsKSA/IHN3aXBlci5wYWdpbmF0aW9uLmVsIDogW3N3aXBlci5wYWdpbmF0aW9uLmVsXTtcbiAgICAgIHBhZ2luYXRpb25FbC5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uRW50ZXJPclNwYWNlS2V5KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFRhYiBmb2N1c1xuICAgIHN3aXBlci5lbC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGhhbmRsZUZvY3VzLCB0cnVlKTtcbiAgICBzd2lwZXIuZWwuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmRvd24nLCBoYW5kbGVQb2ludGVyRG93biwgdHJ1ZSk7XG4gICAgc3dpcGVyLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJ1cCcsIGhhbmRsZVBvaW50ZXJVcCwgdHJ1ZSk7XG4gIH07XG4gIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgaWYgKGxpdmVSZWdpb24gJiYgbGl2ZVJlZ2lvbi5sZW5ndGggPiAwKSBsaXZlUmVnaW9uLnJlbW92ZSgpO1xuICAgIGxldCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb24gPyBzd2lwZXIubmF2aWdhdGlvbiA6IHt9O1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBpZiAobmV4dEVsKSB7XG4gICAgICBuZXh0RWwuZm9yRWFjaChlbCA9PiBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25FbnRlck9yU3BhY2VLZXkpKTtcbiAgICB9XG4gICAgaWYgKHByZXZFbCkge1xuICAgICAgcHJldkVsLmZvckVhY2goZWwgPT4gZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uRW50ZXJPclNwYWNlS2V5KSk7XG4gICAgfVxuXG4gICAgLy8gUGFnaW5hdGlvblxuICAgIGlmIChoYXNDbGlja2FibGVQYWdpbmF0aW9uKCkpIHtcbiAgICAgIGNvbnN0IHBhZ2luYXRpb25FbCA9IEFycmF5LmlzQXJyYXkoc3dpcGVyLnBhZ2luYXRpb24uZWwpID8gc3dpcGVyLnBhZ2luYXRpb24uZWwgOiBbc3dpcGVyLnBhZ2luYXRpb24uZWxdO1xuICAgICAgcGFnaW5hdGlvbkVsLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25FbnRlck9yU3BhY2VLZXkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVGFiIGZvY3VzXG4gICAgc3dpcGVyLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgaGFuZGxlRm9jdXMsIHRydWUpO1xuICAgIHN3aXBlci5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgICBzd2lwZXIuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgaGFuZGxlUG9pbnRlclVwLCB0cnVlKTtcbiAgfVxuICBvbignYmVmb3JlSW5pdCcsICgpID0+IHtcbiAgICBsaXZlUmVnaW9uID0gY3JlYXRlRWxlbWVudCgnc3BhbicsIHN3aXBlci5wYXJhbXMuYTExeS5ub3RpZmljYXRpb25DbGFzcyk7XG4gICAgbGl2ZVJlZ2lvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsICdhc3NlcnRpdmUnKTtcbiAgICBsaXZlUmVnaW9uLnNldEF0dHJpYnV0ZSgnYXJpYS1hdG9taWMnLCAndHJ1ZScpO1xuICAgIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBsaXZlUmVnaW9uLnNldEF0dHJpYnV0ZSgnc2xvdCcsICdjb250YWluZXItZW5kJyk7XG4gICAgfVxuICB9KTtcbiAgb24oJ2FmdGVySW5pdCcsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgaW5pdCgpO1xuICB9KTtcbiAgb24oJ3NsaWRlc0xlbmd0aENoYW5nZSBzbmFwR3JpZExlbmd0aENoYW5nZSBzbGlkZXNHcmlkTGVuZ3RoQ2hhbmdlJywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICBpbml0U2xpZGVzKCk7XG4gIH0pO1xuICBvbignZnJvbUVkZ2UgdG9FZGdlIGFmdGVySW5pdCBsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgdXBkYXRlTmF2aWdhdGlvbigpO1xuICB9KTtcbiAgb24oJ3BhZ2luYXRpb25VcGRhdGUnLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHVwZGF0ZVBhZ2luYXRpb24oKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICBkZXN0cm95KCk7XG4gIH0pO1xufSIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSGlzdG9yeSh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvblxufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGhpc3Rvcnk6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgcm9vdDogJycsXG4gICAgICByZXBsYWNlU3RhdGU6IGZhbHNlLFxuICAgICAga2V5OiAnc2xpZGVzJyxcbiAgICAgIGtlZXBRdWVyeTogZmFsc2VcbiAgICB9XG4gIH0pO1xuICBsZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgbGV0IHBhdGhzID0ge307XG4gIGNvbnN0IHNsdWdpZnkgPSB0ZXh0ID0+IHtcbiAgICByZXR1cm4gdGV4dC50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZywgJy0nKS5yZXBsYWNlKC9bXlxcdy1dKy9nLCAnJykucmVwbGFjZSgvLS0rL2csICctJykucmVwbGFjZSgvXi0rLywgJycpLnJlcGxhY2UoLy0rJC8sICcnKTtcbiAgfTtcbiAgY29uc3QgZ2V0UGF0aFZhbHVlcyA9IHVybE92ZXJyaWRlID0+IHtcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBsZXQgbG9jYXRpb247XG4gICAgaWYgKHVybE92ZXJyaWRlKSB7XG4gICAgICBsb2NhdGlvbiA9IG5ldyBVUkwodXJsT3ZlcnJpZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICB9XG4gICAgY29uc3QgcGF0aEFycmF5ID0gbG9jYXRpb24ucGF0aG5hbWUuc2xpY2UoMSkuc3BsaXQoJy8nKS5maWx0ZXIocGFydCA9PiBwYXJ0ICE9PSAnJyk7XG4gICAgY29uc3QgdG90YWwgPSBwYXRoQXJyYXkubGVuZ3RoO1xuICAgIGNvbnN0IGtleSA9IHBhdGhBcnJheVt0b3RhbCAtIDJdO1xuICAgIGNvbnN0IHZhbHVlID0gcGF0aEFycmF5W3RvdGFsIC0gMV07XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleSxcbiAgICAgIHZhbHVlXG4gICAgfTtcbiAgfTtcbiAgY29uc3Qgc2V0SGlzdG9yeSA9IChrZXksIGluZGV4KSA9PiB7XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgaWYgKCFpbml0aWFsaXplZCB8fCAhc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHJldHVybjtcbiAgICBsZXQgbG9jYXRpb247XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudXJsKSB7XG4gICAgICBsb2NhdGlvbiA9IG5ldyBVUkwoc3dpcGVyLnBhcmFtcy51cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICB9XG4gICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzW2luZGV4XTtcbiAgICBsZXQgdmFsdWUgPSBzbHVnaWZ5KHNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1oaXN0b3J5JykpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3Rvcnkucm9vdC5sZW5ndGggPiAwKSB7XG4gICAgICBsZXQgcm9vdCA9IHN3aXBlci5wYXJhbXMuaGlzdG9yeS5yb290O1xuICAgICAgaWYgKHJvb3Rbcm9vdC5sZW5ndGggLSAxXSA9PT0gJy8nKSByb290ID0gcm9vdC5zbGljZSgwLCByb290Lmxlbmd0aCAtIDEpO1xuICAgICAgdmFsdWUgPSBgJHtyb290fS8ke2tleSA/IGAke2tleX0vYCA6ICcnfSR7dmFsdWV9YDtcbiAgICB9IGVsc2UgaWYgKCFsb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICB2YWx1ZSA9IGAke2tleSA/IGAke2tleX0vYCA6ICcnfSR7dmFsdWV9YDtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGlzdG9yeS5rZWVwUXVlcnkpIHtcbiAgICAgIHZhbHVlICs9IGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9XG4gICAgY29uc3QgY3VycmVudFN0YXRlID0gd2luZG93Lmhpc3Rvcnkuc3RhdGU7XG4gICAgaWYgKGN1cnJlbnRTdGF0ZSAmJiBjdXJyZW50U3RhdGUudmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICB2YWx1ZVxuICAgICAgfSwgbnVsbCwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICB2YWx1ZVxuICAgICAgfSwgbnVsbCwgdmFsdWUpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc2Nyb2xsVG9TbGlkZSA9IChzcGVlZCwgdmFsdWUsIHJ1bkNhbGxiYWNrcykgPT4ge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzW2ldO1xuICAgICAgICBjb25zdCBzbGlkZUhpc3RvcnkgPSBzbHVnaWZ5KHNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1oaXN0b3J5JykpO1xuICAgICAgICBpZiAoc2xpZGVIaXN0b3J5ID09PSB2YWx1ZSkge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXgoc2xpZGUpO1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbygwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHNldEhpc3RvcnlQb3BTdGF0ZSA9ICgpID0+IHtcbiAgICBwYXRocyA9IGdldFBhdGhWYWx1ZXMoc3dpcGVyLnBhcmFtcy51cmwpO1xuICAgIHNjcm9sbFRvU2xpZGUoc3dpcGVyLnBhcmFtcy5zcGVlZCwgcGF0aHMudmFsdWUsIGZhbHNlKTtcbiAgfTtcbiAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeSkgcmV0dXJuO1xuICAgIGlmICghd2luZG93Lmhpc3RvcnkgfHwgIXdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSkge1xuICAgICAgc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgIHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICBwYXRocyA9IGdldFBhdGhWYWx1ZXMoc3dpcGVyLnBhcmFtcy51cmwpO1xuICAgIGlmICghcGF0aHMua2V5ICYmICFwYXRocy52YWx1ZSkge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHNldEhpc3RvcnlQb3BTdGF0ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNjcm9sbFRvU2xpZGUoMCwgcGF0aHMudmFsdWUsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KTtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHNldEhpc3RvcnlQb3BTdGF0ZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBkZXN0cm95ID0gKCkgPT4ge1xuICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgc2V0SGlzdG9yeVBvcFN0YXRlKTtcbiAgICB9XG4gIH07XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkge1xuICAgICAgaW5pdCgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkge1xuICAgICAgZGVzdHJveSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCd0cmFuc2l0aW9uRW5kIF9mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlJywgKCkgPT4ge1xuICAgIGlmIChpbml0aWFsaXplZCkge1xuICAgICAgc2V0SGlzdG9yeShzd2lwZXIucGFyYW1zLmhpc3Rvcnkua2V5LCBzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdzbGlkZUNoYW5nZScsICgpID0+IHtcbiAgICBpZiAoaW5pdGlhbGl6ZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzZXRIaXN0b3J5KHN3aXBlci5wYXJhbXMuaGlzdG9yeS5rZXksIHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgfVxuICB9KTtcbn0iLCJpbXBvcnQgeyBnZXRXaW5kb3csIGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgeyBlbGVtZW50Q2hpbGRyZW4gfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSGFzaE5hdmlnYXRpb24oe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtcyxcbiAgZW1pdCxcbiAgb25cbn0pIHtcbiAgbGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgaGFzaE5hdmlnYXRpb246IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgcmVwbGFjZVN0YXRlOiBmYWxzZSxcbiAgICAgIHdhdGNoU3RhdGU6IGZhbHNlXG4gICAgfVxuICB9KTtcbiAgY29uc3Qgb25IYXNoQ2hhbmdlID0gKCkgPT4ge1xuICAgIGVtaXQoJ2hhc2hDaGFuZ2UnKTtcbiAgICBjb25zdCBuZXdIYXNoID0gZG9jdW1lbnQubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuICAgIGNvbnN0IGFjdGl2ZVNsaWRlSGFzaCA9IHN3aXBlci5zbGlkZXNbc3dpcGVyLmFjdGl2ZUluZGV4XS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGFzaCcpO1xuICAgIGlmIChuZXdIYXNoICE9PSBhY3RpdmVTbGlkZUhhc2gpIHtcbiAgICAgIGNvbnN0IG5ld0luZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXgoZWxlbWVudENoaWxkcmVuKHN3aXBlci5zbGlkZXNFbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1oYXNoPVwiJHtuZXdIYXNofVwiXSwgc3dpcGVyLXNsaWRlW2RhdGEtaGFzaD1cIiR7bmV3SGFzaH1cIl1gKVswXSk7XG4gICAgICBpZiAodHlwZW9mIG5ld0luZGV4ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc2V0SGFzaCA9ICgpID0+IHtcbiAgICBpZiAoIWluaXRpYWxpemVkIHx8ICFzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5yZXBsYWNlU3RhdGUgJiYgd2luZG93Lmhpc3RvcnkgJiYgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCwgbnVsbCwgYCMke3N3aXBlci5zbGlkZXNbc3dpcGVyLmFjdGl2ZUluZGV4XS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGFzaCcpfWAgfHwgJycpO1xuICAgICAgZW1pdCgnaGFzaFNldCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzbGlkZSA9IHN3aXBlci5zbGlkZXNbc3dpcGVyLmFjdGl2ZUluZGV4XTtcbiAgICAgIGNvbnN0IGhhc2ggPSBzbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGFzaCcpIHx8IHNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1oaXN0b3J5Jyk7XG4gICAgICBkb2N1bWVudC5sb2NhdGlvbi5oYXNoID0gaGFzaCB8fCAnJztcbiAgICAgIGVtaXQoJ2hhc2hTZXQnKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQgfHwgc3dpcGVyLnBhcmFtcy5oaXN0b3J5ICYmIHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSByZXR1cm47XG4gICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIGNvbnN0IGhhc2ggPSBkb2N1bWVudC5sb2NhdGlvbi5oYXNoLnJlcGxhY2UoJyMnLCAnJyk7XG4gICAgaWYgKGhhc2gpIHtcbiAgICAgIGNvbnN0IHNwZWVkID0gMDtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IHNsaWRlID0gc3dpcGVyLnNsaWRlc1tpXTtcbiAgICAgICAgY29uc3Qgc2xpZGVIYXNoID0gc2xpZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWhhc2gnKSB8fCBzbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGlzdG9yeScpO1xuICAgICAgICBpZiAoc2xpZGVIYXNoID09PSBoYXNoKSB7XG4gICAgICAgICAgY29uc3QgaW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleChzbGlkZSk7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ud2F0Y2hTdGF0ZSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCBvbkhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi53YXRjaFN0YXRlKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIG9uSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSB7XG4gICAgICBpbml0KCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCkge1xuICAgICAgZGVzdHJveSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCd0cmFuc2l0aW9uRW5kIF9mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlJywgKCkgPT4ge1xuICAgIGlmIChpbml0aWFsaXplZCkge1xuICAgICAgc2V0SGFzaCgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdzbGlkZUNoYW5nZScsICgpID0+IHtcbiAgICBpZiAoaW5pdGlhbGl6ZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzZXRIYXNoKCk7XG4gICAgfVxuICB9KTtcbn0iLCIvKiBlc2xpbnQgbm8tdW5kZXJzY29yZS1kYW5nbGU6IFwib2ZmXCIgKi9cbi8qIGVzbGludCBuby11c2UtYmVmb3JlLWRlZmluZTogXCJvZmZcIiAqL1xuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEF1dG9wbGF5KHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uLFxuICBlbWl0LFxuICBwYXJhbXNcbn0pIHtcbiAgc3dpcGVyLmF1dG9wbGF5ID0ge1xuICAgIHJ1bm5pbmc6IGZhbHNlLFxuICAgIHBhdXNlZDogZmFsc2UsXG4gICAgdGltZUxlZnQ6IDBcbiAgfTtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBhdXRvcGxheToge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBkZWxheTogMzAwMCxcbiAgICAgIHdhaXRGb3JUcmFuc2l0aW9uOiB0cnVlLFxuICAgICAgZGlzYWJsZU9uSW50ZXJhY3Rpb246IHRydWUsXG4gICAgICBzdG9wT25MYXN0U2xpZGU6IGZhbHNlLFxuICAgICAgcmV2ZXJzZURpcmVjdGlvbjogZmFsc2UsXG4gICAgICBwYXVzZU9uTW91c2VFbnRlcjogZmFsc2VcbiAgICB9XG4gIH0pO1xuICBsZXQgdGltZW91dDtcbiAgbGV0IHJhZjtcbiAgbGV0IGF1dG9wbGF5RGVsYXlUb3RhbCA9IHBhcmFtcyAmJiBwYXJhbXMuYXV0b3BsYXkgPyBwYXJhbXMuYXV0b3BsYXkuZGVsYXkgOiAzMDAwO1xuICBsZXQgYXV0b3BsYXlEZWxheUN1cnJlbnQgPSBwYXJhbXMgJiYgcGFyYW1zLmF1dG9wbGF5ID8gcGFyYW1zLmF1dG9wbGF5LmRlbGF5IDogMzAwMDtcbiAgbGV0IGF1dG9wbGF5VGltZUxlZnQ7XG4gIGxldCBhdXRvcGxheVN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZTtcbiAgbGV0IHdhc1BhdXNlZDtcbiAgbGV0IGlzVG91Y2hlZDtcbiAgbGV0IHBhdXNlZEJ5VG91Y2g7XG4gIGxldCB0b3VjaFN0YXJ0VGltZW91dDtcbiAgbGV0IHNsaWRlQ2hhbmdlZDtcbiAgbGV0IHBhdXNlZEJ5SW50ZXJhY3Rpb247XG4gIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChlKSB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLndyYXBwZXJFbCkgcmV0dXJuO1xuICAgIGlmIChlLnRhcmdldCAhPT0gc3dpcGVyLndyYXBwZXJFbCkgcmV0dXJuO1xuICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIG9uVHJhbnNpdGlvbkVuZCk7XG4gICAgcmVzdW1lKCk7XG4gIH1cbiAgY29uc3QgY2FsY1RpbWVMZWZ0ID0gKCkgPT4ge1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgICB3YXNQYXVzZWQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAod2FzUGF1c2VkKSB7XG4gICAgICBhdXRvcGxheURlbGF5Q3VycmVudCA9IGF1dG9wbGF5VGltZUxlZnQ7XG4gICAgICB3YXNQYXVzZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgdGltZUxlZnQgPSBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID8gYXV0b3BsYXlUaW1lTGVmdCA6IGF1dG9wbGF5U3RhcnRUaW1lICsgYXV0b3BsYXlEZWxheUN1cnJlbnQgLSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBzd2lwZXIuYXV0b3BsYXkudGltZUxlZnQgPSB0aW1lTGVmdDtcbiAgICBlbWl0KCdhdXRvcGxheVRpbWVMZWZ0JywgdGltZUxlZnQsIHRpbWVMZWZ0IC8gYXV0b3BsYXlEZWxheVRvdGFsKTtcbiAgICByYWYgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgY2FsY1RpbWVMZWZ0KCk7XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IGdldFNsaWRlRGVsYXkgPSAoKSA9PiB7XG4gICAgbGV0IGFjdGl2ZVNsaWRlRWw7XG4gICAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBhY3RpdmVTbGlkZUVsID0gc3dpcGVyLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNsYXNzTGlzdC5jb250YWlucygnc3dpcGVyLXNsaWRlLWFjdGl2ZScpKVswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aXZlU2xpZGVFbCA9IHN3aXBlci5zbGlkZXNbc3dpcGVyLmFjdGl2ZUluZGV4XTtcbiAgICB9XG4gICAgaWYgKCFhY3RpdmVTbGlkZUVsKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIGNvbnN0IGN1cnJlbnRTbGlkZURlbGF5ID0gcGFyc2VJbnQoYWN0aXZlU2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLWF1dG9wbGF5JyksIDEwKTtcbiAgICByZXR1cm4gY3VycmVudFNsaWRlRGVsYXk7XG4gIH07XG4gIGNvbnN0IHJ1biA9IGRlbGF5Rm9yY2UgPT4ge1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJhZik7XG4gICAgY2FsY1RpbWVMZWZ0KCk7XG4gICAgbGV0IGRlbGF5ID0gdHlwZW9mIGRlbGF5Rm9yY2UgPT09ICd1bmRlZmluZWQnID8gc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kZWxheSA6IGRlbGF5Rm9yY2U7XG4gICAgYXV0b3BsYXlEZWxheVRvdGFsID0gc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kZWxheTtcbiAgICBhdXRvcGxheURlbGF5Q3VycmVudCA9IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgY29uc3QgY3VycmVudFNsaWRlRGVsYXkgPSBnZXRTbGlkZURlbGF5KCk7XG4gICAgaWYgKCFOdW1iZXIuaXNOYU4oY3VycmVudFNsaWRlRGVsYXkpICYmIGN1cnJlbnRTbGlkZURlbGF5ID4gMCAmJiB0eXBlb2YgZGVsYXlGb3JjZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGRlbGF5ID0gY3VycmVudFNsaWRlRGVsYXk7XG4gICAgICBhdXRvcGxheURlbGF5VG90YWwgPSBjdXJyZW50U2xpZGVEZWxheTtcbiAgICAgIGF1dG9wbGF5RGVsYXlDdXJyZW50ID0gY3VycmVudFNsaWRlRGVsYXk7XG4gICAgfVxuICAgIGF1dG9wbGF5VGltZUxlZnQgPSBkZWxheTtcbiAgICBjb25zdCBzcGVlZCA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gICAgY29uc3QgcHJvY2VlZCA9ICgpID0+IHtcbiAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnJldmVyc2VEaXJlY3Rpb24pIHtcbiAgICAgICAgaWYgKCFzd2lwZXIuaXNCZWdpbm5pbmcgfHwgc3dpcGVyLnBhcmFtcy5sb29wIHx8IHN3aXBlci5wYXJhbXMucmV3aW5kKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlUHJldihzcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgfSBlbHNlIGlmICghc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5zdG9wT25MYXN0U2xpZGUpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIHNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBlbWl0KCdhdXRvcGxheScpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIXN3aXBlci5pc0VuZCB8fCBzd2lwZXIucGFyYW1zLmxvb3AgfHwgc3dpcGVyLnBhcmFtcy5yZXdpbmQpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KHNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBlbWl0KCdhdXRvcGxheScpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnN0b3BPbkxhc3RTbGlkZSkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKDAsIHNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBlbWl0KCdhdXRvcGxheScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIGF1dG9wbGF5U3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgcnVuKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGRlbGF5ID4gMCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBwcm9jZWVkKCk7XG4gICAgICB9LCBkZWxheSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIHByb2NlZWQoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHJldHVybiBkZWxheTtcbiAgfTtcbiAgY29uc3Qgc3RhcnQgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgPSB0cnVlO1xuICAgIHJ1bigpO1xuICAgIGVtaXQoJ2F1dG9wbGF5U3RhcnQnKTtcbiAgfTtcbiAgY29uc3Qgc3RvcCA9ICgpID0+IHtcbiAgICBzd2lwZXIuYXV0b3BsYXkucnVubmluZyA9IGZhbHNlO1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyYWYpO1xuICAgIGVtaXQoJ2F1dG9wbGF5U3RvcCcpO1xuICB9O1xuICBjb25zdCBwYXVzZSA9IChpbnRlcm5hbCwgcmVzZXQpID0+IHtcbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgaWYgKCFpbnRlcm5hbCkge1xuICAgICAgcGF1c2VkQnlJbnRlcmFjdGlvbiA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHByb2NlZWQgPSAoKSA9PiB7XG4gICAgICBlbWl0KCdhdXRvcGxheVBhdXNlJyk7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS53YWl0Rm9yVHJhbnNpdGlvbikge1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBvblRyYW5zaXRpb25FbmQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdW1lKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gdHJ1ZTtcbiAgICBpZiAocmVzZXQpIHtcbiAgICAgIGlmIChzbGlkZUNoYW5nZWQpIHtcbiAgICAgICAgYXV0b3BsYXlUaW1lTGVmdCA9IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgICB9XG4gICAgICBzbGlkZUNoYW5nZWQgPSBmYWxzZTtcbiAgICAgIHByb2NlZWQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZGVsYXkgPSBhdXRvcGxheVRpbWVMZWZ0IHx8IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgYXV0b3BsYXlUaW1lTGVmdCA9IGRlbGF5IC0gKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gYXV0b3BsYXlTdGFydFRpbWUpO1xuICAgIGlmIChzd2lwZXIuaXNFbmQgJiYgYXV0b3BsYXlUaW1lTGVmdCA8IDAgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIGlmIChhdXRvcGxheVRpbWVMZWZ0IDwgMCkgYXV0b3BsYXlUaW1lTGVmdCA9IDA7XG4gICAgcHJvY2VlZCgpO1xuICB9O1xuICBjb25zdCByZXN1bWUgPSAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5pc0VuZCAmJiBhdXRvcGxheVRpbWVMZWZ0IDwgMCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgYXV0b3BsYXlTdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBpZiAocGF1c2VkQnlJbnRlcmFjdGlvbikge1xuICAgICAgcGF1c2VkQnlJbnRlcmFjdGlvbiA9IGZhbHNlO1xuICAgICAgcnVuKGF1dG9wbGF5VGltZUxlZnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBydW4oKTtcbiAgICB9XG4gICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IGZhbHNlO1xuICAgIGVtaXQoJ2F1dG9wbGF5UmVzdW1lJyk7XG4gIH07XG4gIGNvbnN0IG9uVmlzaWJpbGl0eUNoYW5nZSA9ICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ2hpZGRlbicpIHtcbiAgICAgIHBhdXNlZEJ5SW50ZXJhY3Rpb24gPSB0cnVlO1xuICAgICAgcGF1c2UodHJ1ZSk7XG4gICAgfVxuICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICd2aXNpYmxlJykge1xuICAgICAgcmVzdW1lKCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBvblBvaW50ZXJFbnRlciA9IGUgPT4ge1xuICAgIGlmIChlLnBvaW50ZXJUeXBlICE9PSAnbW91c2UnKSByZXR1cm47XG4gICAgcGF1c2VkQnlJbnRlcmFjdGlvbiA9IHRydWU7XG4gICAgcGF1c2UodHJ1ZSk7XG4gIH07XG4gIGNvbnN0IG9uUG9pbnRlckxlYXZlID0gZSA9PiB7XG4gICAgaWYgKGUucG9pbnRlclR5cGUgIT09ICdtb3VzZScpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgICAgcmVzdW1lKCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBhdHRhY2hNb3VzZUV2ZW50cyA9ICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5wYXVzZU9uTW91c2VFbnRlcikge1xuICAgICAgc3dpcGVyLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJlbnRlcicsIG9uUG9pbnRlckVudGVyKTtcbiAgICAgIHN3aXBlci5lbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybGVhdmUnLCBvblBvaW50ZXJMZWF2ZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBkZXRhY2hNb3VzZUV2ZW50cyA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmVudGVyJywgb25Qb2ludGVyRW50ZXIpO1xuICAgIHN3aXBlci5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybGVhdmUnLCBvblBvaW50ZXJMZWF2ZSk7XG4gIH07XG4gIGNvbnN0IGF0dGFjaERvY3VtZW50RXZlbnRzID0gKCkgPT4ge1xuICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgb25WaXNpYmlsaXR5Q2hhbmdlKTtcbiAgfTtcbiAgY29uc3QgZGV0YWNoRG9jdW1lbnRFdmVudHMgPSAoKSA9PiB7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBvblZpc2liaWxpdHlDaGFuZ2UpO1xuICB9O1xuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5lbmFibGVkKSB7XG4gICAgICBhdHRhY2hNb3VzZUV2ZW50cygpO1xuICAgICAgYXR0YWNoRG9jdW1lbnRFdmVudHMoKTtcbiAgICAgIGF1dG9wbGF5U3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICBzdGFydCgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRldGFjaE1vdXNlRXZlbnRzKCk7XG4gICAgZGV0YWNoRG9jdW1lbnRFdmVudHMoKTtcbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH0pO1xuICBvbignYmVmb3JlVHJhbnNpdGlvblN0YXJ0JywgKF9zLCBzcGVlZCwgaW50ZXJuYWwpID0+IHtcbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBpZiAoaW50ZXJuYWwgfHwgIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgIHBhdXNlKHRydWUsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdG9wKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3NsaWRlckZpcnN0TW92ZScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgc3RvcCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpc1RvdWNoZWQgPSB0cnVlO1xuICAgIHBhdXNlZEJ5VG91Y2ggPSBmYWxzZTtcbiAgICBwYXVzZWRCeUludGVyYWN0aW9uID0gZmFsc2U7XG4gICAgdG91Y2hTdGFydFRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHBhdXNlZEJ5SW50ZXJhY3Rpb24gPSB0cnVlO1xuICAgICAgcGF1c2VkQnlUb3VjaCA9IHRydWU7XG4gICAgICBwYXVzZSh0cnVlKTtcbiAgICB9LCAyMDApO1xuICB9KTtcbiAgb24oJ3RvdWNoRW5kJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZyB8fCAhaXNUb3VjaGVkKSByZXR1cm47XG4gICAgY2xlYXJUaW1lb3V0KHRvdWNoU3RhcnRUaW1lb3V0KTtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGlzYWJsZU9uSW50ZXJhY3Rpb24pIHtcbiAgICAgIHBhdXNlZEJ5VG91Y2ggPSBmYWxzZTtcbiAgICAgIGlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocGF1c2VkQnlUb3VjaCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHJlc3VtZSgpO1xuICAgIHBhdXNlZEJ5VG91Y2ggPSBmYWxzZTtcbiAgICBpc1RvdWNoZWQgPSBmYWxzZTtcbiAgfSk7XG4gIG9uKCdzbGlkZUNoYW5nZScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBzbGlkZUNoYW5nZWQgPSB0cnVlO1xuICB9KTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIuYXV0b3BsYXksIHtcbiAgICBzdGFydCxcbiAgICBzdG9wLFxuICAgIHBhdXNlLFxuICAgIHJlc3VtZVxuICB9KTtcbn0iLCJpbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0IHsgZWxlbWVudENoaWxkcmVuLCBpc09iamVjdCB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBUaHVtYih7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvblxufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIHRodW1iczoge1xuICAgICAgc3dpcGVyOiBudWxsLFxuICAgICAgbXVsdGlwbGVBY3RpdmVUaHVtYnM6IHRydWUsXG4gICAgICBhdXRvU2Nyb2xsT2Zmc2V0OiAwLFxuICAgICAgc2xpZGVUaHVtYkFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLXRodW1iLWFjdGl2ZScsXG4gICAgICB0aHVtYnNDb250YWluZXJDbGFzczogJ3N3aXBlci10aHVtYnMnXG4gICAgfVxuICB9KTtcbiAgbGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG4gIGxldCBzd2lwZXJDcmVhdGVkID0gZmFsc2U7XG4gIHN3aXBlci50aHVtYnMgPSB7XG4gICAgc3dpcGVyOiBudWxsXG4gIH07XG4gIGZ1bmN0aW9uIG9uVGh1bWJDbGljaygpIHtcbiAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICBpZiAoIXRodW1ic1N3aXBlciB8fCB0aHVtYnNTd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgY29uc3QgY2xpY2tlZEluZGV4ID0gdGh1bWJzU3dpcGVyLmNsaWNrZWRJbmRleDtcbiAgICBjb25zdCBjbGlja2VkU2xpZGUgPSB0aHVtYnNTd2lwZXIuY2xpY2tlZFNsaWRlO1xuICAgIGlmIChjbGlja2VkU2xpZGUgJiYgY2xpY2tlZFNsaWRlLmNsYXNzTGlzdC5jb250YWlucyhzd2lwZXIucGFyYW1zLnRodW1icy5zbGlkZVRodW1iQWN0aXZlQ2xhc3MpKSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiBjbGlja2VkSW5kZXggPT09ICd1bmRlZmluZWQnIHx8IGNsaWNrZWRJbmRleCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgIGxldCBzbGlkZVRvSW5kZXg7XG4gICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc2xpZGVUb0luZGV4ID0gcGFyc2VJbnQodGh1bWJzU3dpcGVyLmNsaWNrZWRTbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVUb0luZGV4ID0gY2xpY2tlZEluZGV4O1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0xvb3Aoc2xpZGVUb0luZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBjb25zdCB7XG4gICAgICB0aHVtYnM6IHRodW1ic1BhcmFtc1xuICAgIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgIGlmIChpbml0aWFsaXplZCkgcmV0dXJuIGZhbHNlO1xuICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICBjb25zdCBTd2lwZXJDbGFzcyA9IHN3aXBlci5jb25zdHJ1Y3RvcjtcbiAgICBpZiAodGh1bWJzUGFyYW1zLnN3aXBlciBpbnN0YW5jZW9mIFN3aXBlckNsYXNzKSB7XG4gICAgICBzd2lwZXIudGh1bWJzLnN3aXBlciA9IHRodW1ic1BhcmFtcy5zd2lwZXI7XG4gICAgICBPYmplY3QuYXNzaWduKHN3aXBlci50aHVtYnMuc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCB7XG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnRodW1icy5zd2lwZXIucGFyYW1zLCB7XG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyLnVwZGF0ZSgpO1xuICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodGh1bWJzUGFyYW1zLnN3aXBlcikpIHtcbiAgICAgIGNvbnN0IHRodW1ic1N3aXBlclBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe30sIHRodW1ic1BhcmFtcy5zd2lwZXIpO1xuICAgICAgT2JqZWN0LmFzc2lnbih0aHVtYnNTd2lwZXJQYXJhbXMsIHtcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIgPSBuZXcgU3dpcGVyQ2xhc3ModGh1bWJzU3dpcGVyUGFyYW1zKTtcbiAgICAgIHN3aXBlckNyZWF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBzd2lwZXIudGh1bWJzLnN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5wYXJhbXMudGh1bWJzLnRodW1ic0NvbnRhaW5lckNsYXNzKTtcbiAgICBzd2lwZXIudGh1bWJzLnN3aXBlci5vbigndGFwJywgb25UaHVtYkNsaWNrKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoaW5pdGlhbCkge1xuICAgIGNvbnN0IHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgIGlmICghdGh1bWJzU3dpcGVyIHx8IHRodW1ic1N3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBjb25zdCBzbGlkZXNQZXJWaWV3ID0gdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyB0aHVtYnNTd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldztcblxuICAgIC8vIEFjdGl2YXRlIHRodW1ic1xuICAgIGxldCB0aHVtYnNUb0FjdGl2YXRlID0gMTtcbiAgICBjb25zdCB0aHVtYkFjdGl2ZUNsYXNzID0gc3dpcGVyLnBhcmFtcy50aHVtYnMuc2xpZGVUaHVtYkFjdGl2ZUNsYXNzO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICB0aHVtYnNUb0FjdGl2YXRlID0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIH1cbiAgICBpZiAoIXN3aXBlci5wYXJhbXMudGh1bWJzLm11bHRpcGxlQWN0aXZlVGh1bWJzKSB7XG4gICAgICB0aHVtYnNUb0FjdGl2YXRlID0gMTtcbiAgICB9XG4gICAgdGh1bWJzVG9BY3RpdmF0ZSA9IE1hdGguZmxvb3IodGh1bWJzVG9BY3RpdmF0ZSk7XG4gICAgdGh1bWJzU3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4gc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKHRodW1iQWN0aXZlQ2xhc3MpKTtcbiAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wIHx8IHRodW1ic1N3aXBlci5wYXJhbXMudmlydHVhbCAmJiB0aHVtYnNTd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aHVtYnNUb0FjdGl2YXRlOyBpICs9IDEpIHtcbiAgICAgICAgZWxlbWVudENoaWxkcmVuKHRodW1ic1N3aXBlci5zbGlkZXNFbCwgYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c3dpcGVyLnJlYWxJbmRleCArIGl9XCJdYCkuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgICBzbGlkZUVsLmNsYXNzTGlzdC5hZGQodGh1bWJBY3RpdmVDbGFzcyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRodW1ic1RvQWN0aXZhdGU7IGkgKz0gMSkge1xuICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnNsaWRlc1tzd2lwZXIucmVhbEluZGV4ICsgaV0pIHtcbiAgICAgICAgICB0aHVtYnNTd2lwZXIuc2xpZGVzW3N3aXBlci5yZWFsSW5kZXggKyBpXS5jbGFzc0xpc3QuYWRkKHRodW1iQWN0aXZlQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGF1dG9TY3JvbGxPZmZzZXQgPSBzd2lwZXIucGFyYW1zLnRodW1icy5hdXRvU2Nyb2xsT2Zmc2V0O1xuICAgIGNvbnN0IHVzZU9mZnNldCA9IGF1dG9TY3JvbGxPZmZzZXQgJiYgIXRodW1ic1N3aXBlci5wYXJhbXMubG9vcDtcbiAgICBpZiAoc3dpcGVyLnJlYWxJbmRleCAhPT0gdGh1bWJzU3dpcGVyLnJlYWxJbmRleCB8fCB1c2VPZmZzZXQpIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgIGxldCBuZXdUaHVtYnNJbmRleDtcbiAgICAgIGxldCBkaXJlY3Rpb247XG4gICAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIGNvbnN0IG5ld1RodW1ic1NsaWRlID0gdGh1bWJzU3dpcGVyLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSA9PT0gYCR7c3dpcGVyLnJlYWxJbmRleH1gKVswXTtcbiAgICAgICAgbmV3VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuc2xpZGVzLmluZGV4T2YobmV3VGh1bWJzU2xpZGUpO1xuICAgICAgICBkaXJlY3Rpb24gPSBzd2lwZXIuYWN0aXZlSW5kZXggPiBzd2lwZXIucHJldmlvdXNJbmRleCA/ICduZXh0JyA6ICdwcmV2JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1RodW1ic0luZGV4ID0gc3dpcGVyLnJlYWxJbmRleDtcbiAgICAgICAgZGlyZWN0aW9uID0gbmV3VGh1bWJzSW5kZXggPiBzd2lwZXIucHJldmlvdXNJbmRleCA/ICduZXh0JyA6ICdwcmV2JztcbiAgICAgIH1cbiAgICAgIGlmICh1c2VPZmZzZXQpIHtcbiAgICAgICAgbmV3VGh1bWJzSW5kZXggKz0gZGlyZWN0aW9uID09PSAnbmV4dCcgPyBhdXRvU2Nyb2xsT2Zmc2V0IDogLTEgKiBhdXRvU2Nyb2xsT2Zmc2V0O1xuICAgICAgfVxuICAgICAgaWYgKHRodW1ic1N3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcyAmJiB0aHVtYnNTd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMuaW5kZXhPZihuZXdUaHVtYnNJbmRleCkgPCAwKSB7XG4gICAgICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgICAgaWYgKG5ld1RodW1ic0luZGV4ID4gY3VycmVudFRodW1ic0luZGV4KSB7XG4gICAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IG5ld1RodW1ic0luZGV4IC0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdUaHVtYnNJbmRleCA9IG5ld1RodW1ic0luZGV4ICsgTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgLSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChuZXdUaHVtYnNJbmRleCA+IGN1cnJlbnRUaHVtYnNJbmRleCAmJiB0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxKSB7XG4gICAgICAgICAgLy8gbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCAtIHNsaWRlc1BlclZpZXcgKyAxO1xuICAgICAgICB9XG4gICAgICAgIHRodW1ic1N3aXBlci5zbGlkZVRvKG5ld1RodW1ic0luZGV4LCBpbml0aWFsID8gMCA6IHVuZGVmaW5lZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIG9uKCdiZWZvcmVJbml0JywgKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHRodW1ic1xuICAgIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgIGlmICghdGh1bWJzIHx8ICF0aHVtYnMuc3dpcGVyKSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiB0aHVtYnMuc3dpcGVyID09PSAnc3RyaW5nJyB8fCB0aHVtYnMuc3dpcGVyIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICAgIGNvbnN0IGdldFRodW1ic0VsZW1lbnRBbmRJbml0ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCB0aHVtYnNFbGVtZW50ID0gdHlwZW9mIHRodW1icy5zd2lwZXIgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aHVtYnMuc3dpcGVyKSA6IHRodW1icy5zd2lwZXI7XG4gICAgICAgIGlmICh0aHVtYnNFbGVtZW50ICYmIHRodW1ic0VsZW1lbnQuc3dpcGVyKSB7XG4gICAgICAgICAgdGh1bWJzLnN3aXBlciA9IHRodW1ic0VsZW1lbnQuc3dpcGVyO1xuICAgICAgICAgIGluaXQoKTtcbiAgICAgICAgICB1cGRhdGUodHJ1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodGh1bWJzRWxlbWVudCkge1xuICAgICAgICAgIGNvbnN0IG9uVGh1bWJzU3dpcGVyID0gZSA9PiB7XG4gICAgICAgICAgICB0aHVtYnMuc3dpcGVyID0gZS5kZXRhaWxbMF07XG4gICAgICAgICAgICB0aHVtYnNFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2luaXQnLCBvblRodW1ic1N3aXBlcik7XG4gICAgICAgICAgICBpbml0KCk7XG4gICAgICAgICAgICB1cGRhdGUodHJ1ZSk7XG4gICAgICAgICAgICB0aHVtYnMuc3dpcGVyLnVwZGF0ZSgpO1xuICAgICAgICAgICAgc3dpcGVyLnVwZGF0ZSgpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgdGh1bWJzRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdpbml0Jywgb25UaHVtYnNTd2lwZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aHVtYnNFbGVtZW50O1xuICAgICAgfTtcbiAgICAgIGNvbnN0IHdhdGNoRm9yVGh1bWJzVG9BcHBlYXIgPSAoKSA9PiB7XG4gICAgICAgIGlmIChzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHRodW1ic0VsZW1lbnQgPSBnZXRUaHVtYnNFbGVtZW50QW5kSW5pdCgpO1xuICAgICAgICBpZiAoIXRodW1ic0VsZW1lbnQpIHtcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUod2F0Y2hGb3JUaHVtYnNUb0FwcGVhcik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUod2F0Y2hGb3JUaHVtYnNUb0FwcGVhcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluaXQoKTtcbiAgICAgIHVwZGF0ZSh0cnVlKTtcbiAgICB9XG4gIH0pO1xuICBvbignc2xpZGVDaGFuZ2UgdXBkYXRlIHJlc2l6ZSBvYnNlcnZlclVwZGF0ZScsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdzZXRUcmFuc2l0aW9uJywgKF9zLCBkdXJhdGlvbikgPT4ge1xuICAgIGNvbnN0IHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgIGlmICghdGh1bWJzU3dpcGVyIHx8IHRodW1ic1N3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICB0aHVtYnNTd2lwZXIuc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH0pO1xuICBvbignYmVmb3JlRGVzdHJveScsICgpID0+IHtcbiAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICBpZiAoIXRodW1ic1N3aXBlciB8fCB0aHVtYnNTd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgaWYgKHN3aXBlckNyZWF0ZWQpIHtcbiAgICAgIHRodW1ic1N3aXBlci5kZXN0cm95KCk7XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIudGh1bWJzLCB7XG4gICAgaW5pdCxcbiAgICB1cGRhdGVcbiAgfSk7XG59IiwiaW1wb3J0IHsgZWxlbWVudFRyYW5zaXRpb25FbmQsIG5vdyB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmcmVlTW9kZSh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBlbWl0LFxuICBvbmNlXG59KSB7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgZnJlZU1vZGU6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgbW9tZW50dW06IHRydWUsXG4gICAgICBtb21lbnR1bVJhdGlvOiAxLFxuICAgICAgbW9tZW50dW1Cb3VuY2U6IHRydWUsXG4gICAgICBtb21lbnR1bUJvdW5jZVJhdGlvOiAxLFxuICAgICAgbW9tZW50dW1WZWxvY2l0eVJhdGlvOiAxLFxuICAgICAgc3RpY2t5OiBmYWxzZSxcbiAgICAgIG1pbmltdW1WZWxvY2l0eTogMC4wMlxuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIG9uVG91Y2hTdGFydCgpIHtcbiAgICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEudmVsb2NpdGllcy5sZW5ndGggPSAwO1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoRW5kKHtcbiAgICAgIGN1cnJlbnRQb3M6IHN3aXBlci5ydGwgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGVcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBvblRvdWNoTW92ZSgpIHtcbiAgICBjb25zdCB7XG4gICAgICB0b3VjaEV2ZW50c0RhdGE6IGRhdGEsXG4gICAgICB0b3VjaGVzXG4gICAgfSA9IHN3aXBlcjtcbiAgICAvLyBWZWxvY2l0eVxuICAgIGlmIChkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICBkYXRhLnZlbG9jaXRpZXMucHVzaCh7XG4gICAgICAgIHBvc2l0aW9uOiB0b3VjaGVzW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzdGFydFgnIDogJ3N0YXJ0WSddLFxuICAgICAgICB0aW1lOiBkYXRhLnRvdWNoU3RhcnRUaW1lXG4gICAgICB9KTtcbiAgICB9XG4gICAgZGF0YS52ZWxvY2l0aWVzLnB1c2goe1xuICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2N1cnJlbnRYJyA6ICdjdXJyZW50WSddLFxuICAgICAgdGltZTogbm93KClcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBvblRvdWNoRW5kKHtcbiAgICBjdXJyZW50UG9zXG4gIH0pIHtcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICB3cmFwcGVyRWwsXG4gICAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICAgIHNuYXBHcmlkLFxuICAgICAgdG91Y2hFdmVudHNEYXRhOiBkYXRhXG4gICAgfSA9IHN3aXBlcjtcbiAgICAvLyBUaW1lIGRpZmZcbiAgICBjb25zdCB0b3VjaEVuZFRpbWUgPSBub3coKTtcbiAgICBjb25zdCB0aW1lRGlmZiA9IHRvdWNoRW5kVGltZSAtIGRhdGEudG91Y2hTdGFydFRpbWU7XG4gICAgaWYgKGN1cnJlbnRQb3MgPCAtc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY3VycmVudFBvcyA+IC1zd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzLmxlbmd0aCA8IHNuYXBHcmlkLmxlbmd0aCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbmFwR3JpZC5sZW5ndGggLSAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwYXJhbXMuZnJlZU1vZGUubW9tZW50dW0pIHtcbiAgICAgIGlmIChkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID4gMSkge1xuICAgICAgICBjb25zdCBsYXN0TW92ZUV2ZW50ID0gZGF0YS52ZWxvY2l0aWVzLnBvcCgpO1xuICAgICAgICBjb25zdCB2ZWxvY2l0eUV2ZW50ID0gZGF0YS52ZWxvY2l0aWVzLnBvcCgpO1xuICAgICAgICBjb25zdCBkaXN0YW5jZSA9IGxhc3RNb3ZlRXZlbnQucG9zaXRpb24gLSB2ZWxvY2l0eUV2ZW50LnBvc2l0aW9uO1xuICAgICAgICBjb25zdCB0aW1lID0gbGFzdE1vdmVFdmVudC50aW1lIC0gdmVsb2NpdHlFdmVudC50aW1lO1xuICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSBkaXN0YW5jZSAvIHRpbWU7XG4gICAgICAgIHN3aXBlci52ZWxvY2l0eSAvPSAyO1xuICAgICAgICBpZiAoTWF0aC5hYnMoc3dpcGVyLnZlbG9jaXR5KSA8IHBhcmFtcy5mcmVlTW9kZS5taW5pbXVtVmVsb2NpdHkpIHtcbiAgICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSAwO1xuICAgICAgICB9XG4gICAgICAgIC8vIHRoaXMgaW1wbGllcyB0aGF0IHRoZSB1c2VyIHN0b3BwZWQgbW92aW5nIGEgZmluZ2VyIHRoZW4gcmVsZWFzZWQuXG4gICAgICAgIC8vIFRoZXJlIHdvdWxkIGJlIG5vIGV2ZW50cyB3aXRoIGRpc3RhbmNlIHplcm8sIHNvIHRoZSBsYXN0IGV2ZW50IGlzIHN0YWxlLlxuICAgICAgICBpZiAodGltZSA+IDE1MCB8fCBub3coKSAtIGxhc3RNb3ZlRXZlbnQudGltZSA+IDMwMCkge1xuICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICB9XG4gICAgICBzd2lwZXIudmVsb2NpdHkgKj0gcGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtVmVsb2NpdHlSYXRpbztcbiAgICAgIGRhdGEudmVsb2NpdGllcy5sZW5ndGggPSAwO1xuICAgICAgbGV0IG1vbWVudHVtRHVyYXRpb24gPSAxMDAwICogcGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtUmF0aW87XG4gICAgICBjb25zdCBtb21lbnR1bURpc3RhbmNlID0gc3dpcGVyLnZlbG9jaXR5ICogbW9tZW50dW1EdXJhdGlvbjtcbiAgICAgIGxldCBuZXdQb3NpdGlvbiA9IHN3aXBlci50cmFuc2xhdGUgKyBtb21lbnR1bURpc3RhbmNlO1xuICAgICAgaWYgKHJ0bCkgbmV3UG9zaXRpb24gPSAtbmV3UG9zaXRpb247XG4gICAgICBsZXQgZG9Cb3VuY2UgPSBmYWxzZTtcbiAgICAgIGxldCBhZnRlckJvdW5jZVBvc2l0aW9uO1xuICAgICAgY29uc3QgYm91bmNlQW1vdW50ID0gTWF0aC5hYnMoc3dpcGVyLnZlbG9jaXR5KSAqIDIwICogcGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtQm91bmNlUmF0aW87XG4gICAgICBsZXQgbmVlZHNMb29wRml4O1xuICAgICAgaWYgKG5ld1Bvc2l0aW9uIDwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGUubW9tZW50dW1Cb3VuY2UpIHtcbiAgICAgICAgICBpZiAobmV3UG9zaXRpb24gKyBzd2lwZXIubWF4VHJhbnNsYXRlKCkgPCAtYm91bmNlQW1vdW50KSB7XG4gICAgICAgICAgICBuZXdQb3NpdGlvbiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIGJvdW5jZUFtb3VudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWZ0ZXJCb3VuY2VQb3NpdGlvbiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICAgICAgICBkb0JvdW5jZSA9IHRydWU7XG4gICAgICAgICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdQb3NpdGlvbiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLmxvb3AgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSBuZWVkc0xvb3BGaXggPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChuZXdQb3NpdGlvbiA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtQm91bmNlKSB7XG4gICAgICAgICAgaWYgKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpID4gYm91bmNlQW1vdW50KSB7XG4gICAgICAgICAgICBuZXdQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKSArIGJvdW5jZUFtb3VudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYWZ0ZXJCb3VuY2VQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgICBkb0JvdW5jZSA9IHRydWU7XG4gICAgICAgICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdQb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLmxvb3AgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSBuZWVkc0xvb3BGaXggPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGUuc3RpY2t5KSB7XG4gICAgICAgIGxldCBuZXh0U2xpZGU7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc25hcEdyaWQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICBpZiAoc25hcEdyaWRbal0gPiAtbmV3UG9zaXRpb24pIHtcbiAgICAgICAgICAgIG5leHRTbGlkZSA9IGo7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE1hdGguYWJzKHNuYXBHcmlkW25leHRTbGlkZV0gLSBuZXdQb3NpdGlvbikgPCBNYXRoLmFicyhzbmFwR3JpZFtuZXh0U2xpZGUgLSAxXSAtIG5ld1Bvc2l0aW9uKSB8fCBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc25hcEdyaWRbbmV4dFNsaWRlXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdQb3NpdGlvbiA9IHNuYXBHcmlkW25leHRTbGlkZSAtIDFdO1xuICAgICAgICB9XG4gICAgICAgIG5ld1Bvc2l0aW9uID0gLW5ld1Bvc2l0aW9uO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRzTG9vcEZpeCkge1xuICAgICAgICBvbmNlKCd0cmFuc2l0aW9uRW5kJywgKCkgPT4ge1xuICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gRml4IGR1cmF0aW9uXG4gICAgICBpZiAoc3dpcGVyLnZlbG9jaXR5ICE9PSAwKSB7XG4gICAgICAgIGlmIChydGwpIHtcbiAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKC1uZXdQb3NpdGlvbiAtIHN3aXBlci50cmFuc2xhdGUpIC8gc3dpcGVyLnZlbG9jaXR5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLnRyYW5zbGF0ZSkgLyBzd2lwZXIudmVsb2NpdHkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGUuc3RpY2t5KSB7XG4gICAgICAgICAgLy8gSWYgZnJlZU1vZGUuc3RpY2t5IGlzIGFjdGl2ZSBhbmQgdGhlIHVzZXIgZW5kcyBhIHN3aXBlIHdpdGggYSBzbG93LXZlbG9jaXR5XG4gICAgICAgICAgLy8gZXZlbnQsIHRoZW4gZHVyYXRpb25zIGNhbiBiZSAyMCsgc2Vjb25kcyB0byBzbGlkZSBvbmUgKG9yIHplcm8hKSBzbGlkZXMuXG4gICAgICAgICAgLy8gSXQncyBlYXN5IHRvIHNlZSB0aGlzIHdoZW4gc2ltdWxhdGluZyB0b3VjaCB3aXRoIG1vdXNlIGV2ZW50cy4gVG8gZml4IHRoaXMsXG4gICAgICAgICAgLy8gbGltaXQgc2luZ2xlLXNsaWRlIHN3aXBlcyB0byB0aGUgZGVmYXVsdCBzbGlkZSBkdXJhdGlvbi4gVGhpcyBhbHNvIGhhcyB0aGVcbiAgICAgICAgICAvLyBuaWNlIHNpZGUgZWZmZWN0IG9mIG1hdGNoaW5nIHNsaWRlIHNwZWVkIGlmIHRoZSB1c2VyIHN0b3BwZWQgbW92aW5nIGJlZm9yZVxuICAgICAgICAgIC8vIGxpZnRpbmcgZmluZ2VyIG9yIG1vdXNlIHZzLiBtb3Zpbmcgc2xvd2x5IGJlZm9yZSBsaWZ0aW5nIHRoZSBmaW5nZXIvbW91c2UuXG4gICAgICAgICAgLy8gRm9yIGZhc3RlciBzd2lwZXMsIGFsc28gYXBwbHkgbGltaXRzIChhbGJlaXQgaGlnaGVyIG9uZXMpLlxuICAgICAgICAgIGNvbnN0IG1vdmVEaXN0YW5jZSA9IE1hdGguYWJzKChydGwgPyAtbmV3UG9zaXRpb24gOiBuZXdQb3NpdGlvbikgLSBzd2lwZXIudHJhbnNsYXRlKTtcbiAgICAgICAgICBjb25zdCBjdXJyZW50U2xpZGVTaXplID0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtzd2lwZXIuYWN0aXZlSW5kZXhdO1xuICAgICAgICAgIGlmIChtb3ZlRGlzdGFuY2UgPCBjdXJyZW50U2xpZGVTaXplKSB7XG4gICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkO1xuICAgICAgICAgIH0gZWxzZSBpZiAobW92ZURpc3RhbmNlIDwgMiAqIGN1cnJlbnRTbGlkZVNpemUpIHtcbiAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBwYXJhbXMuc3BlZWQgKiAxLjU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBwYXJhbXMuc3BlZWQgKiAyLjU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZS5zdGlja3kpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGUubW9tZW50dW1Cb3VuY2UgJiYgZG9Cb3VuY2UpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGFmdGVyQm91bmNlUG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTtcbiAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgIGVsZW1lbnRUcmFuc2l0aW9uRW5kKHdyYXBwZXJFbCwgKCkgPT4ge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIWRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSkgcmV0dXJuO1xuICAgICAgICAgIGVtaXQoJ21vbWVudHVtQm91bmNlJyk7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24ocGFyYW1zLnNwZWVkKTtcbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoYWZ0ZXJCb3VuY2VQb3NpdGlvbik7XG4gICAgICAgICAgICBlbGVtZW50VHJhbnNpdGlvbkVuZCh3cmFwcGVyRWwsICgpID0+IHtcbiAgICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSwgMCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChzd2lwZXIudmVsb2NpdHkpIHtcbiAgICAgICAgZW1pdCgnX2ZyZWVNb2RlTm9Nb21lbnR1bVJlbGVhc2UnKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24obW9tZW50dW1EdXJhdGlvbik7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3UG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHRydWUsIHN3aXBlci5zd2lwZURpcmVjdGlvbik7XG4gICAgICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIGVsZW1lbnRUcmFuc2l0aW9uRW5kKHdyYXBwZXJFbCwgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1Bvc2l0aW9uKTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZS5zdGlja3kpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgICBlbWl0KCdfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZScpO1xuICAgIH1cbiAgICBpZiAoIXBhcmFtcy5mcmVlTW9kZS5tb21lbnR1bSB8fCB0aW1lRGlmZiA+PSBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBmcmVlTW9kZToge1xuICAgICAgb25Ub3VjaFN0YXJ0LFxuICAgICAgb25Ub3VjaE1vdmUsXG4gICAgICBvblRvdWNoRW5kXG4gICAgfVxuICB9KTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBHcmlkKHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXNcbn0pIHtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBncmlkOiB7XG4gICAgICByb3dzOiAxLFxuICAgICAgZmlsbDogJ2NvbHVtbidcbiAgICB9XG4gIH0pO1xuICBsZXQgc2xpZGVzTnVtYmVyRXZlblRvUm93cztcbiAgbGV0IHNsaWRlc1BlclJvdztcbiAgbGV0IG51bUZ1bGxDb2x1bW5zO1xuICBjb25zdCBpbml0U2xpZGVzID0gc2xpZGVzTGVuZ3RoID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNQZXJWaWV3XG4gICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgY29uc3Qge1xuICAgICAgcm93cyxcbiAgICAgIGZpbGxcbiAgICB9ID0gc3dpcGVyLnBhcmFtcy5ncmlkO1xuICAgIHNsaWRlc1BlclJvdyA9IHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgLyByb3dzO1xuICAgIG51bUZ1bGxDb2x1bW5zID0gTWF0aC5mbG9vcihzbGlkZXNMZW5ndGggLyByb3dzKTtcbiAgICBpZiAoTWF0aC5mbG9vcihzbGlkZXNMZW5ndGggLyByb3dzKSA9PT0gc2xpZGVzTGVuZ3RoIC8gcm93cykge1xuICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IHNsaWRlc0xlbmd0aDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IE1hdGguY2VpbChzbGlkZXNMZW5ndGggLyByb3dzKSAqIHJvd3M7XG4gICAgfVxuICAgIGlmIChzbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgZmlsbCA9PT0gJ3JvdycpIHtcbiAgICAgIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgPSBNYXRoLm1heChzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzLCBzbGlkZXNQZXJWaWV3ICogcm93cyk7XG4gICAgfVxuICB9O1xuICBjb25zdCB1cGRhdGVTbGlkZSA9IChpLCBzbGlkZSwgc2xpZGVzTGVuZ3RoLCBnZXREaXJlY3Rpb25MYWJlbCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlc1Blckdyb3VwLFxuICAgICAgc3BhY2VCZXR3ZWVuXG4gICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgY29uc3Qge1xuICAgICAgcm93cyxcbiAgICAgIGZpbGxcbiAgICB9ID0gc3dpcGVyLnBhcmFtcy5ncmlkO1xuICAgIC8vIFNldCBzbGlkZXMgb3JkZXJcbiAgICBsZXQgbmV3U2xpZGVPcmRlckluZGV4O1xuICAgIGxldCBjb2x1bW47XG4gICAgbGV0IHJvdztcbiAgICBpZiAoZmlsbCA9PT0gJ3JvdycgJiYgc2xpZGVzUGVyR3JvdXAgPiAxKSB7XG4gICAgICBjb25zdCBncm91cEluZGV4ID0gTWF0aC5mbG9vcihpIC8gKHNsaWRlc1Blckdyb3VwICogcm93cykpO1xuICAgICAgY29uc3Qgc2xpZGVJbmRleEluR3JvdXAgPSBpIC0gcm93cyAqIHNsaWRlc1Blckdyb3VwICogZ3JvdXBJbmRleDtcbiAgICAgIGNvbnN0IGNvbHVtbnNJbkdyb3VwID0gZ3JvdXBJbmRleCA9PT0gMCA/IHNsaWRlc1Blckdyb3VwIDogTWF0aC5taW4oTWF0aC5jZWlsKChzbGlkZXNMZW5ndGggLSBncm91cEluZGV4ICogcm93cyAqIHNsaWRlc1Blckdyb3VwKSAvIHJvd3MpLCBzbGlkZXNQZXJHcm91cCk7XG4gICAgICByb3cgPSBNYXRoLmZsb29yKHNsaWRlSW5kZXhJbkdyb3VwIC8gY29sdW1uc0luR3JvdXApO1xuICAgICAgY29sdW1uID0gc2xpZGVJbmRleEluR3JvdXAgLSByb3cgKiBjb2x1bW5zSW5Hcm91cCArIGdyb3VwSW5kZXggKiBzbGlkZXNQZXJHcm91cDtcbiAgICAgIG5ld1NsaWRlT3JkZXJJbmRleCA9IGNvbHVtbiArIHJvdyAqIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MgLyByb3dzO1xuICAgICAgc2xpZGUuc3R5bGUub3JkZXIgPSBuZXdTbGlkZU9yZGVySW5kZXg7XG4gICAgfSBlbHNlIGlmIChmaWxsID09PSAnY29sdW1uJykge1xuICAgICAgY29sdW1uID0gTWF0aC5mbG9vcihpIC8gcm93cyk7XG4gICAgICByb3cgPSBpIC0gY29sdW1uICogcm93cztcbiAgICAgIGlmIChjb2x1bW4gPiBudW1GdWxsQ29sdW1ucyB8fCBjb2x1bW4gPT09IG51bUZ1bGxDb2x1bW5zICYmIHJvdyA9PT0gcm93cyAtIDEpIHtcbiAgICAgICAgcm93ICs9IDE7XG4gICAgICAgIGlmIChyb3cgPj0gcm93cykge1xuICAgICAgICAgIHJvdyA9IDA7XG4gICAgICAgICAgY29sdW1uICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcm93ID0gTWF0aC5mbG9vcihpIC8gc2xpZGVzUGVyUm93KTtcbiAgICAgIGNvbHVtbiA9IGkgLSByb3cgKiBzbGlkZXNQZXJSb3c7XG4gICAgfVxuICAgIHNsaWRlLnN0eWxlW2dldERpcmVjdGlvbkxhYmVsKCdtYXJnaW4tdG9wJyldID0gcm93ICE9PSAwID8gc3BhY2VCZXR3ZWVuICYmIGAke3NwYWNlQmV0d2Vlbn1weGAgOiAnJztcbiAgfTtcbiAgY29uc3QgdXBkYXRlV3JhcHBlclNpemUgPSAoc2xpZGVTaXplLCBzbmFwR3JpZCwgZ2V0RGlyZWN0aW9uTGFiZWwpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBzcGFjZUJldHdlZW4sXG4gICAgICBjZW50ZXJlZFNsaWRlcyxcbiAgICAgIHJvdW5kTGVuZ3Roc1xuICAgIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgIGNvbnN0IHtcbiAgICAgIHJvd3NcbiAgICB9ID0gc3dpcGVyLnBhcmFtcy5ncmlkO1xuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IChzbGlkZVNpemUgKyBzcGFjZUJldHdlZW4pICogc2xpZGVzTnVtYmVyRXZlblRvUm93cztcbiAgICBzd2lwZXIudmlydHVhbFNpemUgPSBNYXRoLmNlaWwoc3dpcGVyLnZpcnR1YWxTaXplIC8gcm93cykgLSBzcGFjZUJldHdlZW47XG4gICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZVtnZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBgJHtzd2lwZXIudmlydHVhbFNpemUgKyBzcGFjZUJldHdlZW59cHhgO1xuICAgIGlmIChjZW50ZXJlZFNsaWRlcykge1xuICAgICAgY29uc3QgbmV3U2xpZGVzR3JpZCA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbmFwR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBsZXQgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtpXTtcbiAgICAgICAgaWYgKHJvdW5kTGVuZ3Rocykgc2xpZGVzR3JpZEl0ZW0gPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgICAgaWYgKHNuYXBHcmlkW2ldIDwgc3dpcGVyLnZpcnR1YWxTaXplICsgc25hcEdyaWRbMF0pIG5ld1NsaWRlc0dyaWQucHVzaChzbGlkZXNHcmlkSXRlbSk7XG4gICAgICB9XG4gICAgICBzbmFwR3JpZC5zcGxpY2UoMCwgc25hcEdyaWQubGVuZ3RoKTtcbiAgICAgIHNuYXBHcmlkLnB1c2goLi4ubmV3U2xpZGVzR3JpZCk7XG4gICAgfVxuICB9O1xuICBzd2lwZXIuZ3JpZCA9IHtcbiAgICBpbml0U2xpZGVzLFxuICAgIHVwZGF0ZVNsaWRlLFxuICAgIHVwZGF0ZVdyYXBwZXJTaXplXG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYXBwZW5kU2xpZGUoc2xpZGVzKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gIH1cbiAgY29uc3QgYXBwZW5kRWxlbWVudCA9IHNsaWRlRWwgPT4ge1xuICAgIGlmICh0eXBlb2Ygc2xpZGVFbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHRlbXBET00gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRlbXBET00uaW5uZXJIVE1MID0gc2xpZGVFbDtcbiAgICAgIHNsaWRlc0VsLmFwcGVuZCh0ZW1wRE9NLmNoaWxkcmVuWzBdKTtcbiAgICAgIHRlbXBET00uaW5uZXJIVE1MID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlc0VsLmFwcGVuZChzbGlkZUVsKTtcbiAgICB9XG4gIH07XG4gIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHNsaWRlc1tpXSkgYXBwZW5kRWxlbWVudChzbGlkZXNbaV0pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhcHBlbmRFbGVtZW50KHNsaWRlcyk7XG4gIH1cbiAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG4gIGlmICghcGFyYW1zLm9ic2VydmVyIHx8IHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcmVwZW5kU2xpZGUoc2xpZGVzKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgYWN0aXZlSW5kZXgsXG4gICAgc2xpZGVzRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gIH1cbiAgbGV0IG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyAxO1xuICBjb25zdCBwcmVwZW5kRWxlbWVudCA9IHNsaWRlRWwgPT4ge1xuICAgIGlmICh0eXBlb2Ygc2xpZGVFbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHRlbXBET00gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRlbXBET00uaW5uZXJIVE1MID0gc2xpZGVFbDtcbiAgICAgIHNsaWRlc0VsLnByZXBlbmQodGVtcERPTS5jaGlsZHJlblswXSk7XG4gICAgICB0ZW1wRE9NLmlubmVySFRNTCA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZXNFbC5wcmVwZW5kKHNsaWRlRWwpO1xuICAgIH1cbiAgfTtcbiAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc2xpZGVzW2ldKSBwcmVwZW5kRWxlbWVudChzbGlkZXNbaV0pO1xuICAgIH1cbiAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzLmxlbmd0aDtcbiAgfSBlbHNlIHtcbiAgICBwcmVwZW5kRWxlbWVudChzbGlkZXMpO1xuICB9XG4gIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgfVxuICBpZiAoIXBhcmFtcy5vYnNlcnZlciB8fCBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG4gIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkU2xpZGUoaW5kZXgsIHNsaWRlcykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIGFjdGl2ZUluZGV4LFxuICAgIHNsaWRlc0VsXG4gIH0gPSBzd2lwZXI7XG4gIGxldCBhY3RpdmVJbmRleEJ1ZmZlciA9IGFjdGl2ZUluZGV4O1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBhY3RpdmVJbmRleEJ1ZmZlciAtPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgfVxuICBjb25zdCBiYXNlTGVuZ3RoID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gIGlmIChpbmRleCA8PSAwKSB7XG4gICAgc3dpcGVyLnByZXBlbmRTbGlkZShzbGlkZXMpO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoaW5kZXggPj0gYmFzZUxlbmd0aCkge1xuICAgIHN3aXBlci5hcHBlbmRTbGlkZShzbGlkZXMpO1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleEJ1ZmZlciA+IGluZGV4ID8gYWN0aXZlSW5kZXhCdWZmZXIgKyAxIDogYWN0aXZlSW5kZXhCdWZmZXI7XG4gIGNvbnN0IHNsaWRlc0J1ZmZlciA9IFtdO1xuICBmb3IgKGxldCBpID0gYmFzZUxlbmd0aCAtIDE7IGkgPj0gaW5kZXg7IGkgLT0gMSkge1xuICAgIGNvbnN0IGN1cnJlbnRTbGlkZSA9IHN3aXBlci5zbGlkZXNbaV07XG4gICAgY3VycmVudFNsaWRlLnJlbW92ZSgpO1xuICAgIHNsaWRlc0J1ZmZlci51bnNoaWZ0KGN1cnJlbnRTbGlkZSk7XG4gIH1cbiAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc2xpZGVzW2ldKSBzbGlkZXNFbC5hcHBlbmQoc2xpZGVzW2ldKTtcbiAgICB9XG4gICAgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleEJ1ZmZlciA+IGluZGV4ID8gYWN0aXZlSW5kZXhCdWZmZXIgKyBzbGlkZXMubGVuZ3RoIDogYWN0aXZlSW5kZXhCdWZmZXI7XG4gIH0gZWxzZSB7XG4gICAgc2xpZGVzRWwuYXBwZW5kKHNsaWRlcyk7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNCdWZmZXIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBzbGlkZXNFbC5hcHBlbmQoc2xpZGVzQnVmZmVyW2ldKTtcbiAgfVxuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cbiAgaWYgKCFwYXJhbXMub2JzZXJ2ZXIgfHwgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlU2xpZGUoc2xpZGVzSW5kZXhlcykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIGFjdGl2ZUluZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGxldCBhY3RpdmVJbmRleEJ1ZmZlciA9IGFjdGl2ZUluZGV4O1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBhY3RpdmVJbmRleEJ1ZmZlciAtPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICB9XG4gIGxldCBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyO1xuICBsZXQgaW5kZXhUb1JlbW92ZTtcbiAgaWYgKHR5cGVvZiBzbGlkZXNJbmRleGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXNJbmRleGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNJbmRleGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpbmRleFRvUmVtb3ZlID0gc2xpZGVzSW5kZXhlc1tpXTtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2luZGV4VG9SZW1vdmVdKSBzd2lwZXIuc2xpZGVzW2luZGV4VG9SZW1vdmVdLnJlbW92ZSgpO1xuICAgICAgaWYgKGluZGV4VG9SZW1vdmUgPCBuZXdBY3RpdmVJbmRleCkgbmV3QWN0aXZlSW5kZXggLT0gMTtcbiAgICB9XG4gICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gIH0gZWxzZSB7XG4gICAgaW5kZXhUb1JlbW92ZSA9IHNsaWRlc0luZGV4ZXM7XG4gICAgaWYgKHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0ucmVtb3ZlKCk7XG4gICAgaWYgKGluZGV4VG9SZW1vdmUgPCBuZXdBY3RpdmVJbmRleCkgbmV3QWN0aXZlSW5kZXggLT0gMTtcbiAgICBuZXdBY3RpdmVJbmRleCA9IE1hdGgubWF4KG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgfVxuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cbiAgaWYgKCFwYXJhbXMub2JzZXJ2ZXIgfHwgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVtb3ZlQWxsU2xpZGVzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBzbGlkZXNJbmRleGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgfVxuICBzd2lwZXIucmVtb3ZlU2xpZGUoc2xpZGVzSW5kZXhlcyk7XG59IiwiaW1wb3J0IGFwcGVuZFNsaWRlIGZyb20gJy4vbWV0aG9kcy9hcHBlbmRTbGlkZS5qcyc7XG5pbXBvcnQgcHJlcGVuZFNsaWRlIGZyb20gJy4vbWV0aG9kcy9wcmVwZW5kU2xpZGUuanMnO1xuaW1wb3J0IGFkZFNsaWRlIGZyb20gJy4vbWV0aG9kcy9hZGRTbGlkZS5qcyc7XG5pbXBvcnQgcmVtb3ZlU2xpZGUgZnJvbSAnLi9tZXRob2RzL3JlbW92ZVNsaWRlLmpzJztcbmltcG9ydCByZW1vdmVBbGxTbGlkZXMgZnJvbSAnLi9tZXRob2RzL3JlbW92ZUFsbFNsaWRlcy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNYW5pcHVsYXRpb24oe1xuICBzd2lwZXJcbn0pIHtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBhcHBlbmRTbGlkZTogYXBwZW5kU2xpZGUuYmluZChzd2lwZXIpLFxuICAgIHByZXBlbmRTbGlkZTogcHJlcGVuZFNsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICBhZGRTbGlkZTogYWRkU2xpZGUuYmluZChzd2lwZXIpLFxuICAgIHJlbW92ZVNsaWRlOiByZW1vdmVTbGlkZS5iaW5kKHN3aXBlciksXG4gICAgcmVtb3ZlQWxsU2xpZGVzOiByZW1vdmVBbGxTbGlkZXMuYmluZChzd2lwZXIpXG4gIH0pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVmZmVjdEluaXQocGFyYW1zKSB7XG4gIGNvbnN0IHtcbiAgICBlZmZlY3QsXG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2l0aW9uLFxuICAgIG92ZXJ3cml0ZVBhcmFtcyxcbiAgICBwZXJzcGVjdGl2ZSxcbiAgICByZWNyZWF0ZVNoYWRvd3MsXG4gICAgZ2V0RWZmZWN0UGFyYW1zXG4gIH0gPSBwYXJhbXM7XG4gIG9uKCdiZWZvcmVJbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XG4gICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtlZmZlY3R9YCk7XG4gICAgaWYgKHBlcnNwZWN0aXZlICYmIHBlcnNwZWN0aXZlKCkpIHtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfTNkYCk7XG4gICAgfVxuICAgIGNvbnN0IG92ZXJ3cml0ZVBhcmFtc1Jlc3VsdCA9IG92ZXJ3cml0ZVBhcmFtcyA/IG92ZXJ3cml0ZVBhcmFtcygpIDoge307XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXNSZXN1bHQpO1xuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXNSZXN1bHQpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zbGF0ZScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09IGVmZmVjdCkgcmV0dXJuO1xuICAgIHNldFRyYW5zbGF0ZSgpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zaXRpb24nLCAoX3MsIGR1cmF0aW9uKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfSk7XG4gIG9uKCd0cmFuc2l0aW9uRW5kJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XG4gICAgaWYgKHJlY3JlYXRlU2hhZG93cykge1xuICAgICAgaWYgKCFnZXRFZmZlY3RQYXJhbXMgfHwgIWdldEVmZmVjdFBhcmFtcygpLnNsaWRlU2hhZG93cykgcmV0dXJuO1xuICAgICAgLy8gcmVtb3ZlIHNoYWRvd3NcbiAgICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgc2xpZGVFbC5xdWVyeVNlbGVjdG9yQWxsKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKS5mb3JFYWNoKHNoYWRvd0VsID0+IHNoYWRvd0VsLnJlbW92ZSgpKTtcbiAgICAgIH0pO1xuICAgICAgLy8gY3JlYXRlIG5ldyBvbmVcbiAgICAgIHJlY3JlYXRlU2hhZG93cygpO1xuICAgIH1cbiAgfSk7XG4gIGxldCByZXF1aXJlVXBkYXRlT25WaXJ0dWFsO1xuICBvbigndmlydHVhbFVwZGF0ZScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09IGVmZmVjdCkgcmV0dXJuO1xuICAgIGlmICghc3dpcGVyLnNsaWRlcy5sZW5ndGgpIHtcbiAgICAgIHJlcXVpcmVVcGRhdGVPblZpcnR1YWwgPSB0cnVlO1xuICAgIH1cbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgaWYgKHJlcXVpcmVVcGRhdGVPblZpcnR1YWwgJiYgc3dpcGVyLnNsaWRlcyAmJiBzd2lwZXIuc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgICAgcmVxdWlyZVVwZGF0ZU9uVmlydHVhbCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn0iLCJpbXBvcnQgeyBnZXRTbGlkZVRyYW5zZm9ybUVsIH0gZnJvbSAnLi91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlZmZlY3RUYXJnZXQoZWZmZWN0UGFyYW1zLCBzbGlkZUVsKSB7XG4gIGNvbnN0IHRyYW5zZm9ybUVsID0gZ2V0U2xpZGVUcmFuc2Zvcm1FbChzbGlkZUVsKTtcbiAgaWYgKHRyYW5zZm9ybUVsICE9PSBzbGlkZUVsKSB7XG4gICAgdHJhbnNmb3JtRWwuc3R5bGUuYmFja2ZhY2VWaXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgdHJhbnNmb3JtRWwuc3R5bGVbJy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eSddID0gJ2hpZGRlbic7XG4gIH1cbiAgcmV0dXJuIHRyYW5zZm9ybUVsO1xufSIsImltcG9ydCB7IGVsZW1lbnRUcmFuc2l0aW9uRW5kIH0gZnJvbSAnLi91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCh7XG4gIHN3aXBlcixcbiAgZHVyYXRpb24sXG4gIHRyYW5zZm9ybUVsZW1lbnRzLFxuICBhbGxTbGlkZXNcbn0pIHtcbiAgY29uc3Qge1xuICAgIGFjdGl2ZUluZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGdldFNsaWRlID0gZWwgPT4ge1xuICAgIGlmICghZWwucGFyZW50RWxlbWVudCkge1xuICAgICAgLy8gYXNzdW1lIHNoYWRvdyByb290XG4gICAgICBjb25zdCBzbGlkZSA9IHN3aXBlci5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5zaGFkb3dFbCAmJiBzbGlkZUVsLnNoYWRvd0VsID09PSBlbC5wYXJlbnROb2RlKVswXTtcbiAgICAgIHJldHVybiBzbGlkZTtcbiAgICB9XG4gICAgcmV0dXJuIGVsLnBhcmVudEVsZW1lbnQ7XG4gIH07XG4gIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgJiYgZHVyYXRpb24gIT09IDApIHtcbiAgICBsZXQgZXZlbnRUcmlnZ2VyZWQgPSBmYWxzZTtcbiAgICBsZXQgdHJhbnNpdGlvbkVuZFRhcmdldDtcbiAgICBpZiAoYWxsU2xpZGVzKSB7XG4gICAgICB0cmFuc2l0aW9uRW5kVGFyZ2V0ID0gdHJhbnNmb3JtRWxlbWVudHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zaXRpb25FbmRUYXJnZXQgPSB0cmFuc2Zvcm1FbGVtZW50cy5maWx0ZXIodHJhbnNmb3JtRWwgPT4ge1xuICAgICAgICBjb25zdCBlbCA9IHRyYW5zZm9ybUVsLmNsYXNzTGlzdC5jb250YWlucygnc3dpcGVyLXNsaWRlLXRyYW5zZm9ybScpID8gZ2V0U2xpZGUodHJhbnNmb3JtRWwpIDogdHJhbnNmb3JtRWw7XG4gICAgICAgIHJldHVybiBzd2lwZXIuZ2V0U2xpZGVJbmRleChlbCkgPT09IGFjdGl2ZUluZGV4O1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRyYW5zaXRpb25FbmRUYXJnZXQuZm9yRWFjaChlbCA9PiB7XG4gICAgICBlbGVtZW50VHJhbnNpdGlvbkVuZChlbCwgKCkgPT4ge1xuICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyZWQpIHJldHVybjtcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBldmVudFRyaWdnZXJlZCA9IHRydWU7XG4gICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudCgndHJhbnNpdGlvbmVuZCcsIHtcbiAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn0iLCJpbXBvcnQgZWZmZWN0SW5pdCBmcm9tICcuLi8uLi9zaGFyZWQvZWZmZWN0LWluaXQuanMnO1xuaW1wb3J0IGVmZmVjdFRhcmdldCBmcm9tICcuLi8uLi9zaGFyZWQvZWZmZWN0LXRhcmdldC5qcyc7XG5pbXBvcnQgZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQgZnJvbSAnLi4vLi4vc2hhcmVkL2VmZmVjdC12aXJ0dWFsLXRyYW5zaXRpb24tZW5kLmpzJztcbmltcG9ydCB7IGdldFNsaWRlVHJhbnNmb3JtRWwgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRWZmZWN0RmFkZSh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvblxufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGZhZGVFZmZlY3Q6IHtcbiAgICAgIGNyb3NzRmFkZTogZmFsc2VcbiAgICB9XG4gIH0pO1xuICBjb25zdCBzZXRUcmFuc2xhdGUgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmZhZGVFZmZlY3Q7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzW2ldO1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gc2xpZGVFbC5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIGxldCB0eCA9IC1vZmZzZXQ7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkgdHggLT0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGxldCB0eSA9IDA7XG4gICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICB0eSA9IHR4O1xuICAgICAgICB0eCA9IDA7XG4gICAgICB9XG4gICAgICBjb25zdCBzbGlkZU9wYWNpdHkgPSBzd2lwZXIucGFyYW1zLmZhZGVFZmZlY3QuY3Jvc3NGYWRlID8gTWF0aC5tYXgoMSAtIE1hdGguYWJzKHNsaWRlRWwucHJvZ3Jlc3MpLCAwKSA6IDEgKyBNYXRoLm1pbihNYXRoLm1heChzbGlkZUVsLnByb2dyZXNzLCAtMSksIDApO1xuICAgICAgY29uc3QgdGFyZ2V0RWwgPSBlZmZlY3RUYXJnZXQocGFyYW1zLCBzbGlkZUVsKTtcbiAgICAgIHRhcmdldEVsLnN0eWxlLm9wYWNpdHkgPSBzbGlkZU9wYWNpdHk7XG4gICAgICB0YXJnZXRFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0eH1weCwgJHt0eX1weCwgMHB4KWA7XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4ge1xuICAgIGNvbnN0IHRyYW5zZm9ybUVsZW1lbnRzID0gc3dpcGVyLnNsaWRlcy5tYXAoc2xpZGVFbCA9PiBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpKTtcbiAgICB0cmFuc2Zvcm1FbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICB9KTtcbiAgICBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCh7XG4gICAgICBzd2lwZXIsXG4gICAgICBkdXJhdGlvbixcbiAgICAgIHRyYW5zZm9ybUVsZW1lbnRzLFxuICAgICAgYWxsU2xpZGVzOiB0cnVlXG4gICAgfSk7XG4gIH07XG4gIGVmZmVjdEluaXQoe1xuICAgIGVmZmVjdDogJ2ZhZGUnLFxuICAgIHN3aXBlcixcbiAgICBvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgc2V0VHJhbnNpdGlvbixcbiAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7XG4gICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgdmlydHVhbFRyYW5zbGF0ZTogIXN3aXBlci5wYXJhbXMuY3NzTW9kZVxuICAgIH0pXG4gIH0pO1xufSIsImltcG9ydCBlZmZlY3RJbml0IGZyb20gJy4uLy4uL3NoYXJlZC9lZmZlY3QtaW5pdC5qcyc7XG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEVmZmVjdEN1YmUoe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtcyxcbiAgb25cbn0pIHtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBjdWJlRWZmZWN0OiB7XG4gICAgICBzbGlkZVNoYWRvd3M6IHRydWUsXG4gICAgICBzaGFkb3c6IHRydWUsXG4gICAgICBzaGFkb3dPZmZzZXQ6IDIwLFxuICAgICAgc2hhZG93U2NhbGU6IDAuOTRcbiAgICB9XG4gIH0pO1xuICBjb25zdCBjcmVhdGVTbGlkZVNoYWRvd3MgPSAoc2xpZGVFbCwgcHJvZ3Jlc3MsIGlzSG9yaXpvbnRhbCkgPT4ge1xuICAgIGxldCBzaGFkb3dCZWZvcmUgPSBpc0hvcml6b250YWwgPyBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgbGV0IHNoYWRvd0FmdGVyID0gaXNIb3Jpem9udGFsID8gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcbiAgICBpZiAoIXNoYWRvd0JlZm9yZSkge1xuICAgICAgc2hhZG93QmVmb3JlID0gY3JlYXRlRWxlbWVudCgnZGl2JywgYHN3aXBlci1zbGlkZS1zaGFkb3ctJHtpc0hvcml6b250YWwgPyAnbGVmdCcgOiAndG9wJ31gKTtcbiAgICAgIHNsaWRlRWwuYXBwZW5kKHNoYWRvd0JlZm9yZSk7XG4gICAgfVxuICAgIGlmICghc2hhZG93QWZ0ZXIpIHtcbiAgICAgIHNoYWRvd0FmdGVyID0gY3JlYXRlRWxlbWVudCgnZGl2JywgYHN3aXBlci1zbGlkZS1zaGFkb3ctJHtpc0hvcml6b250YWwgPyAncmlnaHQnIDogJ2JvdHRvbSd9YCk7XG4gICAgICBzbGlkZUVsLmFwcGVuZChzaGFkb3dBZnRlcik7XG4gICAgfVxuICAgIGlmIChzaGFkb3dCZWZvcmUpIHNoYWRvd0JlZm9yZS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgoLXByb2dyZXNzLCAwKTtcbiAgICBpZiAoc2hhZG93QWZ0ZXIpIHNoYWRvd0FmdGVyLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heChwcm9ncmVzcywgMCk7XG4gIH07XG4gIGNvbnN0IHJlY3JlYXRlU2hhZG93cyA9ICgpID0+IHtcbiAgICAvLyBjcmVhdGUgbmV3IG9uZXNcbiAgICBjb25zdCBpc0hvcml6b250YWwgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbihzbGlkZUVsLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgY3JlYXRlU2xpZGVTaGFkb3dzKHNsaWRlRWwsIHByb2dyZXNzLCBpc0hvcml6b250YWwpO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBzZXRUcmFuc2xhdGUgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgZWwsXG4gICAgICB3cmFwcGVyRWwsXG4gICAgICBzbGlkZXMsXG4gICAgICB3aWR0aDogc3dpcGVyV2lkdGgsXG4gICAgICBoZWlnaHQ6IHN3aXBlckhlaWdodCxcbiAgICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgICAgc2l6ZTogc3dpcGVyU2l6ZSxcbiAgICAgIGJyb3dzZXJcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuY3ViZUVmZmVjdDtcbiAgICBjb25zdCBpc0hvcml6b250YWwgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgbGV0IHdyYXBwZXJSb3RhdGUgPSAwO1xuICAgIGxldCBjdWJlU2hhZG93RWw7XG4gICAgaWYgKHBhcmFtcy5zaGFkb3cpIHtcbiAgICAgIGlmIChpc0hvcml6b250YWwpIHtcbiAgICAgICAgY3ViZVNoYWRvd0VsID0gc3dpcGVyLnNsaWRlc0VsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItY3ViZS1zaGFkb3cnKTtcbiAgICAgICAgaWYgKCFjdWJlU2hhZG93RWwpIHtcbiAgICAgICAgICBjdWJlU2hhZG93RWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCAnc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlc0VsLmFwcGVuZChjdWJlU2hhZG93RWwpO1xuICAgICAgICB9XG4gICAgICAgIGN1YmVTaGFkb3dFbC5zdHlsZS5oZWlnaHQgPSBgJHtzd2lwZXJXaWR0aH1weGA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdWJlU2hhZG93RWwgPSBlbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG4gICAgICAgIGlmICghY3ViZVNoYWRvd0VsKSB7XG4gICAgICAgICAgY3ViZVNoYWRvd0VsID0gY3JlYXRlRWxlbWVudCgnZGl2JywgJ3N3aXBlci1jdWJlLXNoYWRvdycpO1xuICAgICAgICAgIGVsLmFwcGVuZChjdWJlU2hhZG93RWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBzbGlkZUVsID0gc2xpZGVzW2ldO1xuICAgICAgbGV0IHNsaWRlSW5kZXggPSBpO1xuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICBzbGlkZUluZGV4ID0gcGFyc2VJbnQoc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICAgIH1cbiAgICAgIGxldCBzbGlkZUFuZ2xlID0gc2xpZGVJbmRleCAqIDkwO1xuICAgICAgbGV0IHJvdW5kID0gTWF0aC5mbG9vcihzbGlkZUFuZ2xlIC8gMzYwKTtcbiAgICAgIGlmIChydGwpIHtcbiAgICAgICAgc2xpZGVBbmdsZSA9IC1zbGlkZUFuZ2xlO1xuICAgICAgICByb3VuZCA9IE1hdGguZmxvb3IoLXNsaWRlQW5nbGUgLyAzNjApO1xuICAgICAgfVxuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbihzbGlkZUVsLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgbGV0IHR4ID0gMDtcbiAgICAgIGxldCB0eSA9IDA7XG4gICAgICBsZXQgdHogPSAwO1xuICAgICAgaWYgKHNsaWRlSW5kZXggJSA0ID09PSAwKSB7XG4gICAgICAgIHR4ID0gLXJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICAgIHR6ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAxKSAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSAwO1xuICAgICAgICB0eiA9IC1yb3VuZCAqIDQgKiBzd2lwZXJTaXplO1xuICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDIpICUgNCA9PT0gMCkge1xuICAgICAgICB0eCA9IHN3aXBlclNpemUgKyByb3VuZCAqIDQgKiBzd2lwZXJTaXplO1xuICAgICAgICB0eiA9IHN3aXBlclNpemU7XG4gICAgICB9IGVsc2UgaWYgKChzbGlkZUluZGV4IC0gMykgJSA0ID09PSAwKSB7XG4gICAgICAgIHR4ID0gLXN3aXBlclNpemU7XG4gICAgICAgIHR6ID0gMyAqIHN3aXBlclNpemUgKyBzd2lwZXJTaXplICogNCAqIHJvdW5kO1xuICAgICAgfVxuICAgICAgaWYgKHJ0bCkge1xuICAgICAgICB0eCA9IC10eDtcbiAgICAgIH1cbiAgICAgIGlmICghaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIHR5ID0gdHg7XG4gICAgICAgIHR4ID0gMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IGByb3RhdGVYKCR7aXNIb3Jpem9udGFsID8gMCA6IC1zbGlkZUFuZ2xlfWRlZykgcm90YXRlWSgke2lzSG9yaXpvbnRhbCA/IHNsaWRlQW5nbGUgOiAwfWRlZykgdHJhbnNsYXRlM2QoJHt0eH1weCwgJHt0eX1weCwgJHt0en1weClgO1xuICAgICAgaWYgKHByb2dyZXNzIDw9IDEgJiYgcHJvZ3Jlc3MgPiAtMSkge1xuICAgICAgICB3cmFwcGVyUm90YXRlID0gc2xpZGVJbmRleCAqIDkwICsgcHJvZ3Jlc3MgKiA5MDtcbiAgICAgICAgaWYgKHJ0bCkgd3JhcHBlclJvdGF0ZSA9IC1zbGlkZUluZGV4ICogOTAgLSBwcm9ncmVzcyAqIDkwO1xuICAgICAgfVxuICAgICAgc2xpZGVFbC5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICBjcmVhdGVTbGlkZVNoYWRvd3Moc2xpZGVFbCwgcHJvZ3Jlc3MsIGlzSG9yaXpvbnRhbCk7XG4gICAgICB9XG4gICAgfVxuICAgIHdyYXBwZXJFbC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBgNTAlIDUwJSAtJHtzd2lwZXJTaXplIC8gMn1weGA7XG4gICAgd3JhcHBlckVsLnN0eWxlWyctd2Via2l0LXRyYW5zZm9ybS1vcmlnaW4nXSA9IGA1MCUgNTAlIC0ke3N3aXBlclNpemUgLyAyfXB4YDtcbiAgICBpZiAocGFyYW1zLnNoYWRvdykge1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBjdWJlU2hhZG93RWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDBweCwgJHtzd2lwZXJXaWR0aCAvIDIgKyBwYXJhbXMuc2hhZG93T2Zmc2V0fXB4LCAkey1zd2lwZXJXaWR0aCAvIDJ9cHgpIHJvdGF0ZVgoOTBkZWcpIHJvdGF0ZVooMGRlZykgc2NhbGUoJHtwYXJhbXMuc2hhZG93U2NhbGV9KWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzaGFkb3dBbmdsZSA9IE1hdGguYWJzKHdyYXBwZXJSb3RhdGUpIC0gTWF0aC5mbG9vcihNYXRoLmFicyh3cmFwcGVyUm90YXRlKSAvIDkwKSAqIDkwO1xuICAgICAgICBjb25zdCBtdWx0aXBsaWVyID0gMS41IC0gKE1hdGguc2luKHNoYWRvd0FuZ2xlICogMiAqIE1hdGguUEkgLyAzNjApIC8gMiArIE1hdGguY29zKHNoYWRvd0FuZ2xlICogMiAqIE1hdGguUEkgLyAzNjApIC8gMik7XG4gICAgICAgIGNvbnN0IHNjYWxlMSA9IHBhcmFtcy5zaGFkb3dTY2FsZTtcbiAgICAgICAgY29uc3Qgc2NhbGUyID0gcGFyYW1zLnNoYWRvd1NjYWxlIC8gbXVsdGlwbGllcjtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gcGFyYW1zLnNoYWRvd09mZnNldDtcbiAgICAgICAgY3ViZVNoYWRvd0VsLnN0eWxlLnRyYW5zZm9ybSA9IGBzY2FsZTNkKCR7c2NhbGUxfSwgMSwgJHtzY2FsZTJ9KSB0cmFuc2xhdGUzZCgwcHgsICR7c3dpcGVySGVpZ2h0IC8gMiArIG9mZnNldH1weCwgJHstc3dpcGVySGVpZ2h0IC8gMiAvIHNjYWxlMn1weCkgcm90YXRlWCgtOTBkZWcpYDtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgekZhY3RvciA9IChicm93c2VyLmlzU2FmYXJpIHx8IGJyb3dzZXIuaXNXZWJWaWV3KSAmJiBicm93c2VyLm5lZWRQZXJzcGVjdGl2ZUZpeCA/IC1zd2lwZXJTaXplIC8gMiA6IDA7XG4gICAgd3JhcHBlckVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwcHgsMCwke3pGYWN0b3J9cHgpIHJvdGF0ZVgoJHtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAwIDogd3JhcHBlclJvdGF0ZX1kZWcpIHJvdGF0ZVkoJHtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAtd3JhcHBlclJvdGF0ZSA6IDB9ZGVnKWA7XG4gICAgd3JhcHBlckVsLnN0eWxlLnNldFByb3BlcnR5KCctLXN3aXBlci1jdWJlLXRyYW5zbGF0ZS16JywgYCR7ekZhY3Rvcn1weGApO1xuICB9O1xuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGVsLFxuICAgICAgc2xpZGVzXG4gICAgfSA9IHN3aXBlcjtcbiAgICBzbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIHNsaWRlRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgc2xpZGVFbC5xdWVyeVNlbGVjdG9yQWxsKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKS5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgICAgc3ViRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3ViZUVmZmVjdC5zaGFkb3cgJiYgIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgY29uc3Qgc2hhZG93RWwgPSBlbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG4gICAgICBpZiAoc2hhZG93RWwpIHNoYWRvd0VsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICB9XG4gIH07XG4gIGVmZmVjdEluaXQoe1xuICAgIGVmZmVjdDogJ2N1YmUnLFxuICAgIHN3aXBlcixcbiAgICBvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgc2V0VHJhbnNpdGlvbixcbiAgICByZWNyZWF0ZVNoYWRvd3MsXG4gICAgZ2V0RWZmZWN0UGFyYW1zOiAoKSA9PiBzd2lwZXIucGFyYW1zLmN1YmVFZmZlY3QsXG4gICAgcGVyc3BlY3RpdmU6ICgpID0+IHRydWUsXG4gICAgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoe1xuICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgIHJlc2lzdGFuY2VSYXRpbzogMCxcbiAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgICAgIHZpcnR1YWxUcmFuc2xhdGU6IHRydWVcbiAgICB9KVxuICB9KTtcbn0iLCJpbXBvcnQgeyBjcmVhdGVFbGVtZW50LCBnZXRTbGlkZVRyYW5zZm9ybUVsIH0gZnJvbSAnLi91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVTaGFkb3cocGFyYW1zLCBzbGlkZUVsLCBzaWRlKSB7XG4gIGNvbnN0IHNoYWRvd0NsYXNzID0gYHN3aXBlci1zbGlkZS1zaGFkb3cke3NpZGUgPyBgLSR7c2lkZX1gIDogJyd9YDtcbiAgY29uc3Qgc2hhZG93Q29udGFpbmVyID0gZ2V0U2xpZGVUcmFuc2Zvcm1FbChzbGlkZUVsKTtcbiAgbGV0IHNoYWRvd0VsID0gc2hhZG93Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoYC4ke3NoYWRvd0NsYXNzfWApO1xuICBpZiAoIXNoYWRvd0VsKSB7XG4gICAgc2hhZG93RWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBgc3dpcGVyLXNsaWRlLXNoYWRvdyR7c2lkZSA/IGAtJHtzaWRlfWAgOiAnJ31gKTtcbiAgICBzaGFkb3dDb250YWluZXIuYXBwZW5kKHNoYWRvd0VsKTtcbiAgfVxuICByZXR1cm4gc2hhZG93RWw7XG59IiwiaW1wb3J0IGNyZWF0ZVNoYWRvdyBmcm9tICcuLi8uLi9zaGFyZWQvY3JlYXRlLXNoYWRvdy5qcyc7XG5pbXBvcnQgZWZmZWN0SW5pdCBmcm9tICcuLi8uLi9zaGFyZWQvZWZmZWN0LWluaXQuanMnO1xuaW1wb3J0IGVmZmVjdFRhcmdldCBmcm9tICcuLi8uLi9zaGFyZWQvZWZmZWN0LXRhcmdldC5qcyc7XG5pbXBvcnQgZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQgZnJvbSAnLi4vLi4vc2hhcmVkL2VmZmVjdC12aXJ0dWFsLXRyYW5zaXRpb24tZW5kLmpzJztcbmltcG9ydCB7IGdldFNsaWRlVHJhbnNmb3JtRWwgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRWZmZWN0RmxpcCh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvblxufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGZsaXBFZmZlY3Q6IHtcbiAgICAgIHNsaWRlU2hhZG93czogdHJ1ZSxcbiAgICAgIGxpbWl0Um90YXRpb246IHRydWVcbiAgICB9XG4gIH0pO1xuICBjb25zdCBjcmVhdGVTbGlkZVNoYWRvd3MgPSAoc2xpZGVFbCwgcHJvZ3Jlc3MsIHBhcmFtcykgPT4ge1xuICAgIGxldCBzaGFkb3dCZWZvcmUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgbGV0IHNoYWRvd0FmdGVyID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcbiAgICBpZiAoIXNoYWRvd0JlZm9yZSkge1xuICAgICAgc2hhZG93QmVmb3JlID0gY3JlYXRlU2hhZG93KHBhcmFtcywgc2xpZGVFbCwgc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCcpO1xuICAgIH1cbiAgICBpZiAoIXNoYWRvd0FmdGVyKSB7XG4gICAgICBzaGFkb3dBZnRlciA9IGNyZWF0ZVNoYWRvdyhwYXJhbXMsIHNsaWRlRWwsIHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdyaWdodCcgOiAnYm90dG9tJyk7XG4gICAgfVxuICAgIGlmIChzaGFkb3dCZWZvcmUpIHNoYWRvd0JlZm9yZS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgoLXByb2dyZXNzLCAwKTtcbiAgICBpZiAoc2hhZG93QWZ0ZXIpIHNoYWRvd0FmdGVyLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heChwcm9ncmVzcywgMCk7XG4gIH07XG4gIGNvbnN0IHJlY3JlYXRlU2hhZG93cyA9ICgpID0+IHtcbiAgICAvLyBTZXQgc2hhZG93c1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdDtcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBsZXQgcHJvZ3Jlc3MgPSBzbGlkZUVsLnByb2dyZXNzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdC5saW1pdFJvdGF0aW9uKSB7XG4gICAgICAgIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oc2xpZGVFbC5wcm9ncmVzcywgMSksIC0xKTtcbiAgICAgIH1cbiAgICAgIGNyZWF0ZVNsaWRlU2hhZG93cyhzbGlkZUVsLCBwcm9ncmVzcywgcGFyYW1zKTtcbiAgICB9KTtcbiAgfTtcbiAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlcyxcbiAgICAgIHJ0bFRyYW5zbGF0ZTogcnRsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3Q7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHNsaWRlRWwgPSBzbGlkZXNbaV07XG4gICAgICBsZXQgcHJvZ3Jlc3MgPSBzbGlkZUVsLnByb2dyZXNzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdC5saW1pdFJvdGF0aW9uKSB7XG4gICAgICAgIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oc2xpZGVFbC5wcm9ncmVzcywgMSksIC0xKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9mZnNldCA9IHNsaWRlRWwuc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICBjb25zdCByb3RhdGUgPSAtMTgwICogcHJvZ3Jlc3M7XG4gICAgICBsZXQgcm90YXRlWSA9IHJvdGF0ZTtcbiAgICAgIGxldCByb3RhdGVYID0gMDtcbiAgICAgIGxldCB0eCA9IHN3aXBlci5wYXJhbXMuY3NzTW9kZSA/IC1vZmZzZXQgLSBzd2lwZXIudHJhbnNsYXRlIDogLW9mZnNldDtcbiAgICAgIGxldCB0eSA9IDA7XG4gICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICB0eSA9IHR4O1xuICAgICAgICB0eCA9IDA7XG4gICAgICAgIHJvdGF0ZVggPSAtcm90YXRlWTtcbiAgICAgICAgcm90YXRlWSA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHJ0bCkge1xuICAgICAgICByb3RhdGVZID0gLXJvdGF0ZVk7XG4gICAgICB9XG4gICAgICBzbGlkZUVsLnN0eWxlLnpJbmRleCA9IC1NYXRoLmFicyhNYXRoLnJvdW5kKHByb2dyZXNzKSkgKyBzbGlkZXMubGVuZ3RoO1xuICAgICAgaWYgKHBhcmFtcy5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgY3JlYXRlU2xpZGVTaGFkb3dzKHNsaWRlRWwsIHByb2dyZXNzLCBwYXJhbXMpO1xuICAgICAgfVxuICAgICAgY29uc3QgdHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7dHh9cHgsICR7dHl9cHgsIDBweCkgcm90YXRlWCgke3JvdGF0ZVh9ZGVnKSByb3RhdGVZKCR7cm90YXRlWX1kZWcpYDtcbiAgICAgIGNvbnN0IHRhcmdldEVsID0gZWZmZWN0VGFyZ2V0KHBhcmFtcywgc2xpZGVFbCk7XG4gICAgICB0YXJnZXRFbC5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4ge1xuICAgIGNvbnN0IHRyYW5zZm9ybUVsZW1lbnRzID0gc3dpcGVyLnNsaWRlcy5tYXAoc2xpZGVFbCA9PiBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpKTtcbiAgICB0cmFuc2Zvcm1FbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLmZvckVhY2goc2hhZG93RWwgPT4ge1xuICAgICAgICBzaGFkb3dFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCh7XG4gICAgICBzd2lwZXIsXG4gICAgICBkdXJhdGlvbixcbiAgICAgIHRyYW5zZm9ybUVsZW1lbnRzXG4gICAgfSk7XG4gIH07XG4gIGVmZmVjdEluaXQoe1xuICAgIGVmZmVjdDogJ2ZsaXAnLFxuICAgIHN3aXBlcixcbiAgICBvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgc2V0VHJhbnNpdGlvbixcbiAgICByZWNyZWF0ZVNoYWRvd3MsXG4gICAgZ2V0RWZmZWN0UGFyYW1zOiAoKSA9PiBzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3QsXG4gICAgcGVyc3BlY3RpdmU6ICgpID0+IHRydWUsXG4gICAgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoe1xuICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgIHZpcnR1YWxUcmFuc2xhdGU6ICFzd2lwZXIucGFyYW1zLmNzc01vZGVcbiAgICB9KVxuICB9KTtcbn0iLCJpbXBvcnQgY3JlYXRlU2hhZG93IGZyb20gJy4uLy4uL3NoYXJlZC9jcmVhdGUtc2hhZG93LmpzJztcbmltcG9ydCBlZmZlY3RJbml0IGZyb20gJy4uLy4uL3NoYXJlZC9lZmZlY3QtaW5pdC5qcyc7XG5pbXBvcnQgZWZmZWN0VGFyZ2V0IGZyb20gJy4uLy4uL3NoYXJlZC9lZmZlY3QtdGFyZ2V0LmpzJztcbmltcG9ydCB7IGdldFNsaWRlVHJhbnNmb3JtRWwgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRWZmZWN0Q292ZXJmbG93KHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uXG59KSB7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgY292ZXJmbG93RWZmZWN0OiB7XG4gICAgICByb3RhdGU6IDUwLFxuICAgICAgc3RyZXRjaDogMCxcbiAgICAgIGRlcHRoOiAxMDAsXG4gICAgICBzY2FsZTogMSxcbiAgICAgIG1vZGlmaWVyOiAxLFxuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHdpZHRoOiBzd2lwZXJXaWR0aCxcbiAgICAgIGhlaWdodDogc3dpcGVySGVpZ2h0LFxuICAgICAgc2xpZGVzLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmNvdmVyZmxvd0VmZmVjdDtcbiAgICBjb25zdCBpc0hvcml6b250YWwgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICBjb25zdCBjZW50ZXIgPSBpc0hvcml6b250YWwgPyAtdHJhbnNmb3JtICsgc3dpcGVyV2lkdGggLyAyIDogLXRyYW5zZm9ybSArIHN3aXBlckhlaWdodCAvIDI7XG4gICAgY29uc3Qgcm90YXRlID0gaXNIb3Jpem9udGFsID8gcGFyYW1zLnJvdGF0ZSA6IC1wYXJhbXMucm90YXRlO1xuICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHBhcmFtcy5kZXB0aDtcbiAgICAvLyBFYWNoIHNsaWRlIG9mZnNldCBmcm9tIGNlbnRlclxuICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBzbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHNsaWRlRWwgPSBzbGlkZXNbaV07XG4gICAgICBjb25zdCBzbGlkZVNpemUgPSBzbGlkZXNTaXplc0dyaWRbaV07XG4gICAgICBjb25zdCBzbGlkZU9mZnNldCA9IHNsaWRlRWwuc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICBjb25zdCBjZW50ZXJPZmZzZXQgPSAoY2VudGVyIC0gc2xpZGVPZmZzZXQgLSBzbGlkZVNpemUgLyAyKSAvIHNsaWRlU2l6ZTtcbiAgICAgIGNvbnN0IG9mZnNldE11bHRpcGxpZXIgPSB0eXBlb2YgcGFyYW1zLm1vZGlmaWVyID09PSAnZnVuY3Rpb24nID8gcGFyYW1zLm1vZGlmaWVyKGNlbnRlck9mZnNldCkgOiBjZW50ZXJPZmZzZXQgKiBwYXJhbXMubW9kaWZpZXI7XG4gICAgICBsZXQgcm90YXRlWSA9IGlzSG9yaXpvbnRhbCA/IHJvdGF0ZSAqIG9mZnNldE11bHRpcGxpZXIgOiAwO1xuICAgICAgbGV0IHJvdGF0ZVggPSBpc0hvcml6b250YWwgPyAwIDogcm90YXRlICogb2Zmc2V0TXVsdGlwbGllcjtcbiAgICAgIC8vIHZhciByb3RhdGVaID0gMFxuICAgICAgbGV0IHRyYW5zbGF0ZVogPSAtdHJhbnNsYXRlICogTWF0aC5hYnMob2Zmc2V0TXVsdGlwbGllcik7XG4gICAgICBsZXQgc3RyZXRjaCA9IHBhcmFtcy5zdHJldGNoO1xuICAgICAgLy8gQWxsb3cgcGVyY2VudGFnZSB0byBtYWtlIGEgcmVsYXRpdmUgc3RyZXRjaCBmb3IgcmVzcG9uc2l2ZSBzbGlkZXJzXG4gICAgICBpZiAodHlwZW9mIHN0cmV0Y2ggPT09ICdzdHJpbmcnICYmIHN0cmV0Y2guaW5kZXhPZignJScpICE9PSAtMSkge1xuICAgICAgICBzdHJldGNoID0gcGFyc2VGbG9hdChwYXJhbXMuc3RyZXRjaCkgLyAxMDAgKiBzbGlkZVNpemU7XG4gICAgICB9XG4gICAgICBsZXQgdHJhbnNsYXRlWSA9IGlzSG9yaXpvbnRhbCA/IDAgOiBzdHJldGNoICogb2Zmc2V0TXVsdGlwbGllcjtcbiAgICAgIGxldCB0cmFuc2xhdGVYID0gaXNIb3Jpem9udGFsID8gc3RyZXRjaCAqIG9mZnNldE11bHRpcGxpZXIgOiAwO1xuICAgICAgbGV0IHNjYWxlID0gMSAtICgxIC0gcGFyYW1zLnNjYWxlKSAqIE1hdGguYWJzKG9mZnNldE11bHRpcGxpZXIpO1xuXG4gICAgICAvLyBGaXggZm9yIHVsdHJhIHNtYWxsIHZhbHVlc1xuICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVgpIDwgMC4wMDEpIHRyYW5zbGF0ZVggPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVkpIDwgMC4wMDEpIHRyYW5zbGF0ZVkgPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVopIDwgMC4wMDEpIHRyYW5zbGF0ZVogPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKHJvdGF0ZVkpIDwgMC4wMDEpIHJvdGF0ZVkgPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKHJvdGF0ZVgpIDwgMC4wMDEpIHJvdGF0ZVggPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKHNjYWxlKSA8IDAuMDAxKSBzY2FsZSA9IDA7XG4gICAgICBjb25zdCBzbGlkZVRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZVh9cHgsJHt0cmFuc2xhdGVZfXB4LCR7dHJhbnNsYXRlWn1weCkgIHJvdGF0ZVgoJHtyb3RhdGVYfWRlZykgcm90YXRlWSgke3JvdGF0ZVl9ZGVnKSBzY2FsZSgke3NjYWxlfSlgO1xuICAgICAgY29uc3QgdGFyZ2V0RWwgPSBlZmZlY3RUYXJnZXQocGFyYW1zLCBzbGlkZUVsKTtcbiAgICAgIHRhcmdldEVsLnN0eWxlLnRyYW5zZm9ybSA9IHNsaWRlVHJhbnNmb3JtO1xuICAgICAgc2xpZGVFbC5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChvZmZzZXRNdWx0aXBsaWVyKSkgKyAxO1xuICAgICAgaWYgKHBhcmFtcy5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgLy8gU2V0IHNoYWRvd3NcbiAgICAgICAgbGV0IHNoYWRvd0JlZm9yZUVsID0gaXNIb3Jpem9udGFsID8gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykgOiBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICBsZXQgc2hhZG93QWZ0ZXJFbCA9IGlzSG9yaXpvbnRhbCA/IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQnKSA6IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7XG4gICAgICAgIGlmICghc2hhZG93QmVmb3JlRWwpIHtcbiAgICAgICAgICBzaGFkb3dCZWZvcmVFbCA9IGNyZWF0ZVNoYWRvdyhwYXJhbXMsIHNsaWRlRWwsIGlzSG9yaXpvbnRhbCA/ICdsZWZ0JyA6ICd0b3AnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNoYWRvd0FmdGVyRWwpIHtcbiAgICAgICAgICBzaGFkb3dBZnRlckVsID0gY3JlYXRlU2hhZG93KHBhcmFtcywgc2xpZGVFbCwgaXNIb3Jpem9udGFsID8gJ3JpZ2h0JyA6ICdib3R0b20nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhZG93QmVmb3JlRWwpIHNoYWRvd0JlZm9yZUVsLnN0eWxlLm9wYWNpdHkgPSBvZmZzZXRNdWx0aXBsaWVyID4gMCA/IG9mZnNldE11bHRpcGxpZXIgOiAwO1xuICAgICAgICBpZiAoc2hhZG93QWZ0ZXJFbCkgc2hhZG93QWZ0ZXJFbC5zdHlsZS5vcGFjaXR5ID0gLW9mZnNldE11bHRpcGxpZXIgPiAwID8gLW9mZnNldE11bHRpcGxpZXIgOiAwO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3Qgc2V0VHJhbnNpdGlvbiA9IGR1cmF0aW9uID0+IHtcbiAgICBjb25zdCB0cmFuc2Zvcm1FbGVtZW50cyA9IHN3aXBlci5zbGlkZXMubWFwKHNsaWRlRWwgPT4gZ2V0U2xpZGVUcmFuc2Zvcm1FbChzbGlkZUVsKSk7XG4gICAgdHJhbnNmb3JtRWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICBlbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XG4gICAgICBlbC5xdWVyeVNlbGVjdG9yQWxsKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKS5mb3JFYWNoKHNoYWRvd0VsID0+IHtcbiAgICAgICAgc2hhZG93RWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG4gIGVmZmVjdEluaXQoe1xuICAgIGVmZmVjdDogJ2NvdmVyZmxvdycsXG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2l0aW9uLFxuICAgIHBlcnNwZWN0aXZlOiAoKSA9PiB0cnVlLFxuICAgIG92ZXJ3cml0ZVBhcmFtczogKCkgPT4gKHtcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWVcbiAgICB9KVxuICB9KTtcbn0iLCJpbXBvcnQgY3JlYXRlU2hhZG93IGZyb20gJy4uLy4uL3NoYXJlZC9jcmVhdGUtc2hhZG93LmpzJztcbmltcG9ydCBlZmZlY3RJbml0IGZyb20gJy4uLy4uL3NoYXJlZC9lZmZlY3QtaW5pdC5qcyc7XG5pbXBvcnQgZWZmZWN0VGFyZ2V0IGZyb20gJy4uLy4uL3NoYXJlZC9lZmZlY3QtdGFyZ2V0LmpzJztcbmltcG9ydCBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCBmcm9tICcuLi8uLi9zaGFyZWQvZWZmZWN0LXZpcnR1YWwtdHJhbnNpdGlvbi1lbmQuanMnO1xuaW1wb3J0IHsgZ2V0U2xpZGVUcmFuc2Zvcm1FbCB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBFZmZlY3RDcmVhdGl2ZSh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvblxufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGNyZWF0aXZlRWZmZWN0OiB7XG4gICAgICBsaW1pdFByb2dyZXNzOiAxLFxuICAgICAgc2hhZG93UGVyUHJvZ3Jlc3M6IGZhbHNlLFxuICAgICAgcHJvZ3Jlc3NNdWx0aXBsaWVyOiAxLFxuICAgICAgcGVyc3BlY3RpdmU6IHRydWUsXG4gICAgICBwcmV2OiB7XG4gICAgICAgIHRyYW5zbGF0ZTogWzAsIDAsIDBdLFxuICAgICAgICByb3RhdGU6IFswLCAwLCAwXSxcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgc2NhbGU6IDFcbiAgICAgIH0sXG4gICAgICBuZXh0OiB7XG4gICAgICAgIHRyYW5zbGF0ZTogWzAsIDAsIDBdLFxuICAgICAgICByb3RhdGU6IFswLCAwLCAwXSxcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgc2NhbGU6IDFcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBjb25zdCBnZXRUcmFuc2xhdGVWYWx1ZSA9IHZhbHVlID0+IHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykgcmV0dXJuIHZhbHVlO1xuICAgIHJldHVybiBgJHt2YWx1ZX1weGA7XG4gIH07XG4gIGNvbnN0IHNldFRyYW5zbGF0ZSA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXMsXG4gICAgICB3cmFwcGVyRWwsXG4gICAgICBzbGlkZXNTaXplc0dyaWRcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuY3JlYXRpdmVFZmZlY3Q7XG4gICAgY29uc3Qge1xuICAgICAgcHJvZ3Jlc3NNdWx0aXBsaWVyOiBtdWx0aXBsaWVyXG4gICAgfSA9IHBhcmFtcztcbiAgICBjb25zdCBpc0NlbnRlcmVkU2xpZGVzID0gc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcztcbiAgICBpZiAoaXNDZW50ZXJlZFNsaWRlcykge1xuICAgICAgY29uc3QgbWFyZ2luID0gc2xpZGVzU2l6ZXNHcmlkWzBdIC8gMiAtIHN3aXBlci5wYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlIHx8IDA7XG4gICAgICB3cmFwcGVyRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVgoY2FsYyg1MCUgLSAke21hcmdpbn1weCkpYDtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHNsaWRlRWwgPSBzbGlkZXNbaV07XG4gICAgICBjb25zdCBzbGlkZVByb2dyZXNzID0gc2xpZGVFbC5wcm9ncmVzcztcbiAgICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5taW4oTWF0aC5tYXgoc2xpZGVFbC5wcm9ncmVzcywgLXBhcmFtcy5saW1pdFByb2dyZXNzKSwgcGFyYW1zLmxpbWl0UHJvZ3Jlc3MpO1xuICAgICAgbGV0IG9yaWdpbmFsUHJvZ3Jlc3MgPSBwcm9ncmVzcztcbiAgICAgIGlmICghaXNDZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBvcmlnaW5hbFByb2dyZXNzID0gTWF0aC5taW4oTWF0aC5tYXgoc2xpZGVFbC5vcmlnaW5hbFByb2dyZXNzLCAtcGFyYW1zLmxpbWl0UHJvZ3Jlc3MpLCBwYXJhbXMubGltaXRQcm9ncmVzcyk7XG4gICAgICB9XG4gICAgICBjb25zdCBvZmZzZXQgPSBzbGlkZUVsLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgY29uc3QgdCA9IFtzd2lwZXIucGFyYW1zLmNzc01vZGUgPyAtb2Zmc2V0IC0gc3dpcGVyLnRyYW5zbGF0ZSA6IC1vZmZzZXQsIDAsIDBdO1xuICAgICAgY29uc3QgciA9IFswLCAwLCAwXTtcbiAgICAgIGxldCBjdXN0b20gPSBmYWxzZTtcbiAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIHRbMV0gPSB0WzBdO1xuICAgICAgICB0WzBdID0gMDtcbiAgICAgIH1cbiAgICAgIGxldCBkYXRhID0ge1xuICAgICAgICB0cmFuc2xhdGU6IFswLCAwLCAwXSxcbiAgICAgICAgcm90YXRlOiBbMCwgMCwgMF0sXG4gICAgICAgIHNjYWxlOiAxLFxuICAgICAgICBvcGFjaXR5OiAxXG4gICAgICB9O1xuICAgICAgaWYgKHByb2dyZXNzIDwgMCkge1xuICAgICAgICBkYXRhID0gcGFyYW1zLm5leHQ7XG4gICAgICAgIGN1c3RvbSA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHByb2dyZXNzID4gMCkge1xuICAgICAgICBkYXRhID0gcGFyYW1zLnByZXY7XG4gICAgICAgIGN1c3RvbSA9IHRydWU7XG4gICAgICB9XG4gICAgICAvLyBzZXQgdHJhbnNsYXRlXG4gICAgICB0LmZvckVhY2goKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICB0W2luZGV4XSA9IGBjYWxjKCR7dmFsdWV9cHggKyAoJHtnZXRUcmFuc2xhdGVWYWx1ZShkYXRhLnRyYW5zbGF0ZVtpbmRleF0pfSAqICR7TWF0aC5hYnMocHJvZ3Jlc3MgKiBtdWx0aXBsaWVyKX0pKWA7XG4gICAgICB9KTtcbiAgICAgIC8vIHNldCByb3RhdGVzXG4gICAgICByLmZvckVhY2goKHZhbHVlLCBpbmRleCkgPT4ge1xuICAgICAgICByW2luZGV4XSA9IGRhdGEucm90YXRlW2luZGV4XSAqIE1hdGguYWJzKHByb2dyZXNzICogbXVsdGlwbGllcik7XG4gICAgICB9KTtcbiAgICAgIHNsaWRlRWwuc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQoc2xpZGVQcm9ncmVzcykpICsgc2xpZGVzLmxlbmd0aDtcbiAgICAgIGNvbnN0IHRyYW5zbGF0ZVN0cmluZyA9IHQuam9pbignLCAnKTtcbiAgICAgIGNvbnN0IHJvdGF0ZVN0cmluZyA9IGByb3RhdGVYKCR7clswXX1kZWcpIHJvdGF0ZVkoJHtyWzFdfWRlZykgcm90YXRlWigke3JbMl19ZGVnKWA7XG4gICAgICBjb25zdCBzY2FsZVN0cmluZyA9IG9yaWdpbmFsUHJvZ3Jlc3MgPCAwID8gYHNjYWxlKCR7MSArICgxIC0gZGF0YS5zY2FsZSkgKiBvcmlnaW5hbFByb2dyZXNzICogbXVsdGlwbGllcn0pYCA6IGBzY2FsZSgkezEgLSAoMSAtIGRhdGEuc2NhbGUpICogb3JpZ2luYWxQcm9ncmVzcyAqIG11bHRpcGxpZXJ9KWA7XG4gICAgICBjb25zdCBvcGFjaXR5U3RyaW5nID0gb3JpZ2luYWxQcm9ncmVzcyA8IDAgPyAxICsgKDEgLSBkYXRhLm9wYWNpdHkpICogb3JpZ2luYWxQcm9ncmVzcyAqIG11bHRpcGxpZXIgOiAxIC0gKDEgLSBkYXRhLm9wYWNpdHkpICogb3JpZ2luYWxQcm9ncmVzcyAqIG11bHRpcGxpZXI7XG4gICAgICBjb25zdCB0cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVTdHJpbmd9KSAke3JvdGF0ZVN0cmluZ30gJHtzY2FsZVN0cmluZ31gO1xuXG4gICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgaWYgKGN1c3RvbSAmJiBkYXRhLnNoYWRvdyB8fCAhY3VzdG9tKSB7XG4gICAgICAgIGxldCBzaGFkb3dFbCA9IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3cnKTtcbiAgICAgICAgaWYgKCFzaGFkb3dFbCAmJiBkYXRhLnNoYWRvdykge1xuICAgICAgICAgIHNoYWRvd0VsID0gY3JlYXRlU2hhZG93KHBhcmFtcywgc2xpZGVFbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYWRvd0VsKSB7XG4gICAgICAgICAgY29uc3Qgc2hhZG93T3BhY2l0eSA9IHBhcmFtcy5zaGFkb3dQZXJQcm9ncmVzcyA/IHByb2dyZXNzICogKDEgLyBwYXJhbXMubGltaXRQcm9ncmVzcykgOiBwcm9ncmVzcztcbiAgICAgICAgICBzaGFkb3dFbC5zdHlsZS5vcGFjaXR5ID0gTWF0aC5taW4oTWF0aC5tYXgoTWF0aC5hYnMoc2hhZG93T3BhY2l0eSksIDApLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgdGFyZ2V0RWwgPSBlZmZlY3RUYXJnZXQocGFyYW1zLCBzbGlkZUVsKTtcbiAgICAgIHRhcmdldEVsLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIHRhcmdldEVsLnN0eWxlLm9wYWNpdHkgPSBvcGFjaXR5U3RyaW5nO1xuICAgICAgaWYgKGRhdGEub3JpZ2luKSB7XG4gICAgICAgIHRhcmdldEVsLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IGRhdGEub3JpZ2luO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgY29uc3Qgc2V0VHJhbnNpdGlvbiA9IGR1cmF0aW9uID0+IHtcbiAgICBjb25zdCB0cmFuc2Zvcm1FbGVtZW50cyA9IHN3aXBlci5zbGlkZXMubWFwKHNsaWRlRWwgPT4gZ2V0U2xpZGVUcmFuc2Zvcm1FbChzbGlkZUVsKSk7XG4gICAgdHJhbnNmb3JtRWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICBlbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XG4gICAgICBlbC5xdWVyeVNlbGVjdG9yQWxsKCcuc3dpcGVyLXNsaWRlLXNoYWRvdycpLmZvckVhY2goc2hhZG93RWwgPT4ge1xuICAgICAgICBzaGFkb3dFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCh7XG4gICAgICBzd2lwZXIsXG4gICAgICBkdXJhdGlvbixcbiAgICAgIHRyYW5zZm9ybUVsZW1lbnRzLFxuICAgICAgYWxsU2xpZGVzOiB0cnVlXG4gICAgfSk7XG4gIH07XG4gIGVmZmVjdEluaXQoe1xuICAgIGVmZmVjdDogJ2NyZWF0aXZlJyxcbiAgICBzd2lwZXIsXG4gICAgb24sXG4gICAgc2V0VHJhbnNsYXRlLFxuICAgIHNldFRyYW5zaXRpb24sXG4gICAgcGVyc3BlY3RpdmU6ICgpID0+IHN3aXBlci5wYXJhbXMuY3JlYXRpdmVFZmZlY3QucGVyc3BlY3RpdmUsXG4gICAgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoe1xuICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgIHZpcnR1YWxUcmFuc2xhdGU6ICFzd2lwZXIucGFyYW1zLmNzc01vZGVcbiAgICB9KVxuICB9KTtcbn0iLCJpbXBvcnQgY3JlYXRlU2hhZG93IGZyb20gJy4uLy4uL3NoYXJlZC9jcmVhdGUtc2hhZG93LmpzJztcbmltcG9ydCBlZmZlY3RJbml0IGZyb20gJy4uLy4uL3NoYXJlZC9lZmZlY3QtaW5pdC5qcyc7XG5pbXBvcnQgZWZmZWN0VGFyZ2V0IGZyb20gJy4uLy4uL3NoYXJlZC9lZmZlY3QtdGFyZ2V0LmpzJztcbmltcG9ydCBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCBmcm9tICcuLi8uLi9zaGFyZWQvZWZmZWN0LXZpcnR1YWwtdHJhbnNpdGlvbi1lbmQuanMnO1xuaW1wb3J0IHsgZ2V0U2xpZGVUcmFuc2Zvcm1FbCB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBFZmZlY3RDYXJkcyh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvblxufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGNhcmRzRWZmZWN0OiB7XG4gICAgICBzbGlkZVNoYWRvd3M6IHRydWUsXG4gICAgICByb3RhdGU6IHRydWUsXG4gICAgICBwZXJTbGlkZVJvdGF0ZTogMixcbiAgICAgIHBlclNsaWRlT2Zmc2V0OiA4XG4gICAgfVxuICB9KTtcbiAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlcyxcbiAgICAgIGFjdGl2ZUluZGV4XG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmNhcmRzRWZmZWN0O1xuICAgIGNvbnN0IHtcbiAgICAgIHN0YXJ0VHJhbnNsYXRlLFxuICAgICAgaXNUb3VjaGVkXG4gICAgfSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gICAgY29uc3QgY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHNsaWRlRWwgPSBzbGlkZXNbaV07XG4gICAgICBjb25zdCBzbGlkZVByb2dyZXNzID0gc2xpZGVFbC5wcm9ncmVzcztcbiAgICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5taW4oTWF0aC5tYXgoc2xpZGVQcm9ncmVzcywgLTQpLCA0KTtcbiAgICAgIGxldCBvZmZzZXQgPSBzbGlkZUVsLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgIXN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7c3dpcGVyLm1pblRyYW5zbGF0ZSgpfXB4KWA7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgb2Zmc2V0IC09IHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIH1cbiAgICAgIGxldCB0WCA9IHN3aXBlci5wYXJhbXMuY3NzTW9kZSA/IC1vZmZzZXQgLSBzd2lwZXIudHJhbnNsYXRlIDogLW9mZnNldDtcbiAgICAgIGxldCB0WSA9IDA7XG4gICAgICBjb25zdCB0WiA9IC0xMDAgKiBNYXRoLmFicyhwcm9ncmVzcyk7XG4gICAgICBsZXQgc2NhbGUgPSAxO1xuICAgICAgbGV0IHJvdGF0ZSA9IC1wYXJhbXMucGVyU2xpZGVSb3RhdGUgKiBwcm9ncmVzcztcbiAgICAgIGxldCB0WEFkZCA9IHBhcmFtcy5wZXJTbGlkZU9mZnNldCAtIE1hdGguYWJzKHByb2dyZXNzKSAqIDAuNzU7XG4gICAgICBjb25zdCBzbGlkZUluZGV4ID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5mcm9tICsgaSA6IGk7XG4gICAgICBjb25zdCBpc1N3aXBlVG9OZXh0ID0gKHNsaWRlSW5kZXggPT09IGFjdGl2ZUluZGV4IHx8IHNsaWRlSW5kZXggPT09IGFjdGl2ZUluZGV4IC0gMSkgJiYgcHJvZ3Jlc3MgPiAwICYmIHByb2dyZXNzIDwgMSAmJiAoaXNUb3VjaGVkIHx8IHN3aXBlci5wYXJhbXMuY3NzTW9kZSkgJiYgY3VycmVudFRyYW5zbGF0ZSA8IHN0YXJ0VHJhbnNsYXRlO1xuICAgICAgY29uc3QgaXNTd2lwZVRvUHJldiA9IChzbGlkZUluZGV4ID09PSBhY3RpdmVJbmRleCB8fCBzbGlkZUluZGV4ID09PSBhY3RpdmVJbmRleCArIDEpICYmIHByb2dyZXNzIDwgMCAmJiBwcm9ncmVzcyA+IC0xICYmIChpc1RvdWNoZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSAmJiBjdXJyZW50VHJhbnNsYXRlID4gc3RhcnRUcmFuc2xhdGU7XG4gICAgICBpZiAoaXNTd2lwZVRvTmV4dCB8fCBpc1N3aXBlVG9QcmV2KSB7XG4gICAgICAgIGNvbnN0IHN1YlByb2dyZXNzID0gKDEgLSBNYXRoLmFicygoTWF0aC5hYnMocHJvZ3Jlc3MpIC0gMC41KSAvIDAuNSkpICoqIDAuNTtcbiAgICAgICAgcm90YXRlICs9IC0yOCAqIHByb2dyZXNzICogc3ViUHJvZ3Jlc3M7XG4gICAgICAgIHNjYWxlICs9IC0wLjUgKiBzdWJQcm9ncmVzcztcbiAgICAgICAgdFhBZGQgKz0gOTYgKiBzdWJQcm9ncmVzcztcbiAgICAgICAgdFkgPSBgJHstMjUgKiBzdWJQcm9ncmVzcyAqIE1hdGguYWJzKHByb2dyZXNzKX0lYDtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9ncmVzcyA8IDApIHtcbiAgICAgICAgLy8gbmV4dFxuICAgICAgICB0WCA9IGBjYWxjKCR7dFh9cHggKyAoJHt0WEFkZCAqIE1hdGguYWJzKHByb2dyZXNzKX0lKSlgO1xuICAgICAgfSBlbHNlIGlmIChwcm9ncmVzcyA+IDApIHtcbiAgICAgICAgLy8gcHJldlxuICAgICAgICB0WCA9IGBjYWxjKCR7dFh9cHggKyAoLSR7dFhBZGQgKiBNYXRoLmFicyhwcm9ncmVzcyl9JSkpYDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRYID0gYCR7dFh9cHhgO1xuICAgICAgfVxuICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgY29uc3QgcHJldlkgPSB0WTtcbiAgICAgICAgdFkgPSB0WDtcbiAgICAgICAgdFggPSBwcmV2WTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNjYWxlU3RyaW5nID0gcHJvZ3Jlc3MgPCAwID8gYCR7MSArICgxIC0gc2NhbGUpICogcHJvZ3Jlc3N9YCA6IGAkezEgLSAoMSAtIHNjYWxlKSAqIHByb2dyZXNzfWA7XG4gICAgICBjb25zdCB0cmFuc2Zvcm0gPSBgXG4gICAgICAgIHRyYW5zbGF0ZTNkKCR7dFh9LCAke3RZfSwgJHt0Wn1weClcbiAgICAgICAgcm90YXRlWigke3BhcmFtcy5yb3RhdGUgPyByb3RhdGUgOiAwfWRlZylcbiAgICAgICAgc2NhbGUoJHtzY2FsZVN0cmluZ30pXG4gICAgICBgO1xuICAgICAgaWYgKHBhcmFtcy5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgLy8gU2V0IHNoYWRvd3NcbiAgICAgICAgbGV0IHNoYWRvd0VsID0gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdycpO1xuICAgICAgICBpZiAoIXNoYWRvd0VsKSB7XG4gICAgICAgICAgc2hhZG93RWwgPSBjcmVhdGVTaGFkb3cocGFyYW1zLCBzbGlkZUVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhZG93RWwpIHNoYWRvd0VsLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1pbihNYXRoLm1heCgoTWF0aC5hYnMocHJvZ3Jlc3MpIC0gMC41KSAvIDAuNSwgMCksIDEpO1xuICAgICAgfVxuICAgICAgc2xpZGVFbC5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChzbGlkZVByb2dyZXNzKSkgKyBzbGlkZXMubGVuZ3RoO1xuICAgICAgY29uc3QgdGFyZ2V0RWwgPSBlZmZlY3RUYXJnZXQocGFyYW1zLCBzbGlkZUVsKTtcbiAgICAgIHRhcmdldEVsLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHNldFRyYW5zaXRpb24gPSBkdXJhdGlvbiA9PiB7XG4gICAgY29uc3QgdHJhbnNmb3JtRWxlbWVudHMgPSBzd2lwZXIuc2xpZGVzLm1hcChzbGlkZUVsID0+IGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCkpO1xuICAgIHRyYW5zZm9ybUVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgZWwucXVlcnlTZWxlY3RvckFsbCgnLnN3aXBlci1zbGlkZS1zaGFkb3cnKS5mb3JFYWNoKHNoYWRvd0VsID0+IHtcbiAgICAgICAgc2hhZG93RWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQoe1xuICAgICAgc3dpcGVyLFxuICAgICAgZHVyYXRpb24sXG4gICAgICB0cmFuc2Zvcm1FbGVtZW50c1xuICAgIH0pO1xuICB9O1xuICBlZmZlY3RJbml0KHtcbiAgICBlZmZlY3Q6ICdjYXJkcycsXG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2l0aW9uLFxuICAgIHBlcnNwZWN0aXZlOiAoKSA9PiB0cnVlLFxuICAgIG92ZXJ3cml0ZVBhcmFtczogKCkgPT4gKHtcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICB2aXJ0dWFsVHJhbnNsYXRlOiAhc3dpcGVyLnBhcmFtcy5jc3NNb2RlXG4gICAgfSlcbiAgfSk7XG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmwgKyBcIi4uL1wiOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5NTYwKTtcbiJdLCJuYW1lcyI6WyJzd2lwZXJUb3BEYXRhIiwiaWQiLCJpbWciLCJsYXJnZSIsIm1lZGl1bSIsIm1vYmlsZSIsInRodW1iIiwiYWx0IiwibG9nbyIsInRpdGxlIiwidGV4dCIsImJ0biIsImhyZWYiLCJjbGFzc0xvZ28iLCJzd2lwZXJIYXJkd2FyZURhdGEiLCJtb3JlIiwiYnV5Iiwic3dpcGVyUmFuZG9tR2FtZURhdGEiLCJzbGlkZXJQYXJhbXMiLCJzbGlkZXJQYXJhbXNUb3AiLCJzbGlkZXJQYXJhbXNIYXJkd2FyZSIsInNlY3Rpb25IYXJkd2FyZVdyYXBwZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJzZWN0aW9uSGFyZHdhcmVUaHVtYnNXcmFwcGVyIiwibWFwIiwiZGF0YSIsImFwcGVuZENoaWxkIiwiZGl2U2xpZGUiLCJjcmVhdGVFbGVtZW50IiwiZGl2Q29udGFpbmVyIiwiaW1nVG9wIiwiZGl2RGVzYyIsImgxIiwicCIsImRpdkJ0biIsImJ0bk1vcmUiLCJidG5CdXkiLCJjbGFzc0xpc3QiLCJhZGQiLCJzcmMiLCJsb2FkaW5nIiwidGV4dENvbnRlbnQiLCJkaXZMYXp5IiwiYXBwZW5kIiwiY3JlYXRlSGFyZHdhcmVTbGlkZSIsImRpdiIsImNyZWF0ZUhhcmR3YXJlVGh1bWJzIiwic2VjdGlvblRvcFdyYXBwZXIiLCJzZWN0aW9uVG9wVGh1bWJzV3JhcHBlciIsInBpY3R1cmUiLCJzb3VyY2VMYXJnZSIsInNvdXJjZU1lZGl1bSIsInNvdXJjZVNtYWxsIiwiYW5jaG9yIiwibWVkaWEiLCJzcmNzZXQiLCJjcmVhdGVUb3BTbGlkZSIsImNyZWF0ZVRvcFRodW1icyIsIm1vZHVsZXMiLCJFZmZlY3RGYWRlIiwiVGh1bWJzIiwiZWZmZWN0IiwiZmFkZUVmZmVjdCIsImNyb3NzRmFkZSIsImxvb3AiLCJ0b3VjaFJhdGlvIiwic3BlZWQiLCJ0aHVtYnNQYXJhbXMiLCJLZXlib2FyZCIsIkF1dG9wbGF5Iiwic2xpZGVzUGVyVmlldyIsInNwYWNlQmV0d2VlbiIsImNlbnRlcmVkU2xpZGVzIiwic2xpZGVUb0NsaWNrZWRTbGlkZSIsImdyYWJDdXJzb3IiLCJ3YXRjaFNsaWRlc1Byb2dyZXNzIiwia2V5Ym9hcmQiLCJhdXRvcGxheSIsImRlbGF5Iiwic3RvcE9uTGFzdFNsaWRlIiwiZGlzYWJsZU9uSW50ZXJhY3Rpb24iLCJwYXVzZU9uTW91c2VFbnRlciIsIndhaXRGb3JUcmFuc2l0aW9uIiwidGh1bXNQYXJhbXNUb3AiLCJicmVha3BvaW50cyIsImxlbmd0aCIsImdhbGxlcnlUb3BUaHVtYnMiLCJsb29wZWRTbGlkZXMiLCJ0aHVtYnMiLCJzd2lwZXIiLCJ0aHVtc1BhcmFtc0hhcmR3YXJlIiwiZ2FsbGVyeUhhcmR3YXJlVGh1bWJzIiwibGlzdEdhbWVzUGFyYW1zIiwiUGFnaW5hdGlvbiIsIkdyaWQiLCJwYWdpbmF0aW9uIiwiZW5hYmxlZCIsImNsaWNrYWJsZSIsInR5cGUiLCJlbCIsInJlbmRlckJ1bGxldCIsImdyaWQiLCJmaWxsIiwicm93cyIsImlzT2JqZWN0Iiwib2JqIiwiY29uc3RydWN0b3IiLCJPYmplY3QiLCJleHRlbmQiLCJ0YXJnZXQiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNzckRvY3VtZW50IiwiYm9keSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWN0aXZlRWxlbWVudCIsImJsdXIiLCJub2RlTmFtZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJnZXRFbGVtZW50QnlJZCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiY2hpbGRyZW4iLCJjaGlsZE5vZGVzIiwic3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNyZWF0ZUVsZW1lbnROUyIsImltcG9ydE5vZGUiLCJsb2NhdGlvbiIsImhhc2giLCJob3N0IiwiaG9zdG5hbWUiLCJvcmlnaW4iLCJwYXRobmFtZSIsInByb3RvY29sIiwic2VhcmNoIiwiZ2V0RG9jdW1lbnQiLCJkb2MiLCJzc3JXaW5kb3ciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwicHVzaFN0YXRlIiwiZ28iLCJiYWNrIiwiQ3VzdG9tRXZlbnQiLCJ0aGlzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJJbWFnZSIsIkRhdGUiLCJzY3JlZW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwibWF0Y2hNZWRpYSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbGxiYWNrIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJnZXRXaW5kb3ciLCJ3aW4iLCJ3aW5kb3ciLCJuZXh0VGljayIsIm5vdyIsImdldFRyYW5zbGF0ZSIsImF4aXMiLCJtYXRyaXgiLCJjdXJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1NYXRyaXgiLCJjdXJTdHlsZSIsImN1cnJlbnRTdHlsZSIsIldlYktpdENTU01hdHJpeCIsInRyYW5zZm9ybSIsIndlYmtpdFRyYW5zZm9ybSIsInNwbGl0IiwiYSIsInJlcGxhY2UiLCJqb2luIiwiTW96VHJhbnNmb3JtIiwiT1RyYW5zZm9ybSIsIk1zVHJhbnNmb3JtIiwibXNUcmFuc2Zvcm0iLCJ0b1N0cmluZyIsIm00MSIsInBhcnNlRmxvYXQiLCJtNDIiLCJvIiwicHJvdG90eXBlIiwiY2FsbCIsInNsaWNlIiwiYXJncyIsInRvIiwibm9FeHRlbmQiLCJpIiwibmV4dFNvdXJjZSIsIm5vZGUiLCJIVE1MRWxlbWVudCIsIm5vZGVUeXBlIiwia2V5c0FycmF5IiwiZmlsdGVyIiwiaW5kZXhPZiIsIm5leHRJbmRleCIsImxlbiIsIm5leHRLZXkiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidW5kZWZpbmVkIiwiZW51bWVyYWJsZSIsIl9fc3dpcGVyX18iLCJzZXRDU1NQcm9wZXJ0eSIsInZhck5hbWUiLCJ2YXJWYWx1ZSIsInNldFByb3BlcnR5IiwiYW5pbWF0ZUNTU01vZGVTY3JvbGwiLCJ0YXJnZXRQb3NpdGlvbiIsInNpZGUiLCJzdGFydFBvc2l0aW9uIiwidHJhbnNsYXRlIiwidGltZSIsInN0YXJ0VGltZSIsImR1cmF0aW9uIiwicGFyYW1zIiwid3JhcHBlckVsIiwic2Nyb2xsU25hcFR5cGUiLCJjc3NNb2RlRnJhbWVJRCIsImRpciIsImlzT3V0T2ZCb3VuZCIsImN1cnJlbnQiLCJhbmltYXRlIiwiZ2V0VGltZSIsInByb2dyZXNzIiwiTWF0aCIsIm1heCIsIm1pbiIsImVhc2VQcm9ncmVzcyIsImNvcyIsIlBJIiwiY3VycmVudFBvc2l0aW9uIiwic2Nyb2xsVG8iLCJvdmVyZmxvdyIsImdldFNsaWRlVHJhbnNmb3JtRWwiLCJzbGlkZUVsIiwic2hhZG93RWwiLCJlbGVtZW50Q2hpbGRyZW4iLCJlbGVtZW50Iiwic2VsZWN0b3IiLCJtYXRjaGVzIiwidGFnIiwiY2xhc3NlcyIsIkFycmF5IiwiaXNBcnJheSIsImVsZW1lbnRPZmZzZXQiLCJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJjbGllbnRUb3AiLCJjbGllbnRMZWZ0Iiwic2Nyb2xsVG9wIiwic2Nyb2xsWSIsInNjcm9sbExlZnQiLCJzY3JvbGxYIiwidG9wIiwibGVmdCIsImVsZW1lbnRTdHlsZSIsInByb3AiLCJlbGVtZW50SW5kZXgiLCJjaGlsZCIsInByZXZpb3VzU2libGluZyIsImVsZW1lbnRQYXJlbnRzIiwicGFyZW50cyIsInBhcmVudCIsInBhcmVudEVsZW1lbnQiLCJwdXNoIiwiZWxlbWVudFRyYW5zaXRpb25FbmQiLCJmaXJlQ2FsbEJhY2siLCJlIiwiZWxlbWVudE91dGVyU2l6ZSIsInNpemUiLCJpbmNsdWRlTWFyZ2lucyIsIm9mZnNldFdpZHRoIiwic3VwcG9ydCIsImRldmljZUNhY2hlZCIsImJyb3dzZXIiLCJnZXRTdXBwb3J0Iiwic21vb3RoU2Nyb2xsIiwiZG9jdW1lbnRFbGVtZW50IiwidG91Y2giLCJEb2N1bWVudFRvdWNoIiwiY2FsY1N1cHBvcnQiLCJvbiIsImV2ZW50cyIsImhhbmRsZXIiLCJwcmlvcml0eSIsInNlbGYiLCJldmVudHNMaXN0ZW5lcnMiLCJkZXN0cm95ZWQiLCJtZXRob2QiLCJldmVudCIsIm9uY2UiLCJvbmNlSGFuZGxlciIsIm9mZiIsIl9fZW1pdHRlclByb3h5IiwiYXBwbHkiLCJvbkFueSIsImV2ZW50c0FueUxpc3RlbmVycyIsIm9mZkFueSIsImluZGV4Iiwic3BsaWNlIiwiZXZlbnRIYW5kbGVyIiwiZW1pdCIsImNvbnRleHQiLCJ1bnNoaWZ0IiwidXBkYXRlU2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJpc0hvcml6b250YWwiLCJpc1ZlcnRpY2FsIiwicGFyc2VJbnQiLCJOdW1iZXIiLCJpc05hTiIsImFzc2lnbiIsInVwZGF0ZVNsaWRlcyIsImdldERpcmVjdGlvbkxhYmVsIiwicHJvcGVydHkiLCJnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlIiwibGFiZWwiLCJzbGlkZXNFbCIsInN3aXBlclNpemUiLCJydGxUcmFuc2xhdGUiLCJydGwiLCJ3cm9uZ1JUTCIsImlzVmlydHVhbCIsInZpcnR1YWwiLCJwcmV2aW91c1NsaWRlc0xlbmd0aCIsInNsaWRlcyIsInNsaWRlQ2xhc3MiLCJzbGlkZXNMZW5ndGgiLCJzbmFwR3JpZCIsInNsaWRlc0dyaWQiLCJzbGlkZXNTaXplc0dyaWQiLCJvZmZzZXRCZWZvcmUiLCJzbGlkZXNPZmZzZXRCZWZvcmUiLCJvZmZzZXRBZnRlciIsInNsaWRlc09mZnNldEFmdGVyIiwicHJldmlvdXNTbmFwR3JpZExlbmd0aCIsInByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCIsInNsaWRlUG9zaXRpb24iLCJwcmV2U2xpZGVTaXplIiwidmlydHVhbFNpemUiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5Ub3AiLCJjc3NNb2RlIiwiZ3JpZEVuYWJsZWQiLCJzbGlkZVNpemUiLCJpbml0U2xpZGVzIiwic2hvdWxkUmVzZXRTbGlkZVNpemUiLCJzbGlkZSIsInVwZGF0ZVNsaWRlIiwic2xpZGVTdHlsZXMiLCJjdXJyZW50VHJhbnNmb3JtIiwiY3VycmVudFdlYktpdFRyYW5zZm9ybSIsInJvdW5kTGVuZ3RocyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiYm94U2l6aW5nIiwiZmxvb3IiLCJzd2lwZXJTbGlkZVNpemUiLCJhYnMiLCJzbGlkZXNQZXJHcm91cCIsInNsaWRlc1Blckdyb3VwU2tpcCIsInNldFdyYXBwZXJTaXplIiwidXBkYXRlV3JhcHBlclNpemUiLCJuZXdTbGlkZXNHcmlkIiwic2xpZGVzR3JpZEl0ZW0iLCJncm91cHMiLCJjZWlsIiwic2xpZGVzQmVmb3JlIiwic2xpZGVzQWZ0ZXIiLCJncm91cFNpemUiLCJfIiwic2xpZGVJbmRleCIsImNlbnRlcmVkU2xpZGVzQm91bmRzIiwiYWxsU2xpZGVzU2l6ZSIsInNsaWRlU2l6ZVZhbHVlIiwibWF4U25hcCIsInNuYXAiLCJjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMiLCJhbGxTbGlkZXNPZmZzZXQiLCJzbmFwSW5kZXgiLCJhZGRUb1NuYXBHcmlkIiwiYWRkVG9TbGlkZXNHcmlkIiwidiIsIndhdGNoT3ZlcmZsb3ciLCJjaGVja092ZXJmbG93IiwidXBkYXRlU2xpZGVzT2Zmc2V0IiwiYmFja0ZhY2VIaWRkZW5DbGFzcyIsImNvbnRhaW5lck1vZGlmaWVyQ2xhc3MiLCJoYXNDbGFzc0JhY2tmYWNlQ2xhc3NBZGRlZCIsImNvbnRhaW5zIiwibWF4QmFja2ZhY2VIaWRkZW5TbGlkZXMiLCJyZW1vdmUiLCJ1cGRhdGVBdXRvSGVpZ2h0IiwiYWN0aXZlU2xpZGVzIiwibmV3SGVpZ2h0Iiwic2V0VHJhbnNpdGlvbiIsImdldFNsaWRlQnlJbmRleCIsImdldEF0dHJpYnV0ZSIsInZpc2libGVTbGlkZXMiLCJhY3RpdmVJbmRleCIsIm9mZnNldEhlaWdodCIsIm1pbnVzT2Zmc2V0IiwiaXNFbGVtZW50Iiwib2Zmc2V0TGVmdCIsIm9mZnNldFRvcCIsInN3aXBlclNsaWRlT2Zmc2V0IiwidXBkYXRlU2xpZGVzUHJvZ3Jlc3MiLCJvZmZzZXRDZW50ZXIiLCJzbGlkZVZpc2libGVDbGFzcyIsInZpc2libGVTbGlkZXNJbmRleGVzIiwic2xpZGVPZmZzZXQiLCJzbGlkZVByb2dyZXNzIiwibWluVHJhbnNsYXRlIiwib3JpZ2luYWxTbGlkZVByb2dyZXNzIiwic2xpZGVCZWZvcmUiLCJzbGlkZUFmdGVyIiwib3JpZ2luYWxQcm9ncmVzcyIsInVwZGF0ZVByb2dyZXNzIiwibXVsdGlwbGllciIsInRyYW5zbGF0ZXNEaWZmIiwibWF4VHJhbnNsYXRlIiwiaXNCZWdpbm5pbmciLCJpc0VuZCIsInByb2dyZXNzTG9vcCIsIndhc0JlZ2lubmluZyIsIndhc0VuZCIsImlzQmVnaW5uaW5nUm91bmRlZCIsImlzRW5kUm91bmRlZCIsImZpcnN0U2xpZGVJbmRleCIsImdldFNsaWRlSW5kZXgiLCJsYXN0U2xpZGVJbmRleCIsImZpcnN0U2xpZGVUcmFuc2xhdGUiLCJsYXN0U2xpZGVUcmFuc2xhdGUiLCJ0cmFuc2xhdGVNYXgiLCJ0cmFuc2xhdGVBYnMiLCJhdXRvSGVpZ2h0IiwidXBkYXRlU2xpZGVzQ2xhc3NlcyIsImdldEZpbHRlcmVkU2xpZGUiLCJhY3RpdmVTbGlkZSIsInNsaWRlQWN0aXZlQ2xhc3MiLCJzbGlkZU5leHRDbGFzcyIsInNsaWRlUHJldkNsYXNzIiwibmV4dFNsaWRlIiwibmV4dEVscyIsIm5leHRFbGVtZW50U2libGluZyIsIm5leHQiLCJlbGVtZW50TmV4dEFsbCIsInByZXZTbGlkZSIsInByZXZFbHMiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwicHJldiIsImVsZW1lbnRQcmV2QWxsIiwiZW1pdFNsaWRlc0NsYXNzZXMiLCJ1cGRhdGVBY3RpdmVJbmRleCIsIm5ld0FjdGl2ZUluZGV4IiwicHJldmlvdXNJbmRleCIsInJlYWxJbmRleCIsInByZXZpb3VzUmVhbEluZGV4IiwicHJldmlvdXNTbmFwSW5kZXgiLCJnZXRWaXJ0dWFsUmVhbEluZGV4IiwiYUluZGV4Iiwibm9ybWFsaXplU2xpZGVJbmRleCIsImdldEFjdGl2ZUluZGV4QnlUcmFuc2xhdGUiLCJza2lwIiwiaW5pdGlhbGl6ZWQiLCJydW5DYWxsYmFja3NPbkluaXQiLCJ1cGRhdGVDbGlja2VkU2xpZGUiLCJjbG9zZXN0Iiwic2xpZGVGb3VuZCIsImNsaWNrZWRTbGlkZSIsImNsaWNrZWRJbmRleCIsInRyYW5zaXRpb25FbWl0IiwicnVuQ2FsbGJhY2tzIiwiZGlyZWN0aW9uIiwic3RlcCIsInNsaWRlVG8iLCJpbnRlcm5hbCIsImluaXRpYWwiLCJhbmltYXRpbmciLCJwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24iLCJub3JtYWxpemVkVHJhbnNsYXRlIiwibm9ybWFsaXplZEdyaWQiLCJub3JtYWxpemVkR3JpZE5leHQiLCJhbGxvd1NsaWRlTmV4dCIsImFsbG93U2xpZGVQcmV2Iiwic2V0VHJhbnNsYXRlIiwidHJhbnNpdGlvblN0YXJ0IiwidHJhbnNpdGlvbkVuZCIsImlzSCIsInQiLCJfaW1tZWRpYXRlVmlydHVhbCIsIl9jc3NNb2RlVmlydHVhbEluaXRpYWxTZXQiLCJpbml0aWFsU2xpZGUiLCJiZWhhdmlvciIsIm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kIiwic2xpZGVUb0xvb3AiLCJuZXdJbmRleCIsInNsaWRlTmV4dCIsInBlckdyb3VwIiwic2xpZGVzUGVyR3JvdXBBdXRvIiwic2xpZGVzUGVyVmlld0R5bmFtaWMiLCJpbmNyZW1lbnQiLCJsb29wUHJldmVudHNTbGlkaW5nIiwibG9vcEZpeCIsIl9jbGllbnRMZWZ0IiwicmV3aW5kIiwic2xpZGVQcmV2Iiwibm9ybWFsaXplIiwidmFsIiwibm9ybWFsaXplZFNuYXBHcmlkIiwicHJldlNuYXAiLCJwcmV2U25hcEluZGV4IiwicHJldkluZGV4IiwibGFzdEluZGV4Iiwic2xpZGVSZXNldCIsInNsaWRlVG9DbG9zZXN0IiwidGhyZXNob2xkIiwiY3VycmVudFNuYXAiLCJzbGlkZVRvSW5kZXgiLCJzbGlkZVNlbGVjdG9yIiwib25Ub3VjaFN0YXJ0IiwidG91Y2hFdmVudHNEYXRhIiwiZXZDYWNoZSIsInRvdWNoZXMiLCJzaW11bGF0ZVRvdWNoIiwicG9pbnRlclR5cGUiLCJvcmlnaW5hbEV2ZW50IiwidGFyZ2V0RWwiLCJ0b3VjaEV2ZW50c1RhcmdldCIsIndoaWNoIiwiYnV0dG9uIiwiaXNUb3VjaGVkIiwiaXNNb3ZlZCIsInN3aXBpbmdDbGFzc0hhc1ZhbHVlIiwibm9Td2lwaW5nQ2xhc3MiLCJldmVudFBhdGgiLCJjb21wb3NlZFBhdGgiLCJwYXRoIiwic2hhZG93Um9vdCIsIm5vU3dpcGluZ1NlbGVjdG9yIiwiaXNUYXJnZXRTaGFkb3ciLCJub1N3aXBpbmciLCJiYXNlIiwiX19jbG9zZXN0RnJvbSIsImFzc2lnbmVkU2xvdCIsImZvdW5kIiwiZ2V0Um9vdE5vZGUiLCJjbG9zZXN0RWxlbWVudCIsImFsbG93Q2xpY2siLCJzd2lwZUhhbmRsZXIiLCJjdXJyZW50WCIsInBhZ2VYIiwiY3VycmVudFkiLCJwYWdlWSIsInN0YXJ0WCIsInN0YXJ0WSIsImVkZ2VTd2lwZURldGVjdGlvbiIsImlPU0VkZ2VTd2lwZURldGVjdGlvbiIsImVkZ2VTd2lwZVRocmVzaG9sZCIsImlPU0VkZ2VTd2lwZVRocmVzaG9sZCIsImlubmVyV2lkdGgiLCJwcmV2ZW50RGVmYXVsdCIsImFsbG93VG91Y2hDYWxsYmFja3MiLCJpc1Njcm9sbGluZyIsInN0YXJ0TW92aW5nIiwidG91Y2hTdGFydFRpbWUiLCJzd2lwZURpcmVjdGlvbiIsImFsbG93VGhyZXNob2xkTW92ZSIsImZvY3VzYWJsZUVsZW1lbnRzIiwic2hvdWxkUHJldmVudERlZmF1bHQiLCJhbGxvd1RvdWNoTW92ZSIsInRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdCIsInRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IiwiaXNDb250ZW50RWRpdGFibGUiLCJmcmVlTW9kZSIsIm9uVG91Y2hNb3ZlIiwicG9pbnRlckluZGV4IiwiZmluZEluZGV4IiwiY2FjaGVkRXYiLCJwb2ludGVySWQiLCJ0YXJnZXRUb3VjaCIsInByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyIiwicHJldlgiLCJwcmV2WSIsInRvdWNoUmVsZWFzZU9uRWRnZXMiLCJ0YXJnZXRUb3VjaGVzIiwiZGlmZlgiLCJkaWZmWSIsInNxcnQiLCJ0b3VjaEFuZ2xlIiwiYXRhbjIiLCJ6b29tIiwiY2FuY2VsYWJsZSIsInRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbiIsIm5lc3RlZCIsInN0b3BQcm9wYWdhdGlvbiIsImRpZmYiLCJ0b3VjaGVzRGlmZiIsInByZXZpb3VzWCIsInByZXZpb3VzWSIsIm9uZVdheU1vdmVtZW50IiwicHJldlRvdWNoZXNEaXJlY3Rpb24iLCJ0b3VjaGVzRGlyZWN0aW9uIiwiaXNMb29wIiwic3RhcnRUcmFuc2xhdGUiLCJldnQiLCJidWJibGVzIiwiZGlzcGF0Y2hFdmVudCIsImFsbG93TW9tZW50dW1Cb3VuY2UiLCJzZXRHcmFiQ3Vyc29yIiwibG9vcEZpeGVkIiwiY3VycmVudFRyYW5zbGF0ZSIsImRpc2FibGVQYXJlbnRTd2lwZXIiLCJyZXNpc3RhbmNlUmF0aW8iLCJhY3RpdmVTbGlkZUluZGV4IiwicmVzaXN0YW5jZSIsImZvbGxvd0ZpbmdlciIsIm9uVG91Y2hFbmQiLCJpbmNsdWRlcyIsImlzU2FmYXJpIiwiaXNXZWJWaWV3IiwidG91Y2hFbmRUaW1lIiwidGltZURpZmYiLCJwYXRoVHJlZSIsImxhc3RDbGlja1RpbWUiLCJjdXJyZW50UG9zIiwic3RvcEluZGV4IiwicmV3aW5kRmlyc3RJbmRleCIsInJld2luZExhc3RJbmRleCIsInJhdGlvIiwibG9uZ1N3aXBlc01zIiwibG9uZ1N3aXBlcyIsImxvbmdTd2lwZXNSYXRpbyIsInNob3J0U3dpcGVzIiwibmF2aWdhdGlvbiIsIm5leHRFbCIsInByZXZFbCIsInRpbWVvdXQiLCJvblJlc2l6ZSIsInNldEJyZWFrcG9pbnQiLCJpc1ZpcnR1YWxMb29wIiwicnVubmluZyIsInBhdXNlZCIsInJlc3VtZSIsIm9uQ2xpY2siLCJwcmV2ZW50Q2xpY2tzIiwicHJldmVudENsaWNrc1Byb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwib25TY3JvbGwiLCJuZXdQcm9ncmVzcyIsInByZXZpb3VzVHJhbnNsYXRlIiwicHJvY2Vzc0xhenlQcmVsb2FkZXIiLCJpbWFnZUVsIiwibGF6eUVsIiwibGF6eVByZWxvYWRlckNsYXNzIiwib25Mb2FkIiwidXBkYXRlIiwiZHVtbXlFdmVudEF0dGFjaGVkIiwiZHVtbXlFdmVudExpc3RlbmVyIiwiZGV2aWNlIiwiY2FwdHVyZSIsImRvbU1ldGhvZCIsInN3aXBlck1ldGhvZCIsInBhc3NpdmUiLCJ1cGRhdGVPbldpbmRvd1Jlc2l6ZSIsImlvcyIsImFuZHJvaWQiLCJpc0dyaWRFbmFibGVkIiwiaW5pdCIsInJlc2l6ZU9ic2VydmVyIiwiY3JlYXRlRWxlbWVudHMiLCJ1cmwiLCJ2aXJ0dWFsVHJhbnNsYXRlIiwiYnJlYWtwb2ludHNCYXNlIiwidW5pcXVlTmF2RWxlbWVudHMiLCJwYXNzaXZlTGlzdGVuZXJzIiwid3JhcHBlckNsYXNzIiwiX2VtaXRDbGFzc2VzIiwibW9kdWxlRXh0ZW5kUGFyYW1zIiwiYWxsTW9kdWxlc1BhcmFtcyIsIm1vZHVsZVBhcmFtTmFtZSIsIm1vZHVsZVBhcmFtcyIsImF1dG8iLCJwcm90b3R5cGVzIiwiZXZlbnRzRW1pdHRlciIsImJ5Q29udHJvbGxlciIsIngiLCJ5IiwidHJhbnNsYXRlVG8iLCJ0cmFuc2xhdGVCb3VuZHMiLCJuZXdUcmFuc2xhdGUiLCJvblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJ0cmFuc2l0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwibG9vcENyZWF0ZSIsInNsaWRlUmVhbEluZGV4IiwiYnlNb3VzZXdoZWVsIiwicHJlcGVuZFNsaWRlc0luZGV4ZXMiLCJhcHBlbmRTbGlkZXNJbmRleGVzIiwiaXNOZXh0IiwiaXNQcmV2Iiwic2xpZGVzUHJlcGVuZGVkIiwic2xpZGVzQXBwZW5kZWQiLCJwcmVwZW5kIiwicmVjYWxjU2xpZGVzIiwiY3VycmVudFNsaWRlVHJhbnNsYXRlIiwiY29udHJvbGxlciIsImNvbnRyb2wiLCJsb29wUGFyYW1zIiwiYyIsImxvb3BEZXN0cm95IiwibmV3U2xpZGVzT3JkZXIiLCJzd2lwZXJTbGlkZUluZGV4IiwicmVtb3ZlQXR0cmlidXRlIiwibW92aW5nIiwiaXNMb2NrZWQiLCJfX3ByZXZlbnRPYnNlcnZlcl9fIiwiY3Vyc29yIiwidW5zZXRHcmFiQ3Vyc29yIiwiYXR0YWNoRXZlbnRzIiwiYmluZCIsImRldGFjaEV2ZW50cyIsImJyZWFrcG9pbnQiLCJnZXRCcmVha3BvaW50IiwiY3VycmVudEJyZWFrcG9pbnQiLCJicmVha3BvaW50UGFyYW1zIiwib3JpZ2luYWxQYXJhbXMiLCJ3YXNNdWx0aVJvdyIsImlzTXVsdGlSb3ciLCJ3YXNFbmFibGVkIiwiZW1pdENvbnRhaW5lckNsYXNzZXMiLCJ3YXNNb2R1bGVFbmFibGVkIiwiaXNNb2R1bGVFbmFibGVkIiwiZGlzYWJsZSIsImVuYWJsZSIsImRpcmVjdGlvbkNoYW5nZWQiLCJuZWVkc1JlTG9vcCIsImNoYW5nZURpcmVjdGlvbiIsImlzRW5hYmxlZCIsImNvbnRhaW5lckVsIiwiY3VycmVudEhlaWdodCIsImlubmVySGVpZ2h0IiwicG9pbnRzIiwicG9pbnQiLCJtaW5SYXRpbyIsInN1YnN0ciIsInZhbHVlIiwic29ydCIsImIiLCJ3YXNMb2NrZWQiLCJsYXN0U2xpZGVSaWdodEVkZ2UiLCJhZGRDbGFzc2VzIiwiY2xhc3NOYW1lcyIsInN1ZmZpeGVzIiwiZW50cmllcyIsInByZWZpeCIsInJlc3VsdENsYXNzZXMiLCJpdGVtIiwicHJlcGFyZUNsYXNzZXMiLCJyZW1vdmVDbGFzc2VzIiwiZXh0ZW5kZWREZWZhdWx0cyIsIlN3aXBlciIsInN3aXBlcnMiLCJuZXdQYXJhbXMiLCJvdmVycmlkZXMiLCJwbGF0Zm9ybSIsInVhIiwic2NyZWVuV2lkdGgiLCJzY3JlZW5IZWlnaHQiLCJtYXRjaCIsImlwYWQiLCJpcG9kIiwiaXBob25lIiwid2luZG93cyIsIm1hY29zIiwib3MiLCJjYWxjRGV2aWNlIiwiZ2V0RGV2aWNlIiwibmVlZFBlcnNwZWN0aXZlRml4IiwidG9Mb3dlckNhc2UiLCJTdHJpbmciLCJtYWpvciIsIm1pbm9yIiwibnVtIiwidGVzdCIsImNhbGNCcm93c2VyIiwiX19tb2R1bGVzX18iLCJtb2QiLCJleHRlbmRQYXJhbXMiLCJzd2lwZXJQYXJhbXMiLCJkZWZhdWx0cyIsInBhc3NlZFBhcmFtcyIsImV2ZW50TmFtZSIsInZlbG9jaXR5IiwiY2xpY2tUaW1lb3V0IiwidmVsb2NpdGllcyIsImltYWdlc1RvTG9hZCIsImltYWdlc0xvYWRlZCIsInNldFByb2dyZXNzIiwiY2xzIiwiY2xhc3NOYW1lIiwiZ2V0U2xpZGVDbGFzc2VzIiwidXBkYXRlcyIsInZpZXciLCJleGFjdCIsInNwdiIsImJyZWFrTG9vcCIsInRyYW5zbGF0ZVZhbHVlIiwidHJhbnNsYXRlZCIsImNvbXBsZXRlIiwibmV3RGlyZWN0aW9uIiwibmVlZFVwZGF0ZSIsImN1cnJlbnREaXJlY3Rpb24iLCJjaGFuZ2VMYW5ndWFnZURpcmVjdGlvbiIsIm1vdW50IiwibW91bnRlZCIsImdldFdyYXBwZXJTZWxlY3RvciIsInRyaW0iLCJkZXN0cm95IiwiZGVsZXRlSW5zdGFuY2UiLCJjbGVhblN0eWxlcyIsIm9iamVjdCIsImRlbGV0ZVByb3BzIiwic3RhdGljIiwibmV3RGVmYXVsdHMiLCJtb2R1bGUiLCJtIiwiaW5zdGFsbE1vZHVsZSIsInByb3RvdHlwZUdyb3VwIiwicHJvdG9NZXRob2QiLCJ1c2UiLCJvYnNlcnZlciIsImFuaW1hdGlvbkZyYW1lIiwicmVzaXplSGFuZGxlciIsIm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlciIsIlJlc2l6ZU9ic2VydmVyIiwibmV3V2lkdGgiLCJjb250ZW50Qm94U2l6ZSIsImNvbnRlbnRSZWN0IiwiaW5saW5lU2l6ZSIsImJsb2NrU2l6ZSIsIm9ic2VydmUiLCJ1bm9ic2VydmUiLCJvYnNlcnZlcnMiLCJhdHRhY2giLCJvcHRpb25zIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIiLCJtdXRhdGlvbnMiLCJvYnNlcnZlclVwZGF0ZSIsImF0dHJpYnV0ZXMiLCJjaGlsZExpc3QiLCJjaGFyYWN0ZXJEYXRhIiwib2JzZXJ2ZVBhcmVudHMiLCJvYnNlcnZlU2xpZGVDaGlsZHJlbiIsImNvbnRhaW5lclBhcmVudHMiLCJkaXNjb25uZWN0IiwiVmlydHVhbCIsImNzc01vZGVUaW1lb3V0IiwiY2FjaGUiLCJyZW5kZXJTbGlkZSIsInJlbmRlckV4dGVybmFsIiwicmVuZGVyRXh0ZXJuYWxVcGRhdGUiLCJhZGRTbGlkZXNCZWZvcmUiLCJhZGRTbGlkZXNBZnRlciIsImZyb20iLCJvZmZzZXQiLCJ0ZW1wRE9NIiwiaW5uZXJIVE1MIiwiZm9yY2UiLCJwcmV2aW91c0Zyb20iLCJwcmV2aW91c1RvIiwicHJldmlvdXNTbGlkZXNHcmlkIiwicHJldmlvdXNPZmZzZXQiLCJvZmZzZXRQcm9wIiwib25SZW5kZXJlZCIsInNsaWRlc1RvUmVuZGVyIiwicHJlcGVuZEluZGV4ZXMiLCJhcHBlbmRJbmRleGVzIiwibG9vcEZyb20iLCJsb29wVG8iLCJkb21TbGlkZXNBc3NpZ25lZCIsImFwcGVuZFNsaWRlIiwicHJlcGVuZFNsaWRlIiwibnVtYmVyT2ZOZXdTbGlkZXMiLCJuZXdDYWNoZSIsImNhY2hlZEluZGV4IiwiY2FjaGVkRWwiLCJjYWNoZWRFbEluZGV4IiwicmVtb3ZlU2xpZGUiLCJzbGlkZXNJbmRleGVzIiwicmVtb3ZlQWxsU2xpZGVzIiwiaGFuZGxlIiwia2MiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwYWdlVXBEb3duIiwiaXNQYWdlVXAiLCJpc1BhZ2VEb3duIiwiaXNBcnJvd0xlZnQiLCJpc0Fycm93UmlnaHQiLCJpc0Fycm93VXAiLCJpc0Fycm93RG93biIsInNoaWZ0S2V5IiwiYWx0S2V5IiwiY3RybEtleSIsIm1ldGFLZXkiLCJvbmx5SW5WaWV3cG9ydCIsImluVmlldyIsInN3aXBlcldpZHRoIiwic3dpcGVySGVpZ2h0Iiwid2luZG93V2lkdGgiLCJ3aW5kb3dIZWlnaHQiLCJzd2lwZXJPZmZzZXQiLCJzd2lwZXJDb29yZCIsInJldHVyblZhbHVlIiwiTW91c2V3aGVlbCIsIm1vdXNld2hlZWwiLCJyZWxlYXNlT25FZGdlcyIsImludmVydCIsImZvcmNlVG9BeGlzIiwic2Vuc2l0aXZpdHkiLCJldmVudHNUYXJnZXQiLCJ0aHJlc2hvbGREZWx0YSIsInRocmVzaG9sZFRpbWUiLCJsYXN0RXZlbnRCZWZvcmVTbmFwIiwibGFzdFNjcm9sbFRpbWUiLCJyZWNlbnRXaGVlbEV2ZW50cyIsImhhbmRsZU1vdXNlRW50ZXIiLCJtb3VzZUVudGVyZWQiLCJoYW5kbGVNb3VzZUxlYXZlIiwiYW5pbWF0ZVNsaWRlciIsIm5ld0V2ZW50IiwiZGVsdGEiLCJyYXciLCJ0YXJnZXRFbENvbnRhaW5zVGFyZ2V0IiwicnRsRmFjdG9yIiwic1giLCJzWSIsInBYIiwicFkiLCJkZXRhaWwiLCJ3aGVlbERlbHRhIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhWCIsIkhPUklaT05UQUxfQVhJUyIsImRlbHRhWSIsImRlbHRhWCIsImRlbHRhTW9kZSIsInNwaW5YIiwic3BpblkiLCJwaXhlbFgiLCJwaXhlbFkiLCJwb3NpdGlvbnMiLCJzaWduIiwiaWdub3JlV2hlZWxFdmVudHMiLCJwb3NpdGlvbiIsInN0aWNreSIsInNoaWZ0IiwicHJldkV2ZW50IiwiZmlyc3RFdmVudCIsInNuYXBUb1RocmVzaG9sZCIsImF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb24iLCJzdG9wIiwicmVsZWFzZVNjcm9sbCIsImNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQiLCJjaGVja1Byb3BzIiwiTmF2aWdhdGlvbiIsImhpZGVPbkNsaWNrIiwiZGlzYWJsZWRDbGFzcyIsImhpZGRlbkNsYXNzIiwibG9ja0NsYXNzIiwibmF2aWdhdGlvbkRpc2FibGVkQ2xhc3MiLCJtYWtlRWxlbWVudHNBcnJheSIsImdldEVsIiwicmVzIiwidG9nZ2xlRWwiLCJkaXNhYmxlZCIsInN1YkVsIiwidGFnTmFtZSIsIm9uUHJldkNsaWNrIiwib25OZXh0Q2xpY2siLCJpbml0QnV0dG9uIiwiZGVzdHJveUJ1dHRvbiIsIl9zIiwiaXNIaWRkZW4iLCJ0b2dnbGUiLCJjbGFzc2VzVG9TZWxlY3RvciIsInBmeCIsImJ1bGxldFNpemUiLCJidWxsZXRFbGVtZW50IiwicmVuZGVyUHJvZ3Jlc3NiYXIiLCJyZW5kZXJGcmFjdGlvbiIsInJlbmRlckN1c3RvbSIsInByb2dyZXNzYmFyT3Bwb3NpdGUiLCJkeW5hbWljQnVsbGV0cyIsImR5bmFtaWNNYWluQnVsbGV0cyIsImZvcm1hdEZyYWN0aW9uQ3VycmVudCIsIm51bWJlciIsImZvcm1hdEZyYWN0aW9uVG90YWwiLCJidWxsZXRDbGFzcyIsImJ1bGxldEFjdGl2ZUNsYXNzIiwibW9kaWZpZXJDbGFzcyIsImN1cnJlbnRDbGFzcyIsInRvdGFsQ2xhc3MiLCJwcm9ncmVzc2JhckZpbGxDbGFzcyIsInByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzcyIsImNsaWNrYWJsZUNsYXNzIiwiaG9yaXpvbnRhbENsYXNzIiwidmVydGljYWxDbGFzcyIsInBhZ2luYXRpb25EaXNhYmxlZENsYXNzIiwiYnVsbGV0cyIsImR5bmFtaWNCdWxsZXRJbmRleCIsImlzUGFnaW5hdGlvbkRpc2FibGVkIiwic2V0U2lkZUJ1bGxldHMiLCJidWxsZXRFbCIsIm9uQnVsbGV0Q2xpY2siLCJ0b3RhbCIsImZpcnN0SW5kZXgiLCJtaWRJbmRleCIsInN1ZmZpeCIsImJ1bGxldCIsImJ1bGxldEluZGV4IiwiZmlyc3REaXNwbGF5ZWRCdWxsZXQiLCJsYXN0RGlzcGxheWVkQnVsbGV0IiwiZHluYW1pY0J1bGxldHNMZW5ndGgiLCJidWxsZXRzT2Zmc2V0Iiwic3ViRWxJbmRleCIsImZyYWN0aW9uRWwiLCJ0b3RhbEVsIiwicHJvZ3Jlc3NiYXJEaXJlY3Rpb24iLCJzY2FsZSIsInNjYWxlWCIsInNjYWxlWSIsInByb2dyZXNzRWwiLCJyZW5kZXIiLCJwYWdpbmF0aW9uSFRNTCIsIm51bWJlck9mQnVsbGV0cyIsIlNjcm9sbGJhciIsImRyYWdTdGFydFBvcyIsImRyYWdTaXplIiwidHJhY2tTaXplIiwiZGl2aWRlciIsImRyYWdUaW1lb3V0Iiwic2Nyb2xsYmFyIiwiZHJhZ0VsIiwibmV3U2l6ZSIsIm5ld1BvcyIsImhpZGUiLCJvcGFjaXR5IiwiZGlzcGxheSIsImdldFBvaW50ZXJQb3NpdGlvbiIsImNsaWVudFgiLCJjbGllbnRZIiwic2V0RHJhZ1Bvc2l0aW9uIiwicG9zaXRpb25SYXRpbyIsIm9uRHJhZ1N0YXJ0Iiwib25EcmFnTW92ZSIsIm9uRHJhZ0VuZCIsInNuYXBPblJlbGVhc2UiLCJhY3RpdmVMaXN0ZW5lciIsInBhc3NpdmVMaXN0ZW5lciIsImV2ZW50TWV0aG9kIiwic3dpcGVyRWwiLCJkcmFnQ2xhc3MiLCJkcmFnZ2FibGUiLCJzY3JvbGxiYXJEaXNhYmxlZENsYXNzIiwiUGFyYWxsYXgiLCJwYXJhbGxheCIsInNldFRyYW5zZm9ybSIsInJvdGF0ZSIsImN1cnJlbnRPcGFjaXR5IiwiX3N3aXBlciIsInBhcmFsbGF4RWwiLCJwYXJhbGxheER1cmF0aW9uIiwiWm9vbSIsIm1heFJhdGlvIiwiY29udGFpbmVyQ2xhc3MiLCJ6b29tZWRTbGlkZUNsYXNzIiwiZmFrZUdlc3R1cmVUb3VjaGVkIiwiZmFrZUdlc3R1cmVNb3ZlZCIsImN1cnJlbnRTY2FsZSIsImlzU2NhbGluZyIsImdlc3R1cmUiLCJzbGlkZVdpZHRoIiwic2xpZGVIZWlnaHQiLCJpbWFnZVdyYXBFbCIsImltYWdlIiwibWluWCIsIm1pblkiLCJtYXhYIiwibWF4WSIsInRvdWNoZXNTdGFydCIsInRvdWNoZXNDdXJyZW50IiwicHJldlBvc2l0aW9uWCIsInByZXZQb3NpdGlvblkiLCJwcmV2VGltZSIsImdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMiLCJ4MSIsInkxIiwieDIiLCJ5MiIsImV2ZW50V2l0aGluU2xpZGUiLCJvbkdlc3R1cmVTdGFydCIsInNjYWxlU3RhcnQiLCJvcmlnaW5YIiwib3JpZ2luWSIsImdldFNjYWxlT3JpZ2luIiwidHJhbnNmb3JtT3JpZ2luIiwib25HZXN0dXJlQ2hhbmdlIiwic2NhbGVNb3ZlIiwib25HZXN0dXJlRW5kIiwiZXZlbnRXaXRoaW5ab29tQ29udGFpbmVyIiwic2NhbGVkV2lkdGgiLCJzY2FsZWRIZWlnaHQiLCJvblRyYW5zaXRpb25FbmQiLCJ6b29tSW4iLCJ0b3VjaFgiLCJ0b3VjaFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwiaW1hZ2VXaWR0aCIsImltYWdlSGVpZ2h0IiwidHJhbnNsYXRlTWluWCIsInRyYW5zbGF0ZU1pblkiLCJ0cmFuc2xhdGVNYXhYIiwidHJhbnNsYXRlTWF4WSIsInRvdWNoQWN0aW9uIiwiZm9yY2Vab29tUmF0aW8iLCJ6b29tT3V0Iiwiem9vbVRvZ2dsZSIsImdldExpc3RlbmVycyIsImFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsInNldCIsIm1vbWVudHVtRHVyYXRpb25YIiwibW9tZW50dW1EdXJhdGlvblkiLCJtb21lbnR1bURpc3RhbmNlWCIsIm5ld1Bvc2l0aW9uWCIsIm1vbWVudHVtRGlzdGFuY2VZIiwibmV3UG9zaXRpb25ZIiwibW9tZW50dW1EdXJhdGlvbiIsImluIiwib3V0IiwiQ29udHJvbGxlciIsIkxpbmVhclNwbGluZSIsImJpbmFyeVNlYXJjaCIsIm1heEluZGV4IiwibWluSW5kZXgiLCJndWVzcyIsImFycmF5IiwiaTEiLCJpMyIsImludGVycG9sYXRlIiwicmVtb3ZlU3BsaW5lIiwic3BsaW5lIiwiaW52ZXJzZSIsImJ5IiwiY29udHJvbEVsZW1lbnQiLCJvbkNvbnRyb2xsZXJTd2lwZXIiLCJfdCIsImNvbnRyb2xsZWQiLCJjb250cm9sbGVkVHJhbnNsYXRlIiwic2V0Q29udHJvbGxlZFRyYW5zbGF0ZSIsImdldEludGVycG9sYXRlRnVuY3Rpb24iLCJzZXRDb250cm9sbGVkVHJhbnNpdGlvbiIsIkExMXkiLCJhMTF5Iiwibm90aWZpY2F0aW9uQ2xhc3MiLCJwcmV2U2xpZGVNZXNzYWdlIiwibmV4dFNsaWRlTWVzc2FnZSIsImZpcnN0U2xpZGVNZXNzYWdlIiwibGFzdFNsaWRlTWVzc2FnZSIsInBhZ2luYXRpb25CdWxsZXRNZXNzYWdlIiwic2xpZGVMYWJlbE1lc3NhZ2UiLCJjb250YWluZXJNZXNzYWdlIiwiY29udGFpbmVyUm9sZURlc2NyaXB0aW9uTWVzc2FnZSIsIml0ZW1Sb2xlRGVzY3JpcHRpb25NZXNzYWdlIiwic2xpZGVSb2xlIiwiY2xpY2tlZCIsImxpdmVSZWdpb24iLCJub3RpZnkiLCJtZXNzYWdlIiwibm90aWZpY2F0aW9uIiwibWFrZUVsRm9jdXNhYmxlIiwibWFrZUVsTm90Rm9jdXNhYmxlIiwiYWRkRWxSb2xlIiwicm9sZSIsImFkZEVsUm9sZURlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb24iLCJhZGRFbExhYmVsIiwiZGlzYWJsZUVsIiwiZW5hYmxlRWwiLCJvbkVudGVyT3JTcGFjZUtleSIsImNsaWNrIiwiaGFzUGFnaW5hdGlvbiIsImhhc0NsaWNrYWJsZVBhZ2luYXRpb24iLCJpbml0TmF2RWwiLCJ3cmFwcGVySWQiLCJjb250cm9scyIsImFkZEVsQ29udHJvbHMiLCJoYW5kbGVQb2ludGVyRG93biIsImhhbmRsZVBvaW50ZXJVcCIsImhhbmRsZUZvY3VzIiwiaXNBY3RpdmUiLCJpc1Zpc2libGUiLCJzb3VyY2VDYXBhYmlsaXRpZXMiLCJmaXJlc1RvdWNoRXZlbnRzIiwicmVwZWF0Iiwicm91bmQiLCJyYW5kb20iLCJnZXRSYW5kb21OdW1iZXIiLCJsaXZlIiwiYWRkRWxMaXZlIiwidXBkYXRlTmF2aWdhdGlvbiIsInVwZGF0ZVBhZ2luYXRpb24iLCJIaXN0b3J5Iiwicm9vdCIsImtlZXBRdWVyeSIsInBhdGhzIiwic2x1Z2lmeSIsImdldFBhdGhWYWx1ZXMiLCJ1cmxPdmVycmlkZSIsIlVSTCIsInBhdGhBcnJheSIsInBhcnQiLCJzZXRIaXN0b3J5IiwiY3VycmVudFN0YXRlIiwic3RhdGUiLCJzY3JvbGxUb1NsaWRlIiwic2V0SGlzdG9yeVBvcFN0YXRlIiwiaGFzaE5hdmlnYXRpb24iLCJIYXNoTmF2aWdhdGlvbiIsIndhdGNoU3RhdGUiLCJvbkhhc2hDaGFuZ2UiLCJuZXdIYXNoIiwic2V0SGFzaCIsInJhZiIsInRpbWVMZWZ0IiwicmV2ZXJzZURpcmVjdGlvbiIsImF1dG9wbGF5VGltZUxlZnQiLCJ3YXNQYXVzZWQiLCJwYXVzZWRCeVRvdWNoIiwidG91Y2hTdGFydFRpbWVvdXQiLCJzbGlkZUNoYW5nZWQiLCJwYXVzZWRCeUludGVyYWN0aW9uIiwiYXV0b3BsYXlEZWxheVRvdGFsIiwiYXV0b3BsYXlEZWxheUN1cnJlbnQiLCJhdXRvcGxheVN0YXJ0VGltZSIsImNhbGNUaW1lTGVmdCIsInJ1biIsImRlbGF5Rm9yY2UiLCJjdXJyZW50U2xpZGVEZWxheSIsImFjdGl2ZVNsaWRlRWwiLCJnZXRTbGlkZURlbGF5IiwicHJvY2VlZCIsInN0YXJ0IiwicGF1c2UiLCJyZXNldCIsIm9uVmlzaWJpbGl0eUNoYW5nZSIsInZpc2liaWxpdHlTdGF0ZSIsIm9uUG9pbnRlckVudGVyIiwib25Qb2ludGVyTGVhdmUiLCJUaHVtYiIsIm11bHRpcGxlQWN0aXZlVGh1bWJzIiwiYXV0b1Njcm9sbE9mZnNldCIsInNsaWRlVGh1bWJBY3RpdmVDbGFzcyIsInRodW1ic0NvbnRhaW5lckNsYXNzIiwic3dpcGVyQ3JlYXRlZCIsIm9uVGh1bWJDbGljayIsInRodW1ic1N3aXBlciIsIlN3aXBlckNsYXNzIiwidGh1bWJzU3dpcGVyUGFyYW1zIiwidGh1bWJzVG9BY3RpdmF0ZSIsInRodW1iQWN0aXZlQ2xhc3MiLCJ1c2VPZmZzZXQiLCJjdXJyZW50VGh1bWJzSW5kZXgiLCJuZXdUaHVtYnNJbmRleCIsIm5ld1RodW1ic1NsaWRlIiwiZ2V0VGh1bWJzRWxlbWVudEFuZEluaXQiLCJ0aHVtYnNFbGVtZW50Iiwib25UaHVtYnNTd2lwZXIiLCJ3YXRjaEZvclRodW1ic1RvQXBwZWFyIiwibW9tZW50dW0iLCJtb21lbnR1bVJhdGlvIiwibW9tZW50dW1Cb3VuY2UiLCJtb21lbnR1bUJvdW5jZVJhdGlvIiwibW9tZW50dW1WZWxvY2l0eVJhdGlvIiwibWluaW11bVZlbG9jaXR5IiwibGFzdE1vdmVFdmVudCIsInBvcCIsInZlbG9jaXR5RXZlbnQiLCJkaXN0YW5jZSIsIm1vbWVudHVtRGlzdGFuY2UiLCJuZXdQb3NpdGlvbiIsImFmdGVyQm91bmNlUG9zaXRpb24iLCJkb0JvdW5jZSIsImJvdW5jZUFtb3VudCIsIm5lZWRzTG9vcEZpeCIsImoiLCJtb3ZlRGlzdGFuY2UiLCJjdXJyZW50U2xpZGVTaXplIiwic2xpZGVzTnVtYmVyRXZlblRvUm93cyIsInNsaWRlc1BlclJvdyIsIm51bUZ1bGxDb2x1bW5zIiwibmV3U2xpZGVPcmRlckluZGV4IiwiY29sdW1uIiwicm93IiwiZ3JvdXBJbmRleCIsInNsaWRlSW5kZXhJbkdyb3VwIiwiY29sdW1uc0luR3JvdXAiLCJvcmRlciIsImFwcGVuZEVsZW1lbnQiLCJwcmVwZW5kRWxlbWVudCIsImFkZFNsaWRlIiwiYWN0aXZlSW5kZXhCdWZmZXIiLCJiYXNlTGVuZ3RoIiwic2xpZGVzQnVmZmVyIiwiY3VycmVudFNsaWRlIiwiaW5kZXhUb1JlbW92ZSIsIk1hbmlwdWxhdGlvbiIsImVmZmVjdEluaXQiLCJvdmVyd3JpdGVQYXJhbXMiLCJwZXJzcGVjdGl2ZSIsInJlY3JlYXRlU2hhZG93cyIsImdldEVmZmVjdFBhcmFtcyIsInJlcXVpcmVVcGRhdGVPblZpcnR1YWwiLCJvdmVyd3JpdGVQYXJhbXNSZXN1bHQiLCJzbGlkZVNoYWRvd3MiLCJlZmZlY3RUYXJnZXQiLCJlZmZlY3RQYXJhbXMiLCJ0cmFuc2Zvcm1FbCIsImJhY2tmYWNlVmlzaWJpbGl0eSIsImVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kIiwidHJhbnNmb3JtRWxlbWVudHMiLCJhbGxTbGlkZXMiLCJ0cmFuc2l0aW9uRW5kVGFyZ2V0IiwiZXZlbnRUcmlnZ2VyZWQiLCJwYXJlbnROb2RlIiwiZ2V0U2xpZGUiLCJ0eCIsInR5Iiwic2xpZGVPcGFjaXR5IiwiRWZmZWN0Q3ViZSIsImN1YmVFZmZlY3QiLCJzaGFkb3ciLCJzaGFkb3dPZmZzZXQiLCJzaGFkb3dTY2FsZSIsImNyZWF0ZVNsaWRlU2hhZG93cyIsInNoYWRvd0JlZm9yZSIsInNoYWRvd0FmdGVyIiwiY3ViZVNoYWRvd0VsIiwid3JhcHBlclJvdGF0ZSIsInNsaWRlQW5nbGUiLCJ0eiIsInNoYWRvd0FuZ2xlIiwic2luIiwic2NhbGUxIiwic2NhbGUyIiwiekZhY3RvciIsImNyZWF0ZVNoYWRvdyIsInNoYWRvd0NsYXNzIiwic2hhZG93Q29udGFpbmVyIiwiRWZmZWN0RmxpcCIsImZsaXBFZmZlY3QiLCJsaW1pdFJvdGF0aW9uIiwicm90YXRlWSIsInJvdGF0ZVgiLCJ6SW5kZXgiLCJFZmZlY3RDb3ZlcmZsb3ciLCJjb3ZlcmZsb3dFZmZlY3QiLCJzdHJldGNoIiwiZGVwdGgiLCJtb2RpZmllciIsImNlbnRlciIsImNlbnRlck9mZnNldCIsIm9mZnNldE11bHRpcGxpZXIiLCJ0cmFuc2xhdGVaIiwic2xpZGVUcmFuc2Zvcm0iLCJzaGFkb3dCZWZvcmVFbCIsInNoYWRvd0FmdGVyRWwiLCJFZmZlY3RDcmVhdGl2ZSIsImNyZWF0aXZlRWZmZWN0IiwibGltaXRQcm9ncmVzcyIsInNoYWRvd1BlclByb2dyZXNzIiwicHJvZ3Jlc3NNdWx0aXBsaWVyIiwiZ2V0VHJhbnNsYXRlVmFsdWUiLCJpc0NlbnRlcmVkU2xpZGVzIiwibWFyZ2luIiwiciIsImN1c3RvbSIsInRyYW5zbGF0ZVN0cmluZyIsInJvdGF0ZVN0cmluZyIsInNjYWxlU3RyaW5nIiwib3BhY2l0eVN0cmluZyIsInNoYWRvd09wYWNpdHkiLCJFZmZlY3RDYXJkcyIsImNhcmRzRWZmZWN0IiwicGVyU2xpZGVSb3RhdGUiLCJwZXJTbGlkZU9mZnNldCIsInRYIiwidFkiLCJ0WiIsInRYQWRkIiwiaXNTd2lwZVRvTmV4dCIsImlzU3dpcGVUb1ByZXYiLCJzdWJQcm9ncmVzcyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImV4cG9ydHMiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZCIsImRlZmluaXRpb24iLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwiaGFzT3duUHJvcGVydHkiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJjdXJyZW50U2NyaXB0Iiwic2NyaXB0cyIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==