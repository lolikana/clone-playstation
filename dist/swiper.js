(()=>{"use strict";var e={397:(e,t,s)=>{s.r(t)},401:(e,t,s)=>{s.r(t)},775:(e,t,s)=>{s.r(t)},52:function(e,t,s){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.swiperHardwareData=t.swiperTopData=void 0;const i=a(s(840)),r=a(s(622)),n=a(s(514)),l=a(s(199)),o=a(s(207)),d=a(s(690)),c=a(s(744)),p=a(s(172)),u=a(s(786)),m=a(s(579)),f=a(s(402)),h=a(s(824)),g=a(s(351)),v=a(s(512)),b=a(s(444)),w=a(s(995)),y=a(s(420)),x=a(s(990)),E=a(s(332)),S=a(s(678)),T=a(s(67)),M=a(s(906));t.swiperTopData=[{id:1,img:{large:d.default,medium:p.default,mobile:u.default,thumb:m.default},alt:"forspoken game",logo:c.default,title:"Find your fight",text:"Traverse sprawling landscapes and battle monstrous creatures with a massive variety of magif abilities, out now on PS5.",btn:{text:"Play now",href:"#"}},{id:2,img:{large:i.default,medium:n.default,mobile:l.default,thumb:o.default},alt:"dead space game",logo:r.default,title:"Humanity ends here",text:"The sci-fi survival horror classic returns, rebuilt to offer a deeper and more immersive experience, out now on PS5",btn:{text:"Find out more",href:"#"}},{id:3,img:{large:i.default,medium:n.default,mobile:l.default,thumb:o.default},alt:"dead space game",logo:r.default,title:"Humanity ends here",text:"The sci-fi survival horror classic returns, rebuilt to offer a deeper and more immersive experience, out now on PS5",btn:{text:"Find out more",href:"#"}},{id:4,img:{large:i.default,medium:n.default,mobile:l.default,thumb:o.default},alt:"dead space game",logo:r.default,title:"Humanity ends here",text:"The sci-fi survival horror classic returns, rebuilt to offer a deeper and more immersive experience, out now on PS5",btn:{text:"Find out more",href:"#"}},{id:5,img:{large:i.default,medium:n.default,mobile:l.default,thumb:o.default},alt:"dead space game",logo:r.default,title:"Humanity ends here",text:"The sci-fi survival horror classic returns, rebuilt to offer a deeper and more immersive experience, out now on PS5",btn:{text:"Find out more",href:"#"}},{id:6,img:{large:i.default,medium:n.default,mobile:l.default,thumb:o.default},alt:"dead space game",logo:r.default,title:"Humanity ends here",text:"The sci-fi survival horror classic returns, rebuilt to offer a deeper and more immersive experience, out now on PS5",btn:{text:"Find out more",href:"#"}},{id:7,img:{large:f.default,medium:g.default,mobile:v.default,thumb:b.default},logo:h.default,alt:"live ps5 game",title:"Bringing your the extraordinary",text:"Explore incredible worlds and experience the unexpected. Start your story today.",btn:{text:"Find out more",href:"#"}}],t.swiperHardwareData=[{id:1,img:S.default,alt:"PS5 Console",title:"PlayStation 5 Console",text:"Experience an all-new generation of incredible PlayStation games. PS5 consoles are currently in stock.",btn:{more:{text:"Learn more",href:"#"},buy:{text:"Buy now",href:"#"}}},{id:2,img:y.default,alt:"DualSense™ Wireless Controller",title:"DualSense™ Wireless Controller",text:"Immerse yourself in the gaming experience with a controller the supports responsive haptic feedback and dynamic trigger effects.",btn:{more:{text:"Learn more",href:"#"}}},{id:3,img:E.default,alt:"PULSE 3D™ Wireless Headset",title:"PULSE 3D™ Wireless Headset",text:"Enjoy a seamless wireless experience with a headset fine-tuned for 3D Audio on PS5 consoles.",btn:{more:{text:"Learn more",href:"#"}}},{id:4,img:x.default,alt:"DualSense Edge™ Wireless Controller",title:"DualSense Edge™ Wireless Controller",text:"Get an edge in gameplay with remappable buttons, tunable triggers and sticks, changeable stick caps, back buttons, and more.",btn:{more:{text:"Learn more",href:"#"}}},{id:5,img:M.default,alt:"Media Remote",title:"Media Remote",text:"Conveniently control movies, streaming services and more on your PS5 console with an intuitive layout.",btn:{more:{text:"Learn more",href:"#"}}},{id:6,img:w.default,alt:"HD Camera",title:"HD Camera",text:"Add yourself to your gameplay videos and broadcasts with smooth, sharp, full-HD capture.",btn:{more:{text:"Learn more",href:"#"}}},{id:7,img:T.default,alt:"PS5 Console Covers",title:"PS5 Console Covers",text:"Personalise your PlayStation 5 or PlayStation 5 Digital Edition console with a vibrant array of new colour options.",btn:{more:{text:"Learn more",href:"#"}}}]},560:function(e,t,s){var a=this&&this.__createBinding||(Object.create?function(e,t,s,a){void 0===a&&(a=s);var i=Object.getOwnPropertyDescriptor(t,s);i&&!("get"in i?!t.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return t[s]}}),Object.defineProperty(e,a,i)}:function(e,t,s,a){void 0===a&&(a=s),e[a]=t[s]}),i=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var s in e)"default"!==s&&Object.prototype.hasOwnProperty.call(e,s)&&a(t,e,s);return i(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),s(775),s(401),s(397);const n=r(s(541)),l=s(52),o=document.querySelector(".section--top-wrapper"),d=document.querySelector(".top--thumbnail-wrapper");l.swiperTopData.map((e=>{o.appendChild((e=>{const t=document.createElement("div"),s=document.createElement("picture"),a=document.createElement("source"),i=document.createElement("source"),r=document.createElement("img"),n=document.createElement("a"),l=document.createElement("div"),o=document.createElement("img"),d=document.createElement("h1"),c=document.createElement("p"),p=document.createElement("div"),u=document.createElement("a");a.media="(min-width:1024px)",a.srcset=e.img.large,i.media="(min-width:700px)",i.srcset=e.img.medium,r.classList.add("slide-img"),r.src=e.img.mobile,r.alt=`${e.alt} image slide`,r.loading="lazy",s.append(a,i,r),n.classList.add("slide-link"),n.href="#",l.classList.add("slide-desc"),o.classList.add("slide-logo"),o.src=e.logo,o.alt=`${e.alt} logo`,o.loading="lazy",d.classList.add("slide-title"),d.textContent=e.title,c.classList.add("slide-text"),c.textContent=e.text,p.classList.add("slide-btn"),u.classList.add("button--link","white"),u.textContent=e.btn.text,u.href=e.btn.href,p.appendChild(u);const m=document.createElement("div");return m.classList.add("swiper-lazy-preloader","swiper-lazy-preloader-white"),l.append(o,d,c,p),t.classList.add("swiper-slide","section--top-slide"),t.append(s,n,l,m),t})(e)),d.appendChild(function(e){const t=document.createElement("div"),s=document.createElement("img");s.classList.add("section--thumbnail-img"),s.src=e.img.thumb,s.alt=`${e.alt} thumbnail slide`,s.loading="lazy";const a=document.createElement("div");return a.classList.add("swiper-lazy-preloader","swiper-lazy-preloader-white"),t.classList.add("swiper-slide","section--thumbnail-slide","top--thumbnail-slide"),t.append(a,s),t}(e))}));const c=document.querySelector(".section--hardware-wrapper"),p=document.querySelector(".hardware--thumbnail-wrapper");l.swiperHardwareData.map((e=>{c.appendChild((e=>{const t=document.createElement("div"),s=document.createElement("div"),a=document.createElement("img"),i=document.createElement("div"),r=document.createElement("h1"),n=document.createElement("p"),l=document.createElement("div"),o=document.createElement("a"),d=document.createElement("a");a.classList.add("slide-img"),a.src=e.img,a.alt=`${e.alt} image slide`,a.loading="lazy",i.classList.add("slide--hardware-desc"),r.classList.add("slide-title"),r.textContent=e.title,n.classList.add("slide-text"),n.textContent=e.text,l.classList.add("slide-btn"),o.classList.add("button--link","blue"),o.textContent=e.btn.more.text,o.href=e.btn.more.href,l.appendChild(o),e.btn.buy&&(d.classList.add("button--link","orange"),d.textContent=e.btn.buy.text,d.href=e.btn.buy.href,l.appendChild(d));const c=document.createElement("div");return c.classList.add("swiper-lazy-preloader","swiper-lazy-preloader-white"),i.append(r,n,l),t.classList.add("swiper-slide","section--hardware-slide"),s.classList.add("section--hardware-content"),s.append(a,i,c),t.appendChild(s),t})(e)),p.appendChild(function(e){const t=document.createElement("div"),s=document.createElement("div"),a=document.createElement("img"),i=document.createElement("p");return a.classList.add("section--thumbnail-img"),a.src=e.img,a.alt=`${e.alt} thumbnail slide`,a.loading="lazy",i.textContent=e.alt,document.createElement("div").classList.add("swiper-lazy-preloader","swiper-lazy-preloader-white"),s.classList.add("section--hardware-content"),s.append(a,i),t.classList.add("swiper-slide","section--thumbnail-slide","hardware--thumbnail-slide"),t.append(s),t}(e))}));const u={modules:[n.Keyboard,n.Autoplay],loop:!0,slidesPerView:"auto",spaceBetween:"2%",centeredSlides:!0,slideToClickedSlide:!0,grabCursor:!0,watchSlidesProgress:!0,keyboard:!0,autoplay:{delay:3e3,stopOnLastSlide:!0,disableOnInteraction:!0,pauseOnMouseEnter:!0,waitForTransition:!0},speed:500},m={breakpoints:{700:{loop:!1,centeredSlides:!1,spaceBetween:7,slidesPerView:l.swiperTopData.length}}},f={breakpoints:{700:{loop:!1,centeredSlides:!1,spaceBetween:7,slidesPerView:l.swiperHardwareData.length}}},h=new n.default(".section--top-thumbnails",{...u,...m}),g=new n.default(".section--hardware-thumbnails",{...u,...f}),v={modules:[n.EffectFade,n.Thumbs],effect:"fade",fadeEffect:{crossFade:!0},loop:!0,touchRatio:0,speed:500},b={loopedSlides:l.swiperTopData.length,thumbs:{swiper:h}},w={loopedSlides:l.swiperHardwareData.length,thumbs:{swiper:g}};new n.default(".section--top-swiper",{...v,...b}),new n.default(".section--hardware-swiper",{...v,...w})},332:(e,t,s)=>{e.exports=s.p+"assets/492ed84bf543cecc10fa.webp"},420:(e,t,s)=>{e.exports=s.p+"assets/42081818d6cb61373f94.webp"},990:(e,t,s)=>{e.exports=s.p+"assets/7c831ffab68c151996af.webp"},995:(e,t,s)=>{e.exports=s.p+"assets/1903370c5ff150cf04b4.webp"},906:(e,t,s)=>{e.exports=s.p+"assets/735fb7010894af43c09f.webp"},678:(e,t,s)=>{e.exports=s.p+"assets/0ae93bdfa68b86f185fb.webp"},67:(e,t,s)=>{e.exports=s.p+"assets/d6c09c0262411b0adfaf.webp"},622:(e,t,s)=>{e.exports=s.p+"assets/9c654bd724c8b3cb6302.png"},514:(e,t,s)=>{e.exports=s.p+"assets/8292c458a1ef44ee069e.webp"},199:(e,t,s)=>{e.exports=s.p+"assets/6da6aff66707d970a886.webp"},207:(e,t,s)=>{e.exports=s.p+"assets/175034a85dfa2ae46059.png"},840:(e,t,s)=>{e.exports=s.p+"assets/bf68a80f6a6cb7999005.webp"},744:(e,t,s)=>{e.exports=s.p+"assets/916b92490caebb050e14.png"},172:(e,t,s)=>{e.exports=s.p+"assets/15bad8a03467c045c440.webp"},786:(e,t,s)=>{e.exports=s.p+"assets/05837921597b81d479f8.webp"},579:(e,t,s)=>{e.exports=s.p+"assets/72a43ad9fd3d6d954639.png"},690:(e,t,s)=>{e.exports=s.p+"assets/cc7956085614fd98efe9.webp"},824:(e,t,s)=>{e.exports=s.p+"assets/9ae5ff9cf384c26c7ff5.png"},351:(e,t,s)=>{e.exports=s.p+"assets/562848a778dd009a08d5.webp"},512:(e,t,s)=>{e.exports=s.p+"assets/cc94d0eaa8b1d661212a.webp"},444:(e,t,s)=>{e.exports=s.p+"assets/fa9cfca24585b6b29cfb.png"},402:(e,t,s)=>{e.exports=s.p+"assets/7896b02c9633ca1f672e.webp"},541:(e,t,s)=>{function a(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function i(e={},t={}){Object.keys(t).forEach((s=>{void 0===e[s]?e[s]=t[s]:a(t[s])&&a(e[s])&&Object.keys(t[s]).length>0&&i(e[s],t[s])}))}s.r(t),s.d(t,{A11y:()=>de,Autoplay:()=>ue,Controller:()=>oe,EffectCards:()=>Ae,EffectCoverflow:()=>ke,EffectCreative:()=>ze,EffectCube:()=>Ce,EffectFade:()=>Me,EffectFlip:()=>Le,FreeMode:()=>fe,Grid:()=>he,HashNavigation:()=>pe,History:()=>ce,Keyboard:()=>J,Manipulation:()=>xe,Mousewheel:()=>ee,Navigation:()=>se,Pagination:()=>ie,Parallax:()=>ne,Scrollbar:()=>re,Swiper:()=>Z,Thumbs:()=>me,Virtual:()=>Q,Zoom:()=>le,default:()=>Z});const r={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector:()=>null,querySelectorAll:()=>[],getElementById:()=>null,createEvent:()=>({initEvent(){}}),createElement:()=>({children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName:()=>[]}),createElementNS:()=>({}),importNode:()=>null,location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function n(){const e="undefined"!=typeof document?document:{};return i(e,r),e}const l={document:r,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle:()=>({getPropertyValue:()=>""}),Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia:()=>({}),requestAnimationFrame:e=>"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0),cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function o(){const e="undefined"!=typeof window?window:{};return i(e,l),e}function d(e,t=0){return setTimeout(e,t)}function c(){return Date.now()}function p(e,t="x"){const s=o();let a,i,r;const n=function(e){const t=o();let s;return t.getComputedStyle&&(s=t.getComputedStyle(e,null)),!s&&e.currentStyle&&(s=e.currentStyle),s||(s=e.style),s}(e);return s.WebKitCSSMatrix?(i=n.transform||n.webkitTransform,i.split(",").length>6&&(i=i.split(", ").map((e=>e.replace(",","."))).join(", ")),r=new s.WebKitCSSMatrix("none"===i?"":i)):(r=n.MozTransform||n.OTransform||n.MsTransform||n.msTransform||n.transform||n.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),a=r.toString().split(",")),"x"===t&&(i=s.WebKitCSSMatrix?r.m41:16===a.length?parseFloat(a[12]):parseFloat(a[4])),"y"===t&&(i=s.WebKitCSSMatrix?r.m42:16===a.length?parseFloat(a[13]):parseFloat(a[5])),i||0}function u(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function m(...e){const t=Object(e[0]),s=["__proto__","constructor","prototype"];for(let i=1;i<e.length;i+=1){const r=e[i];if(null!=r&&(a=r,!("undefined"!=typeof window&&void 0!==window.HTMLElement?a instanceof HTMLElement:a&&(1===a.nodeType||11===a.nodeType)))){const e=Object.keys(Object(r)).filter((e=>s.indexOf(e)<0));for(let s=0,a=e.length;s<a;s+=1){const a=e[s],i=Object.getOwnPropertyDescriptor(r,a);void 0!==i&&i.enumerable&&(u(t[a])&&u(r[a])?r[a].__swiper__?t[a]=r[a]:m(t[a],r[a]):!u(t[a])&&u(r[a])?(t[a]={},r[a].__swiper__?t[a]=r[a]:m(t[a],r[a])):t[a]=r[a])}}}var a;return t}function f(e,t,s){e.style.setProperty(t,s)}function h({swiper:e,targetPosition:t,side:s}){const a=o(),i=-e.translate;let r,n=null;const l=e.params.speed;e.wrapperEl.style.scrollSnapType="none",a.cancelAnimationFrame(e.cssModeFrameID);const d=t>i?"next":"prev",c=(e,t)=>"next"===d&&e>=t||"prev"===d&&e<=t,p=()=>{r=(new Date).getTime(),null===n&&(n=r);const o=Math.max(Math.min((r-n)/l,1),0),d=.5-Math.cos(o*Math.PI)/2;let u=i+d*(t-i);if(c(u,t)&&(u=t),e.wrapperEl.scrollTo({[s]:u}),c(u,t))return e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.scrollSnapType="",setTimeout((()=>{e.wrapperEl.style.overflow="",e.wrapperEl.scrollTo({[s]:u})})),void a.cancelAnimationFrame(e.cssModeFrameID);e.cssModeFrameID=a.requestAnimationFrame(p)};p()}function g(e){return e.querySelector(".swiper-slide-transform")||e.shadowEl&&e.shadowEl.querySelector(".swiper-slide-transform")||e}function v(e,t=""){return[...e.children].filter((e=>e.matches(t)))}function b(e,t=[]){const s=document.createElement(e);return s.classList.add(...Array.isArray(t)?t:[t]),s}function w(e){const t=o(),s=n(),a=e.getBoundingClientRect(),i=s.body,r=e.clientTop||i.clientTop||0,l=e.clientLeft||i.clientLeft||0,d=e===t?t.scrollY:e.scrollTop,c=e===t?t.scrollX:e.scrollLeft;return{top:a.top+d-r,left:a.left+c-l}}function y(e,t){return o().getComputedStyle(e,null).getPropertyValue(t)}function x(e){let t,s=e;if(s){for(t=0;null!==(s=s.previousSibling);)1===s.nodeType&&(t+=1);return t}}function E(e,t){const s=[];let a=e.parentElement;for(;a;)t?a.matches(t)&&s.push(a):s.push(a),a=a.parentElement;return s}function S(e,t){t&&e.addEventListener("transitionend",(function s(a){a.target===e&&(t.call(e,a),e.removeEventListener("transitionend",s))}))}function T(e,t,s){const a=o();return s?e["width"===t?"offsetWidth":"offsetHeight"]+parseFloat(a.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-right":"margin-top"))+parseFloat(a.getComputedStyle(e,null).getPropertyValue("width"===t?"margin-left":"margin-bottom")):e.offsetWidth}let M,C,P;function L(){return M||(M=function(){const e=o(),t=n();return{smoothScroll:t.documentElement&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}()),M}const k={on(e,t,s){const a=this;if(!a.eventsListeners||a.destroyed)return a;if("function"!=typeof t)return a;const i=s?"unshift":"push";return e.split(" ").forEach((e=>{a.eventsListeners[e]||(a.eventsListeners[e]=[]),a.eventsListeners[e][i](t)})),a},once(e,t,s){const a=this;if(!a.eventsListeners||a.destroyed)return a;if("function"!=typeof t)return a;function i(...s){a.off(e,i),i.__emitterProxy&&delete i.__emitterProxy,t.apply(a,s)}return i.__emitterProxy=t,a.on(e,i,s)},onAny(e,t){const s=this;if(!s.eventsListeners||s.destroyed)return s;if("function"!=typeof e)return s;const a=t?"unshift":"push";return s.eventsAnyListeners.indexOf(e)<0&&s.eventsAnyListeners[a](e),s},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsAnyListeners)return t;const s=t.eventsAnyListeners.indexOf(e);return s>=0&&t.eventsAnyListeners.splice(s,1),t},off(e,t){const s=this;return!s.eventsListeners||s.destroyed?s:s.eventsListeners?(e.split(" ").forEach((e=>{void 0===t?s.eventsListeners[e]=[]:s.eventsListeners[e]&&s.eventsListeners[e].forEach(((a,i)=>{(a===t||a.__emitterProxy&&a.__emitterProxy===t)&&s.eventsListeners[e].splice(i,1)}))})),s):s},emit(...e){const t=this;if(!t.eventsListeners||t.destroyed)return t;if(!t.eventsListeners)return t;let s,a,i;return"string"==typeof e[0]||Array.isArray(e[0])?(s=e[0],a=e.slice(1,e.length),i=t):(s=e[0].events,a=e[0].data,i=e[0].context||t),a.unshift(i),(Array.isArray(s)?s:s.split(" ")).forEach((e=>{t.eventsAnyListeners&&t.eventsAnyListeners.length&&t.eventsAnyListeners.forEach((t=>{t.apply(i,[e,...a])})),t.eventsListeners&&t.eventsListeners[e]&&t.eventsListeners[e].forEach((e=>{e.apply(i,a)}))})),t}},z={updateSize:function(){const e=this;let t,s;const a=e.el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:a.clientWidth,s=void 0!==e.params.height&&null!==e.params.height?e.params.height:a.clientHeight,0===t&&e.isHorizontal()||0===s&&e.isVertical()||(t=t-parseInt(y(a,"padding-left")||0,10)-parseInt(y(a,"padding-right")||0,10),s=s-parseInt(y(a,"padding-top")||0,10)-parseInt(y(a,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(s)&&(s=0),Object.assign(e,{width:t,height:s,size:e.isHorizontal()?t:s}))},updateSlides:function(){const e=this;function t(t){return e.isHorizontal()?t:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[t]}function s(e,s){return parseFloat(e.getPropertyValue(t(s))||0)}const a=e.params,{wrapperEl:i,slidesEl:r,size:n,rtlTranslate:l,wrongRTL:o}=e,d=e.virtual&&a.virtual.enabled,c=d?e.virtual.slides.length:e.slides.length,p=v(r,`.${e.params.slideClass}, swiper-slide`),u=d?e.virtual.slides.length:p.length;let m=[];const h=[],g=[];let b=a.slidesOffsetBefore;"function"==typeof b&&(b=a.slidesOffsetBefore.call(e));let w=a.slidesOffsetAfter;"function"==typeof w&&(w=a.slidesOffsetAfter.call(e));const x=e.snapGrid.length,E=e.slidesGrid.length;let S=a.spaceBetween,M=-b,C=0,P=0;if(void 0===n)return;"string"==typeof S&&S.indexOf("%")>=0&&(S=parseFloat(S.replace("%",""))/100*n),e.virtualSize=-S,p.forEach((e=>{l?e.style.marginLeft="":e.style.marginRight="",e.style.marginBottom="",e.style.marginTop=""})),a.centeredSlides&&a.cssMode&&(f(i,"--swiper-centered-offset-before",""),f(i,"--swiper-centered-offset-after",""));const L=a.grid&&a.grid.rows>1&&e.grid;let k;L&&e.grid.initSlides(u);const z="auto"===a.slidesPerView&&a.breakpoints&&Object.keys(a.breakpoints).filter((e=>void 0!==a.breakpoints[e].slidesPerView)).length>0;for(let i=0;i<u;i+=1){let r;if(k=0,p[i]&&(r=p[i]),L&&e.grid.updateSlide(i,r,u,t),!p[i]||"none"!==y(r,"display")){if("auto"===a.slidesPerView){z&&(p[i].style[t("width")]="");const n=getComputedStyle(r),l=r.style.transform,o=r.style.webkitTransform;if(l&&(r.style.transform="none"),o&&(r.style.webkitTransform="none"),a.roundLengths)k=e.isHorizontal()?T(r,"width",!0):T(r,"height",!0);else{const e=s(n,"width"),t=s(n,"padding-left"),a=s(n,"padding-right"),i=s(n,"margin-left"),l=s(n,"margin-right"),o=n.getPropertyValue("box-sizing");if(o&&"border-box"===o)k=e+i+l;else{const{clientWidth:s,offsetWidth:n}=r;k=e+t+a+i+l+(n-s)}}l&&(r.style.transform=l),o&&(r.style.webkitTransform=o),a.roundLengths&&(k=Math.floor(k))}else k=(n-(a.slidesPerView-1)*S)/a.slidesPerView,a.roundLengths&&(k=Math.floor(k)),p[i]&&(p[i].style[t("width")]=`${k}px`);p[i]&&(p[i].swiperSlideSize=k),g.push(k),a.centeredSlides?(M=M+k/2+C/2+S,0===C&&0!==i&&(M=M-n/2-S),0===i&&(M=M-n/2-S),Math.abs(M)<.001&&(M=0),a.roundLengths&&(M=Math.floor(M)),P%a.slidesPerGroup==0&&m.push(M),h.push(M)):(a.roundLengths&&(M=Math.floor(M)),(P-Math.min(e.params.slidesPerGroupSkip,P))%e.params.slidesPerGroup==0&&m.push(M),h.push(M),M=M+k+S),e.virtualSize+=k+S,C=k,P+=1}}if(e.virtualSize=Math.max(e.virtualSize,n)+w,l&&o&&("slide"===a.effect||"coverflow"===a.effect)&&(i.style.width=`${e.virtualSize+a.spaceBetween}px`),a.setWrapperSize&&(i.style[t("width")]=`${e.virtualSize+a.spaceBetween}px`),L&&e.grid.updateWrapperSize(k,m,t),!a.centeredSlides){const t=[];for(let s=0;s<m.length;s+=1){let i=m[s];a.roundLengths&&(i=Math.floor(i)),m[s]<=e.virtualSize-n&&t.push(i)}m=t,Math.floor(e.virtualSize-n)-Math.floor(m[m.length-1])>1&&m.push(e.virtualSize-n)}if(d&&a.loop){const t=g[0]+S;if(a.slidesPerGroup>1){const s=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/a.slidesPerGroup),i=t*a.slidesPerGroup;for(let e=0;e<s;e+=1)m.push(m[m.length-1]+i)}for(let s=0;s<e.virtual.slidesBefore+e.virtual.slidesAfter;s+=1)1===a.slidesPerGroup&&m.push(m[m.length-1]+t),h.push(h[h.length-1]+t),e.virtualSize+=t}if(0===m.length&&(m=[0]),0!==a.spaceBetween){const s=e.isHorizontal()&&l?"marginLeft":t("marginRight");p.filter(((e,t)=>!(a.cssMode&&!a.loop)||t!==p.length-1)).forEach((e=>{e.style[s]=`${S}px`}))}if(a.centeredSlides&&a.centeredSlidesBounds){let e=0;g.forEach((t=>{e+=t+(a.spaceBetween?a.spaceBetween:0)})),e-=a.spaceBetween;const t=e-n;m=m.map((e=>e<0?-b:e>t?t+w:e))}if(a.centerInsufficientSlides){let e=0;if(g.forEach((t=>{e+=t+(a.spaceBetween?a.spaceBetween:0)})),e-=a.spaceBetween,e<n){const t=(n-e)/2;m.forEach(((e,s)=>{m[s]=e-t})),h.forEach(((e,s)=>{h[s]=e+t}))}}if(Object.assign(e,{slides:p,snapGrid:m,slidesGrid:h,slidesSizesGrid:g}),a.centeredSlides&&a.cssMode&&!a.centeredSlidesBounds){f(i,"--swiper-centered-offset-before",-m[0]+"px"),f(i,"--swiper-centered-offset-after",e.size/2-g[g.length-1]/2+"px");const t=-e.snapGrid[0],s=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map((e=>e+t)),e.slidesGrid=e.slidesGrid.map((e=>e+s))}if(u!==c&&e.emit("slidesLengthChange"),m.length!==x&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),h.length!==E&&e.emit("slidesGridLengthChange"),a.watchSlidesProgress&&e.updateSlidesOffset(),!(d||a.cssMode||"slide"!==a.effect&&"fade"!==a.effect)){const t=`${a.containerModifierClass}backface-hidden`,s=e.el.classList.contains(t);u<=a.maxBackfaceHiddenSlides?s||e.el.classList.add(t):s&&e.el.classList.remove(t)}},updateAutoHeight:function(e){const t=this,s=[],a=t.virtual&&t.params.virtual.enabled;let i,r=0;"number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed);const n=e=>a?t.slides.filter((t=>parseInt(t.getAttribute("data-swiper-slide-index"),10)===e))[0]:t.slides[e];if("auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach((e=>{s.push(e)}));else for(i=0;i<Math.ceil(t.params.slidesPerView);i+=1){const e=t.activeIndex+i;if(e>t.slides.length&&!a)break;s.push(n(e))}else s.push(n(t.activeIndex));for(i=0;i<s.length;i+=1)if(void 0!==s[i]){const e=s[i].offsetHeight;r=e>r?e:r}(r||0===r)&&(t.wrapperEl.style.height=`${r}px`)},updateSlidesOffset:function(){const e=this,t=e.slides,s=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let a=0;a<t.length;a+=1)t[a].swiperSlideOffset=(e.isHorizontal()?t[a].offsetLeft:t[a].offsetTop)-s},updateSlidesProgress:function(e=this&&this.translate||0){const t=this,s=t.params,{slides:a,rtlTranslate:i,snapGrid:r}=t;if(0===a.length)return;void 0===a[0].swiperSlideOffset&&t.updateSlidesOffset();let n=-e;i&&(n=e),a.forEach((e=>{e.classList.remove(s.slideVisibleClass)})),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(let e=0;e<a.length;e+=1){const l=a[e];let o=l.swiperSlideOffset;s.cssMode&&s.centeredSlides&&(o-=a[0].swiperSlideOffset);const d=(n+(s.centeredSlides?t.minTranslate():0)-o)/(l.swiperSlideSize+s.spaceBetween),c=(n-r[0]+(s.centeredSlides?t.minTranslate():0)-o)/(l.swiperSlideSize+s.spaceBetween),p=-(n-o),u=p+t.slidesSizesGrid[e];(p>=0&&p<t.size-1||u>1&&u<=t.size||p<=0&&u>=t.size)&&(t.visibleSlides.push(l),t.visibleSlidesIndexes.push(e),a[e].classList.add(s.slideVisibleClass)),l.progress=i?-d:d,l.originalProgress=i?-c:c}},updateProgress:function(e){const t=this;if(void 0===e){const s=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*s||0}const s=t.params,a=t.maxTranslate()-t.minTranslate();let{progress:i,isBeginning:r,isEnd:n,progressLoop:l}=t;const o=r,d=n;if(0===a)i=0,r=!0,n=!0;else{i=(e-t.minTranslate())/a;const s=Math.abs(e-t.minTranslate())<1,l=Math.abs(e-t.maxTranslate())<1;r=s||i<=0,n=l||i>=1,s&&(i=0),l&&(i=1)}if(s.loop){const s=x(t.slides.filter((e=>"0"===e.getAttribute("data-swiper-slide-index")))[0]),a=x(t.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")==t.slides.length-1))[0]),i=t.slidesGrid[s],r=t.slidesGrid[a],n=t.slidesGrid[t.slidesGrid.length-1],o=Math.abs(e);l=o>=i?(o-i)/n:(o+n-r)/n,l>1&&(l-=1)}Object.assign(t,{progress:i,progressLoop:l,isBeginning:r,isEnd:n}),(s.watchSlidesProgress||s.centeredSlides&&s.autoHeight)&&t.updateSlidesProgress(e),r&&!o&&t.emit("reachBeginning toEdge"),n&&!d&&t.emit("reachEnd toEdge"),(o&&!r||d&&!n)&&t.emit("fromEdge"),t.emit("progress",i)},updateSlidesClasses:function(){const e=this,{slides:t,params:s,slidesEl:a,activeIndex:i}=e,r=e.virtual&&s.virtual.enabled,n=e=>v(a,`.${s.slideClass}${e}, swiper-slide${e}`)[0];let l;if(t.forEach((e=>{e.classList.remove(s.slideActiveClass,s.slideNextClass,s.slidePrevClass)})),r)if(s.loop){let t=i-e.virtual.slidesBefore;t<0&&(t=e.virtual.slides.length+t),t>=e.virtual.slides.length&&(t-=e.virtual.slides.length),l=n(`[data-swiper-slide-index="${t}"]`)}else l=n(`[data-swiper-slide-index="${i}"]`);else l=t[i];if(l){l.classList.add(s.slideActiveClass);let e=function(e,t){const s=[];for(;e.nextElementSibling;){const a=e.nextElementSibling;t?a.matches(t)&&s.push(a):s.push(a),e=a}return s}(l,`.${s.slideClass}, swiper-slide`)[0];s.loop&&!e&&(e=t[0]),e&&e.classList.add(s.slideNextClass);let a=function(e,t){const s=[];for(;e.previousElementSibling;){const a=e.previousElementSibling;t?a.matches(t)&&s.push(a):s.push(a),e=a}return s}(l,`.${s.slideClass}, swiper-slide`)[0];s.loop&&0===!a&&(a=t[t.length-1]),a&&a.classList.add(s.slidePrevClass)}e.emitSlidesClasses()},updateActiveIndex:function(e){const t=this,s=t.rtlTranslate?t.translate:-t.translate,{snapGrid:a,params:i,activeIndex:r,realIndex:n,snapIndex:l}=t;let o,d=e;const c=e=>{let s=e-t.virtual.slidesBefore;return s<0&&(s=t.virtual.slides.length+s),s>=t.virtual.slides.length&&(s-=t.virtual.slides.length),s};if(void 0===d&&(d=function(e){const{slidesGrid:t,params:s}=e,a=e.rtlTranslate?e.translate:-e.translate;let i;for(let e=0;e<t.length;e+=1)void 0!==t[e+1]?a>=t[e]&&a<t[e+1]-(t[e+1]-t[e])/2?i=e:a>=t[e]&&a<t[e+1]&&(i=e+1):a>=t[e]&&(i=e);return s.normalizeSlideIndex&&(i<0||void 0===i)&&(i=0),i}(t)),a.indexOf(s)>=0)o=a.indexOf(s);else{const e=Math.min(i.slidesPerGroupSkip,d);o=e+Math.floor((d-e)/i.slidesPerGroup)}if(o>=a.length&&(o=a.length-1),d===r)return o!==l&&(t.snapIndex=o,t.emit("snapIndexChange")),void(t.params.loop&&t.virtual&&t.params.virtual.enabled&&(t.realIndex=c(d)));let p;p=t.virtual&&i.virtual.enabled&&i.loop?c(d):t.slides[d]?parseInt(t.slides[d].getAttribute("data-swiper-slide-index")||d,10):d,Object.assign(t,{snapIndex:o,realIndex:p,previousIndex:r,activeIndex:d}),t.emit("activeIndexChange"),t.emit("snapIndexChange"),n!==p&&t.emit("realIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&t.emit("slideChange")},updateClickedSlide:function(e){const t=this,s=t.params,a=e.closest(`.${s.slideClass}, swiper-slide`);let i,r=!1;if(a)for(let e=0;e<t.slides.length;e+=1)if(t.slides[e]===a){r=!0,i=e;break}if(!a||!r)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=a,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(a.getAttribute("data-swiper-slide-index"),10):t.clickedIndex=i,s.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}};function A({swiper:e,runCallbacks:t,direction:s,step:a}){const{activeIndex:i,previousIndex:r}=e;let n=s;if(n||(n=i>r?"next":i<r?"prev":"reset"),e.emit(`transition${a}`),t&&i!==r){if("reset"===n)return void e.emit(`slideResetTransition${a}`);e.emit(`slideChangeTransition${a}`),"next"===n?e.emit(`slideNextTransition${a}`):e.emit(`slidePrevTransition${a}`)}}const $={slideTo:function(e=0,t=this.params.speed,s=!0,a,i){"string"==typeof e&&(e=parseInt(e,10));const r=this;let n=e;n<0&&(n=0);const{params:l,snapGrid:o,slidesGrid:d,previousIndex:c,activeIndex:p,rtlTranslate:u,wrapperEl:m,enabled:f}=r;if(r.animating&&l.preventInteractionOnTransition||!f&&!a&&!i)return!1;const g=Math.min(r.params.slidesPerGroupSkip,n);let v=g+Math.floor((n-g)/r.params.slidesPerGroup);v>=o.length&&(v=o.length-1);const b=-o[v];if(l.normalizeSlideIndex)for(let e=0;e<d.length;e+=1){const t=-Math.floor(100*b),s=Math.floor(100*d[e]),a=Math.floor(100*d[e+1]);void 0!==d[e+1]?t>=s&&t<a-(a-s)/2?n=e:t>=s&&t<a&&(n=e+1):t>=s&&(n=e)}if(r.initialized&&n!==p){if(!r.allowSlideNext&&b<r.translate&&b<r.minTranslate())return!1;if(!r.allowSlidePrev&&b>r.translate&&b>r.maxTranslate()&&(p||0)!==n)return!1}let w;if(n!==(c||0)&&s&&r.emit("beforeSlideChangeStart"),r.updateProgress(b),w=n>p?"next":n<p?"prev":"reset",u&&-b===r.translate||!u&&b===r.translate)return r.updateActiveIndex(n),l.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==l.effect&&r.setTranslate(b),"reset"!==w&&(r.transitionStart(s,w),r.transitionEnd(s,w)),!1;if(l.cssMode){const e=r.isHorizontal(),s=u?b:-b;if(0===t){const t=r.virtual&&r.params.virtual.enabled;t&&(r.wrapperEl.style.scrollSnapType="none",r._immediateVirtual=!0),t&&!r._cssModeVirtualInitialSet&&r.params.initialSlide>0?(r._cssModeVirtualInitialSet=!0,requestAnimationFrame((()=>{m[e?"scrollLeft":"scrollTop"]=s}))):m[e?"scrollLeft":"scrollTop"]=s,t&&requestAnimationFrame((()=>{r.wrapperEl.style.scrollSnapType="",r._immediateVirtual=!1}))}else{if(!r.support.smoothScroll)return h({swiper:r,targetPosition:s,side:e?"left":"top"}),!0;m.scrollTo({[e?"left":"top"]:s,behavior:"smooth"})}return!0}return r.setTransition(t),r.setTranslate(b),r.updateActiveIndex(n),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,a),r.transitionStart(s,w),0===t?r.transitionEnd(s,w):r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(s,w))}),r.wrapperEl.addEventListener("transitionend",r.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e=0,t=this.params.speed,s=!0,a){"string"==typeof e&&(e=parseInt(e,10));const i=this;let r=e;return i.params.loop&&(i.virtual&&i.params.virtual.enabled?r+=i.virtual.slidesBefore:r=x(i.slides.filter((e=>1*e.getAttribute("data-swiper-slide-index")===r))[0])),i.slideTo(r,t,s,a)},slideNext:function(e=this.params.speed,t=!0,s){const a=this,{enabled:i,params:r,animating:n}=a;if(!i)return a;let l=r.slidesPerGroup;"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(l=Math.max(a.slidesPerViewDynamic("current",!0),1));const o=a.activeIndex<r.slidesPerGroupSkip?1:l,d=a.virtual&&r.virtual.enabled;if(r.loop){if(n&&!d&&r.loopPreventsSliding)return!1;a.loopFix({direction:"next"}),a._clientLeft=a.wrapperEl.clientLeft}return r.rewind&&a.isEnd?a.slideTo(0,e,t,s):a.slideTo(a.activeIndex+o,e,t,s)},slidePrev:function(e=this.params.speed,t=!0,s){const a=this,{params:i,snapGrid:r,slidesGrid:n,rtlTranslate:l,enabled:o,animating:d}=a;if(!o)return a;const c=a.virtual&&i.virtual.enabled;if(i.loop){if(d&&!c&&i.loopPreventsSliding)return!1;a.loopFix({direction:"prev"}),a._clientLeft=a.wrapperEl.clientLeft}function p(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=p(l?a.translate:-a.translate),m=r.map((e=>p(e)));let f=r[m.indexOf(u)-1];if(void 0===f&&i.cssMode){let e;r.forEach(((t,s)=>{u>=t&&(e=s)})),void 0!==e&&(f=r[e>0?e-1:e])}let h=0;if(void 0!==f&&(h=n.indexOf(f),h<0&&(h=a.activeIndex-1),"auto"===i.slidesPerView&&1===i.slidesPerGroup&&i.slidesPerGroupAuto&&(h=h-a.slidesPerViewDynamic("previous",!0)+1,h=Math.max(h,0))),i.rewind&&a.isBeginning){const i=a.params.virtual&&a.params.virtual.enabled&&a.virtual?a.virtual.slides.length-1:a.slides.length-1;return a.slideTo(i,e,t,s)}return a.slideTo(h,e,t,s)},slideReset:function(e=this.params.speed,t=!0,s){return this.slideTo(this.activeIndex,e,t,s)},slideToClosest:function(e=this.params.speed,t=!0,s,a=.5){const i=this;let r=i.activeIndex;const n=Math.min(i.params.slidesPerGroupSkip,r),l=n+Math.floor((r-n)/i.params.slidesPerGroup),o=i.rtlTranslate?i.translate:-i.translate;if(o>=i.snapGrid[l]){const e=i.snapGrid[l];o-e>(i.snapGrid[l+1]-e)*a&&(r+=i.params.slidesPerGroup)}else{const e=i.snapGrid[l-1];o-e<=(i.snapGrid[l]-e)*a&&(r-=i.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,i.slidesGrid.length-1),i.slideTo(r,e,t,s)},slideToClickedSlide:function(){const e=this,{params:t,slidesEl:s}=e,a="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let i,r=e.clickedIndex;const n=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;i=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?r<e.loopedSlides-a/2||r>e.slides.length-e.loopedSlides+a/2?(e.loopFix(),r=x(v(s,`${n}[data-swiper-slide-index="${i}"]`)[0]),d((()=>{e.slideTo(r)}))):e.slideTo(r):r>e.slides.length-a?(e.loopFix(),r=x(v(s,`${n}[data-swiper-slide-index="${i}"]`)[0]),d((()=>{e.slideTo(r)}))):e.slideTo(r)}else e.slideTo(r)}};function O(e){const t=this,s=n(),a=o(),i=t.touchEventsData;i.evCache.push(e);const{params:r,touches:l,enabled:d}=t;if(!d)return;if(!r.simulateTouch&&"mouse"===e.pointerType)return;if(t.animating&&r.preventInteractionOnTransition)return;!t.animating&&r.cssMode&&r.loop&&t.loopFix();let p=e;p.originalEvent&&(p=p.originalEvent);let u=p.target;if("wrapper"===r.touchEventsTarget&&!t.wrapperEl.contains(u))return;if("which"in p&&3===p.which)return;if("button"in p&&p.button>0)return;if(i.isTouched&&i.isMoved)return;const m=!!r.noSwipingClass&&""!==r.noSwipingClass,f=e.composedPath?e.composedPath():e.path;m&&p.target&&p.target.shadowRoot&&f&&(u=f[0]);const h=r.noSwipingSelector?r.noSwipingSelector:`.${r.noSwipingClass}`,g=!(!p.target||!p.target.shadowRoot);if(r.noSwiping&&(g?function(e,t=this){return function t(s){if(!s||s===n()||s===o())return null;s.assignedSlot&&(s=s.assignedSlot);const a=s.closest(e);return a||s.getRootNode?a||t(s.getRootNode().host):null}(t)}(h,u):u.closest(h)))return void(t.allowClick=!0);if(r.swipeHandler&&!u.closest(r.swipeHandler))return;l.currentX=p.pageX,l.currentY=p.pageY;const v=l.currentX,b=l.currentY,w=r.edgeSwipeDetection||r.iOSEdgeSwipeDetection,y=r.edgeSwipeThreshold||r.iOSEdgeSwipeThreshold;if(w&&(v<=y||v>=a.innerWidth-y)){if("prevent"!==w)return;e.preventDefault()}Object.assign(i,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=v,l.startY=b,i.touchStartTime=c(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,r.threshold>0&&(i.allowThresholdMove=!1);let x=!0;u.matches(i.focusableElements)&&(x=!1,"SELECT"===u.nodeName&&(i.isTouched=!1)),s.activeElement&&s.activeElement.matches(i.focusableElements)&&s.activeElement!==u&&s.activeElement.blur();const E=x&&t.allowTouchMove&&r.touchStartPreventDefault;!r.touchStartForcePreventDefault&&!E||u.isContentEditable||p.preventDefault(),t.params.freeMode&&t.params.freeMode.enabled&&t.freeMode&&t.animating&&!r.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",p)}function I(e){const t=n(),s=this,a=s.touchEventsData,{params:i,touches:r,rtlTranslate:l,enabled:o}=s;if(!o)return;if(!i.simulateTouch&&"mouse"===e.pointerType)return;let d=e;if(d.originalEvent&&(d=d.originalEvent),!a.isTouched)return void(a.startMoving&&a.isScrolling&&s.emit("touchMoveOpposite",d));const p=a.evCache.findIndex((e=>e.pointerId===d.pointerId));p>=0&&(a.evCache[p]=d);const u=a.evCache.length>1?a.evCache[0]:d,m=u.pageX,f=u.pageY;if(d.preventedByNestedSwiper)return r.startX=m,void(r.startY=f);if(!s.allowTouchMove)return d.target.matches(a.focusableElements)||(s.allowClick=!1),void(a.isTouched&&(Object.assign(r,{startX:m,startY:f,prevX:s.touches.currentX,prevY:s.touches.currentY,currentX:m,currentY:f}),a.touchStartTime=c()));if(i.touchReleaseOnEdges&&!i.loop)if(s.isVertical()){if(f<r.startY&&s.translate<=s.maxTranslate()||f>r.startY&&s.translate>=s.minTranslate())return a.isTouched=!1,void(a.isMoved=!1)}else if(m<r.startX&&s.translate<=s.maxTranslate()||m>r.startX&&s.translate>=s.minTranslate())return;if(t.activeElement&&d.target===t.activeElement&&d.target.matches(a.focusableElements))return a.isMoved=!0,void(s.allowClick=!1);if(a.allowTouchCallbacks&&s.emit("touchMove",d),d.targetTouches&&d.targetTouches.length>1)return;r.currentX=m,r.currentY=f;const h=r.currentX-r.startX,g=r.currentY-r.startY;if(s.params.threshold&&Math.sqrt(h**2+g**2)<s.params.threshold)return;if(void 0===a.isScrolling){let e;s.isHorizontal()&&r.currentY===r.startY||s.isVertical()&&r.currentX===r.startX?a.isScrolling=!1:h*h+g*g>=25&&(e=180*Math.atan2(Math.abs(g),Math.abs(h))/Math.PI,a.isScrolling=s.isHorizontal()?e>i.touchAngle:90-e>i.touchAngle)}if(a.isScrolling&&s.emit("touchMoveOpposite",d),void 0===a.startMoving&&(r.currentX===r.startX&&r.currentY===r.startY||(a.startMoving=!0)),a.isScrolling||s.zoom&&s.params.zoom&&s.params.zoom.enabled&&a.evCache.length>1)return void(a.isTouched=!1);if(!a.startMoving)return;s.allowClick=!1,!i.cssMode&&d.cancelable&&d.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&d.stopPropagation();let v=s.isHorizontal()?h:g,b=s.isHorizontal()?r.currentX-r.previousX:r.currentY-r.previousY;i.oneWayMovement&&(v=Math.abs(v)*(l?1:-1),b=Math.abs(b)*(l?1:-1)),r.diff=v,v*=i.touchRatio,l&&(v=-v,b=-b);const w=s.touchesDirection;s.swipeDirection=v>0?"prev":"next",s.touchesDirection=b>0?"prev":"next";const y=s.params.loop&&!i.cssMode;if(!a.isMoved){if(y&&s.loopFix({direction:s.swipeDirection}),a.startTranslate=s.getTranslate(),s.setTransition(0),s.animating){const e=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});s.wrapperEl.dispatchEvent(e)}a.allowMomentumBounce=!1,!i.grabCursor||!0!==s.allowSlideNext&&!0!==s.allowSlidePrev||s.setGrabCursor(!0),s.emit("sliderFirstMove",d)}let x;a.isMoved&&w!==s.touchesDirection&&y&&Math.abs(v)>=1&&(s.loopFix({direction:s.swipeDirection,setTranslate:!0}),x=!0),s.emit("sliderMove",d),a.isMoved=!0,a.currentTranslate=v+a.startTranslate;let E=!0,S=i.resistanceRatio;if(i.touchReleaseOnEdges&&(S=0),v>0?(y&&!x&&a.currentTranslate>(i.centeredSlides?s.minTranslate()-s.size/2:s.minTranslate())&&s.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),a.currentTranslate>s.minTranslate()&&(E=!1,i.resistance&&(a.currentTranslate=s.minTranslate()-1+(-s.minTranslate()+a.startTranslate+v)**S))):v<0&&(y&&!x&&a.currentTranslate<(i.centeredSlides?s.maxTranslate()+s.size/2:s.maxTranslate())&&s.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:s.slides.length-("auto"===i.slidesPerView?s.slidesPerViewDynamic():Math.ceil(parseFloat(i.slidesPerView,10)))}),a.currentTranslate<s.maxTranslate()&&(E=!1,i.resistance&&(a.currentTranslate=s.maxTranslate()+1-(s.maxTranslate()-a.startTranslate-v)**S))),E&&(d.preventedByNestedSwiper=!0),!s.allowSlideNext&&"next"===s.swipeDirection&&a.currentTranslate<a.startTranslate&&(a.currentTranslate=a.startTranslate),!s.allowSlidePrev&&"prev"===s.swipeDirection&&a.currentTranslate>a.startTranslate&&(a.currentTranslate=a.startTranslate),s.allowSlidePrev||s.allowSlideNext||(a.currentTranslate=a.startTranslate),i.threshold>0){if(!(Math.abs(v)>i.threshold||a.allowThresholdMove))return void(a.currentTranslate=a.startTranslate);if(!a.allowThresholdMove)return a.allowThresholdMove=!0,r.startX=r.currentX,r.startY=r.currentY,a.currentTranslate=a.startTranslate,void(r.diff=s.isHorizontal()?r.currentX-r.startX:r.currentY-r.startY)}i.followFinger&&!i.cssMode&&((i.freeMode&&i.freeMode.enabled&&s.freeMode||i.watchSlidesProgress)&&(s.updateActiveIndex(),s.updateSlidesClasses()),s.params.freeMode&&i.freeMode.enabled&&s.freeMode&&s.freeMode.onTouchMove(),s.updateProgress(a.currentTranslate),s.setTranslate(a.currentTranslate))}function D(e){const t=this,s=t.touchEventsData,a=s.evCache.findIndex((t=>t.pointerId===e.pointerId));if(a>=0&&s.evCache.splice(a,1),["pointercancel","pointerout","pointerleave"].includes(e.type))return;const{params:i,touches:r,rtlTranslate:n,slidesGrid:l,enabled:o}=t;if(!o)return;if(!i.simulateTouch&&"mouse"===e.pointerType)return;let p=e;if(p.originalEvent&&(p=p.originalEvent),s.allowTouchCallbacks&&t.emit("touchEnd",p),s.allowTouchCallbacks=!1,!s.isTouched)return s.isMoved&&i.grabCursor&&t.setGrabCursor(!1),s.isMoved=!1,void(s.startMoving=!1);i.grabCursor&&s.isMoved&&s.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const u=c(),m=u-s.touchStartTime;if(t.allowClick){const e=p.path||p.composedPath&&p.composedPath();t.updateClickedSlide(e&&e[0]||p.target),t.emit("tap click",p),m<300&&u-s.lastClickTime<300&&t.emit("doubleTap doubleClick",p)}if(s.lastClickTime=c(),d((()=>{t.destroyed||(t.allowClick=!0)})),!s.isTouched||!s.isMoved||!t.swipeDirection||0===r.diff||s.currentTranslate===s.startTranslate)return s.isTouched=!1,s.isMoved=!1,void(s.startMoving=!1);let f;if(s.isTouched=!1,s.isMoved=!1,s.startMoving=!1,f=i.followFinger?n?t.translate:-t.translate:-s.currentTranslate,i.cssMode)return;if(t.params.freeMode&&i.freeMode.enabled)return void t.freeMode.onTouchEnd({currentPos:f});let h=0,g=t.slidesSizesGrid[0];for(let e=0;e<l.length;e+=e<i.slidesPerGroupSkip?1:i.slidesPerGroup){const t=e<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;void 0!==l[e+t]?f>=l[e]&&f<l[e+t]&&(h=e,g=l[e+t]-l[e]):f>=l[e]&&(h=e,g=l[l.length-1]-l[l.length-2])}let v=null,b=null;i.rewind&&(t.isBeginning?b=t.params.virtual&&t.params.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(v=0));const w=(f-l[h])/g,y=h<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;if(m>i.longSwipesMs){if(!i.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(w>=i.longSwipesRatio?t.slideTo(i.rewind&&t.isEnd?v:h+y):t.slideTo(h)),"prev"===t.swipeDirection&&(w>1-i.longSwipesRatio?t.slideTo(h+y):null!==b&&w<0&&Math.abs(w)>i.longSwipesRatio?t.slideTo(b):t.slideTo(h))}else{if(!i.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||p.target!==t.navigation.nextEl&&p.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(null!==v?v:h+y),"prev"===t.swipeDirection&&t.slideTo(null!==b?b:h)):p.target===t.navigation.nextEl?t.slideTo(h+y):t.slideTo(h)}}let G;function H(){const e=this,{params:t,el:s}=e;if(s&&0===s.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:a,allowSlidePrev:i,snapGrid:r}=e,n=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const l=n&&t.loop;!("auto"===t.slidesPerView||t.slidesPerView>1)||!e.isEnd||e.isBeginning||e.params.centeredSlides||l?e.params.loop&&!n?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0):e.slideTo(e.slides.length-1,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(G),G=setTimeout((()=>{e.autoplay.resume()}),500)),e.allowSlidePrev=i,e.allowSlideNext=a,e.params.watchOverflow&&r!==e.snapGrid&&e.checkOverflow()}function B(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function X(){const e=this,{wrapperEl:t,rtlTranslate:s,enabled:a}=e;if(!a)return;let i;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();const r=e.maxTranslate()-e.minTranslate();i=0===r?0:(e.translate-e.minTranslate())/r,i!==e.progress&&e.updateProgress(s?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}const Y=(e,t)=>{if(!e||e.destroyed||!e.params)return;const s=t.closest(e.isElement?"swiper-slide":`.${e.params.slideClass}`);if(s){const t=s.querySelector(`.${e.params.lazyPreloaderClass}`);t&&t.remove()}};function N(e){Y(this,e.target),this.update()}let q=!1;function F(){}const R=(e,t)=>{const s=n(),{params:a,el:i,wrapperEl:r,device:l}=e,o=!!a.nested,d="on"===t?"addEventListener":"removeEventListener",c=t;i[d]("pointerdown",e.onTouchStart,{passive:!1}),s[d]("pointermove",e.onTouchMove,{passive:!1,capture:o}),s[d]("pointerup",e.onTouchEnd,{passive:!0}),s[d]("pointercancel",e.onTouchEnd,{passive:!0}),s[d]("pointerout",e.onTouchEnd,{passive:!0}),s[d]("pointerleave",e.onTouchEnd,{passive:!0}),(a.preventClicks||a.preventClicksPropagation)&&i[d]("click",e.onClick,!0),a.cssMode&&r[d]("scroll",e.onScroll),a.updateOnWindowResize?e[c](l.ios||l.android?"resize orientationchange observerUpdate":"resize observerUpdate",H,!0):e[c]("observerUpdate",H,!0),i[d]("load",e.onLoad,{capture:!0})},_=(e,t)=>e.grid&&t.grid&&t.grid.rows>1,j={init:!0,direction:"horizontal",oneWayMovement:!1,touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopedSlides:null,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",runCallbacksOnInit:!0,_emitClasses:!1};function V(e,t){return function(s={}){const a=Object.keys(s)[0],i=s[a];"object"==typeof i&&null!==i?(["navigation","pagination","scrollbar"].indexOf(a)>=0&&!0===e[a]&&(e[a]={auto:!0}),a in e&&"enabled"in i?(!0===e[a]&&(e[a]={enabled:!0}),"object"!=typeof e[a]||"enabled"in e[a]||(e[a].enabled=!0),e[a]||(e[a]={enabled:!1}),m(t,s)):m(t,s)):m(t,s)}}const W={eventsEmitter:k,update:z,translate:{getTranslate:function(e=(this.isHorizontal()?"x":"y")){const{params:t,rtlTranslate:s,translate:a,wrapperEl:i}=this;if(t.virtualTranslate)return s?-a:a;if(t.cssMode)return a;let r=p(i,e);return s&&(r=-r),r||0},setTranslate:function(e,t){const s=this,{rtlTranslate:a,params:i,wrapperEl:r,progress:n}=s;let l,o=0,d=0;s.isHorizontal()?o=a?-e:e:d=e,i.roundLengths&&(o=Math.floor(o),d=Math.floor(d)),i.cssMode?r[s.isHorizontal()?"scrollLeft":"scrollTop"]=s.isHorizontal()?-o:-d:i.virtualTranslate||(r.style.transform=`translate3d(${o}px, ${d}px, 0px)`),s.previousTranslate=s.translate,s.translate=s.isHorizontal()?o:d;const c=s.maxTranslate()-s.minTranslate();l=0===c?0:(e-s.minTranslate())/c,l!==n&&s.updateProgress(e),s.emit("setTranslate",s.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e=0,t=this.params.speed,s=!0,a=!0,i){const r=this,{params:n,wrapperEl:l}=r;if(r.animating&&n.preventInteractionOnTransition)return!1;const o=r.minTranslate(),d=r.maxTranslate();let c;if(c=a&&e>o?o:a&&e<d?d:e,r.updateProgress(c),n.cssMode){const e=r.isHorizontal();if(0===t)l[e?"scrollLeft":"scrollTop"]=-c;else{if(!r.support.smoothScroll)return h({swiper:r,targetPosition:-c,side:e?"left":"top"}),!0;l.scrollTo({[e?"left":"top"]:-c,behavior:"smooth"})}return!0}return 0===t?(r.setTransition(0),r.setTranslate(c),s&&(r.emit("beforeTransitionStart",t,i),r.emit("transitionEnd"))):(r.setTransition(t),r.setTranslate(c),s&&(r.emit("beforeTransitionStart",t,i),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,s&&r.emit("transitionEnd"))}),r.wrapperEl.addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){const s=this;s.params.cssMode||(s.wrapperEl.style.transitionDuration=`${e}ms`),s.emit("setTransition",e,t)},transitionStart:function(e=!0,t){const s=this,{params:a}=s;a.cssMode||(a.autoHeight&&s.updateAutoHeight(),A({swiper:s,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e=!0,t){const s=this,{params:a}=s;s.animating=!1,a.cssMode||(s.setTransition(0),A({swiper:s,runCallbacks:e,direction:t,step:"End"}))}},slide:$,loop:{loopCreate:function(e){const t=this,{params:s,slidesEl:a}=t;!s.loop||t.virtual&&t.params.virtual.enabled||(v(a,`.${s.slideClass}, swiper-slide`).forEach(((e,t)=>{e.setAttribute("data-swiper-slide-index",t)})),t.loopFix({slideRealIndex:e,direction:s.centeredSlides?void 0:"next"}))},loopFix:function({slideRealIndex:e,slideTo:t=!0,direction:s,setTranslate:a,activeSlideIndex:i,byController:r,byMousewheel:n}={}){const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:o,allowSlidePrev:d,allowSlideNext:c,slidesEl:p,params:u}=l;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&u.virtual.enabled)return t&&(u.centeredSlides||0!==l.snapIndex?u.centeredSlides&&l.snapIndex<u.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0):l.slideTo(l.virtual.slides.length,0,!1,!0)),l.allowSlidePrev=d,l.allowSlideNext=c,void l.emit("loopFix");const m="auto"===u.slidesPerView?l.slidesPerViewDynamic():Math.ceil(parseFloat(u.slidesPerView,10));let f=u.loopedSlides||m;f%u.slidesPerGroup!=0&&(f+=u.slidesPerGroup-f%u.slidesPerGroup),l.loopedSlides=f;const h=[],g=[];let v=l.activeIndex;void 0===i?i=x(l.slides.filter((e=>e.classList.contains("swiper-slide-active")))[0]):v=i;const b="next"===s||!s,w="prev"===s||!s;let y=0,E=0;if(i<f){y=f-i;for(let e=0;e<f-i;e+=1){const t=e-Math.floor(e/o.length)*o.length;h.push(o.length-t-1)}}else if(i>l.slides.length-2*f){E=i-(l.slides.length-2*f);for(let e=0;e<E;e+=1){const t=e-Math.floor(e/o.length)*o.length;g.push(t)}}if(w&&h.forEach((e=>{p.prepend(l.slides[e])})),b&&g.forEach((e=>{p.append(l.slides[e])})),l.recalcSlides(),u.watchSlidesProgress&&l.updateSlidesOffset(),t)if(h.length>0&&w)if(void 0===e){const e=l.slidesGrid[v],t=l.slidesGrid[v+y]-e;n?l.setTranslate(l.translate-t):(l.slideTo(v+y,0,!1,!0),a&&(l.touches[l.isHorizontal()?"startX":"startY"]+=t))}else a&&l.slideToLoop(e,0,!1,!0);else if(g.length>0&&b)if(void 0===e){const e=l.slidesGrid[v],t=l.slidesGrid[v-E]-e;n?l.setTranslate(l.translate-t):(l.slideTo(v-E,0,!1,!0),a&&(l.touches[l.isHorizontal()?"startX":"startY"]+=t))}else l.slideToLoop(e,0,!1,!0);if(l.allowSlidePrev=d,l.allowSlideNext=c,l.controller&&l.controller.control&&!r){const t={slideRealIndex:e,slideTo:!1,direction:s,setTranslate:a,activeSlideIndex:i,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach((e=>{e.params.loop&&e.loopFix(t)})):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix(t)}l.emit("loopFix")},loopDestroy:function(){const e=this,{slides:t,params:s,slidesEl:a}=e;if(!s.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const i=[];t.forEach((e=>{const t=void 0===e.swiperSlideIndex?1*e.getAttribute("data-swiper-slide-index"):e.swiperSlideIndex;i[t]=e})),t.forEach((e=>{e.removeAttribute("data-swiper-slide-index")})),i.forEach((e=>{a.append(e)})),e.recalcSlides(),e.slideTo(e.realIndex,0)}},grabCursor:{setGrabCursor:function(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const s="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;s.style.cursor="move",s.style.cursor=e?"grabbing":"grab"},unsetGrabCursor:function(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="")}},events:{attachEvents:function(){const e=this,t=n(),{params:s}=e;e.onTouchStart=O.bind(e),e.onTouchMove=I.bind(e),e.onTouchEnd=D.bind(e),s.cssMode&&(e.onScroll=X.bind(e)),e.onClick=B.bind(e),e.onLoad=N.bind(e),q||(t.addEventListener("touchstart",F),q=!0),R(e,"on")},detachEvents:function(){R(this,"off")}},breakpoints:{setBreakpoint:function(){const e=this,{realIndex:t,initialized:s,params:a,el:i}=e,r=a.breakpoints;if(!r||r&&0===Object.keys(r).length)return;const n=e.getBreakpoint(r,e.params.breakpointsBase,e.el);if(!n||e.currentBreakpoint===n)return;const l=(n in r?r[n]:void 0)||e.originalParams,o=_(e,a),d=_(e,l),c=a.enabled;o&&!d?(i.classList.remove(`${a.containerModifierClass}grid`,`${a.containerModifierClass}grid-column`),e.emitContainerClasses()):!o&&d&&(i.classList.add(`${a.containerModifierClass}grid`),(l.grid.fill&&"column"===l.grid.fill||!l.grid.fill&&"column"===a.grid.fill)&&i.classList.add(`${a.containerModifierClass}grid-column`),e.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach((t=>{const s=a[t]&&a[t].enabled,i=l[t]&&l[t].enabled;s&&!i&&e[t].disable(),!s&&i&&e[t].enable()}));const p=l.direction&&l.direction!==a.direction,u=a.loop&&(l.slidesPerView!==a.slidesPerView||p);p&&s&&e.changeDirection(),m(e.params,l);const f=e.params.enabled;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),c&&!f?e.disable():!c&&f&&e.enable(),e.currentBreakpoint=n,e.emit("_beforeBreakpoint",l),u&&s&&(e.loopDestroy(),e.loopCreate(t),e.updateSlides()),e.emit("breakpoint",l)},getBreakpoint:function(e,t="window",s){if(!e||"container"===t&&!s)return;let a=!1;const i=o(),r="window"===t?i.innerHeight:s.clientHeight,n=Object.keys(e).map((e=>{if("string"==typeof e&&0===e.indexOf("@")){const t=parseFloat(e.substr(1));return{value:r*t,point:e}}return{value:e,point:e}}));n.sort(((e,t)=>parseInt(e.value,10)-parseInt(t.value,10)));for(let e=0;e<n.length;e+=1){const{point:r,value:l}=n[e];"window"===t?i.matchMedia(`(min-width: ${l}px)`).matches&&(a=r):l<=s.clientWidth&&(a=r)}return a||"max"}},checkOverflow:{checkOverflow:function(){const e=this,{isLocked:t,params:s}=e,{slidesOffsetBefore:a}=s;if(a){const t=e.slides.length-1,s=e.slidesGrid[t]+e.slidesSizesGrid[t]+2*a;e.isLocked=e.size>s}else e.isLocked=1===e.snapGrid.length;!0===s.allowSlideNext&&(e.allowSlideNext=!e.isLocked),!0===s.allowSlidePrev&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const e=this,{classNames:t,params:s,rtl:a,el:i,device:r}=e,n=function(e,t){const s=[];return e.forEach((e=>{"object"==typeof e?Object.keys(e).forEach((a=>{e[a]&&s.push(t+a)})):"string"==typeof e&&s.push(t+e)})),s}(["initialized",s.direction,{"free-mode":e.params.freeMode&&s.freeMode.enabled},{autoheight:s.autoHeight},{rtl:a},{grid:s.grid&&s.grid.rows>1},{"grid-column":s.grid&&s.grid.rows>1&&"column"===s.grid.fill},{android:r.android},{ios:r.ios},{"css-mode":s.cssMode},{centered:s.cssMode&&s.centeredSlides},{"watch-progress":s.watchSlidesProgress}],s.containerModifierClass);t.push(...n),i.classList.add(...t),e.emitContainerClasses()},removeClasses:function(){const{el:e,classNames:t}=this;e.classList.remove(...t),this.emitContainerClasses()}}},U={};class K{constructor(...e){let t,s;1===e.length&&e[0].constructor&&"Object"===Object.prototype.toString.call(e[0]).slice(8,-1)?s=e[0]:[t,s]=e,s||(s={}),s=m({},s),t&&!s.el&&(s.el=t);const a=n();if(s.el&&"string"==typeof s.el&&a.querySelectorAll(s.el).length>1){const e=[];return a.querySelectorAll(s.el).forEach((t=>{const a=m({},s,{el:t});e.push(new K(a))})),e}const i=this;i.__swiper__=!0,i.support=L(),i.device=function(e={}){return C||(C=function({userAgent:e}={}){const t=L(),s=o(),a=s.navigator.platform,i=e||s.navigator.userAgent,r={ios:!1,android:!1},n=s.screen.width,l=s.screen.height,d=i.match(/(Android);?[\s\/]+([\d.]+)?/);let c=i.match(/(iPad).*OS\s([\d_]+)/);const p=i.match(/(iPod)(.*OS\s([\d_]+))?/),u=!c&&i.match(/(iPhone\sOS|iOS)\s([\d_]+)/),m="Win32"===a;let f="MacIntel"===a;return!c&&f&&t.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(`${n}x${l}`)>=0&&(c=i.match(/(Version)\/([\d.]+)/),c||(c=[0,1,"13_0_0"]),f=!1),d&&!m&&(r.os="android",r.android=!0),(c||u||p)&&(r.os="ios",r.ios=!0),r}(e)),C}({userAgent:s.userAgent}),i.browser=(P||(P=function(){const e=o();let t=!1;function s(){const t=e.navigator.userAgent.toLowerCase();return t.indexOf("safari")>=0&&t.indexOf("chrome")<0&&t.indexOf("android")<0}if(s()){const s=String(e.navigator.userAgent);if(s.includes("Version/")){const[e,a]=s.split("Version/")[1].split(" ")[0].split(".").map((e=>Number(e)));t=e<16||16===e&&a<2}}return{isSafari:t||s(),needPerspectiveFix:t,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)}}()),P),i.eventsListeners={},i.eventsAnyListeners=[],i.modules=[...i.__modules__],s.modules&&Array.isArray(s.modules)&&i.modules.push(...s.modules);const r={};i.modules.forEach((e=>{e({params:s,swiper:i,extendParams:V(s,r),on:i.on.bind(i),once:i.once.bind(i),off:i.off.bind(i),emit:i.emit.bind(i)})}));const l=m({},j,r);return i.params=m({},l,U,s),i.originalParams=m({},i.params),i.passedParams=m({},s),i.params&&i.params.on&&Object.keys(i.params.on).forEach((e=>{i.on(e,i.params.on[e])})),i.params&&i.params.onAny&&i.onAny(i.params.onAny),Object.assign(i,{enabled:i.params.enabled,el:t,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===i.params.direction,isVertical:()=>"vertical"===i.params.direction,activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:i.params.allowSlideNext,allowSlidePrev:i.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:i.params.focusableElements,lastClickTime:c(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,evCache:[]},allowClick:!0,allowTouchMove:i.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),i.emit("_swiper"),i.params.init&&i.init(),i}recalcSlides(){const{slidesEl:e,params:t}=this;this.slides=v(e,`.${t.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const s=this;e=Math.min(Math.max(e,0),1);const a=s.minTranslate(),i=(s.maxTranslate()-a)*e+a;s.translateTo(i,void 0===t?0:t),s.updateActiveIndex(),s.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter((t=>0===t.indexOf("swiper")||0===t.indexOf(e.params.containerModifierClass)));e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter((e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass))).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach((s=>{const a=e.getSlideClasses(s);t.push({slideEl:s,classNames:a}),e.emit("_slideClass",s,a)})),e.emit("_slideClasses",t)}slidesPerViewDynamic(e="current",t=!1){const{params:s,slides:a,slidesGrid:i,slidesSizesGrid:r,size:n,activeIndex:l}=this;let o=1;if(s.centeredSlides){let e,t=a[l].swiperSlideSize;for(let s=l+1;s<a.length;s+=1)a[s]&&!e&&(t+=a[s].swiperSlideSize,o+=1,t>n&&(e=!0));for(let s=l-1;s>=0;s-=1)a[s]&&!e&&(t+=a[s].swiperSlideSize,o+=1,t>n&&(e=!0))}else if("current"===e)for(let e=l+1;e<a.length;e+=1)(t?i[e]+r[e]-i[l]<n:i[e]-i[l]<n)&&(o+=1);else for(let e=l-1;e>=0;e-=1)i[l]-i[e]<n&&(o+=1);return o}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:s}=e;function a(){const t=e.rtlTranslate?-1*e.translate:e.translate,s=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(s),e.updateActiveIndex(),e.updateSlidesClasses()}let i;s.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach((t=>{t.complete&&Y(e,t)})),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode&&e.params.freeMode.enabled?(a(),e.params.autoHeight&&e.updateAutoHeight()):(i=("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),i||a()),s.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t=!0){const s=this,a=s.params.direction;return e||(e="horizontal"===a?"vertical":"horizontal"),e===a||"horizontal"!==e&&"vertical"!==e||(s.el.classList.remove(`${s.params.containerModifierClass}${a}`),s.el.classList.add(`${s.params.containerModifierClass}${e}`),s.emitContainerClasses(),s.params.direction=e,s.slides.forEach((t=>{"vertical"===e?t.style.width="":t.style.height=""})),s.emit("changeDirection"),t&&s.update()),s}changeLanguageDirection(e){const t=this;t.rtl&&"rtl"===e||!t.rtl&&"ltr"===e||(t.rtl="rtl"===e,t.rtlTranslate="horizontal"===t.params.direction&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let s=e||t.params.el;if("string"==typeof s&&(s=document.querySelector(s)),!s)return!1;s.swiper=t,s.shadowEl&&(t.isElement=!0);const a=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let i=s&&s.shadowRoot&&s.shadowRoot.querySelector?s.shadowRoot.querySelector(a()):v(s,a())[0];return!i&&t.params.createElements&&(i=b("div",t.params.wrapperClass),s.append(i),v(s,`.${t.params.slideClass}`).forEach((e=>{i.append(e)}))),Object.assign(t,{el:s,wrapperEl:i,slidesEl:t.isElement?s:i,mounted:!0,rtl:"rtl"===s.dir.toLowerCase()||"rtl"===y(s,"direction"),rtlTranslate:"horizontal"===t.params.direction&&("rtl"===s.dir.toLowerCase()||"rtl"===y(s,"direction")),wrongRTL:"-webkit-box"===y(i,"display")}),!0}init(e){const t=this;return t.initialized||!1===t.mount(e)||(t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents(),[...t.el.querySelectorAll('[loading="lazy"]')].forEach((e=>{e.complete?Y(t,e):e.addEventListener("load",(e=>{Y(t,e.target)}))})),t.initialized=!0,t.emit("init"),t.emit("afterInit")),t}destroy(e=!0,t=!0){const s=this,{params:a,el:i,wrapperEl:r,slides:n}=s;return void 0===s.params||s.destroyed||(s.emit("beforeDestroy"),s.initialized=!1,s.detachEvents(),a.loop&&s.loopDestroy(),t&&(s.removeClasses(),i.removeAttribute("style"),r.removeAttribute("style"),n&&n.length&&n.forEach((e=>{e.classList.remove(a.slideVisibleClass,a.slideActiveClass,a.slideNextClass,a.slidePrevClass),e.removeAttribute("style"),e.removeAttribute("data-swiper-slide-index")}))),s.emit("destroy"),Object.keys(s.eventsListeners).forEach((e=>{s.off(e)})),!1!==e&&(s.el.swiper=null,function(e){const t=e;Object.keys(t).forEach((e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}}))}(s)),s.destroyed=!0),null}static extendDefaults(e){m(U,e)}static get extendedDefaults(){return U}static get defaults(){return j}static installModule(e){K.prototype.__modules__||(K.prototype.__modules__=[]);const t=K.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach((e=>K.installModule(e))),K):(K.installModule(e),K)}}Object.keys(W).forEach((e=>{Object.keys(W[e]).forEach((t=>{K.prototype[t]=W[e][t]}))})),K.use([function({swiper:e,on:t,emit:s}){const a=o();let i=null,r=null;const n=()=>{e&&!e.destroyed&&e.initialized&&(s("beforeResize"),s("resize"))},l=()=>{e&&!e.destroyed&&e.initialized&&s("orientationchange")};t("init",(()=>{e.params.resizeObserver&&void 0!==a.ResizeObserver?e&&!e.destroyed&&e.initialized&&(i=new ResizeObserver((t=>{r=a.requestAnimationFrame((()=>{const{width:s,height:a}=e;let i=s,r=a;t.forEach((({contentBoxSize:t,contentRect:s,target:a})=>{a&&a!==e.el||(i=s?s.width:(t[0]||t).inlineSize,r=s?s.height:(t[0]||t).blockSize)})),i===s&&r===a||n()}))})),i.observe(e.el)):(a.addEventListener("resize",n),a.addEventListener("orientationchange",l))})),t("destroy",(()=>{r&&a.cancelAnimationFrame(r),i&&i.unobserve&&e.el&&(i.unobserve(e.el),i=null),a.removeEventListener("resize",n),a.removeEventListener("orientationchange",l)}))},function({swiper:e,extendParams:t,on:s,emit:a}){const i=[],r=o(),n=(e,t={})=>{const s=new(r.MutationObserver||r.WebkitMutationObserver)((e=>{if(1===e.length)return void a("observerUpdate",e[0]);const t=function(){a("observerUpdate",e[0])};r.requestAnimationFrame?r.requestAnimationFrame(t):r.setTimeout(t,0)}));s.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.push(s)};t({observer:!1,observeParents:!1,observeSlideChildren:!1}),s("init",(()=>{if(e.params.observer){if(e.params.observeParents){const t=E(e.el);for(let e=0;e<t.length;e+=1)n(t[e])}n(e.el,{childList:e.params.observeSlideChildren}),n(e.wrapperEl,{attributes:!1})}})),s("destroy",(()=>{i.forEach((e=>{e.disconnect()})),i.splice(0,i.length)}))}]);const Z=K;function Q({swiper:e,extendParams:t,on:s,emit:a}){let i;t({virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}});const r=n();e.virtual={cache:{},from:void 0,to:void 0,slides:[],offset:0,slidesGrid:[]};const l=r.createElement("div");function o(t,s){const a=e.params.virtual;if(a.cache&&e.virtual.cache[s])return e.virtual.cache[s];let i;return a.renderSlide?(i=a.renderSlide.call(e,t,s),"string"==typeof i&&(l.innerHTML=i,i=l.children[0])):i=e.isElement?b("swiper-slide"):b("div",e.params.slideClass),i.setAttribute("data-swiper-slide-index",s),a.renderSlide||(i.textContent=t),a.cache&&(e.virtual.cache[s]=i),i}function d(t){const{slidesPerView:s,slidesPerGroup:i,centeredSlides:r,loop:n}=e.params,{addSlidesBefore:l,addSlidesAfter:d}=e.params.virtual,{from:c,to:p,slides:u,slidesGrid:m,offset:f}=e.virtual;e.params.cssMode||e.updateActiveIndex();const h=e.activeIndex||0;let g,b,w;g=e.rtlTranslate?"right":e.isHorizontal()?"left":"top",r?(b=Math.floor(s/2)+i+d,w=Math.floor(s/2)+i+l):(b=s+(i-1)+d,w=(n?s:i)+l);let y=h-w,x=h+b;n||(y=Math.max(y,0),x=Math.min(x,u.length-1));let E=(e.slidesGrid[y]||0)-(e.slidesGrid[0]||0);function S(){e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),a("virtualUpdate")}if(n&&h>=w?(y-=w,r||(E+=e.slidesGrid[0])):n&&h<w&&(y=-w,r&&(E+=e.slidesGrid[0])),Object.assign(e.virtual,{from:y,to:x,offset:E,slidesGrid:e.slidesGrid,slidesBefore:w,slidesAfter:b}),c===y&&p===x&&!t)return e.slidesGrid!==m&&E!==f&&e.slides.forEach((e=>{e.style[g]=`${E}px`})),e.updateProgress(),void a("virtualUpdate");if(e.params.virtual.renderExternal)return e.params.virtual.renderExternal.call(e,{offset:E,from:y,to:x,slides:function(){const e=[];for(let t=y;t<=x;t+=1)e.push(u[t]);return e}()}),void(e.params.virtual.renderExternalUpdate?S():a("virtualUpdate"));const T=[],M=[],C=e=>{let t=e;return e<0?t=u.length+e:t>=u.length&&(t-=u.length),t};if(t)e.slidesEl.querySelectorAll(`.${e.params.slideClass}, swiper-slide`).forEach((e=>{e.remove()}));else for(let t=c;t<=p;t+=1)if(t<y||t>x){const s=C(t);e.slidesEl.querySelectorAll(`.${e.params.slideClass}[data-swiper-slide-index="${s}"], swiper-slide[data-swiper-slide-index="${s}"]`).forEach((e=>{e.remove()}))}const P=n?-u.length:0,L=n?2*u.length:u.length;for(let e=P;e<L;e+=1)if(e>=y&&e<=x){const s=C(e);void 0===p||t?M.push(s):(e>p&&M.push(s),e<c&&T.push(s))}if(M.forEach((t=>{e.slidesEl.append(o(u[t],t))})),n)for(let t=T.length-1;t>=0;t-=1){const s=T[t];e.slidesEl.prepend(o(u[s],s))}else T.sort(((e,t)=>t-e)),T.forEach((t=>{e.slidesEl.prepend(o(u[t],t))}));v(e.slidesEl,".swiper-slide, swiper-slide").forEach((e=>{e.style[g]=`${E}px`})),S()}s("beforeInit",(()=>{if(!e.params.virtual.enabled)return;let t;if(void 0===e.passedParams.virtual.slides){const s=[...e.slidesEl.children].filter((t=>t.matches(`.${e.params.slideClass}, swiper-slide`)));s&&s.length&&(e.virtual.slides=[...s],t=!0,s.forEach(((t,s)=>{t.setAttribute("data-swiper-slide-index",s),e.virtual.cache[s]=t,t.remove()})))}t||(e.virtual.slides=e.params.virtual.slides),e.classNames.push(`${e.params.containerModifierClass}virtual`),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0,e.params.initialSlide||d()})),s("setTranslate",(()=>{e.params.virtual.enabled&&(e.params.cssMode&&!e._immediateVirtual?(clearTimeout(i),i=setTimeout((()=>{d()}),100)):d())})),s("init update resize",(()=>{e.params.virtual.enabled&&e.params.cssMode&&f(e.wrapperEl,"--swiper-virtual-size",`${e.virtualSize}px`)})),Object.assign(e.virtual,{appendSlide:function(t){if("object"==typeof t&&"length"in t)for(let s=0;s<t.length;s+=1)t[s]&&e.virtual.slides.push(t[s]);else e.virtual.slides.push(t);d(!0)},prependSlide:function(t){const s=e.activeIndex;let a=s+1,i=1;if(Array.isArray(t)){for(let s=0;s<t.length;s+=1)t[s]&&e.virtual.slides.unshift(t[s]);a=s+t.length,i=t.length}else e.virtual.slides.unshift(t);if(e.params.virtual.cache){const t=e.virtual.cache,s={};Object.keys(t).forEach((e=>{const a=t[e],r=a.getAttribute("data-swiper-slide-index");r&&a.setAttribute("data-swiper-slide-index",parseInt(r,10)+i),s[parseInt(e,10)+i]=a})),e.virtual.cache=s}d(!0),e.slideTo(a,0)},removeSlide:function(t){if(null==t)return;let s=e.activeIndex;if(Array.isArray(t))for(let a=t.length-1;a>=0;a-=1)e.virtual.slides.splice(t[a],1),e.params.virtual.cache&&delete e.virtual.cache[t[a]],t[a]<s&&(s-=1),s=Math.max(s,0);else e.virtual.slides.splice(t,1),e.params.virtual.cache&&delete e.virtual.cache[t],t<s&&(s-=1),s=Math.max(s,0);d(!0),e.slideTo(s,0)},removeAllSlides:function(){e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),d(!0),e.slideTo(0,0)},update:d})}function J({swiper:e,extendParams:t,on:s,emit:a}){const i=n(),r=o();function l(t){if(!e.enabled)return;const{rtlTranslate:s}=e;let n=t;n.originalEvent&&(n=n.originalEvent);const l=n.keyCode||n.charCode,o=e.params.keyboard.pageUpDown,d=o&&33===l,c=o&&34===l,p=37===l,u=39===l,m=38===l,f=40===l;if(!e.allowSlideNext&&(e.isHorizontal()&&u||e.isVertical()&&f||c))return!1;if(!e.allowSlidePrev&&(e.isHorizontal()&&p||e.isVertical()&&m||d))return!1;if(!(n.shiftKey||n.altKey||n.ctrlKey||n.metaKey||i.activeElement&&i.activeElement.nodeName&&("input"===i.activeElement.nodeName.toLowerCase()||"textarea"===i.activeElement.nodeName.toLowerCase()))){if(e.params.keyboard.onlyInViewport&&(d||c||p||u||m||f)){let t=!1;if(E(e.el,`.${e.params.slideClass}, swiper-slide`).length>0&&0===E(e.el,`.${e.params.slideActiveClass}`).length)return;const a=e.el,i=a.clientWidth,n=a.clientHeight,l=r.innerWidth,o=r.innerHeight,d=w(a);s&&(d.left-=a.scrollLeft);const c=[[d.left,d.top],[d.left+i,d.top],[d.left,d.top+n],[d.left+i,d.top+n]];for(let e=0;e<c.length;e+=1){const s=c[e];if(s[0]>=0&&s[0]<=l&&s[1]>=0&&s[1]<=o){if(0===s[0]&&0===s[1])continue;t=!0}}if(!t)return}e.isHorizontal()?((d||c||p||u)&&(n.preventDefault?n.preventDefault():n.returnValue=!1),((c||u)&&!s||(d||p)&&s)&&e.slideNext(),((d||p)&&!s||(c||u)&&s)&&e.slidePrev()):((d||c||m||f)&&(n.preventDefault?n.preventDefault():n.returnValue=!1),(c||f)&&e.slideNext(),(d||m)&&e.slidePrev()),a("keyPress",l)}}function d(){e.keyboard.enabled||(i.addEventListener("keydown",l),e.keyboard.enabled=!0)}function c(){e.keyboard.enabled&&(i.removeEventListener("keydown",l),e.keyboard.enabled=!1)}e.keyboard={enabled:!1},t({keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}}),s("init",(()=>{e.params.keyboard.enabled&&d()})),s("destroy",(()=>{e.keyboard.enabled&&c()})),Object.assign(e.keyboard,{enable:d,disable:c})}function ee({swiper:e,extendParams:t,on:s,emit:a}){const i=o();let r;t({mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null}}),e.mousewheel={enabled:!1};let n,l=c();const p=[];function u(){e.enabled&&(e.mouseEntered=!0)}function m(){e.enabled&&(e.mouseEntered=!1)}function f(t){return!(e.params.mousewheel.thresholdDelta&&t.delta<e.params.mousewheel.thresholdDelta||e.params.mousewheel.thresholdTime&&c()-l<e.params.mousewheel.thresholdTime||!(t.delta>=6&&c()-l<60)&&(t.direction<0?e.isEnd&&!e.params.loop||e.animating||(e.slideNext(),a("scroll",t.raw)):e.isBeginning&&!e.params.loop||e.animating||(e.slidePrev(),a("scroll",t.raw)),l=(new i.Date).getTime(),1))}function h(t){let s=t,i=!0;if(!e.enabled)return;const l=e.params.mousewheel;e.params.cssMode&&s.preventDefault();let o=e.el;"container"!==e.params.mousewheel.eventsTarget&&(o=document.querySelector(e.params.mousewheel.eventsTarget));const u=o&&o.contains(s.target);if(!e.mouseEntered&&!u&&!l.releaseOnEdges)return!0;s.originalEvent&&(s=s.originalEvent);let m=0;const h=e.rtlTranslate?-1:1,g=function(e){let t=0,s=0,a=0,i=0;return"detail"in e&&(s=e.detail),"wheelDelta"in e&&(s=-e.wheelDelta/120),"wheelDeltaY"in e&&(s=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=s,s=0),a=10*t,i=10*s,"deltaY"in e&&(i=e.deltaY),"deltaX"in e&&(a=e.deltaX),e.shiftKey&&!a&&(a=i,i=0),(a||i)&&e.deltaMode&&(1===e.deltaMode?(a*=40,i*=40):(a*=800,i*=800)),a&&!t&&(t=a<1?-1:1),i&&!s&&(s=i<1?-1:1),{spinX:t,spinY:s,pixelX:a,pixelY:i}}(s);if(l.forceToAxis)if(e.isHorizontal()){if(!(Math.abs(g.pixelX)>Math.abs(g.pixelY)))return!0;m=-g.pixelX*h}else{if(!(Math.abs(g.pixelY)>Math.abs(g.pixelX)))return!0;m=-g.pixelY}else m=Math.abs(g.pixelX)>Math.abs(g.pixelY)?-g.pixelX*h:-g.pixelY;if(0===m)return!0;l.invert&&(m=-m);let v=e.getTranslate()+m*l.sensitivity;if(v>=e.minTranslate()&&(v=e.minTranslate()),v<=e.maxTranslate()&&(v=e.maxTranslate()),i=!!e.params.loop||!(v===e.minTranslate()||v===e.maxTranslate()),i&&e.params.nested&&s.stopPropagation(),e.params.freeMode&&e.params.freeMode.enabled){const t={time:c(),delta:Math.abs(m),direction:Math.sign(m)},i=n&&t.time<n.time+500&&t.delta<=n.delta&&t.direction===n.direction;if(!i){n=void 0;let o=e.getTranslate()+m*l.sensitivity;const c=e.isBeginning,u=e.isEnd;if(o>=e.minTranslate()&&(o=e.minTranslate()),o<=e.maxTranslate()&&(o=e.maxTranslate()),e.setTransition(0),e.setTranslate(o),e.updateProgress(),e.updateActiveIndex(),e.updateSlidesClasses(),(!c&&e.isBeginning||!u&&e.isEnd)&&e.updateSlidesClasses(),e.params.loop&&e.loopFix({direction:t.direction<0?"next":"prev",byMousewheel:!0}),e.params.freeMode.sticky){clearTimeout(r),r=void 0,p.length>=15&&p.shift();const s=p.length?p[p.length-1]:void 0,a=p[0];if(p.push(t),s&&(t.delta>s.delta||t.direction!==s.direction))p.splice(0);else if(p.length>=15&&t.time-a.time<500&&a.delta-t.delta>=1&&t.delta<=6){const s=m>0?.8:.2;n=t,p.splice(0),r=d((()=>{e.slideToClosest(e.params.speed,!0,void 0,s)}),0)}r||(r=d((()=>{n=t,p.splice(0),e.slideToClosest(e.params.speed,!0,void 0,.5)}),500))}if(i||a("scroll",s),e.params.autoplay&&e.params.autoplayDisableOnInteraction&&e.autoplay.stop(),o===e.minTranslate()||o===e.maxTranslate())return!0}}else{const s={time:c(),delta:Math.abs(m),direction:Math.sign(m),raw:t};p.length>=2&&p.shift();const a=p.length?p[p.length-1]:void 0;if(p.push(s),a?(s.direction!==a.direction||s.delta>a.delta||s.time>a.time+150)&&f(s):f(s),function(t){const s=e.params.mousewheel;if(t.direction<0){if(e.isEnd&&!e.params.loop&&s.releaseOnEdges)return!0}else if(e.isBeginning&&!e.params.loop&&s.releaseOnEdges)return!0;return!1}(s))return!0}return s.preventDefault?s.preventDefault():s.returnValue=!1,!1}function g(t){let s=e.el;"container"!==e.params.mousewheel.eventsTarget&&(s=document.querySelector(e.params.mousewheel.eventsTarget)),s[t]("mouseenter",u),s[t]("mouseleave",m),s[t]("wheel",h)}function v(){return e.params.cssMode?(e.wrapperEl.removeEventListener("wheel",h),!0):!e.mousewheel.enabled&&(g("addEventListener"),e.mousewheel.enabled=!0,!0)}function b(){return e.params.cssMode?(e.wrapperEl.addEventListener(event,h),!0):!!e.mousewheel.enabled&&(g("removeEventListener"),e.mousewheel.enabled=!1,!0)}s("init",(()=>{!e.params.mousewheel.enabled&&e.params.cssMode&&b(),e.params.mousewheel.enabled&&v()})),s("destroy",(()=>{e.params.cssMode&&v(),e.mousewheel.enabled&&b()})),Object.assign(e.mousewheel,{enable:v,disable:b})}function te(e,t,s,a){return e.params.createElements&&Object.keys(a).forEach((i=>{if(!s[i]&&!0===s.auto){let r=v(e.el,`.${a[i]}`)[0];r||(r=b("div",a[i]),r.className=a[i],e.el.append(r)),s[i]=r,t[i]=r}})),s}function se({swiper:e,extendParams:t,on:s,emit:a}){t({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),e.navigation={nextEl:null,prevEl:null};const i=e=>(Array.isArray(e)||(e=[e].filter((e=>!!e))),e);function r(t){let s;return t&&"string"==typeof t&&e.isElement&&(s=e.el.shadowRoot.querySelector(t),s)?s:(t&&("string"==typeof t&&(s=[...document.querySelectorAll(t)]),e.params.uniqueNavElements&&"string"==typeof t&&s.length>1&&1===e.el.querySelectorAll(t).length&&(s=e.el.querySelector(t))),t&&!s?t:s)}function n(t,s){const a=e.params.navigation;(t=i(t)).forEach((t=>{t&&(t.classList[s?"add":"remove"](...a.disabledClass.split(" ")),"BUTTON"===t.tagName&&(t.disabled=s),e.params.watchOverflow&&e.enabled&&t.classList[e.isLocked?"add":"remove"](a.lockClass))}))}function l(){const{nextEl:t,prevEl:s}=e.navigation;if(e.params.loop)return n(s,!1),void n(t,!1);n(s,e.isBeginning&&!e.params.rewind),n(t,e.isEnd&&!e.params.rewind)}function o(t){t.preventDefault(),(!e.isBeginning||e.params.loop||e.params.rewind)&&(e.slidePrev(),a("navigationPrev"))}function d(t){t.preventDefault(),(!e.isEnd||e.params.loop||e.params.rewind)&&(e.slideNext(),a("navigationNext"))}function c(){const t=e.params.navigation;if(e.params.navigation=te(e,e.originalParams.navigation,e.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!t.nextEl&&!t.prevEl)return;let s=r(t.nextEl),a=r(t.prevEl);Object.assign(e.navigation,{nextEl:s,prevEl:a}),s=i(s),a=i(a);const n=(s,a)=>{s&&s.addEventListener("click","next"===a?d:o),!e.enabled&&s&&s.classList.add(...t.lockClass.split(" "))};s.forEach((e=>n(e,"next"))),a.forEach((e=>n(e,"prev")))}function p(){let{nextEl:t,prevEl:s}=e.navigation;t=i(t),s=i(s);const a=(t,s)=>{t.removeEventListener("click","next"===s?d:o),t.classList.remove(...e.params.navigation.disabledClass.split(" "))};t.forEach((e=>a(e,"next"))),s.forEach((e=>a(e,"prev")))}s("init",(()=>{!1===e.params.navigation.enabled?u():(c(),l())})),s("toEdge fromEdge lock unlock",(()=>{l()})),s("destroy",(()=>{p()})),s("enable disable",(()=>{let{nextEl:t,prevEl:s}=e.navigation;t=i(t),s=i(s),[...t,...s].filter((e=>!!e)).forEach((t=>t.classList[e.enabled?"remove":"add"](e.params.navigation.lockClass)))})),s("click",((t,s)=>{let{nextEl:r,prevEl:n}=e.navigation;r=i(r),n=i(n);const l=s.target;if(e.params.navigation.hideOnClick&&!n.includes(l)&&!r.includes(l)){if(e.pagination&&e.params.pagination&&e.params.pagination.clickable&&(e.pagination.el===l||e.pagination.el.contains(l)))return;let t;r.length?t=r[0].classList.contains(e.params.navigation.hiddenClass):n.length&&(t=n[0].classList.contains(e.params.navigation.hiddenClass)),a(!0===t?"navigationShow":"navigationHide"),[...r,...n].filter((e=>!!e)).forEach((t=>t.classList.toggle(e.params.navigation.hiddenClass)))}}));const u=()=>{e.el.classList.add(...e.params.navigation.navigationDisabledClass.split(" ")),p()};Object.assign(e.navigation,{enable:()=>{e.el.classList.remove(...e.params.navigation.navigationDisabledClass.split(" ")),c(),l()},disable:u,update:l,init:c,destroy:p})}function ae(e=""){return`.${e.trim().replace(/([\.:!\/])/g,"\\$1").replace(/ /g,".")}`}function ie({swiper:e,extendParams:t,on:s,emit:a}){const i="swiper-pagination";let r;t({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:`${i}-bullet`,bulletActiveClass:`${i}-bullet-active`,modifierClass:`${i}-`,currentClass:`${i}-current`,totalClass:`${i}-total`,hiddenClass:`${i}-hidden`,progressbarFillClass:`${i}-progressbar-fill`,progressbarOppositeClass:`${i}-progressbar-opposite`,clickableClass:`${i}-clickable`,lockClass:`${i}-lock`,horizontalClass:`${i}-horizontal`,verticalClass:`${i}-vertical`,paginationDisabledClass:`${i}-disabled`}}),e.pagination={el:null,bullets:[]};let n=0;const l=e=>(Array.isArray(e)||(e=[e].filter((e=>!!e))),e);function o(){return!e.params.pagination.el||!e.pagination.el||Array.isArray(e.pagination.el)&&0===e.pagination.el.length}function d(t,s){const{bulletActiveClass:a}=e.params.pagination;t&&(t=t[("prev"===s?"previous":"next")+"ElementSibling"])&&(t.classList.add(`${a}-${s}`),(t=t[("prev"===s?"previous":"next")+"ElementSibling"])&&t.classList.add(`${a}-${s}-${s}`))}function c(t){const s=t.target.closest(ae(e.params.pagination.bulletClass));if(!s)return;t.preventDefault();const a=x(s)*e.params.slidesPerGroup;e.params.loop?e.slideToLoop(a):e.slideTo(a)}function p(){const t=e.rtl,s=e.params.pagination;if(o())return;let i,c=e.pagination.el;c=l(c);const p=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,u=e.params.loop?Math.ceil(p/e.params.slidesPerGroup):e.snapGrid.length;if(i=e.params.loop?e.params.slidesPerGroup>1?Math.floor(e.realIndex/e.params.slidesPerGroup):e.realIndex:void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===s.type&&e.pagination.bullets&&e.pagination.bullets.length>0){const a=e.pagination.bullets;let l,o,p;if(s.dynamicBullets&&(r=T(a[0],e.isHorizontal()?"width":"height",!0),c.forEach((t=>{t.style[e.isHorizontal()?"width":"height"]=r*(s.dynamicMainBullets+4)+"px"})),s.dynamicMainBullets>1&&void 0!==e.previousIndex&&(n+=i-(e.previousIndex||0),n>s.dynamicMainBullets-1?n=s.dynamicMainBullets-1:n<0&&(n=0)),l=Math.max(i-n,0),o=l+(Math.min(a.length,s.dynamicMainBullets)-1),p=(o+l)/2),a.forEach((e=>{e.classList.remove(...["","-next","-next-next","-prev","-prev-prev","-main"].map((e=>`${s.bulletActiveClass}${e}`)))})),c.length>1)a.forEach((e=>{const t=x(e);t===i&&e.classList.add(s.bulletActiveClass),s.dynamicBullets&&(t>=l&&t<=o&&e.classList.add(`${s.bulletActiveClass}-main`),t===l&&d(e,"prev"),t===o&&d(e,"next"))}));else{const e=a[i];if(e&&e.classList.add(s.bulletActiveClass),s.dynamicBullets){const e=a[l],t=a[o];for(let e=l;e<=o;e+=1)a[e].classList.add(`${s.bulletActiveClass}-main`);d(e,"prev"),d(t,"next")}}if(s.dynamicBullets){const i=Math.min(a.length,s.dynamicMainBullets+4),n=(r*i-r)/2-p*r,l=t?"right":"left";a.forEach((t=>{t.style[e.isHorizontal()?l:"top"]=`${n}px`}))}}c.forEach(((t,r)=>{if("fraction"===s.type&&(t.querySelectorAll(ae(s.currentClass)).forEach((e=>{e.textContent=s.formatFractionCurrent(i+1)})),t.querySelectorAll(ae(s.totalClass)).forEach((e=>{e.textContent=s.formatFractionTotal(u)}))),"progressbar"===s.type){let a;a=s.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";const r=(i+1)/u;let n=1,l=1;"horizontal"===a?n=r:l=r,t.querySelectorAll(ae(s.progressbarFillClass)).forEach((t=>{t.style.transform=`translate3d(0,0,0) scaleX(${n}) scaleY(${l})`,t.style.transitionDuration=`${e.params.speed}ms`}))}"custom"===s.type&&s.renderCustom?(t.innerHTML=s.renderCustom(e,i+1,u),0===r&&a("paginationRender",t)):(0===r&&a("paginationRender",t),a("paginationUpdate",t)),e.params.watchOverflow&&e.enabled&&t.classList[e.isLocked?"add":"remove"](s.lockClass)}))}function u(){const t=e.params.pagination;if(o())return;const s=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length;let i=e.pagination.el;i=l(i);let r="";if("bullets"===t.type){let a=e.params.loop?Math.ceil(s/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&e.params.freeMode.enabled&&a>s&&(a=s);for(let s=0;s<a;s+=1)t.renderBullet?r+=t.renderBullet.call(e,s,t.bulletClass):r+=`<${t.bulletElement} class="${t.bulletClass}"></${t.bulletElement}>`}"fraction"===t.type&&(r=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):`<span class="${t.currentClass}"></span> / <span class="${t.totalClass}"></span>`),"progressbar"===t.type&&(r=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):`<span class="${t.progressbarFillClass}"></span>`),i.forEach((s=>{"custom"!==t.type&&(s.innerHTML=r||""),"bullets"===t.type&&(e.pagination.bullets=[...s.querySelectorAll(ae(t.bulletClass))])})),"custom"!==t.type&&a("paginationRender",i[0])}function m(){e.params.pagination=te(e,e.originalParams.pagination,e.params.pagination,{el:"swiper-pagination"});const t=e.params.pagination;if(!t.el)return;let s;"string"==typeof t.el&&e.isElement&&(s=e.el.shadowRoot.querySelector(t.el)),s||"string"!=typeof t.el||(s=[...document.querySelectorAll(t.el)]),s||(s=t.el),s&&0!==s.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&Array.isArray(s)&&s.length>1&&(s=[...e.el.querySelectorAll(t.el)],s.length>1&&(s=s.filter((t=>E(t,".swiper")[0]===e.el))[0])),Array.isArray(s)&&1===s.length&&(s=s[0]),Object.assign(e.pagination,{el:s}),s=l(s),s.forEach((s=>{"bullets"===t.type&&t.clickable&&s.classList.add(t.clickableClass),s.classList.add(t.modifierClass+t.type),s.classList.add(e.isHorizontal()?t.horizontalClass:t.verticalClass),"bullets"===t.type&&t.dynamicBullets&&(s.classList.add(`${t.modifierClass}${t.type}-dynamic`),n=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&s.classList.add(t.progressbarOppositeClass),t.clickable&&s.addEventListener("click",c),e.enabled||s.classList.add(t.lockClass)})))}function f(){const t=e.params.pagination;if(o())return;let s=e.pagination.el;s&&(s=l(s),s.forEach((s=>{s.classList.remove(t.hiddenClass),s.classList.remove(t.modifierClass+t.type),s.classList.remove(e.isHorizontal()?t.horizontalClass:t.verticalClass),t.clickable&&s.removeEventListener("click",c)}))),e.pagination.bullets&&e.pagination.bullets.forEach((e=>e.classList.remove(t.bulletActiveClass)))}s("init",(()=>{!1===e.params.pagination.enabled?h():(m(),u(),p())})),s("activeIndexChange",(()=>{void 0===e.snapIndex&&p()})),s("snapIndexChange",(()=>{p()})),s("snapGridLengthChange",(()=>{u(),p()})),s("destroy",(()=>{f()})),s("enable disable",(()=>{let{el:t}=e.pagination;t&&(t=l(t),t.forEach((t=>t.classList[e.enabled?"remove":"add"](e.params.pagination.lockClass))))})),s("lock unlock",(()=>{p()})),s("click",((t,s)=>{const i=s.target;let{el:r}=e.pagination;if(Array.isArray(r)||(r=[r].filter((e=>!!e))),e.params.pagination.el&&e.params.pagination.hideOnClick&&r&&r.length>0&&!i.classList.contains(e.params.pagination.bulletClass)){if(e.navigation&&(e.navigation.nextEl&&i===e.navigation.nextEl||e.navigation.prevEl&&i===e.navigation.prevEl))return;const t=r[0].classList.contains(e.params.pagination.hiddenClass);a(!0===t?"paginationShow":"paginationHide"),r.forEach((t=>t.classList.toggle(e.params.pagination.hiddenClass)))}}));const h=()=>{e.el.classList.add(e.params.pagination.paginationDisabledClass);let{el:t}=e.pagination;t&&(t=l(t),t.forEach((t=>t.classList.add(e.params.pagination.paginationDisabledClass)))),f()};Object.assign(e.pagination,{enable:()=>{e.el.classList.remove(e.params.pagination.paginationDisabledClass);let{el:t}=e.pagination;t&&(t=l(t),t.forEach((t=>t.classList.remove(e.params.pagination.paginationDisabledClass)))),m(),u(),p()},disable:h,render:u,update:p,init:m,destroy:f})}function re({swiper:e,extendParams:t,on:s,emit:a}){const i=n();let r,l,o,c,p=!1,u=null,m=null;function f(){if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:t,rtlTranslate:s}=e,{dragEl:a,el:i}=t,r=e.params.scrollbar,n=e.params.loop?e.progressLoop:e.progress;let d=l,c=(o-l)*n;s?(c=-c,c>0?(d=l-c,c=0):-c+l>o&&(d=o+c)):c<0?(d=l+c,c=0):c+l>o&&(d=o-c),e.isHorizontal()?(a.style.transform=`translate3d(${c}px, 0, 0)`,a.style.width=`${d}px`):(a.style.transform=`translate3d(0px, ${c}px, 0)`,a.style.height=`${d}px`),r.hide&&(clearTimeout(u),i.style.opacity=1,u=setTimeout((()=>{i.style.opacity=0,i.style.transitionDuration="400ms"}),1e3))}function h(){if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:t}=e,{dragEl:s,el:a}=t;s.style.width="",s.style.height="",o=e.isHorizontal()?a.offsetWidth:a.offsetHeight,c=e.size/(e.virtualSize+e.params.slidesOffsetBefore-(e.params.centeredSlides?e.snapGrid[0]:0)),l="auto"===e.params.scrollbar.dragSize?o*c:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?s.style.width=`${l}px`:s.style.height=`${l}px`,a.style.display=c>=1?"none":"",e.params.scrollbar.hide&&(a.style.opacity=0),e.params.watchOverflow&&e.enabled&&t.el.classList[e.isLocked?"add":"remove"](e.params.scrollbar.lockClass)}function g(t){return e.isHorizontal()?t.clientX:t.clientY}function v(t){const{scrollbar:s,rtlTranslate:a}=e,{el:i}=s;let n;n=(g(t)-w(i)[e.isHorizontal()?"left":"top"]-(null!==r?r:l/2))/(o-l),n=Math.max(Math.min(n,1),0),a&&(n=1-n);const d=e.minTranslate()+(e.maxTranslate()-e.minTranslate())*n;e.updateProgress(d),e.setTranslate(d),e.updateActiveIndex(),e.updateSlidesClasses()}function y(t){const s=e.params.scrollbar,{scrollbar:i,wrapperEl:n}=e,{el:l,dragEl:o}=i;p=!0,r=t.target===o?g(t)-t.target.getBoundingClientRect()[e.isHorizontal()?"left":"top"]:null,t.preventDefault(),t.stopPropagation(),n.style.transitionDuration="100ms",o.style.transitionDuration="100ms",v(t),clearTimeout(m),l.style.transitionDuration="0ms",s.hide&&(l.style.opacity=1),e.params.cssMode&&(e.wrapperEl.style["scroll-snap-type"]="none"),a("scrollbarDragStart",t)}function x(t){const{scrollbar:s,wrapperEl:i}=e,{el:r,dragEl:n}=s;p&&(t.preventDefault?t.preventDefault():t.returnValue=!1,v(t),i.style.transitionDuration="0ms",r.style.transitionDuration="0ms",n.style.transitionDuration="0ms",a("scrollbarDragMove",t))}function E(t){const s=e.params.scrollbar,{scrollbar:i,wrapperEl:r}=e,{el:n}=i;p&&(p=!1,e.params.cssMode&&(e.wrapperEl.style["scroll-snap-type"]="",r.style.transitionDuration=""),s.hide&&(clearTimeout(m),m=d((()=>{n.style.opacity=0,n.style.transitionDuration="400ms"}),1e3)),a("scrollbarDragEnd",t),s.snapOnRelease&&e.slideToClosest())}function S(t){const{scrollbar:s,params:a}=e,r=s.el;if(!r)return;const n=r,l=!!a.passiveListeners&&{passive:!1,capture:!1},o=!!a.passiveListeners&&{passive:!0,capture:!1};if(!n)return;const d="on"===t?"addEventListener":"removeEventListener";n[d]("pointerdown",y,l),i[d]("pointermove",x,l),i[d]("pointerup",E,o)}function T(){const{scrollbar:t,el:s}=e;e.params.scrollbar=te(e,e.originalParams.scrollbar,e.params.scrollbar,{el:"swiper-scrollbar"});const a=e.params.scrollbar;if(!a.el)return;let r,n;"string"==typeof a.el&&e.isElement&&(r=e.el.shadowRoot.querySelector(a.el)),r||"string"!=typeof a.el?r||(r=a.el):r=i.querySelectorAll(a.el),e.params.uniqueNavElements&&"string"==typeof a.el&&r.length>1&&1===s.querySelectorAll(a.el).length&&(r=s.querySelector(a.el)),r.length>0&&(r=r[0]),r.classList.add(e.isHorizontal()?a.horizontalClass:a.verticalClass),r&&(n=r.querySelector(`.${e.params.scrollbar.dragClass}`),n||(n=b("div",e.params.scrollbar.dragClass),r.append(n))),Object.assign(t,{el:r,dragEl:n}),a.draggable&&e.params.scrollbar.el&&e.scrollbar.el&&S("on"),r&&r.classList[e.enabled?"remove":"add"](e.params.scrollbar.lockClass)}function M(){const t=e.params.scrollbar,s=e.scrollbar.el;s&&s.classList.remove(e.isHorizontal()?t.horizontalClass:t.verticalClass),e.params.scrollbar.el&&e.scrollbar.el&&S("off")}t({scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag",scrollbarDisabledClass:"swiper-scrollbar-disabled",horizontalClass:"swiper-scrollbar-horizontal",verticalClass:"swiper-scrollbar-vertical"}}),e.scrollbar={el:null,dragEl:null},s("init",(()=>{!1===e.params.scrollbar.enabled?C():(T(),h(),f())})),s("update resize observerUpdate lock unlock",(()=>{h()})),s("setTranslate",(()=>{f()})),s("setTransition",((t,s)=>{!function(t){e.params.scrollbar.el&&e.scrollbar.el&&(e.scrollbar.dragEl.style.transitionDuration=`${t}ms`)}(s)})),s("enable disable",(()=>{const{el:t}=e.scrollbar;t&&t.classList[e.enabled?"remove":"add"](e.params.scrollbar.lockClass)})),s("destroy",(()=>{M()}));const C=()=>{e.el.classList.add(e.params.scrollbar.scrollbarDisabledClass),e.scrollbar.el&&e.scrollbar.el.classList.add(e.params.scrollbar.scrollbarDisabledClass),M()};Object.assign(e.scrollbar,{enable:()=>{e.el.classList.remove(e.params.scrollbar.scrollbarDisabledClass),e.scrollbar.el&&e.scrollbar.el.classList.remove(e.params.scrollbar.scrollbarDisabledClass),T(),h(),f()},disable:C,updateSize:h,setTranslate:f,init:T,destroy:M})}function ne({swiper:e,extendParams:t,on:s}){t({parallax:{enabled:!1}});const a=(t,s)=>{const{rtl:a}=e,i=a?-1:1,r=t.getAttribute("data-swiper-parallax")||"0";let n=t.getAttribute("data-swiper-parallax-x"),l=t.getAttribute("data-swiper-parallax-y");const o=t.getAttribute("data-swiper-parallax-scale"),d=t.getAttribute("data-swiper-parallax-opacity"),c=t.getAttribute("data-swiper-parallax-rotate");if(n||l?(n=n||"0",l=l||"0"):e.isHorizontal()?(n=r,l="0"):(l=r,n="0"),n=n.indexOf("%")>=0?parseInt(n,10)*s*i+"%":n*s*i+"px",l=l.indexOf("%")>=0?parseInt(l,10)*s+"%":l*s+"px",null!=d){const e=d-(d-1)*(1-Math.abs(s));t.style.opacity=e}let p=`translate3d(${n}, ${l}, 0px)`;null!=o&&(p+=` scale(${o-(o-1)*(1-Math.abs(s))})`),c&&null!=c&&(p+=` rotate(${c*s*-1}deg)`),t.style.transform=p},i=()=>{const{el:t,slides:s,progress:i,snapGrid:r}=e;v(t,"[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").forEach((e=>{a(e,i)})),s.forEach(((t,s)=>{let n=t.progress;e.params.slidesPerGroup>1&&"auto"!==e.params.slidesPerView&&(n+=Math.ceil(s/2)-i*(r.length-1)),n=Math.min(Math.max(n,-1),1),t.querySelectorAll("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale], [data-swiper-parallax-rotate]").forEach((e=>{a(e,n)}))}))};s("beforeInit",(()=>{e.params.parallax.enabled&&(e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)})),s("init",(()=>{e.params.parallax.enabled&&i()})),s("setTranslate",(()=>{e.params.parallax.enabled&&i()})),s("setTransition",((t,s)=>{e.params.parallax.enabled&&((t=e.params.speed)=>{const{el:s}=e;s.querySelectorAll("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").forEach((e=>{let s=parseInt(e.getAttribute("data-swiper-parallax-duration"),10)||t;0===t&&(s=0),e.style.transitionDuration=`${s}ms`}))})(s)}))}function le({swiper:e,extendParams:t,on:s,emit:a}){const i=o();t({zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}}),e.zoom={enabled:!1};let r,n,l=1,d=!1;const c=[],u={slideEl:void 0,slideWidth:void 0,slideHeight:void 0,imageEl:void 0,imageWrapEl:void 0,maxRatio:3},m={isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},f={x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0};let h=1;function g(){if(c.length<2)return 1;const e=c[0].pageX,t=c[0].pageY,s=c[1].pageX,a=c[1].pageY;return Math.sqrt((s-e)**2+(a-t)**2)}function b(t){const s=e.isElement?"swiper-slide":`.${e.params.slideClass}`;return!!t.target.matches(s)||e.slides.filter((e=>e.contains(t.target))).length>0}function y(t){if(!b(t))return;const s=e.params.zoom;if(r=!1,n=!1,c.push(t),!(c.length<2)){if(r=!0,u.scaleStart=g(),!u.slideEl){u.slideEl=t.target.closest(`.${e.params.slideClass}, swiper-slide`),u.slideEl||(u.slideEl=e.slides[e.activeIndex]);let a=u.slideEl.querySelector(`.${s.containerClass}`);if(a&&(a=a.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),u.imageEl=a,u.imageWrapEl=a?E(u.imageEl,`.${s.containerClass}`)[0]:void 0,!u.imageWrapEl)return void(u.imageEl=void 0);u.maxRatio=u.imageWrapEl.getAttribute("data-swiper-zoom")||s.maxRatio}if(u.imageEl){const[e,t]=function(){if(c.length<2)return{x:null,y:null};const e=u.imageEl.getBoundingClientRect();return[(c[0].pageX+(c[1].pageX-c[0].pageX)/2-e.x)/l,(c[0].pageY+(c[1].pageY-c[0].pageY)/2-e.y)/l]}();u.imageEl.style.transformOrigin=`${e}px ${t}px`,u.imageEl.style.transitionDuration="0ms"}d=!0}}function x(t){if(!b(t))return;const s=e.params.zoom,a=e.zoom,i=c.findIndex((e=>e.pointerId===t.pointerId));i>=0&&(c[i]=t),c.length<2||(n=!0,u.scaleMove=g(),u.imageEl&&(a.scale=u.scaleMove/u.scaleStart*l,a.scale>u.maxRatio&&(a.scale=u.maxRatio-1+(a.scale-u.maxRatio+1)**.5),a.scale<s.minRatio&&(a.scale=s.minRatio+1-(s.minRatio-a.scale+1)**.5),u.imageEl.style.transform=`translate3d(0,0,0) scale(${a.scale})`))}function S(t){if(!b(t))return;const s=e.params.zoom,a=e.zoom,i=c.findIndex((e=>e.pointerId===t.pointerId));i>=0&&c.splice(i,1),r&&n&&(r=!1,n=!1,u.imageEl&&(a.scale=Math.max(Math.min(a.scale,u.maxRatio),s.minRatio),u.imageEl.style.transitionDuration=`${e.params.speed}ms`,u.imageEl.style.transform=`translate3d(0,0,0) scale(${a.scale})`,l=a.scale,d=!1,1===a.scale&&(u.slideEl=void 0)))}function T(t){if(!b(t)||!function(t){const s=`.${e.params.zoom.containerClass}`;return!!t.target.matches(s)||[...e.el.querySelectorAll(s)].filter((e=>e.contains(t.target))).length>0}(t))return;const s=e.zoom;if(!u.imageEl)return;if(e.allowClick=!1,!m.isTouched||!u.slideEl)return;m.isMoved||(m.width=u.imageEl.offsetWidth,m.height=u.imageEl.offsetHeight,m.startX=p(u.imageWrapEl,"x")||0,m.startY=p(u.imageWrapEl,"y")||0,u.slideWidth=u.slideEl.offsetWidth,u.slideHeight=u.slideEl.offsetHeight,u.imageWrapEl.style.transitionDuration="0ms");const a=m.width*s.scale,i=m.height*s.scale;if(!(a<u.slideWidth&&i<u.slideHeight)){if(m.minX=Math.min(u.slideWidth/2-a/2,0),m.maxX=-m.minX,m.minY=Math.min(u.slideHeight/2-i/2,0),m.maxY=-m.minY,m.touchesCurrent.x=c.length>0?c[0].pageX:t.pageX,m.touchesCurrent.y=c.length>0?c[0].pageY:t.pageY,!m.isMoved&&!d){if(e.isHorizontal()&&(Math.floor(m.minX)===Math.floor(m.startX)&&m.touchesCurrent.x<m.touchesStart.x||Math.floor(m.maxX)===Math.floor(m.startX)&&m.touchesCurrent.x>m.touchesStart.x))return void(m.isTouched=!1);if(!e.isHorizontal()&&(Math.floor(m.minY)===Math.floor(m.startY)&&m.touchesCurrent.y<m.touchesStart.y||Math.floor(m.maxY)===Math.floor(m.startY)&&m.touchesCurrent.y>m.touchesStart.y))return void(m.isTouched=!1)}t.cancelable&&t.preventDefault(),t.stopPropagation(),m.isMoved=!0,m.currentX=m.touchesCurrent.x-m.touchesStart.x+m.startX,m.currentY=m.touchesCurrent.y-m.touchesStart.y+m.startY,m.currentX<m.minX&&(m.currentX=m.minX+1-(m.minX-m.currentX+1)**.8),m.currentX>m.maxX&&(m.currentX=m.maxX-1+(m.currentX-m.maxX+1)**.8),m.currentY<m.minY&&(m.currentY=m.minY+1-(m.minY-m.currentY+1)**.8),m.currentY>m.maxY&&(m.currentY=m.maxY-1+(m.currentY-m.maxY+1)**.8),f.prevPositionX||(f.prevPositionX=m.touchesCurrent.x),f.prevPositionY||(f.prevPositionY=m.touchesCurrent.y),f.prevTime||(f.prevTime=Date.now()),f.x=(m.touchesCurrent.x-f.prevPositionX)/(Date.now()-f.prevTime)/2,f.y=(m.touchesCurrent.y-f.prevPositionY)/(Date.now()-f.prevTime)/2,Math.abs(m.touchesCurrent.x-f.prevPositionX)<2&&(f.x=0),Math.abs(m.touchesCurrent.y-f.prevPositionY)<2&&(f.y=0),f.prevPositionX=m.touchesCurrent.x,f.prevPositionY=m.touchesCurrent.y,f.prevTime=Date.now(),u.imageWrapEl.style.transform=`translate3d(${m.currentX}px, ${m.currentY}px,0)`}}function M(){const t=e.zoom;u.slideEl&&e.previousIndex!==e.activeIndex&&(u.imageEl&&(u.imageEl.style.transform="translate3d(0,0,0) scale(1)"),u.imageWrapEl&&(u.imageWrapEl.style.transform="translate3d(0,0,0)"),t.scale=1,l=1,u.slideEl=void 0,u.imageEl=void 0,u.imageWrapEl=void 0)}function C(t){const s=e.zoom,a=e.params.zoom;if(!u.slideEl){t&&t.target&&(u.slideEl=t.target.closest(`.${e.params.slideClass}, swiper-slide`)),u.slideEl||(e.params.virtual&&e.params.virtual.enabled&&e.virtual?u.slideEl=v(e.slidesEl,`.${e.params.slideActiveClass}`)[0]:u.slideEl=e.slides[e.activeIndex]);let s=u.slideEl.querySelector(`.${a.containerClass}`);s&&(s=s.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),u.imageEl=s,u.imageWrapEl=s?E(u.imageEl,`.${a.containerClass}`)[0]:void 0}if(!u.imageEl||!u.imageWrapEl)return;let r,n,o,d,c,p,f,h,g,b,y,x,S,T,M,C,P,L;e.params.cssMode&&(e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.touchAction="none"),u.slideEl.classList.add(`${a.zoomedSlideClass}`),void 0===m.touchesStart.x&&t?(r=t.pageX,n=t.pageY):(r=m.touchesStart.x,n=m.touchesStart.y);const k="number"==typeof t?t:null;1===l&&k&&(r=void 0,n=void 0),s.scale=k||u.imageWrapEl.getAttribute("data-swiper-zoom")||a.maxRatio,l=k||u.imageWrapEl.getAttribute("data-swiper-zoom")||a.maxRatio,!t||1===l&&k?(f=0,h=0):(P=u.slideEl.offsetWidth,L=u.slideEl.offsetHeight,o=w(u.slideEl).left+i.scrollX,d=w(u.slideEl).top+i.scrollY,c=o+P/2-r,p=d+L/2-n,g=u.imageEl.offsetWidth,b=u.imageEl.offsetHeight,y=g*s.scale,x=b*s.scale,S=Math.min(P/2-y/2,0),T=Math.min(L/2-x/2,0),M=-S,C=-T,f=c*s.scale,h=p*s.scale,f<S&&(f=S),f>M&&(f=M),h<T&&(h=T),h>C&&(h=C)),u.imageWrapEl.style.transitionDuration="300ms",u.imageWrapEl.style.transform=`translate3d(${f}px, ${h}px,0)`,u.imageEl.style.transitionDuration="300ms",u.imageEl.style.transform=`translate3d(0,0,0) scale(${s.scale})`}function P(){const t=e.zoom,s=e.params.zoom;if(!u.slideEl){e.params.virtual&&e.params.virtual.enabled&&e.virtual?u.slideEl=v(e.slidesEl,`.${e.params.slideActiveClass}`)[0]:u.slideEl=e.slides[e.activeIndex];let t=u.slideEl.querySelector(`.${s.containerClass}`);t&&(t=t.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),u.imageEl=t,u.imageWrapEl=t?E(u.imageEl,`.${s.containerClass}`)[0]:void 0}u.imageEl&&u.imageWrapEl&&(e.params.cssMode&&(e.wrapperEl.style.overflow="",e.wrapperEl.style.touchAction=""),t.scale=1,l=1,u.imageWrapEl.style.transitionDuration="300ms",u.imageWrapEl.style.transform="translate3d(0,0,0)",u.imageEl.style.transitionDuration="300ms",u.imageEl.style.transform="translate3d(0,0,0) scale(1)",u.slideEl.classList.remove(`${s.zoomedSlideClass}`),u.slideEl=void 0)}function L(t){const s=e.zoom;s.scale&&1!==s.scale?P():C(t)}function k(){return{passiveListener:!!e.params.passiveListeners&&{passive:!0,capture:!1},activeListenerWithCapture:!e.params.passiveListeners||{passive:!1,capture:!0}}}function z(){const t=e.zoom;if(t.enabled)return;t.enabled=!0;const{passiveListener:s,activeListenerWithCapture:a}=k();e.wrapperEl.addEventListener("pointerdown",y,s),e.wrapperEl.addEventListener("pointermove",x,a),["pointerup","pointercancel"].forEach((t=>{e.wrapperEl.addEventListener(t,S,s)})),e.wrapperEl.addEventListener("pointermove",T,a)}function A(){const t=e.zoom;if(!t.enabled)return;t.enabled=!1;const{passiveListener:s,activeListenerWithCapture:a}=k();e.wrapperEl.removeEventListener("pointerdown",y,s),e.wrapperEl.removeEventListener("pointermove",x,a),["pointerup","pointercancel"].forEach((t=>{e.wrapperEl.removeEventListener(t,S,s)})),e.wrapperEl.removeEventListener("pointermove",T,a)}Object.defineProperty(e.zoom,"scale",{get:()=>h,set(e){if(h!==e){const t=u.imageEl,s=u.slideEl;a("zoomChange",e,t,s)}h=e}}),s("init",(()=>{e.params.zoom.enabled&&z()})),s("destroy",(()=>{A()})),s("touchStart",((t,s)=>{e.zoom.enabled&&function(t){const s=e.device;u.imageEl&&(m.isTouched||(s.android&&t.cancelable&&t.preventDefault(),m.isTouched=!0,m.touchesStart.x=t.pageX,m.touchesStart.y=t.pageY))}(s)})),s("touchEnd",((t,s)=>{e.zoom.enabled&&function(){const t=e.zoom;if(!u.imageEl)return;if(!m.isTouched||!m.isMoved)return m.isTouched=!1,void(m.isMoved=!1);m.isTouched=!1,m.isMoved=!1;let s=300,a=300;const i=f.x*s,r=m.currentX+i,n=f.y*a,l=m.currentY+n;0!==f.x&&(s=Math.abs((r-m.currentX)/f.x)),0!==f.y&&(a=Math.abs((l-m.currentY)/f.y));const o=Math.max(s,a);m.currentX=r,m.currentY=l;const d=m.width*t.scale,c=m.height*t.scale;m.minX=Math.min(u.slideWidth/2-d/2,0),m.maxX=-m.minX,m.minY=Math.min(u.slideHeight/2-c/2,0),m.maxY=-m.minY,m.currentX=Math.max(Math.min(m.currentX,m.maxX),m.minX),m.currentY=Math.max(Math.min(m.currentY,m.maxY),m.minY),u.imageWrapEl.style.transitionDuration=`${o}ms`,u.imageWrapEl.style.transform=`translate3d(${m.currentX}px, ${m.currentY}px,0)`}()})),s("doubleTap",((t,s)=>{!e.animating&&e.params.zoom.enabled&&e.zoom.enabled&&e.params.zoom.toggle&&L(s)})),s("transitionEnd",(()=>{e.zoom.enabled&&e.params.zoom.enabled&&M()})),s("slideChange",(()=>{e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&M()})),Object.assign(e.zoom,{enable:z,disable:A,in:C,out:P,toggle:L})}function oe({swiper:e,extendParams:t,on:s}){function a(e,t){const s=function(){let e,t,s;return(a,i)=>{for(t=-1,e=a.length;e-t>1;)s=e+t>>1,a[s]<=i?t=s:e=s;return e}}();let a,i;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(i=s(this.x,e),a=i-1,(e-this.x[a])*(this.y[i]-this.y[a])/(this.x[i]-this.x[a])+this.y[a]):0},this}function i(){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)}t({controller:{control:void 0,inverse:!1,by:"slide"}}),e.controller={control:void 0},s("beforeInit",(()=>{if("undefined"!=typeof window&&("string"==typeof e.params.controller.control||e.params.controller.control instanceof HTMLElement)){const t=document.querySelector(e.params.controller.control);if(t&&t.swiper)e.controller.control=t.swiper;else if(t){const s=a=>{e.controller.control=a.detail[0],e.update(),t.removeEventListener("init",s)};t.addEventListener("init",s)}}else e.controller.control=e.params.controller.control})),s("update",(()=>{i()})),s("resize",(()=>{i()})),s("observerUpdate",(()=>{i()})),s("setTranslate",((t,s,a)=>{e.controller.control&&e.controller.setTranslate(s,a)})),s("setTransition",((t,s,a)=>{e.controller.control&&e.controller.setTransition(s,a)})),Object.assign(e.controller,{setTranslate:function(t,s){const i=e.controller.control;let r,n;const l=e.constructor;function o(t){const s=e.rtlTranslate?-e.translate:e.translate;"slide"===e.params.controller.by&&(function(t){e.controller.spline||(e.controller.spline=e.params.loop?new a(e.slidesGrid,t.slidesGrid):new a(e.snapGrid,t.snapGrid))}(t),n=-e.controller.spline.interpolate(-s)),n&&"container"!==e.params.controller.by||(r=(t.maxTranslate()-t.minTranslate())/(e.maxTranslate()-e.minTranslate()),n=(s-e.minTranslate())*r+t.minTranslate()),e.params.controller.inverse&&(n=t.maxTranslate()-n),t.updateProgress(n),t.setTranslate(n,e),t.updateActiveIndex(),t.updateSlidesClasses()}if(Array.isArray(i))for(let e=0;e<i.length;e+=1)i[e]!==s&&i[e]instanceof l&&o(i[e]);else i instanceof l&&s!==i&&o(i)},setTransition:function(t,s){const a=e.constructor,i=e.controller.control;let r;function n(s){s.setTransition(t,e),0!==t&&(s.transitionStart(),s.params.autoHeight&&d((()=>{s.updateAutoHeight()})),S(s.wrapperEl,(()=>{i&&s.transitionEnd()})))}if(Array.isArray(i))for(r=0;r<i.length;r+=1)i[r]!==s&&i[r]instanceof a&&n(i[r]);else i instanceof a&&s!==i&&n(i)}})}function de({swiper:e,extendParams:t,on:s}){t({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null}}),e.a11y={clicked:!1};let a=null;function i(e){const t=a;0!==t.length&&(t.innerHTML="",t.innerHTML=e)}const r=e=>(Array.isArray(e)||(e=[e].filter((e=>!!e))),e);function n(e){(e=r(e)).forEach((e=>{e.setAttribute("tabIndex","0")}))}function l(e){(e=r(e)).forEach((e=>{e.setAttribute("tabIndex","-1")}))}function o(e,t){(e=r(e)).forEach((e=>{e.setAttribute("role",t)}))}function d(e,t){(e=r(e)).forEach((e=>{e.setAttribute("aria-roledescription",t)}))}function c(e,t){(e=r(e)).forEach((e=>{e.setAttribute("aria-label",t)}))}function p(e){(e=r(e)).forEach((e=>{e.setAttribute("aria-disabled",!0)}))}function u(e){(e=r(e)).forEach((e=>{e.setAttribute("aria-disabled",!1)}))}function m(t){if(13!==t.keyCode&&32!==t.keyCode)return;const s=e.params.a11y,a=t.target;e.pagination&&e.pagination.el&&(a===e.pagination.el||e.pagination.el.contains(t.target))&&!t.target.matches(ae(e.params.pagination.bulletClass))||(e.navigation&&e.navigation.nextEl&&a===e.navigation.nextEl&&(e.isEnd&&!e.params.loop||e.slideNext(),e.isEnd?i(s.lastSlideMessage):i(s.nextSlideMessage)),e.navigation&&e.navigation.prevEl&&a===e.navigation.prevEl&&(e.isBeginning&&!e.params.loop||e.slidePrev(),e.isBeginning?i(s.firstSlideMessage):i(s.prevSlideMessage)),e.pagination&&a.matches(ae(e.params.pagination.bulletClass))&&a.click())}function f(){return e.pagination&&e.pagination.bullets&&e.pagination.bullets.length}function h(){return f()&&e.params.pagination.clickable}const g=(e,t,s)=>{n(e),"BUTTON"!==e.tagName&&(o(e,"button"),e.addEventListener("keydown",m)),c(e,s),function(e,t){(e=r(e)).forEach((e=>{e.setAttribute("aria-controls",t)}))}(e,t)},v=()=>{e.a11y.clicked=!0},w=()=>{requestAnimationFrame((()=>{requestAnimationFrame((()=>{e.destroyed||(e.a11y.clicked=!1)}))}))},y=t=>{if(e.a11y.clicked)return;const s=t.target.closest(`.${e.params.slideClass}, swiper-slide`);if(!s||!e.slides.includes(s))return;const a=e.slides.indexOf(s)===e.activeIndex,i=e.params.watchSlidesProgress&&e.visibleSlides&&e.visibleSlides.includes(s);a||i||t.sourceCapabilities&&t.sourceCapabilities.firesTouchEvents||(e.isHorizontal()?e.el.scrollLeft=0:e.el.scrollTop=0,e.slideTo(e.slides.indexOf(s),0))},E=()=>{const t=e.params.a11y;t.itemRoleDescriptionMessage&&d(e.slides,t.itemRoleDescriptionMessage),t.slideRole&&o(e.slides,t.slideRole);const s=e.slides.length;t.slideLabelMessage&&e.slides.forEach(((a,i)=>{const r=e.params.loop?parseInt(a.getAttribute("data-swiper-slide-index"),10):i;c(a,t.slideLabelMessage.replace(/\{\{index\}\}/,r+1).replace(/\{\{slidesLength\}\}/,s))}))};s("beforeInit",(()=>{a=b("span",e.params.a11y.notificationClass),a.setAttribute("aria-live","assertive"),a.setAttribute("aria-atomic","true"),e.isElement&&a.setAttribute("slot","container-end")})),s("afterInit",(()=>{e.params.a11y.enabled&&(()=>{const t=e.params.a11y;e.el.append(a);const s=e.el;t.containerRoleDescriptionMessage&&d(s,t.containerRoleDescriptionMessage),t.containerMessage&&c(s,t.containerMessage);const i=e.wrapperEl,n=t.id||i.getAttribute("id")||`swiper-wrapper-${function(e=16){return"x".repeat(e).replace(/x/g,(()=>Math.round(16*Math.random()).toString(16)))}(16)}`,l=e.params.autoplay&&e.params.autoplay.enabled?"off":"polite";var o;o=n,r(i).forEach((e=>{e.setAttribute("id",o)})),function(e,t){(e=r(e)).forEach((e=>{e.setAttribute("aria-live",t)}))}(i,l),E();let{nextEl:p,prevEl:u}=e.navigation?e.navigation:{};p=r(p),u=r(u),p&&p.forEach((e=>g(e,n,t.nextSlideMessage))),u&&u.forEach((e=>g(e,n,t.prevSlideMessage))),h()&&(Array.isArray(e.pagination.el)?e.pagination.el:[e.pagination.el]).forEach((e=>{e.addEventListener("keydown",m)})),e.el.addEventListener("focus",y,!0),e.el.addEventListener("pointerdown",v,!0),e.el.addEventListener("pointerup",w,!0)})()})),s("slidesLengthChange snapGridLengthChange slidesGridLengthChange",(()=>{e.params.a11y.enabled&&E()})),s("fromEdge toEdge afterInit lock unlock",(()=>{e.params.a11y.enabled&&function(){if(e.params.loop||e.params.rewind||!e.navigation)return;const{nextEl:t,prevEl:s}=e.navigation;s&&(e.isBeginning?(p(s),l(s)):(u(s),n(s))),t&&(e.isEnd?(p(t),l(t)):(u(t),n(t)))}()})),s("paginationUpdate",(()=>{e.params.a11y.enabled&&function(){const t=e.params.a11y;f()&&e.pagination.bullets.forEach((s=>{e.params.pagination.clickable&&(n(s),e.params.pagination.renderBullet||(o(s,"button"),c(s,t.paginationBulletMessage.replace(/\{\{index\}\}/,x(s)+1)))),s.matches(`.${e.params.pagination.bulletActiveClass}`)?s.setAttribute("aria-current","true"):s.removeAttribute("aria-current")}))}()})),s("destroy",(()=>{e.params.a11y.enabled&&function(){a&&a.length>0&&a.remove();let{nextEl:t,prevEl:s}=e.navigation?e.navigation:{};t=r(t),s=r(s),t&&t.forEach((e=>e.removeEventListener("keydown",m))),s&&s.forEach((e=>e.removeEventListener("keydown",m))),h()&&(Array.isArray(e.pagination.el)?e.pagination.el:[e.pagination.el]).forEach((e=>{e.removeEventListener("keydown",m)})),e.el.removeEventListener("focus",y,!0),e.el.removeEventListener("pointerdown",v,!0),e.el.removeEventListener("pointerup",w,!0)}()}))}function ce({swiper:e,extendParams:t,on:s}){t({history:{enabled:!1,root:"",replaceState:!1,key:"slides",keepQuery:!1}});let a=!1,i={};const r=e=>e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),n=e=>{const t=o();let s;s=e?new URL(e):t.location;const a=s.pathname.slice(1).split("/").filter((e=>""!==e)),i=a.length;return{key:a[i-2],value:a[i-1]}},l=(t,s)=>{const i=o();if(!a||!e.params.history.enabled)return;let n;n=e.params.url?new URL(e.params.url):i.location;const l=e.slides[s];let d=r(l.getAttribute("data-history"));if(e.params.history.root.length>0){let s=e.params.history.root;"/"===s[s.length-1]&&(s=s.slice(0,s.length-1)),d=`${s}/${t?`${t}/`:""}${d}`}else n.pathname.includes(t)||(d=`${t?`${t}/`:""}${d}`);e.params.history.keepQuery&&(d+=n.search);const c=i.history.state;c&&c.value===d||(e.params.history.replaceState?i.history.replaceState({value:d},null,d):i.history.pushState({value:d},null,d))},d=(t,s,a)=>{if(s)for(let i=0,n=e.slides.length;i<n;i+=1){const n=e.slides[i];if(r(n.getAttribute("data-history"))===s){const s=x(n);e.slideTo(s,t,a)}}else e.slideTo(0,t,a)},c=()=>{i=n(e.params.url),d(e.params.speed,i.value,!1)};s("init",(()=>{e.params.history.enabled&&(()=>{const t=o();if(e.params.history){if(!t.history||!t.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);a=!0,i=n(e.params.url),i.key||i.value?(d(0,i.value,e.params.runCallbacksOnInit),e.params.history.replaceState||t.addEventListener("popstate",c)):e.params.history.replaceState||t.addEventListener("popstate",c)}})()})),s("destroy",(()=>{e.params.history.enabled&&(()=>{const t=o();e.params.history.replaceState||t.removeEventListener("popstate",c)})()})),s("transitionEnd _freeModeNoMomentumRelease",(()=>{a&&l(e.params.history.key,e.activeIndex)})),s("slideChange",(()=>{a&&e.params.cssMode&&l(e.params.history.key,e.activeIndex)}))}function pe({swiper:e,extendParams:t,emit:s,on:a}){let i=!1;const r=n(),l=o();t({hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}});const d=()=>{s("hashChange");const t=r.location.hash.replace("#","");if(t!==e.slides[e.activeIndex].getAttribute("data-hash")){const s=x(v(e.slidesEl,`.${e.params.slideClass}[data-hash="${t}"], swiper-slide[data-hash="${t}"]`)[0]);if(void 0===s)return;e.slideTo(s)}},c=()=>{if(i&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&l.history&&l.history.replaceState)l.history.replaceState(null,null,`#${e.slides[e.activeIndex].getAttribute("data-hash")}`||""),s("hashSet");else{const t=e.slides[e.activeIndex],a=t.getAttribute("data-hash")||t.getAttribute("data-history");r.location.hash=a||"",s("hashSet")}};a("init",(()=>{e.params.hashNavigation.enabled&&(()=>{if(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)return;i=!0;const t=r.location.hash.replace("#","");if(t){const s=0;for(let a=0,i=e.slides.length;a<i;a+=1){const i=e.slides[a];if((i.getAttribute("data-hash")||i.getAttribute("data-history"))===t){const t=x(i);e.slideTo(t,s,e.params.runCallbacksOnInit,!0)}}}e.params.hashNavigation.watchState&&l.addEventListener("hashchange",d)})()})),a("destroy",(()=>{e.params.hashNavigation.enabled&&e.params.hashNavigation.watchState&&l.removeEventListener("hashchange",d)})),a("transitionEnd _freeModeNoMomentumRelease",(()=>{i&&c()})),a("slideChange",(()=>{i&&e.params.cssMode&&c()}))}function ue({swiper:e,extendParams:t,on:s,emit:a,params:i}){let r,l;e.autoplay={running:!1,paused:!1,timeLeft:0},t({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let o,d,c,p,u,m,f,h=i&&i.autoplay?i.autoplay.delay:3e3,g=i&&i.autoplay?i.autoplay.delay:3e3,v=(new Date).getTime;function b(t){e&&!e.destroyed&&e.wrapperEl&&t.target===e.wrapperEl&&(e.wrapperEl.removeEventListener("transitionend",b),T())}const w=()=>{if(e.destroyed||!e.autoplay.running)return;e.autoplay.paused?d=!0:d&&(g=o,d=!1);const t=e.autoplay.paused?o:v+g-(new Date).getTime();e.autoplay.timeLeft=t,a("autoplayTimeLeft",t,t/h),l=requestAnimationFrame((()=>{w()}))},y=t=>{if(e.destroyed||!e.autoplay.running)return;cancelAnimationFrame(l),w();let s=void 0===t?e.params.autoplay.delay:t;h=e.params.autoplay.delay,g=e.params.autoplay.delay;const i=(()=>{let t;if(t=e.virtual&&e.params.virtual.enabled?e.slides.filter((e=>e.classList.contains("swiper-slide-active")))[0]:e.slides[e.activeIndex],t)return parseInt(t.getAttribute("data-swiper-autoplay"),10)})();!Number.isNaN(i)&&i>0&&void 0===t&&(s=i,h=i,g=i),o=s;const n=e.params.speed,d=()=>{e&&!e.destroyed&&(e.params.autoplay.reverseDirection?!e.isBeginning||e.params.loop||e.params.rewind?(e.slidePrev(n,!0,!0),a("autoplay")):e.params.autoplay.stopOnLastSlide||(e.slideTo(e.slides.length-1,n,!0,!0),a("autoplay")):!e.isEnd||e.params.loop||e.params.rewind?(e.slideNext(n,!0,!0),a("autoplay")):e.params.autoplay.stopOnLastSlide||(e.slideTo(0,n,!0,!0),a("autoplay")),e.params.cssMode&&(v=(new Date).getTime(),requestAnimationFrame((()=>{y()}))))};return s>0?(clearTimeout(r),r=setTimeout((()=>{d()}),s)):requestAnimationFrame((()=>{d()})),s},x=()=>{e.autoplay.running=!0,y(),a("autoplayStart")},E=()=>{e.autoplay.running=!1,clearTimeout(r),cancelAnimationFrame(l),a("autoplayStop")},S=(t,s)=>{if(e.destroyed||!e.autoplay.running)return;clearTimeout(r),t||(f=!0);const i=()=>{a("autoplayPause"),e.params.autoplay.waitForTransition?e.wrapperEl.addEventListener("transitionend",b):T()};if(e.autoplay.paused=!0,s)return m&&(o=e.params.autoplay.delay),m=!1,void i();const n=o||e.params.autoplay.delay;o=n-((new Date).getTime()-v),e.isEnd&&o<0&&!e.params.loop||(o<0&&(o=0),i())},T=()=>{e.isEnd&&o<0&&!e.params.loop||e.destroyed||!e.autoplay.running||(v=(new Date).getTime(),f?(f=!1,y(o)):y(),e.autoplay.paused=!1,a("autoplayResume"))},M=()=>{if(e.destroyed||!e.autoplay.running)return;const t=n();"hidden"===t.visibilityState&&(f=!0,S(!0)),"visible"===t.visibilityState&&T()},C=e=>{"mouse"===e.pointerType&&(f=!0,S(!0))},P=t=>{"mouse"===t.pointerType&&e.autoplay.paused&&T()};s("init",(()=>{e.params.autoplay.enabled&&(e.params.autoplay.pauseOnMouseEnter&&(e.el.addEventListener("pointerenter",C),e.el.addEventListener("pointerleave",P)),n().addEventListener("visibilitychange",M),v=(new Date).getTime(),x())})),s("destroy",(()=>{e.el.removeEventListener("pointerenter",C),e.el.removeEventListener("pointerleave",P),n().removeEventListener("visibilitychange",M),e.autoplay.running&&E()})),s("beforeTransitionStart",((t,s,a)=>{!e.destroyed&&e.autoplay.running&&(a||!e.params.autoplay.disableOnInteraction?S(!0,!0):E())})),s("sliderFirstMove",(()=>{!e.destroyed&&e.autoplay.running&&(e.params.autoplay.disableOnInteraction?E():(c=!0,p=!1,f=!1,u=setTimeout((()=>{f=!0,p=!0,S(!0)}),200)))})),s("touchEnd",(()=>{if(!e.destroyed&&e.autoplay.running&&c){if(clearTimeout(u),clearTimeout(r),e.params.autoplay.disableOnInteraction)return p=!1,void(c=!1);p&&e.params.cssMode&&T(),p=!1,c=!1}})),s("slideChange",(()=>{!e.destroyed&&e.autoplay.running&&(m=!0)})),Object.assign(e.autoplay,{start:x,stop:E,pause:S,resume:T})}function me({swiper:e,extendParams:t,on:s}){t({thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-thumbs"}});let a=!1,i=!1;function r(){const t=e.thumbs.swiper;if(!t||t.destroyed)return;const s=t.clickedIndex,a=t.clickedSlide;if(a&&a.classList.contains(e.params.thumbs.slideThumbActiveClass))return;if(null==s)return;let i;i=t.params.loop?parseInt(t.clickedSlide.getAttribute("data-swiper-slide-index"),10):s,e.params.loop?e.slideToLoop(i):e.slideTo(i)}function l(){const{thumbs:t}=e.params;if(a)return!1;a=!0;const s=e.constructor;if(t.swiper instanceof s)e.thumbs.swiper=t.swiper,Object.assign(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),Object.assign(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1}),e.thumbs.swiper.update();else if(u(t.swiper)){const a=Object.assign({},t.swiper);Object.assign(a,{watchSlidesProgress:!0,slideToClickedSlide:!1}),e.thumbs.swiper=new s(a),i=!0}return e.thumbs.swiper.el.classList.add(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",r),!0}function o(t){const s=e.thumbs.swiper;if(!s||s.destroyed)return;const a="auto"===s.params.slidesPerView?s.slidesPerViewDynamic():s.params.slidesPerView;let i=1;const r=e.params.thumbs.slideThumbActiveClass;if(e.params.slidesPerView>1&&!e.params.centeredSlides&&(i=e.params.slidesPerView),e.params.thumbs.multipleActiveThumbs||(i=1),i=Math.floor(i),s.slides.forEach((e=>e.classList.remove(r))),s.params.loop||s.params.virtual&&s.params.virtual.enabled)for(let t=0;t<i;t+=1)v(s.slidesEl,`[data-swiper-slide-index="${e.realIndex+t}"]`).forEach((e=>{e.classList.add(r)}));else for(let t=0;t<i;t+=1)s.slides[e.realIndex+t]&&s.slides[e.realIndex+t].classList.add(r);const n=e.params.thumbs.autoScrollOffset,l=n&&!s.params.loop;if(e.realIndex!==s.realIndex||l){const i=s.activeIndex;let r,o;if(s.params.loop){const t=s.slides.filter((t=>t.getAttribute("data-swiper-slide-index")===`${e.realIndex}`))[0];r=s.slides.indexOf(t),o=e.activeIndex>e.previousIndex?"next":"prev"}else r=e.realIndex,o=r>e.previousIndex?"next":"prev";l&&(r+="next"===o?n:-1*n),s.visibleSlidesIndexes&&s.visibleSlidesIndexes.indexOf(r)<0&&(s.params.centeredSlides?r=r>i?r-Math.floor(a/2)+1:r+Math.floor(a/2)-1:r>i&&s.params.slidesPerGroup,s.slideTo(r,t?0:void 0))}}e.thumbs={swiper:null},s("beforeInit",(()=>{const{thumbs:t}=e.params;if(t&&t.swiper)if("string"==typeof t.swiper||t.swiper instanceof HTMLElement){const s=n(),a=()=>{const a="string"==typeof t.swiper?s.querySelector(t.swiper):t.swiper;if(a&&a.swiper)t.swiper=a.swiper,l(),o(!0);else if(a){const s=i=>{t.swiper=i.detail[0],a.removeEventListener("init",s),l(),o(!0),t.swiper.update(),e.update()};a.addEventListener("init",s)}return a},i=()=>{e.destroyed||a()||requestAnimationFrame(i)};requestAnimationFrame(i)}else l(),o(!0)})),s("slideChange update resize observerUpdate",(()=>{o()})),s("setTransition",((t,s)=>{const a=e.thumbs.swiper;a&&!a.destroyed&&a.setTransition(s)})),s("beforeDestroy",(()=>{const t=e.thumbs.swiper;t&&!t.destroyed&&i&&t.destroy()})),Object.assign(e.thumbs,{init:l,update:o})}function fe({swiper:e,extendParams:t,emit:s,once:a}){t({freeMode:{enabled:!1,momentum:!0,momentumRatio:1,momentumBounce:!0,momentumBounceRatio:1,momentumVelocityRatio:1,sticky:!1,minimumVelocity:.02}}),Object.assign(e,{freeMode:{onTouchStart:function(){const t=e.getTranslate();e.setTranslate(t),e.setTransition(0),e.touchEventsData.velocities.length=0,e.freeMode.onTouchEnd({currentPos:e.rtl?e.translate:-e.translate})},onTouchMove:function(){const{touchEventsData:t,touches:s}=e;0===t.velocities.length&&t.velocities.push({position:s[e.isHorizontal()?"startX":"startY"],time:t.touchStartTime}),t.velocities.push({position:s[e.isHorizontal()?"currentX":"currentY"],time:c()})},onTouchEnd:function({currentPos:t}){const{params:i,wrapperEl:r,rtlTranslate:n,snapGrid:l,touchEventsData:o}=e,d=c()-o.touchStartTime;if(t<-e.minTranslate())e.slideTo(e.activeIndex);else if(t>-e.maxTranslate())e.slides.length<l.length?e.slideTo(l.length-1):e.slideTo(e.slides.length-1);else{if(i.freeMode.momentum){if(o.velocities.length>1){const t=o.velocities.pop(),s=o.velocities.pop(),a=t.position-s.position,r=t.time-s.time;e.velocity=a/r,e.velocity/=2,Math.abs(e.velocity)<i.freeMode.minimumVelocity&&(e.velocity=0),(r>150||c()-t.time>300)&&(e.velocity=0)}else e.velocity=0;e.velocity*=i.freeMode.momentumVelocityRatio,o.velocities.length=0;let t=1e3*i.freeMode.momentumRatio;const d=e.velocity*t;let p=e.translate+d;n&&(p=-p);let u,m=!1;const f=20*Math.abs(e.velocity)*i.freeMode.momentumBounceRatio;let h;if(p<e.maxTranslate())i.freeMode.momentumBounce?(p+e.maxTranslate()<-f&&(p=e.maxTranslate()-f),u=e.maxTranslate(),m=!0,o.allowMomentumBounce=!0):p=e.maxTranslate(),i.loop&&i.centeredSlides&&(h=!0);else if(p>e.minTranslate())i.freeMode.momentumBounce?(p-e.minTranslate()>f&&(p=e.minTranslate()+f),u=e.minTranslate(),m=!0,o.allowMomentumBounce=!0):p=e.minTranslate(),i.loop&&i.centeredSlides&&(h=!0);else if(i.freeMode.sticky){let t;for(let e=0;e<l.length;e+=1)if(l[e]>-p){t=e;break}p=Math.abs(l[t]-p)<Math.abs(l[t-1]-p)||"next"===e.swipeDirection?l[t]:l[t-1],p=-p}if(h&&a("transitionEnd",(()=>{e.loopFix()})),0!==e.velocity){if(t=n?Math.abs((-p-e.translate)/e.velocity):Math.abs((p-e.translate)/e.velocity),i.freeMode.sticky){const s=Math.abs((n?-p:p)-e.translate),a=e.slidesSizesGrid[e.activeIndex];t=s<a?i.speed:s<2*a?1.5*i.speed:2.5*i.speed}}else if(i.freeMode.sticky)return void e.slideToClosest();i.freeMode.momentumBounce&&m?(e.updateProgress(u),e.setTransition(t),e.setTranslate(p),e.transitionStart(!0,e.swipeDirection),e.animating=!0,S(r,(()=>{e&&!e.destroyed&&o.allowMomentumBounce&&(s("momentumBounce"),e.setTransition(i.speed),setTimeout((()=>{e.setTranslate(u),S(r,(()=>{e&&!e.destroyed&&e.transitionEnd()}))}),0))}))):e.velocity?(s("_freeModeNoMomentumRelease"),e.updateProgress(p),e.setTransition(t),e.setTranslate(p),e.transitionStart(!0,e.swipeDirection),e.animating||(e.animating=!0,S(r,(()=>{e&&!e.destroyed&&e.transitionEnd()})))):e.updateProgress(p),e.updateActiveIndex(),e.updateSlidesClasses()}else{if(i.freeMode.sticky)return void e.slideToClosest();i.freeMode&&s("_freeModeNoMomentumRelease")}(!i.freeMode.momentum||d>=i.longSwipesMs)&&(e.updateProgress(),e.updateActiveIndex(),e.updateSlidesClasses())}}}})}function he({swiper:e,extendParams:t}){let s,a,i;t({grid:{rows:1,fill:"column"}}),e.grid={initSlides:t=>{const{slidesPerView:r}=e.params,{rows:n,fill:l}=e.params.grid;a=s/n,i=Math.floor(t/n),s=Math.floor(t/n)===t/n?t:Math.ceil(t/n)*n,"auto"!==r&&"row"===l&&(s=Math.max(s,r*n))},updateSlide:(t,r,n,l)=>{const{slidesPerGroup:o,spaceBetween:d}=e.params,{rows:c,fill:p}=e.params.grid;let u,m,f;if("row"===p&&o>1){const e=Math.floor(t/(o*c)),a=t-c*o*e,i=0===e?o:Math.min(Math.ceil((n-e*c*o)/c),o);f=Math.floor(a/i),m=a-f*i+e*o,u=m+f*s/c,r.style.order=u}else"column"===p?(m=Math.floor(t/c),f=t-m*c,(m>i||m===i&&f===c-1)&&(f+=1,f>=c&&(f=0,m+=1))):(f=Math.floor(t/a),m=t-f*a);r.style[l("margin-top")]=0!==f?d&&`${d}px`:""},updateWrapperSize:(t,a,i)=>{const{spaceBetween:r,centeredSlides:n,roundLengths:l}=e.params,{rows:o}=e.params.grid;if(e.virtualSize=(t+r)*s,e.virtualSize=Math.ceil(e.virtualSize/o)-r,e.wrapperEl.style[i("width")]=`${e.virtualSize+r}px`,n){const t=[];for(let s=0;s<a.length;s+=1){let i=a[s];l&&(i=Math.floor(i)),a[s]<e.virtualSize+a[0]&&t.push(i)}a.splice(0,a.length),a.push(...t)}}}}function ge(e){const t=this,{params:s,slidesEl:a}=t;s.loop&&t.loopDestroy();const i=e=>{if("string"==typeof e){const t=document.createElement("div");t.innerHTML=e,a.append(t.children[0]),t.innerHTML=""}else a.append(e)};if("object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&i(e[t]);else i(e);t.recalcSlides(),s.loop&&t.loopCreate(),s.observer&&!t.isElement||t.update()}function ve(e){const t=this,{params:s,activeIndex:a,slidesEl:i}=t;s.loop&&t.loopDestroy();let r=a+1;const n=e=>{if("string"==typeof e){const t=document.createElement("div");t.innerHTML=e,i.prepend(t.children[0]),t.innerHTML=""}else i.prepend(e)};if("object"==typeof e&&"length"in e){for(let t=0;t<e.length;t+=1)e[t]&&n(e[t]);r=a+e.length}else n(e);t.recalcSlides(),s.loop&&t.loopCreate(),s.observer&&!t.isElement||t.update(),t.slideTo(r,0,!1)}function be(e,t){const s=this,{params:a,activeIndex:i,slidesEl:r}=s;let n=i;a.loop&&(n-=s.loopedSlides,s.loopDestroy(),s.recalcSlides());const l=s.slides.length;if(e<=0)return void s.prependSlide(t);if(e>=l)return void s.appendSlide(t);let o=n>e?n+1:n;const d=[];for(let t=l-1;t>=e;t-=1){const e=s.slides[t];e.remove(),d.unshift(e)}if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)t[e]&&r.append(t[e]);o=n>e?n+t.length:n}else r.append(t);for(let e=0;e<d.length;e+=1)r.append(d[e]);s.recalcSlides(),a.loop&&s.loopCreate(),a.observer&&!s.isElement||s.update(),a.loop?s.slideTo(o+s.loopedSlides,0,!1):s.slideTo(o,0,!1)}function we(e){const t=this,{params:s,activeIndex:a}=t;let i=a;s.loop&&(i-=t.loopedSlides,t.loopDestroy());let r,n=i;if("object"==typeof e&&"length"in e){for(let s=0;s<e.length;s+=1)r=e[s],t.slides[r]&&t.slides[r].remove(),r<n&&(n-=1);n=Math.max(n,0)}else r=e,t.slides[r]&&t.slides[r].remove(),r<n&&(n-=1),n=Math.max(n,0);t.recalcSlides(),s.loop&&t.loopCreate(),s.observer&&!t.isElement||t.update(),s.loop?t.slideTo(n+t.loopedSlides,0,!1):t.slideTo(n,0,!1)}function ye(){const e=this,t=[];for(let s=0;s<e.slides.length;s+=1)t.push(s);e.removeSlide(t)}function xe({swiper:e}){Object.assign(e,{appendSlide:ge.bind(e),prependSlide:ve.bind(e),addSlide:be.bind(e),removeSlide:we.bind(e),removeAllSlides:ye.bind(e)})}function Ee(e){const{effect:t,swiper:s,on:a,setTranslate:i,setTransition:r,overwriteParams:n,perspective:l,recreateShadows:o,getEffectParams:d}=e;let c;a("beforeInit",(()=>{if(s.params.effect!==t)return;s.classNames.push(`${s.params.containerModifierClass}${t}`),l&&l()&&s.classNames.push(`${s.params.containerModifierClass}3d`);const e=n?n():{};Object.assign(s.params,e),Object.assign(s.originalParams,e)})),a("setTranslate",(()=>{s.params.effect===t&&i()})),a("setTransition",((e,a)=>{s.params.effect===t&&r(a)})),a("transitionEnd",(()=>{if(s.params.effect===t&&o){if(!d||!d().slideShadows)return;s.slides.forEach((e=>{e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>e.remove()))})),o()}})),a("virtualUpdate",(()=>{s.params.effect===t&&(s.slides.length||(c=!0),requestAnimationFrame((()=>{c&&s.slides&&s.slides.length&&(i(),c=!1)})))}))}function Se(e,t){const s=g(t);return s!==t&&(s.style.backfaceVisibility="hidden",s.style["-webkit-backface-visibility"]="hidden"),s}function Te({swiper:e,duration:t,transformElements:s,allSlides:a}){const{activeIndex:i}=e;if(e.params.virtualTranslate&&0!==t){let t,r=!1;t=a?s:s.filter((t=>{return x(t.classList.contains("swiper-slide-transform")?(s=t).parentElement?s.parentElement:e.slides.filter((e=>e.shadowEl&&e.shadowEl===s.parentNode))[0]:t)===i;var s})),t.forEach((t=>{S(t,(()=>{if(r)return;if(!e||e.destroyed)return;r=!0,e.animating=!1;const t=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});e.wrapperEl.dispatchEvent(t)}))}))}}function Me({swiper:e,extendParams:t,on:s}){t({fadeEffect:{crossFade:!1}}),Ee({effect:"fade",swiper:e,on:s,setTranslate:()=>{const{slides:t}=e;e.params.fadeEffect;for(let s=0;s<t.length;s+=1){const t=e.slides[s];let a=-t.swiperSlideOffset;e.params.virtualTranslate||(a-=e.translate);let i=0;e.isHorizontal()||(i=a,a=0);const r=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(t.progress),0):1+Math.min(Math.max(t.progress,-1),0),n=Se(0,t);n.style.opacity=r,n.style.transform=`translate3d(${a}px, ${i}px, 0px)`}},setTransition:t=>{const s=e.slides.map((e=>g(e)));s.forEach((e=>{e.style.transitionDuration=`${t}ms`})),Te({swiper:e,duration:t,transformElements:s,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!e.params.cssMode})})}function Ce({swiper:e,extendParams:t,on:s}){t({cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}});const a=(e,t,s)=>{let a=s?e.querySelector(".swiper-slide-shadow-left"):e.querySelector(".swiper-slide-shadow-top"),i=s?e.querySelector(".swiper-slide-shadow-right"):e.querySelector(".swiper-slide-shadow-bottom");a||(a=b("div","swiper-slide-shadow-"+(s?"left":"top")),e.append(a)),i||(i=b("div","swiper-slide-shadow-"+(s?"right":"bottom")),e.append(i)),a&&(a.style.opacity=Math.max(-t,0)),i&&(i.style.opacity=Math.max(t,0))};Ee({effect:"cube",swiper:e,on:s,setTranslate:()=>{const{el:t,wrapperEl:s,slides:i,width:r,height:n,rtlTranslate:l,size:o,browser:d}=e,c=e.params.cubeEffect,p=e.isHorizontal(),u=e.virtual&&e.params.virtual.enabled;let m,f=0;c.shadow&&(p?(m=e.slidesEl.querySelector(".swiper-cube-shadow"),m||(m=b("div","swiper-cube-shadow"),e.slidesEl.append(m)),m.style.height=`${r}px`):(m=t.querySelector(".swiper-cube-shadow"),m||(m=b("div","swiper-cube-shadow"),t.append(m))));for(let e=0;e<i.length;e+=1){const t=i[e];let s=e;u&&(s=parseInt(t.getAttribute("data-swiper-slide-index"),10));let r=90*s,n=Math.floor(r/360);l&&(r=-r,n=Math.floor(-r/360));const d=Math.max(Math.min(t.progress,1),-1);let m=0,h=0,g=0;s%4==0?(m=4*-n*o,g=0):(s-1)%4==0?(m=0,g=4*-n*o):(s-2)%4==0?(m=o+4*n*o,g=o):(s-3)%4==0&&(m=-o,g=3*o+4*o*n),l&&(m=-m),p||(h=m,m=0);const v=`rotateX(${p?0:-r}deg) rotateY(${p?r:0}deg) translate3d(${m}px, ${h}px, ${g}px)`;d<=1&&d>-1&&(f=90*s+90*d,l&&(f=90*-s-90*d)),t.style.transform=v,c.slideShadows&&a(t,d,p)}if(s.style.transformOrigin=`50% 50% -${o/2}px`,s.style["-webkit-transform-origin"]=`50% 50% -${o/2}px`,c.shadow)if(p)m.style.transform=`translate3d(0px, ${r/2+c.shadowOffset}px, ${-r/2}px) rotateX(90deg) rotateZ(0deg) scale(${c.shadowScale})`;else{const e=Math.abs(f)-90*Math.floor(Math.abs(f)/90),t=1.5-(Math.sin(2*e*Math.PI/360)/2+Math.cos(2*e*Math.PI/360)/2),s=c.shadowScale,a=c.shadowScale/t,i=c.shadowOffset;m.style.transform=`scale3d(${s}, 1, ${a}) translate3d(0px, ${n/2+i}px, ${-n/2/a}px) rotateX(-90deg)`}const h=(d.isSafari||d.isWebView)&&d.needPerspectiveFix?-o/2:0;s.style.transform=`translate3d(0px,0,${h}px) rotateX(${e.isHorizontal()?0:f}deg) rotateY(${e.isHorizontal()?-f:0}deg)`,s.style.setProperty("--swiper-cube-translate-z",`${h}px`)},setTransition:t=>{const{el:s,slides:a}=e;if(a.forEach((e=>{e.style.transitionDuration=`${t}ms`,e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>{e.style.transitionDuration=`${t}ms`}))})),e.params.cubeEffect.shadow&&!e.isHorizontal()){const e=s.querySelector(".swiper-cube-shadow");e&&(e.style.transitionDuration=`${t}ms`)}},recreateShadows:()=>{const t=e.isHorizontal();e.slides.forEach((e=>{const s=Math.max(Math.min(e.progress,1),-1);a(e,s,t)}))},getEffectParams:()=>e.params.cubeEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0})})}function Pe(e,t,s){const a="swiper-slide-shadow"+(s?`-${s}`:""),i=g(t);let r=i.querySelector(`.${a}`);return r||(r=b("div","swiper-slide-shadow"+(s?`-${s}`:"")),i.append(r)),r}function Le({swiper:e,extendParams:t,on:s}){t({flipEffect:{slideShadows:!0,limitRotation:!0}});const a=(t,s,a)=>{let i=e.isHorizontal()?t.querySelector(".swiper-slide-shadow-left"):t.querySelector(".swiper-slide-shadow-top"),r=e.isHorizontal()?t.querySelector(".swiper-slide-shadow-right"):t.querySelector(".swiper-slide-shadow-bottom");i||(i=Pe(0,t,e.isHorizontal()?"left":"top")),r||(r=Pe(0,t,e.isHorizontal()?"right":"bottom")),i&&(i.style.opacity=Math.max(-s,0)),r&&(r.style.opacity=Math.max(s,0))};Ee({effect:"flip",swiper:e,on:s,setTranslate:()=>{const{slides:t,rtlTranslate:s}=e,i=e.params.flipEffect;for(let r=0;r<t.length;r+=1){const n=t[r];let l=n.progress;e.params.flipEffect.limitRotation&&(l=Math.max(Math.min(n.progress,1),-1));const o=n.swiperSlideOffset;let d=-180*l,c=0,p=e.params.cssMode?-o-e.translate:-o,u=0;e.isHorizontal()?s&&(d=-d):(u=p,p=0,c=-d,d=0),n.style.zIndex=-Math.abs(Math.round(l))+t.length,i.slideShadows&&a(n,l);const m=`translate3d(${p}px, ${u}px, 0px) rotateX(${c}deg) rotateY(${d}deg)`;Se(0,n).style.transform=m}},setTransition:t=>{const s=e.slides.map((e=>g(e)));s.forEach((e=>{e.style.transitionDuration=`${t}ms`,e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>{e.style.transitionDuration=`${t}ms`}))})),Te({swiper:e,duration:t,transformElements:s})},recreateShadows:()=>{e.params.flipEffect,e.slides.forEach((t=>{let s=t.progress;e.params.flipEffect.limitRotation&&(s=Math.max(Math.min(t.progress,1),-1)),a(t,s)}))},getEffectParams:()=>e.params.flipEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!e.params.cssMode})})}function ke({swiper:e,extendParams:t,on:s}){t({coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}}),Ee({effect:"coverflow",swiper:e,on:s,setTranslate:()=>{const{width:t,height:s,slides:a,slidesSizesGrid:i}=e,r=e.params.coverflowEffect,n=e.isHorizontal(),l=e.translate,o=n?t/2-l:s/2-l,d=n?r.rotate:-r.rotate,c=r.depth;for(let e=0,t=a.length;e<t;e+=1){const t=a[e],s=i[e],l=(o-t.swiperSlideOffset-s/2)/s,p="function"==typeof r.modifier?r.modifier(l):l*r.modifier;let u=n?d*p:0,m=n?0:d*p,f=-c*Math.abs(p),h=r.stretch;"string"==typeof h&&-1!==h.indexOf("%")&&(h=parseFloat(r.stretch)/100*s);let g=n?0:h*p,v=n?h*p:0,b=1-(1-r.scale)*Math.abs(p);Math.abs(v)<.001&&(v=0),Math.abs(g)<.001&&(g=0),Math.abs(f)<.001&&(f=0),Math.abs(u)<.001&&(u=0),Math.abs(m)<.001&&(m=0),Math.abs(b)<.001&&(b=0);const w=`translate3d(${v}px,${g}px,${f}px)  rotateX(${m}deg) rotateY(${u}deg) scale(${b})`;if(Se(0,t).style.transform=w,t.style.zIndex=1-Math.abs(Math.round(p)),r.slideShadows){let e=n?t.querySelector(".swiper-slide-shadow-left"):t.querySelector(".swiper-slide-shadow-top"),s=n?t.querySelector(".swiper-slide-shadow-right"):t.querySelector(".swiper-slide-shadow-bottom");e||(e=Pe(0,t,n?"left":"top")),s||(s=Pe(0,t,n?"right":"bottom")),e&&(e.style.opacity=p>0?p:0),s&&(s.style.opacity=-p>0?-p:0)}}},setTransition:t=>{e.slides.map((e=>g(e))).forEach((e=>{e.style.transitionDuration=`${t}ms`,e.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach((e=>{e.style.transitionDuration=`${t}ms`}))}))},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0})})}function ze({swiper:e,extendParams:t,on:s}){t({creativeEffect:{limitProgress:1,shadowPerProgress:!1,progressMultiplier:1,perspective:!0,prev:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1},next:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1}}});const a=e=>"string"==typeof e?e:`${e}px`;Ee({effect:"creative",swiper:e,on:s,setTranslate:()=>{const{slides:t,wrapperEl:s,slidesSizesGrid:i}=e,r=e.params.creativeEffect,{progressMultiplier:n}=r,l=e.params.centeredSlides;if(l){const t=i[0]/2-e.params.slidesOffsetBefore||0;s.style.transform=`translateX(calc(50% - ${t}px))`}for(let s=0;s<t.length;s+=1){const i=t[s],o=i.progress,d=Math.min(Math.max(i.progress,-r.limitProgress),r.limitProgress);let c=d;l||(c=Math.min(Math.max(i.originalProgress,-r.limitProgress),r.limitProgress));const p=i.swiperSlideOffset,u=[e.params.cssMode?-p-e.translate:-p,0,0],m=[0,0,0];let f=!1;e.isHorizontal()||(u[1]=u[0],u[0]=0);let h={translate:[0,0,0],rotate:[0,0,0],scale:1,opacity:1};d<0?(h=r.next,f=!0):d>0&&(h=r.prev,f=!0),u.forEach(((e,t)=>{u[t]=`calc(${e}px + (${a(h.translate[t])} * ${Math.abs(d*n)}))`})),m.forEach(((e,t)=>{m[t]=h.rotate[t]*Math.abs(d*n)})),i.style.zIndex=-Math.abs(Math.round(o))+t.length;const g=u.join(", "),v=`rotateX(${m[0]}deg) rotateY(${m[1]}deg) rotateZ(${m[2]}deg)`,b=c<0?`scale(${1+(1-h.scale)*c*n})`:`scale(${1-(1-h.scale)*c*n})`,w=c<0?1+(1-h.opacity)*c*n:1-(1-h.opacity)*c*n,y=`translate3d(${g}) ${v} ${b}`;if(f&&h.shadow||!f){let e=i.querySelector(".swiper-slide-shadow");if(!e&&h.shadow&&(e=Pe(0,i)),e){const t=r.shadowPerProgress?d*(1/r.limitProgress):d;e.style.opacity=Math.min(Math.max(Math.abs(t),0),1)}}const x=Se(0,i);x.style.transform=y,x.style.opacity=w,h.origin&&(x.style.transformOrigin=w)}},setTransition:t=>{const s=e.slides.map((e=>g(e)));s.forEach((e=>{e.style.transitionDuration=`${t}ms`,e.querySelectorAll(".swiper-slide-shadow").forEach((e=>{e.style.transitionDuration=`${t}ms`}))})),Te({swiper:e,duration:t,transformElements:s,allSlides:!0})},perspective:()=>e.params.creativeEffect.perspective,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!e.params.cssMode})})}function Ae({swiper:e,extendParams:t,on:s}){t({cardsEffect:{slideShadows:!0,rotate:!0,perSlideRotate:2,perSlideOffset:8}}),Ee({effect:"cards",swiper:e,on:s,setTranslate:()=>{const{slides:t,activeIndex:s}=e,a=e.params.cardsEffect,{startTranslate:i,isTouched:r}=e.touchEventsData,n=e.translate;for(let l=0;l<t.length;l+=1){const o=t[l],d=o.progress,c=Math.min(Math.max(d,-4),4);let p=o.swiperSlideOffset;e.params.centeredSlides&&!e.params.cssMode&&(e.wrapperEl.style.transform=`translateX(${e.minTranslate()}px)`),e.params.centeredSlides&&e.params.cssMode&&(p-=t[0].swiperSlideOffset);let u=e.params.cssMode?-p-e.translate:-p,m=0;const f=-100*Math.abs(c);let h=1,g=-a.perSlideRotate*c,v=a.perSlideOffset-.75*Math.abs(c);const b=e.virtual&&e.params.virtual.enabled?e.virtual.from+l:l,w=(b===s||b===s-1)&&c>0&&c<1&&(r||e.params.cssMode)&&n<i,y=(b===s||b===s+1)&&c<0&&c>-1&&(r||e.params.cssMode)&&n>i;if(w||y){const e=(1-Math.abs((Math.abs(c)-.5)/.5))**.5;g+=-28*c*e,h+=-.5*e,v+=96*e,m=-25*e*Math.abs(c)+"%"}if(u=c<0?`calc(${u}px + (${v*Math.abs(c)}%))`:c>0?`calc(${u}px + (-${v*Math.abs(c)}%))`:`${u}px`,!e.isHorizontal()){const e=m;m=u,u=e}const x=c<0?""+(1+(1-h)*c):""+(1-(1-h)*c),E=`\n        translate3d(${u}, ${m}, ${f}px)\n        rotateZ(${a.rotate?g:0}deg)\n        scale(${x})\n      `;if(a.slideShadows){let e=o.querySelector(".swiper-slide-shadow");e||(e=Pe(0,o)),e&&(e.style.opacity=Math.min(Math.max((Math.abs(c)-.5)/.5,0),1))}o.style.zIndex=-Math.abs(Math.round(d))+t.length,Se(0,o).style.transform=E}},setTransition:t=>{const s=e.slides.map((e=>g(e)));s.forEach((e=>{e.style.transitionDuration=`${t}ms`,e.querySelectorAll(".swiper-slide-shadow").forEach((e=>{e.style.transitionDuration=`${t}ms`}))})),Te({swiper:e,duration:t,transformElements:s})},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!e.params.cssMode})})}}},t={};function s(a){var i=t[a];if(void 0!==i)return i.exports;var r=t[a]={exports:{}};return e[a].call(r.exports,r,r.exports,s),r.exports}s.d=(e,t)=>{for(var a in t)s.o(t,a)&&!s.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:t[a]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;s.g.importScripts&&(e=s.g.location+"");var t=s.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var a=t.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=e})(),s(560)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Qk8sRUFBRW40QyxTQUNyQyxJQUFLeTRDLEdBQWF6NEMsSUFDYkEsRUFBUzI0QyxnQkFDWkYsRUFBWXo0QyxFQUFTMjRDLGNBQWN0M0MsTUFDL0JvM0MsR0FBVyxDQUNmLElBQUlHLEVBQVU1NEMsRUFBU2lHLHFCQUFxQixVQUN6QzJ5QyxFQUFRbjFDLFNBQVFnMUMsRUFBWUcsRUFBUUEsRUFBUW4xQyxPQUFTLEdBQUdwQyxJQUM1RCxDQUlELElBQUtvM0MsRUFBVyxNQUFNLElBQUlJLE1BQU0seURBQ2hDSixFQUFZQSxFQUFVcHZDLFFBQVEsT0FBUSxJQUFJQSxRQUFRLFFBQVMsSUFBSUEsUUFBUSxZQUFhLEtBQ3BGdXVDLEVBQW9CNzJDLEVBQUkwM0MsQyxLQ1pFYixFQUFvQixJIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9zcmMvdHMvc2VlZHMvc3dpcGVyRGF0YS50cyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL3NyYy90cy9zd2lwZXIudHMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3NyLXdpbmRvdy9zc3Itd2luZG93LmVzbS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3V0aWxzLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZ2V0LXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9nZXQtZGV2aWNlLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZ2V0LWJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvZXZlbnRzLWVtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL2luZGV4LmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3VwZGF0ZS91cGRhdGVTaXplLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3VwZGF0ZS91cGRhdGVTbGlkZXMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL3VwZGF0ZUF1dG9IZWlnaHQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL3VwZGF0ZVNsaWRlc09mZnNldC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS91cGRhdGUvdXBkYXRlU2xpZGVzUHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdXBkYXRlL3VwZGF0ZVByb2dyZXNzLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3VwZGF0ZS91cGRhdGVTbGlkZXNDbGFzc2VzLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3VwZGF0ZS91cGRhdGVBY3RpdmVJbmRleC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS91cGRhdGUvdXBkYXRlQ2xpY2tlZFNsaWRlLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zaXRpb24vdHJhbnNpdGlvbkVtaXQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvc2xpZGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvc2xpZGUvc2xpZGVUby5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9zbGlkZS9zbGlkZVRvTG9vcC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9zbGlkZS9zbGlkZU5leHQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvc2xpZGUvc2xpZGVQcmV2LmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3NsaWRlL3NsaWRlUmVzZXQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvc2xpZGUvc2xpZGVUb0Nsb3Nlc3QuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvc2xpZGUvc2xpZGVUb0NsaWNrZWRTbGlkZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ldmVudHMvb25Ub3VjaFN0YXJ0LmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2V2ZW50cy9vblRvdWNoTW92ZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ldmVudHMvb25Ub3VjaEVuZC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ldmVudHMvb25SZXNpemUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvZXZlbnRzL29uQ2xpY2suanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvZXZlbnRzL29uU2Nyb2xsLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvcHJvY2Vzcy1sYXp5LXByZWxvYWRlci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ldmVudHMvb25Mb2FkLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2V2ZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9icmVha3BvaW50cy9zZXRCcmVha3BvaW50LmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2RlZmF1bHRzLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL21vZHVsZUV4dGVuZFBhcmFtcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9jb3JlLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zbGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2xhdGUvZ2V0VHJhbnNsYXRlLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zbGF0ZS9zZXRUcmFuc2xhdGUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvdHJhbnNsYXRlL21pblRyYW5zbGF0ZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2xhdGUvbWF4VHJhbnNsYXRlLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zbGF0ZS90cmFuc2xhdGVUby5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2l0aW9uL2luZGV4LmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL3RyYW5zaXRpb24vc2V0VHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2l0aW9uL3RyYW5zaXRpb25TdGFydC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS90cmFuc2l0aW9uL3RyYW5zaXRpb25FbmQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvbG9vcC9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9sb29wL2xvb3BDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvbG9vcC9sb29wRml4LmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2xvb3AvbG9vcERlc3Ryb3kuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvZ3JhYi1jdXJzb3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvZ3JhYi1jdXJzb3Ivc2V0R3JhYkN1cnNvci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9ncmFiLWN1cnNvci91bnNldEdyYWJDdXJzb3IuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvYnJlYWtwb2ludHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvYnJlYWtwb2ludHMvZ2V0QnJlYWtwb2ludC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9jaGVjay1vdmVyZmxvdy9pbmRleC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9jbGFzc2VzL2luZGV4LmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL2NsYXNzZXMvYWRkQ2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvY29yZS9jbGFzc2VzL3JlbW92ZUNsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL2NvcmUvbW9kdWxlcy9yZXNpemUvcmVzaXplLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9jb3JlL21vZHVsZXMvb2JzZXJ2ZXIvb2JzZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvdmlydHVhbC92aXJ0dWFsLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2tleWJvYXJkL2tleWJvYXJkLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL21vdXNld2hlZWwvbW91c2V3aGVlbC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL25hdmlnYXRpb24vbmF2aWdhdGlvbi5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2NsYXNzZXMtdG8tc2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3Njcm9sbGJhci9zY3JvbGxiYXIuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvcGFyYWxsYXgvcGFyYWxsYXguanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvem9vbS96b29tLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2NvbnRyb2xsZXIvY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9hMTF5L2ExMXkuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvaGlzdG9yeS9oaXN0b3J5LmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2hhc2gtbmF2aWdhdGlvbi9oYXNoLW5hdmlnYXRpb24uanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvYXV0b3BsYXkvYXV0b3BsYXkuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvdGh1bWJzL3RodW1icy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9mcmVlLW1vZGUvZnJlZS1tb2RlLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2dyaWQvZ3JpZC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9tYW5pcHVsYXRpb24vbWV0aG9kcy9hcHBlbmRTbGlkZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9tYW5pcHVsYXRpb24vbWV0aG9kcy9wcmVwZW5kU2xpZGUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbWFuaXB1bGF0aW9uL21ldGhvZHMvYWRkU2xpZGUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbWFuaXB1bGF0aW9uL21ldGhvZHMvcmVtb3ZlU2xpZGUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbWFuaXB1bGF0aW9uL21ldGhvZHMvcmVtb3ZlQWxsU2xpZGVzLmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL21hbmlwdWxhdGlvbi9tYW5pcHVsYXRpb24uanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9lZmZlY3QtaW5pdC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2VmZmVjdC10YXJnZXQuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9lZmZlY3QtdmlydHVhbC10cmFuc2l0aW9uLWVuZC5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9lZmZlY3QtZmFkZS9lZmZlY3QtZmFkZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9lZmZlY3QtY3ViZS9lZmZlY3QtY3ViZS5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi8uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2NyZWF0ZS1zaGFkb3cuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWZsaXAvZWZmZWN0LWZsaXAuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWNvdmVyZmxvdy9lZmZlY3QtY292ZXJmbG93LmpzIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uLy4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2VmZmVjdC1jcmVhdGl2ZS9lZmZlY3QtY3JlYXRpdmUuanMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWNhcmRzL2VmZmVjdC1jYXJkcy5qcyIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9jbG9uZS1wbGF5c3RhdGlvbi93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2Nsb25lLXBsYXlzdGF0aW9uL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vY2xvbmUtcGxheXN0YXRpb24vd2VicGFjay9zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElTd2lwZXJIYXJkd2FyZSwgSVN3aXBlclRvcCB9IGZyb20gJy4uL2xpYnMvdHlwZXMnO1xuXG5pbXBvcnQgRGVhZFNwYWNlTGFyZ2UgZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9zbGlkZXIvdG9wL2RlYWRfc3BhY2Uud2VicCc7XG5pbXBvcnQgRGVhZFNwYWNlTG9nbyBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL3NsaWRlci90b3AvZGVhZF9zcGFjZS1sb2dvLnBuZyc7XG5pbXBvcnQgRGVhZFNwYWNlTWVkaXVtIGZyb20gJy4uLy4uL2Fzc2V0cy9pbWFnZXMvc2xpZGVyL3RvcC9kZWFkX3NwYWNlLW1lZGl1bS53ZWJwJztcbmltcG9ydCBEZWFkU3BhY2VNb2JpbGUgZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9zbGlkZXIvdG9wL2RlYWRfc3BhY2UtbW9iaWxlLndlYnAnO1xuaW1wb3J0IERlYWRTcGFjZVRodW1iIGZyb20gJy4uLy4uL2Fzc2V0cy9pbWFnZXMvc2xpZGVyL3RvcC9kZWFkX3NwYWNlLXRodW1iLnBuZyc7XG5pbXBvcnQgRm9yc3Bva2VuTGFyZ2UgZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9zbGlkZXIvdG9wL2ZvcnNwb2tlbi53ZWJwJztcbmltcG9ydCBGb3JzcG9rZW5Mb2dvIGZyb20gJy4uLy4uL2Fzc2V0cy9pbWFnZXMvc2xpZGVyL3RvcC9mb3JzcG9rZW4tbG9nby5wbmcnO1xuaW1wb3J0IEZvcnNwb2tlbk1lZGl1bSBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL3NsaWRlci90b3AvZm9yc3Bva2VuLW1lZGl1bS53ZWJwJztcbmltcG9ydCBGb3JzcG9rZW5Nb2JpbGUgZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9zbGlkZXIvdG9wL2ZvcnNwb2tlbi1tb2JpbGUud2VicCc7XG5pbXBvcnQgRm9yc3Bva2VuVGh1bWIgZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9zbGlkZXIvdG9wL2ZvcnNwb2tlbi10aHVtYi5wbmcnO1xuaW1wb3J0IExpdmVQUzVMYXJnZSBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL3NsaWRlci90b3AvbGl2ZV9wczUud2VicCc7XG5pbXBvcnQgTGl2ZVBTNUxvZ28gZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9zbGlkZXIvdG9wL2xpdmVfcHM1LWxvZ28ucG5nJztcbmltcG9ydCBMaXZlUFM1TWVkaXVtIGZyb20gJy4uLy4uL2Fzc2V0cy9pbWFnZXMvc2xpZGVyL3RvcC9saXZlX3BzNS1tZWRpdW0ud2VicCc7XG5pbXBvcnQgTGl2ZVBTNU1vYmlsZSBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL3NsaWRlci90b3AvbGl2ZV9wczUtbW9iaWxlLndlYnAnO1xuaW1wb3J0IExpdmVQUzVUaHVtYiBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL3NsaWRlci90b3AvbGl2ZV9wczUtdGh1bWIucG5nJztcblxuaW1wb3J0IEhhcmR3YXJlQ2FtZXJhIGZyb20gJy4uLy4uL2Fzc2V0cy9pbWFnZXMvc2xpZGVyL2hhcmR3YXJlL2hkLWNhbWVyYS53ZWJwJztcbmltcG9ydCBIYXJkd2FyZUR1YWxDb2xsZWN0aW9uIGZyb20gJy4uLy4uL2Fzc2V0cy9pbWFnZXMvc2xpZGVyL2hhcmR3YXJlL2R1YWxzZW5zZS1jb2xsZWN0aW9uLndlYnAnO1xuaW1wb3J0IEhhcmR3YXJlRHVhbEVkZ2UgZnJvbSAnLi4vLi4vYXNzZXRzL2ltYWdlcy9zbGlkZXIvaGFyZHdhcmUvZHVhbHNlbnNlLWVkZ2Uud2VicCc7XG5pbXBvcnQgSGFyZHdhcmVIZWFkc2V0IGZyb20gJy4uLy4uL2Fzc2V0cy9pbWFnZXMvc2xpZGVyL2hhcmR3YXJlLzNkLXB1bHNlLWhlYWRzZXQud2VicCc7XG5pbXBvcnQgSGFyZHdhcmVQUzVDb25zb2xlIGZyb20gJy4uLy4uL2Fzc2V0cy9pbWFnZXMvc2xpZGVyL2hhcmR3YXJlL3BsYXlzdGF0aW9uLTUud2VicCc7XG5pbXBvcnQgSGFyZHdhcmVQUzVDb3ZlciBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL3NsaWRlci9oYXJkd2FyZS9wczUtY29uc29sZS1jb3Zlci53ZWJwJztcbmltcG9ydCBIYXJkd2FyZVJlbW90ZSBmcm9tICcuLi8uLi9hc3NldHMvaW1hZ2VzL3NsaWRlci9oYXJkd2FyZS9tZWRpYS1yZW1vdGUud2VicCc7XG5cbmV4cG9ydCBjb25zdCBzd2lwZXJUb3BEYXRhOiBJU3dpcGVyVG9wW10gPSBbXG4gIHtcbiAgICBpZDogMSxcbiAgICBpbWc6IHtcbiAgICAgIGxhcmdlOiBGb3JzcG9rZW5MYXJnZSxcbiAgICAgIG1lZGl1bTogRm9yc3Bva2VuTWVkaXVtLFxuICAgICAgbW9iaWxlOiBGb3JzcG9rZW5Nb2JpbGUsXG4gICAgICB0aHVtYjogRm9yc3Bva2VuVGh1bWJcbiAgICB9LFxuICAgIGFsdDogJ2ZvcnNwb2tlbiBnYW1lJyxcbiAgICBsb2dvOiBGb3JzcG9rZW5Mb2dvLFxuICAgIHRpdGxlOiAnRmluZCB5b3VyIGZpZ2h0JyxcbiAgICB0ZXh0OiAnVHJhdmVyc2Ugc3ByYXdsaW5nIGxhbmRzY2FwZXMgYW5kIGJhdHRsZSBtb25zdHJvdXMgY3JlYXR1cmVzIHdpdGggYSBtYXNzaXZlIHZhcmlldHkgb2YgbWFnaWYgYWJpbGl0aWVzLCBvdXQgbm93IG9uIFBTNS4nLFxuICAgIGJ0bjogeyB0ZXh0OiAnUGxheSBub3cnLCBocmVmOiAnIycgfVxuICB9LFxuICB7XG4gICAgaWQ6IDIsXG4gICAgaW1nOiB7XG4gICAgICBsYXJnZTogRGVhZFNwYWNlTGFyZ2UsXG4gICAgICBtZWRpdW06IERlYWRTcGFjZU1lZGl1bSxcbiAgICAgIG1vYmlsZTogRGVhZFNwYWNlTW9iaWxlLFxuICAgICAgdGh1bWI6IERlYWRTcGFjZVRodW1iXG4gICAgfSxcbiAgICBhbHQ6ICdkZWFkIHNwYWNlIGdhbWUnLFxuICAgIGxvZ286IERlYWRTcGFjZUxvZ28sXG4gICAgdGl0bGU6ICdIdW1hbml0eSBlbmRzIGhlcmUnLFxuICAgIHRleHQ6ICdUaGUgc2NpLWZpIHN1cnZpdmFsIGhvcnJvciBjbGFzc2ljIHJldHVybnMsIHJlYnVpbHQgdG8gb2ZmZXIgYSBkZWVwZXIgYW5kIG1vcmUgaW1tZXJzaXZlIGV4cGVyaWVuY2UsIG91dCBub3cgb24gUFM1JyxcbiAgICBidG46IHsgdGV4dDogJ0ZpbmQgb3V0IG1vcmUnLCBocmVmOiAnIycgfVxuICB9LFxuICB7XG4gICAgaWQ6IDMsXG4gICAgaW1nOiB7XG4gICAgICBsYXJnZTogRGVhZFNwYWNlTGFyZ2UsXG4gICAgICBtZWRpdW06IERlYWRTcGFjZU1lZGl1bSxcbiAgICAgIG1vYmlsZTogRGVhZFNwYWNlTW9iaWxlLFxuICAgICAgdGh1bWI6IERlYWRTcGFjZVRodW1iXG4gICAgfSxcbiAgICBhbHQ6ICdkZWFkIHNwYWNlIGdhbWUnLFxuICAgIGxvZ286IERlYWRTcGFjZUxvZ28sXG4gICAgdGl0bGU6ICdIdW1hbml0eSBlbmRzIGhlcmUnLFxuICAgIHRleHQ6ICdUaGUgc2NpLWZpIHN1cnZpdmFsIGhvcnJvciBjbGFzc2ljIHJldHVybnMsIHJlYnVpbHQgdG8gb2ZmZXIgYSBkZWVwZXIgYW5kIG1vcmUgaW1tZXJzaXZlIGV4cGVyaWVuY2UsIG91dCBub3cgb24gUFM1JyxcbiAgICBidG46IHsgdGV4dDogJ0ZpbmQgb3V0IG1vcmUnLCBocmVmOiAnIycgfVxuICB9LFxuICB7XG4gICAgaWQ6IDQsXG4gICAgaW1nOiB7XG4gICAgICBsYXJnZTogRGVhZFNwYWNlTGFyZ2UsXG4gICAgICBtZWRpdW06IERlYWRTcGFjZU1lZGl1bSxcbiAgICAgIG1vYmlsZTogRGVhZFNwYWNlTW9iaWxlLFxuICAgICAgdGh1bWI6IERlYWRTcGFjZVRodW1iXG4gICAgfSxcbiAgICBhbHQ6ICdkZWFkIHNwYWNlIGdhbWUnLFxuICAgIGxvZ286IERlYWRTcGFjZUxvZ28sXG4gICAgdGl0bGU6ICdIdW1hbml0eSBlbmRzIGhlcmUnLFxuICAgIHRleHQ6ICdUaGUgc2NpLWZpIHN1cnZpdmFsIGhvcnJvciBjbGFzc2ljIHJldHVybnMsIHJlYnVpbHQgdG8gb2ZmZXIgYSBkZWVwZXIgYW5kIG1vcmUgaW1tZXJzaXZlIGV4cGVyaWVuY2UsIG91dCBub3cgb24gUFM1JyxcbiAgICBidG46IHsgdGV4dDogJ0ZpbmQgb3V0IG1vcmUnLCBocmVmOiAnIycgfVxuICB9LFxuICB7XG4gICAgaWQ6IDUsXG4gICAgaW1nOiB7XG4gICAgICBsYXJnZTogRGVhZFNwYWNlTGFyZ2UsXG4gICAgICBtZWRpdW06IERlYWRTcGFjZU1lZGl1bSxcbiAgICAgIG1vYmlsZTogRGVhZFNwYWNlTW9iaWxlLFxuICAgICAgdGh1bWI6IERlYWRTcGFjZVRodW1iXG4gICAgfSxcbiAgICBhbHQ6ICdkZWFkIHNwYWNlIGdhbWUnLFxuICAgIGxvZ286IERlYWRTcGFjZUxvZ28sXG4gICAgdGl0bGU6ICdIdW1hbml0eSBlbmRzIGhlcmUnLFxuICAgIHRleHQ6ICdUaGUgc2NpLWZpIHN1cnZpdmFsIGhvcnJvciBjbGFzc2ljIHJldHVybnMsIHJlYnVpbHQgdG8gb2ZmZXIgYSBkZWVwZXIgYW5kIG1vcmUgaW1tZXJzaXZlIGV4cGVyaWVuY2UsIG91dCBub3cgb24gUFM1JyxcbiAgICBidG46IHsgdGV4dDogJ0ZpbmQgb3V0IG1vcmUnLCBocmVmOiAnIycgfVxuICB9LFxuICB7XG4gICAgaWQ6IDYsXG4gICAgaW1nOiB7XG4gICAgICBsYXJnZTogRGVhZFNwYWNlTGFyZ2UsXG4gICAgICBtZWRpdW06IERlYWRTcGFjZU1lZGl1bSxcbiAgICAgIG1vYmlsZTogRGVhZFNwYWNlTW9iaWxlLFxuICAgICAgdGh1bWI6IERlYWRTcGFjZVRodW1iXG4gICAgfSxcbiAgICBhbHQ6ICdkZWFkIHNwYWNlIGdhbWUnLFxuICAgIGxvZ286IERlYWRTcGFjZUxvZ28sXG4gICAgdGl0bGU6ICdIdW1hbml0eSBlbmRzIGhlcmUnLFxuICAgIHRleHQ6ICdUaGUgc2NpLWZpIHN1cnZpdmFsIGhvcnJvciBjbGFzc2ljIHJldHVybnMsIHJlYnVpbHQgdG8gb2ZmZXIgYSBkZWVwZXIgYW5kIG1vcmUgaW1tZXJzaXZlIGV4cGVyaWVuY2UsIG91dCBub3cgb24gUFM1JyxcbiAgICBidG46IHsgdGV4dDogJ0ZpbmQgb3V0IG1vcmUnLCBocmVmOiAnIycgfVxuICB9LFxuICB7XG4gICAgaWQ6IDcsXG4gICAgaW1nOiB7XG4gICAgICBsYXJnZTogTGl2ZVBTNUxhcmdlLFxuICAgICAgbWVkaXVtOiBMaXZlUFM1TWVkaXVtLFxuICAgICAgbW9iaWxlOiBMaXZlUFM1TW9iaWxlLFxuICAgICAgdGh1bWI6IExpdmVQUzVUaHVtYlxuICAgIH0sXG4gICAgbG9nbzogTGl2ZVBTNUxvZ28sXG4gICAgYWx0OiAnbGl2ZSBwczUgZ2FtZScsXG4gICAgdGl0bGU6ICdCcmluZ2luZyB5b3VyIHRoZSBleHRyYW9yZGluYXJ5JyxcbiAgICB0ZXh0OiAnRXhwbG9yZSBpbmNyZWRpYmxlIHdvcmxkcyBhbmQgZXhwZXJpZW5jZSB0aGUgdW5leHBlY3RlZC4gU3RhcnQgeW91ciBzdG9yeSB0b2RheS4nLFxuICAgIGJ0bjogeyB0ZXh0OiAnRmluZCBvdXQgbW9yZScsIGhyZWY6ICcjJyB9XG4gIH1cbl07XG5cbmV4cG9ydCBjb25zdCBzd2lwZXJIYXJkd2FyZURhdGE6IElTd2lwZXJIYXJkd2FyZVtdID0gW1xuICB7XG4gICAgaWQ6IDEsXG4gICAgaW1nOiBIYXJkd2FyZVBTNUNvbnNvbGUsXG4gICAgYWx0OiAnUFM1IENvbnNvbGUnLFxuICAgIHRpdGxlOiAnUGxheVN0YXRpb24gNSBDb25zb2xlJyxcbiAgICB0ZXh0OiAnRXhwZXJpZW5jZSBhbiBhbGwtbmV3IGdlbmVyYXRpb24gb2YgaW5jcmVkaWJsZSBQbGF5U3RhdGlvbiBnYW1lcy4gUFM1IGNvbnNvbGVzIGFyZSBjdXJyZW50bHkgaW4gc3RvY2suJyxcbiAgICBidG46IHtcbiAgICAgIG1vcmU6IHsgdGV4dDogJ0xlYXJuIG1vcmUnLCBocmVmOiAnIycgfSxcbiAgICAgIGJ1eTogeyB0ZXh0OiAnQnV5IG5vdycsIGhyZWY6ICcjJyB9XG4gICAgfVxuICB9LFxuICB7XG4gICAgaWQ6IDIsXG4gICAgaW1nOiBIYXJkd2FyZUR1YWxDb2xsZWN0aW9uLFxuICAgIGFsdDogJ0R1YWxTZW5zZeKEoiBXaXJlbGVzcyBDb250cm9sbGVyJyxcbiAgICB0aXRsZTogJ0R1YWxTZW5zZeKEoiBXaXJlbGVzcyBDb250cm9sbGVyJyxcbiAgICB0ZXh0OiAnSW1tZXJzZSB5b3Vyc2VsZiBpbiB0aGUgZ2FtaW5nIGV4cGVyaWVuY2Ugd2l0aCBhIGNvbnRyb2xsZXIgdGhlIHN1cHBvcnRzIHJlc3BvbnNpdmUgaGFwdGljIGZlZWRiYWNrIGFuZCBkeW5hbWljIHRyaWdnZXIgZWZmZWN0cy4nLFxuICAgIGJ0bjogeyBtb3JlOiB7IHRleHQ6ICdMZWFybiBtb3JlJywgaHJlZjogJyMnIH0gfVxuICB9LFxuICB7XG4gICAgaWQ6IDMsXG4gICAgaW1nOiBIYXJkd2FyZUhlYWRzZXQsXG4gICAgYWx0OiAnUFVMU0UgM0TihKIgV2lyZWxlc3MgSGVhZHNldCcsXG4gICAgdGl0bGU6ICdQVUxTRSAzROKEoiBXaXJlbGVzcyBIZWFkc2V0JyxcbiAgICB0ZXh0OiAnRW5qb3kgYSBzZWFtbGVzcyB3aXJlbGVzcyBleHBlcmllbmNlIHdpdGggYSBoZWFkc2V0IGZpbmUtdHVuZWQgZm9yIDNEIEF1ZGlvIG9uIFBTNSBjb25zb2xlcy4nLFxuICAgIGJ0bjogeyBtb3JlOiB7IHRleHQ6ICdMZWFybiBtb3JlJywgaHJlZjogJyMnIH0gfVxuICB9LFxuICB7XG4gICAgaWQ6IDQsXG4gICAgaW1nOiBIYXJkd2FyZUR1YWxFZGdlLFxuICAgIGFsdDogJ0R1YWxTZW5zZSBFZGdl4oSiIFdpcmVsZXNzIENvbnRyb2xsZXInLFxuICAgIHRpdGxlOiAnRHVhbFNlbnNlIEVkZ2XihKIgV2lyZWxlc3MgQ29udHJvbGxlcicsXG4gICAgdGV4dDogJ0dldCBhbiBlZGdlIGluIGdhbWVwbGF5IHdpdGggcmVtYXBwYWJsZSBidXR0b25zLCB0dW5hYmxlIHRyaWdnZXJzIGFuZCBzdGlja3MsIGNoYW5nZWFibGUgc3RpY2sgY2FwcywgYmFjayBidXR0b25zLCBhbmQgbW9yZS4nLFxuICAgIGJ0bjogeyBtb3JlOiB7IHRleHQ6ICdMZWFybiBtb3JlJywgaHJlZjogJyMnIH0gfVxuICB9LFxuICB7XG4gICAgaWQ6IDUsXG4gICAgaW1nOiBIYXJkd2FyZVJlbW90ZSxcbiAgICBhbHQ6ICdNZWRpYSBSZW1vdGUnLFxuICAgIHRpdGxlOiAnTWVkaWEgUmVtb3RlJyxcbiAgICB0ZXh0OiAnQ29udmVuaWVudGx5IGNvbnRyb2wgbW92aWVzLCBzdHJlYW1pbmcgc2VydmljZXMgYW5kIG1vcmUgb24geW91ciBQUzUgY29uc29sZSB3aXRoIGFuIGludHVpdGl2ZSBsYXlvdXQuJyxcbiAgICBidG46IHsgbW9yZTogeyB0ZXh0OiAnTGVhcm4gbW9yZScsIGhyZWY6ICcjJyB9IH1cbiAgfSxcbiAge1xuICAgIGlkOiA2LFxuICAgIGltZzogSGFyZHdhcmVDYW1lcmEsXG4gICAgYWx0OiAnSEQgQ2FtZXJhJyxcbiAgICB0aXRsZTogJ0hEIENhbWVyYScsXG4gICAgdGV4dDogJ0FkZCB5b3Vyc2VsZiB0byB5b3VyIGdhbWVwbGF5IHZpZGVvcyBhbmQgYnJvYWRjYXN0cyB3aXRoIHNtb290aCwgc2hhcnAsIGZ1bGwtSEQgY2FwdHVyZS4nLFxuICAgIGJ0bjogeyBtb3JlOiB7IHRleHQ6ICdMZWFybiBtb3JlJywgaHJlZjogJyMnIH0gfVxuICB9LFxuICB7XG4gICAgaWQ6IDcsXG4gICAgaW1nOiBIYXJkd2FyZVBTNUNvdmVyLFxuICAgIGFsdDogJ1BTNSBDb25zb2xlIENvdmVycycsXG4gICAgdGl0bGU6ICdQUzUgQ29uc29sZSBDb3ZlcnMnLFxuICAgIHRleHQ6ICdQZXJzb25hbGlzZSB5b3VyIFBsYXlTdGF0aW9uIDUgb3IgUGxheVN0YXRpb24gNSBEaWdpdGFsIEVkaXRpb24gY29uc29sZSB3aXRoIGEgdmlicmFudCBhcnJheSBvZiBuZXcgY29sb3VyIG9wdGlvbnMuJyxcbiAgICBidG46IHsgbW9yZTogeyB0ZXh0OiAnTGVhcm4gbW9yZScsIGhyZWY6ICcjJyB9IH1cbiAgfVxuXTtcbiIsImltcG9ydCAnc3dpcGVyL2Nzcyc7XG5pbXBvcnQgJ3N3aXBlci9jc3MvdGh1bWJzJztcbmltcG9ydCAnc3dpcGVyL2Nzcy9lZmZlY3QtZmFkZSc7XG5cbmltcG9ydCB7IElTd2lwZXJIYXJkd2FyZSwgSVN3aXBlclRvcCB9IGZyb20gJy4vbGlicy90eXBlcyc7XG5pbXBvcnQgU3dpcGVyLCB7IEF1dG9wbGF5LCBFZmZlY3RGYWRlLCBLZXlib2FyZCwgU3dpcGVyT3B0aW9ucywgVGh1bWJzIH0gZnJvbSAnc3dpcGVyJztcbmltcG9ydCB7IHN3aXBlckhhcmR3YXJlRGF0YSwgc3dpcGVyVG9wRGF0YSB9IGZyb20gJy4vc2VlZHMvc3dpcGVyRGF0YSc7XG5cbmNvbnN0IGNyZWF0ZVRvcFNsaWRlID0gKGRhdGE6IElTd2lwZXJUb3ApID0+IHtcbiAgY29uc3QgZGl2U2xpZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29uc3QgcGljdHVyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3BpY3R1cmUnKTtcbiAgY29uc3Qgc291cmNlTGFyZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzb3VyY2UnKTtcbiAgY29uc3Qgc291cmNlTWVkaXVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc291cmNlJyk7XG4gIGNvbnN0IGltZ1RvcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xuICBjb25zdCBhbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG5cbiAgY29uc3QgZGl2RGVzYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb25zdCBsb2dvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG4gIGNvbnN0IGgxID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaDEnKTtcbiAgY29uc3QgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgY29uc3QgZGl2QnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnN0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblxuICBzb3VyY2VMYXJnZS5tZWRpYSA9ICcobWluLXdpZHRoOjEwMjRweCknO1xuICBzb3VyY2VMYXJnZS5zcmNzZXQgPSBkYXRhLmltZy5sYXJnZTtcblxuICBzb3VyY2VNZWRpdW0ubWVkaWEgPSAnKG1pbi13aWR0aDo3MDBweCknO1xuICBzb3VyY2VNZWRpdW0uc3Jjc2V0ID0gZGF0YS5pbWcubWVkaXVtO1xuXG4gIGltZ1RvcC5jbGFzc0xpc3QuYWRkKCdzbGlkZS1pbWcnKTtcbiAgaW1nVG9wLnNyYyA9IGRhdGEuaW1nLm1vYmlsZTtcbiAgaW1nVG9wLmFsdCA9IGAke2RhdGEuYWx0fSBpbWFnZSBzbGlkZWA7XG4gIGltZ1RvcC5sb2FkaW5nID0gJ2xhenknO1xuXG4gIHBpY3R1cmUuYXBwZW5kKHNvdXJjZUxhcmdlLCBzb3VyY2VNZWRpdW0sIGltZ1RvcCk7XG5cbiAgYW5jaG9yLmNsYXNzTGlzdC5hZGQoJ3NsaWRlLWxpbmsnKTtcbiAgYW5jaG9yLmhyZWYgPSAnIyc7XG5cbiAgZGl2RGVzYy5jbGFzc0xpc3QuYWRkKCdzbGlkZS1kZXNjJyk7XG5cbiAgbG9nby5jbGFzc0xpc3QuYWRkKCdzbGlkZS1sb2dvJyk7XG4gIGxvZ28uc3JjID0gZGF0YS5sb2dvO1xuICBsb2dvLmFsdCA9IGAke2RhdGEuYWx0fSBsb2dvYDtcbiAgbG9nby5sb2FkaW5nID0gJ2xhenknO1xuXG4gIGgxLmNsYXNzTGlzdC5hZGQoJ3NsaWRlLXRpdGxlJyk7XG4gIGgxLnRleHRDb250ZW50ID0gZGF0YS50aXRsZTtcblxuICBwLmNsYXNzTGlzdC5hZGQoJ3NsaWRlLXRleHQnKTtcbiAgcC50ZXh0Q29udGVudCA9IGRhdGEudGV4dDtcblxuICBkaXZCdG4uY2xhc3NMaXN0LmFkZCgnc2xpZGUtYnRuJyk7XG5cbiAgYnRuLmNsYXNzTGlzdC5hZGQoJ2J1dHRvbi0tbGluaycsICd3aGl0ZScpO1xuICBidG4udGV4dENvbnRlbnQgPSBkYXRhLmJ0bi50ZXh0O1xuICBidG4uaHJlZiA9IGRhdGEuYnRuLmhyZWY7XG4gIGRpdkJ0bi5hcHBlbmRDaGlsZChidG4pO1xuXG4gIGNvbnN0IGRpdkxhenkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZGl2TGF6eS5jbGFzc0xpc3QuYWRkKCdzd2lwZXItbGF6eS1wcmVsb2FkZXInLCAnc3dpcGVyLWxhenktcHJlbG9hZGVyLXdoaXRlJyk7XG5cbiAgZGl2RGVzYy5hcHBlbmQobG9nbywgaDEsIHAsIGRpdkJ0bik7XG5cbiAgZGl2U2xpZGUuY2xhc3NMaXN0LmFkZCgnc3dpcGVyLXNsaWRlJywgJ3NlY3Rpb24tLXRvcC1zbGlkZScpO1xuICBkaXZTbGlkZS5hcHBlbmQocGljdHVyZSwgYW5jaG9yLCBkaXZEZXNjLCBkaXZMYXp5KTtcblxuICByZXR1cm4gZGl2U2xpZGU7XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVUb3BUaHVtYnMoZGF0YTogSVN3aXBlclRvcCkge1xuICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29uc3QgaW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cbiAgaW1nLmNsYXNzTGlzdC5hZGQoJ3NlY3Rpb24tLXRodW1ibmFpbC1pbWcnKTtcbiAgaW1nLnNyYyA9IGRhdGEuaW1nLnRodW1iO1xuICBpbWcuYWx0ID0gYCR7ZGF0YS5hbHR9IHRodW1ibmFpbCBzbGlkZWA7XG4gIGltZy5sb2FkaW5nID0gJ2xhenknO1xuXG4gIGNvbnN0IGRpdkxhenkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZGl2TGF6eS5jbGFzc0xpc3QuYWRkKCdzd2lwZXItbGF6eS1wcmVsb2FkZXInLCAnc3dpcGVyLWxhenktcHJlbG9hZGVyLXdoaXRlJyk7XG5cbiAgZGl2LmNsYXNzTGlzdC5hZGQoJ3N3aXBlci1zbGlkZScsICdzZWN0aW9uLS10aHVtYm5haWwtc2xpZGUnLCAndG9wLS10aHVtYm5haWwtc2xpZGUnKTtcbiAgZGl2LmFwcGVuZChkaXZMYXp5LCBpbWcpO1xuXG4gIHJldHVybiBkaXY7XG59XG5cbmNvbnN0IHNlY3Rpb25Ub3BXcmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcbiAgJy5zZWN0aW9uLS10b3Atd3JhcHBlcidcbikgYXMgSFRNTERpdkVsZW1lbnQ7XG5jb25zdCBzZWN0aW9uVG9wVGh1bWJzV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICcudG9wLS10aHVtYm5haWwtd3JhcHBlcidcbikgYXMgSFRNTERpdkVsZW1lbnQ7XG5cbnN3aXBlclRvcERhdGEubWFwKGRhdGEgPT4ge1xuICBzZWN0aW9uVG9wV3JhcHBlci5hcHBlbmRDaGlsZChjcmVhdGVUb3BTbGlkZShkYXRhKSk7XG4gIHNlY3Rpb25Ub3BUaHVtYnNXcmFwcGVyLmFwcGVuZENoaWxkKGNyZWF0ZVRvcFRodW1icyhkYXRhKSk7XG59KTtcblxuLyoqIENyZWF0ZSBTZWN0aW9uIEhhcmR3YXJlIFNsaWRlciAqL1xuY29uc3QgY3JlYXRlSGFyZHdhcmVTbGlkZSA9IChkYXRhOiBJU3dpcGVySGFyZHdhcmUpID0+IHtcbiAgY29uc3QgZGl2U2xpZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgY29uc3QgZGl2Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgY29uc3QgaW1nVG9wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7XG5cbiAgY29uc3QgZGl2RGVzYyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb25zdCBoMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyk7XG4gIGNvbnN0IHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIGNvbnN0IGRpdkJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb25zdCBidG5Nb3JlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICBjb25zdCBidG5CdXkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG5cbiAgaW1nVG9wLmNsYXNzTGlzdC5hZGQoJ3NsaWRlLWltZycpO1xuICBpbWdUb3Auc3JjID0gZGF0YS5pbWc7XG4gIGltZ1RvcC5hbHQgPSBgJHtkYXRhLmFsdH0gaW1hZ2Ugc2xpZGVgO1xuICBpbWdUb3AubG9hZGluZyA9ICdsYXp5JztcblxuICBkaXZEZXNjLmNsYXNzTGlzdC5hZGQoJ3NsaWRlLS1oYXJkd2FyZS1kZXNjJyk7XG5cbiAgaDEuY2xhc3NMaXN0LmFkZCgnc2xpZGUtdGl0bGUnKTtcbiAgaDEudGV4dENvbnRlbnQgPSBkYXRhLnRpdGxlO1xuXG4gIHAuY2xhc3NMaXN0LmFkZCgnc2xpZGUtdGV4dCcpO1xuICBwLnRleHRDb250ZW50ID0gZGF0YS50ZXh0O1xuXG4gIGRpdkJ0bi5jbGFzc0xpc3QuYWRkKCdzbGlkZS1idG4nKTtcblxuICBidG5Nb3JlLmNsYXNzTGlzdC5hZGQoJ2J1dHRvbi0tbGluaycsICdibHVlJyk7XG4gIGJ0bk1vcmUudGV4dENvbnRlbnQgPSBkYXRhLmJ0bi5tb3JlLnRleHQ7XG4gIGJ0bk1vcmUuaHJlZiA9IGRhdGEuYnRuLm1vcmUuaHJlZjtcbiAgZGl2QnRuLmFwcGVuZENoaWxkKGJ0bk1vcmUpO1xuICBpZiAoZGF0YS5idG4uYnV5KSB7XG4gICAgYnRuQnV5LmNsYXNzTGlzdC5hZGQoJ2J1dHRvbi0tbGluaycsICdvcmFuZ2UnKTtcbiAgICBidG5CdXkudGV4dENvbnRlbnQgPSBkYXRhLmJ0bi5idXkudGV4dDtcbiAgICBidG5CdXkuaHJlZiA9IGRhdGEuYnRuLmJ1eS5ocmVmO1xuICAgIGRpdkJ0bi5hcHBlbmRDaGlsZChidG5CdXkpO1xuICB9XG5cbiAgY29uc3QgZGl2TGF6eSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBkaXZMYXp5LmNsYXNzTGlzdC5hZGQoJ3N3aXBlci1sYXp5LXByZWxvYWRlcicsICdzd2lwZXItbGF6eS1wcmVsb2FkZXItd2hpdGUnKTtcblxuICBkaXZEZXNjLmFwcGVuZChoMSwgcCwgZGl2QnRuKTtcblxuICBkaXZTbGlkZS5jbGFzc0xpc3QuYWRkKCdzd2lwZXItc2xpZGUnLCAnc2VjdGlvbi0taGFyZHdhcmUtc2xpZGUnKTtcbiAgZGl2Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3NlY3Rpb24tLWhhcmR3YXJlLWNvbnRlbnQnKTtcbiAgZGl2Q29udGFpbmVyLmFwcGVuZChpbWdUb3AsIGRpdkRlc2MsIGRpdkxhenkpO1xuICBkaXZTbGlkZS5hcHBlbmRDaGlsZChkaXZDb250YWluZXIpO1xuICByZXR1cm4gZGl2U2xpZGU7XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVIYXJkd2FyZVRodW1icyhkYXRhOiBJU3dpcGVySGFyZHdhcmUpIHtcbiAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGNvbnN0IGRpdkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb25zdCBpbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgY29uc3QgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcblxuICBpbWcuY2xhc3NMaXN0LmFkZCgnc2VjdGlvbi0tdGh1bWJuYWlsLWltZycpO1xuICBpbWcuc3JjID0gZGF0YS5pbWc7XG4gIGltZy5hbHQgPSBgJHtkYXRhLmFsdH0gdGh1bWJuYWlsIHNsaWRlYDtcbiAgaW1nLmxvYWRpbmcgPSAnbGF6eSc7XG5cbiAgcC50ZXh0Q29udGVudCA9IGRhdGEuYWx0O1xuXG4gIGNvbnN0IGRpdkxhenkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZGl2TGF6eS5jbGFzc0xpc3QuYWRkKCdzd2lwZXItbGF6eS1wcmVsb2FkZXInLCAnc3dpcGVyLWxhenktcHJlbG9hZGVyLXdoaXRlJyk7XG5cbiAgZGl2Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ3NlY3Rpb24tLWhhcmR3YXJlLWNvbnRlbnQnKTtcbiAgZGl2Q29udGFpbmVyLmFwcGVuZChpbWcsIHApO1xuICBkaXYuY2xhc3NMaXN0LmFkZChcbiAgICAnc3dpcGVyLXNsaWRlJyxcbiAgICAnc2VjdGlvbi0tdGh1bWJuYWlsLXNsaWRlJyxcbiAgICAnaGFyZHdhcmUtLXRodW1ibmFpbC1zbGlkZSdcbiAgKTtcbiAgZGl2LmFwcGVuZChkaXZDb250YWluZXIpO1xuXG4gIHJldHVybiBkaXY7XG59XG5cbmNvbnN0IHNlY3Rpb25IYXJkd2FyZVdyYXBwZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAnLnNlY3Rpb24tLWhhcmR3YXJlLXdyYXBwZXInXG4pIGFzIEhUTUxEaXZFbGVtZW50O1xuY29uc3Qgc2VjdGlvbkhhcmR3YXJlVGh1bWJzV3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICcuaGFyZHdhcmUtLXRodW1ibmFpbC13cmFwcGVyJ1xuKSBhcyBIVE1MRGl2RWxlbWVudDtcblxuc3dpcGVySGFyZHdhcmVEYXRhLm1hcChkYXRhID0+IHtcbiAgc2VjdGlvbkhhcmR3YXJlV3JhcHBlci5hcHBlbmRDaGlsZChjcmVhdGVIYXJkd2FyZVNsaWRlKGRhdGEpKTtcbiAgc2VjdGlvbkhhcmR3YXJlVGh1bWJzV3JhcHBlci5hcHBlbmRDaGlsZChjcmVhdGVIYXJkd2FyZVRodW1icyhkYXRhKSk7XG59KTtcblxuLyoqIFN3aXBlciBUb3AgU2VjdGlvbiBQYXJhbWV0ZXJzICovXG5jb25zdCB0aHVtYnNQYXJhbXM6IFN3aXBlck9wdGlvbnMgPSB7XG4gIG1vZHVsZXM6IFtLZXlib2FyZCwgQXV0b3BsYXldLFxuICBsb29wOiB0cnVlLFxuICBzbGlkZXNQZXJWaWV3OiAnYXV0bycsXG4gIHNwYWNlQmV0d2VlbjogJzIlJyxcbiAgY2VudGVyZWRTbGlkZXM6IHRydWUsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGU6IHRydWUsXG4gIGdyYWJDdXJzb3I6IHRydWUsXG4gIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gIGtleWJvYXJkOiB0cnVlLFxuICBhdXRvcGxheToge1xuICAgIGRlbGF5OiAzMDAwLFxuICAgIHN0b3BPbkxhc3RTbGlkZTogdHJ1ZSxcbiAgICBkaXNhYmxlT25JbnRlcmFjdGlvbjogdHJ1ZSxcbiAgICBwYXVzZU9uTW91c2VFbnRlcjogdHJ1ZSxcbiAgICB3YWl0Rm9yVHJhbnNpdGlvbjogdHJ1ZVxuICB9LFxuICBzcGVlZDogNTAwXG59O1xuY29uc3QgdGh1bXNQYXJhbXNUb3A6IFN3aXBlck9wdGlvbnMgPSB7XG4gIGJyZWFrcG9pbnRzOiB7XG4gICAgNzAwOiB7XG4gICAgICBsb29wOiBmYWxzZSxcbiAgICAgIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgICAgIHNwYWNlQmV0d2VlbjogNyxcbiAgICAgIHNsaWRlc1BlclZpZXc6IHN3aXBlclRvcERhdGEubGVuZ3RoXG4gICAgfVxuICB9XG59O1xuY29uc3QgdGh1bXNQYXJhbXNIYXJkd2FyZTogU3dpcGVyT3B0aW9ucyA9IHtcbiAgYnJlYWtwb2ludHM6IHtcbiAgICA3MDA6IHtcbiAgICAgIGxvb3A6IGZhbHNlLFxuICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICAgICAgc3BhY2VCZXR3ZWVuOiA3LFxuICAgICAgc2xpZGVzUGVyVmlldzogc3dpcGVySGFyZHdhcmVEYXRhLmxlbmd0aFxuICAgIH1cbiAgfVxufTtcblxuY29uc3QgZ2FsbGVyeVRvcFRodW1icyA9IG5ldyBTd2lwZXIoJy5zZWN0aW9uLS10b3AtdGh1bWJuYWlscycsIHtcbiAgLi4udGh1bWJzUGFyYW1zLFxuICAuLi50aHVtc1BhcmFtc1RvcFxufSk7XG5jb25zdCBnYWxsZXJ5SGFyZHdhcmVUaHVtYnMgPSBuZXcgU3dpcGVyKCcuc2VjdGlvbi0taGFyZHdhcmUtdGh1bWJuYWlscycsIHtcbiAgLi4udGh1bWJzUGFyYW1zLFxuICAuLi50aHVtc1BhcmFtc0hhcmR3YXJlXG59KTtcblxuY29uc3Qgc2xpZGVyUGFyYW1zOiBTd2lwZXJPcHRpb25zID0ge1xuICBtb2R1bGVzOiBbRWZmZWN0RmFkZSwgVGh1bWJzXSxcbiAgZWZmZWN0OiAnZmFkZScsXG4gIGZhZGVFZmZlY3Q6IHtcbiAgICBjcm9zc0ZhZGU6IHRydWVcbiAgfSxcbiAgbG9vcDogdHJ1ZSxcbiAgdG91Y2hSYXRpbzogMCxcbiAgc3BlZWQ6IDUwMFxufTtcblxuY29uc3Qgc2xpZGVyUGFyYW1zVG9wOiBTd2lwZXJPcHRpb25zID0ge1xuICBsb29wZWRTbGlkZXM6IHN3aXBlclRvcERhdGEubGVuZ3RoLFxuICB0aHVtYnM6IHtcbiAgICBzd2lwZXI6IGdhbGxlcnlUb3BUaHVtYnNcbiAgfVxufTtcbmNvbnN0IHNsaWRlclBhcmFtc0hhcmR3YXJlOiBTd2lwZXJPcHRpb25zID0ge1xuICBsb29wZWRTbGlkZXM6IHN3aXBlckhhcmR3YXJlRGF0YS5sZW5ndGgsXG4gIHRodW1iczoge1xuICAgIHN3aXBlcjogZ2FsbGVyeUhhcmR3YXJlVGh1bWJzXG4gIH1cbn07XG5uZXcgU3dpcGVyKCcuc2VjdGlvbi0tdG9wLXN3aXBlcicsIHsgLi4uc2xpZGVyUGFyYW1zLCAuLi5zbGlkZXJQYXJhbXNUb3AgfSk7XG5uZXcgU3dpcGVyKCcuc2VjdGlvbi0taGFyZHdhcmUtc3dpcGVyJywgeyAuLi5zbGlkZXJQYXJhbXMsIC4uLnNsaWRlclBhcmFtc0hhcmR3YXJlIH0pO1xuIiwiLyoqXG4gKiBTU1IgV2luZG93IDQuMC4yXG4gKiBCZXR0ZXIgaGFuZGxpbmcgZm9yIHdpbmRvdyBvYmplY3QgaW4gU1NSIGVudmlyb25tZW50XG4gKiBodHRwczovL2dpdGh1Yi5jb20vbm9saW1pdHM0d2ViL3Nzci13aW5kb3dcbiAqXG4gKiBDb3B5cmlnaHQgMjAyMSwgVmxhZGltaXIgS2hhcmxhbXBpZGlcbiAqXG4gKiBMaWNlbnNlZCB1bmRlciBNSVRcbiAqXG4gKiBSZWxlYXNlZCBvbjogRGVjZW1iZXIgMTMsIDIwMjFcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICAgIHJldHVybiAob2JqICE9PSBudWxsICYmXG4gICAgICAgIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmXG4gICAgICAgICdjb25zdHJ1Y3RvcicgaW4gb2JqICYmXG4gICAgICAgIG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KTtcbn1cbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQgPSB7fSwgc3JjID0ge30pIHtcbiAgICBPYmplY3Qua2V5cyhzcmMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldFtrZXldID09PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgIHRhcmdldFtrZXldID0gc3JjW2tleV07XG4gICAgICAgIGVsc2UgaWYgKGlzT2JqZWN0KHNyY1trZXldKSAmJlxuICAgICAgICAgICAgaXNPYmplY3QodGFyZ2V0W2tleV0pICYmXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzcmNba2V5XSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgZXh0ZW5kKHRhcmdldFtrZXldLCBzcmNba2V5XSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuY29uc3Qgc3NyRG9jdW1lbnQgPSB7XG4gICAgYm9keToge30sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcigpIHsgfSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyKCkgeyB9LFxuICAgIGFjdGl2ZUVsZW1lbnQ6IHtcbiAgICAgICAgYmx1cigpIHsgfSxcbiAgICAgICAgbm9kZU5hbWU6ICcnLFxuICAgIH0sXG4gICAgcXVlcnlTZWxlY3RvcigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBxdWVyeVNlbGVjdG9yQWxsKCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfSxcbiAgICBnZXRFbGVtZW50QnlJZCgpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcbiAgICBjcmVhdGVFdmVudCgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluaXRFdmVudCgpIHsgfSxcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUVsZW1lbnQoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjaGlsZHJlbjogW10sXG4gICAgICAgICAgICBjaGlsZE5vZGVzOiBbXSxcbiAgICAgICAgICAgIHN0eWxlOiB7fSxcbiAgICAgICAgICAgIHNldEF0dHJpYnV0ZSgpIHsgfSxcbiAgICAgICAgICAgIGdldEVsZW1lbnRzQnlUYWdOYW1lKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBjcmVhdGVFbGVtZW50TlMoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9LFxuICAgIGltcG9ydE5vZGUoKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0sXG4gICAgbG9jYXRpb246IHtcbiAgICAgICAgaGFzaDogJycsXG4gICAgICAgIGhvc3Q6ICcnLFxuICAgICAgICBob3N0bmFtZTogJycsXG4gICAgICAgIGhyZWY6ICcnLFxuICAgICAgICBvcmlnaW46ICcnLFxuICAgICAgICBwYXRobmFtZTogJycsXG4gICAgICAgIHByb3RvY29sOiAnJyxcbiAgICAgICAgc2VhcmNoOiAnJyxcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICAgIGNvbnN0IGRvYyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHt9O1xuICAgIGV4dGVuZChkb2MsIHNzckRvY3VtZW50KTtcbiAgICByZXR1cm4gZG9jO1xufVxuXG5jb25zdCBzc3JXaW5kb3cgPSB7XG4gICAgZG9jdW1lbnQ6IHNzckRvY3VtZW50LFxuICAgIG5hdmlnYXRvcjoge1xuICAgICAgICB1c2VyQWdlbnQ6ICcnLFxuICAgIH0sXG4gICAgbG9jYXRpb246IHtcbiAgICAgICAgaGFzaDogJycsXG4gICAgICAgIGhvc3Q6ICcnLFxuICAgICAgICBob3N0bmFtZTogJycsXG4gICAgICAgIGhyZWY6ICcnLFxuICAgICAgICBvcmlnaW46ICcnLFxuICAgICAgICBwYXRobmFtZTogJycsXG4gICAgICAgIHByb3RvY29sOiAnJyxcbiAgICAgICAgc2VhcmNoOiAnJyxcbiAgICB9LFxuICAgIGhpc3Rvcnk6IHtcbiAgICAgICAgcmVwbGFjZVN0YXRlKCkgeyB9LFxuICAgICAgICBwdXNoU3RhdGUoKSB7IH0sXG4gICAgICAgIGdvKCkgeyB9LFxuICAgICAgICBiYWNrKCkgeyB9LFxuICAgIH0sXG4gICAgQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uIEN1c3RvbUV2ZW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXIoKSB7IH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcigpIHsgfSxcbiAgICBnZXRDb21wdXRlZFN0eWxlKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0UHJvcGVydHlWYWx1ZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH0sXG4gICAgSW1hZ2UoKSB7IH0sXG4gICAgRGF0ZSgpIHsgfSxcbiAgICBzY3JlZW46IHt9LFxuICAgIHNldFRpbWVvdXQoKSB7IH0sXG4gICAgY2xlYXJUaW1lb3V0KCkgeyB9LFxuICAgIG1hdGNoTWVkaWEoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9LFxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjaykge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xuICAgIH0sXG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFyVGltZW91dChpZCk7XG4gICAgfSxcbn07XG5mdW5jdGlvbiBnZXRXaW5kb3coKSB7XG4gICAgY29uc3Qgd2luID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fTtcbiAgICBleHRlbmQod2luLCBzc3JXaW5kb3cpO1xuICAgIHJldHVybiB3aW47XG59XG5cbmV4cG9ydCB7IGV4dGVuZCwgZ2V0RG9jdW1lbnQsIGdldFdpbmRvdywgc3NyRG9jdW1lbnQsIHNzcldpbmRvdyB9O1xuIiwiaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuZnVuY3Rpb24gZGVsZXRlUHJvcHMob2JqKSB7XG4gIGNvbnN0IG9iamVjdCA9IG9iajtcbiAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIG9iamVjdFtrZXldID0gbnVsbDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBubyBnZXR0ZXIgZm9yIG9iamVjdFxuICAgIH1cbiAgICB0cnkge1xuICAgICAgZGVsZXRlIG9iamVjdFtrZXldO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIHNvbWV0aGluZyBnb3Qgd3JvbmdcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gbmV4dFRpY2soY2FsbGJhY2ssIGRlbGF5ID0gMCkge1xuICByZXR1cm4gc2V0VGltZW91dChjYWxsYmFjaywgZGVsYXkpO1xufVxuZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gRGF0ZS5ub3coKTtcbn1cbmZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWwpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBzdHlsZTtcbiAgaWYgKHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSB7XG4gICAgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCk7XG4gIH1cbiAgaWYgKCFzdHlsZSAmJiBlbC5jdXJyZW50U3R5bGUpIHtcbiAgICBzdHlsZSA9IGVsLmN1cnJlbnRTdHlsZTtcbiAgfVxuICBpZiAoIXN0eWxlKSB7XG4gICAgc3R5bGUgPSBlbC5zdHlsZTtcbiAgfVxuICByZXR1cm4gc3R5bGU7XG59XG5mdW5jdGlvbiBnZXRUcmFuc2xhdGUoZWwsIGF4aXMgPSAneCcpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBtYXRyaXg7XG4gIGxldCBjdXJUcmFuc2Zvcm07XG4gIGxldCB0cmFuc2Zvcm1NYXRyaXg7XG4gIGNvbnN0IGN1clN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCk7XG4gIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSB7XG4gICAgY3VyVHJhbnNmb3JtID0gY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLndlYmtpdFRyYW5zZm9ybTtcbiAgICBpZiAoY3VyVHJhbnNmb3JtLnNwbGl0KCcsJykubGVuZ3RoID4gNikge1xuICAgICAgY3VyVHJhbnNmb3JtID0gY3VyVHJhbnNmb3JtLnNwbGl0KCcsICcpLm1hcChhID0+IGEucmVwbGFjZSgnLCcsICcuJykpLmpvaW4oJywgJyk7XG4gICAgfVxuICAgIC8vIFNvbWUgb2xkIHZlcnNpb25zIG9mIFdlYmtpdCBjaG9rZSB3aGVuICdub25lJyBpcyBwYXNzZWQ7IHBhc3NcbiAgICAvLyBlbXB0eSBzdHJpbmcgaW5zdGVhZCBpbiB0aGlzIGNhc2VcbiAgICB0cmFuc2Zvcm1NYXRyaXggPSBuZXcgd2luZG93LldlYktpdENTU01hdHJpeChjdXJUcmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogY3VyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICB0cmFuc2Zvcm1NYXRyaXggPSBjdXJTdHlsZS5Nb3pUcmFuc2Zvcm0gfHwgY3VyU3R5bGUuT1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5Nc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS5tc1RyYW5zZm9ybSB8fCBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgndHJhbnNmb3JtJykucmVwbGFjZSgndHJhbnNsYXRlKCcsICdtYXRyaXgoMSwgMCwgMCwgMSwnKTtcbiAgICBtYXRyaXggPSB0cmFuc2Zvcm1NYXRyaXgudG9TdHJpbmcoKS5zcGxpdCgnLCcpO1xuICB9XG4gIGlmIChheGlzID09PSAneCcpIHtcbiAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQxO1xuICAgIC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEyXSk7XG4gICAgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgZWxzZSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs0XSk7XG4gIH1cbiAgaWYgKGF4aXMgPT09ICd5Jykge1xuICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDI7XG4gICAgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTNdKTtcbiAgICAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzVdKTtcbiAgfVxuICByZXR1cm4gY3VyVHJhbnNmb3JtIHx8IDA7XG59XG5mdW5jdGlvbiBpc09iamVjdChvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgbyAhPT0gbnVsbCAmJiBvLmNvbnN0cnVjdG9yICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSkgPT09ICdPYmplY3QnO1xufVxuZnVuY3Rpb24gaXNOb2RlKG5vZGUpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LkhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG4gIH1cbiAgcmV0dXJuIG5vZGUgJiYgKG5vZGUubm9kZVR5cGUgPT09IDEgfHwgbm9kZS5ub2RlVHlwZSA9PT0gMTEpO1xufVxuZnVuY3Rpb24gZXh0ZW5kKC4uLmFyZ3MpIHtcbiAgY29uc3QgdG8gPSBPYmplY3QoYXJnc1swXSk7XG4gIGNvbnN0IG5vRXh0ZW5kID0gWydfX3Byb3RvX18nLCAnY29uc3RydWN0b3InLCAncHJvdG90eXBlJ107XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IG5leHRTb3VyY2UgPSBhcmdzW2ldO1xuICAgIGlmIChuZXh0U291cmNlICE9PSB1bmRlZmluZWQgJiYgbmV4dFNvdXJjZSAhPT0gbnVsbCAmJiAhaXNOb2RlKG5leHRTb3VyY2UpKSB7XG4gICAgICBjb25zdCBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhPYmplY3QobmV4dFNvdXJjZSkpLmZpbHRlcihrZXkgPT4gbm9FeHRlbmQuaW5kZXhPZihrZXkpIDwgMCk7XG4gICAgICBmb3IgKGxldCBuZXh0SW5kZXggPSAwLCBsZW4gPSBrZXlzQXJyYXkubGVuZ3RoOyBuZXh0SW5kZXggPCBsZW47IG5leHRJbmRleCArPSAxKSB7XG4gICAgICAgIGNvbnN0IG5leHRLZXkgPSBrZXlzQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmV4dFNvdXJjZSwgbmV4dEtleSk7XG4gICAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgaWYgKG5leHRTb3VyY2VbbmV4dEtleV0uX19zd2lwZXJfXykge1xuICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoIWlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSB7fTtcbiAgICAgICAgICAgIGlmIChuZXh0U291cmNlW25leHRLZXldLl9fc3dpcGVyX18pIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdG87XG59XG5mdW5jdGlvbiBzZXRDU1NQcm9wZXJ0eShlbCwgdmFyTmFtZSwgdmFyVmFsdWUpIHtcbiAgZWwuc3R5bGUuc2V0UHJvcGVydHkodmFyTmFtZSwgdmFyVmFsdWUpO1xufVxuZnVuY3Rpb24gYW5pbWF0ZUNTU01vZGVTY3JvbGwoe1xuICBzd2lwZXIsXG4gIHRhcmdldFBvc2l0aW9uLFxuICBzaWRlXG59KSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBzdGFydFBvc2l0aW9uID0gLXN3aXBlci50cmFuc2xhdGU7XG4gIGxldCBzdGFydFRpbWUgPSBudWxsO1xuICBsZXQgdGltZTtcbiAgY29uc3QgZHVyYXRpb24gPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJ25vbmUnO1xuICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoc3dpcGVyLmNzc01vZGVGcmFtZUlEKTtcbiAgY29uc3QgZGlyID0gdGFyZ2V0UG9zaXRpb24gPiBzdGFydFBvc2l0aW9uID8gJ25leHQnIDogJ3ByZXYnO1xuICBjb25zdCBpc091dE9mQm91bmQgPSAoY3VycmVudCwgdGFyZ2V0KSA9PiB7XG4gICAgcmV0dXJuIGRpciA9PT0gJ25leHQnICYmIGN1cnJlbnQgPj0gdGFyZ2V0IHx8IGRpciA9PT0gJ3ByZXYnICYmIGN1cnJlbnQgPD0gdGFyZ2V0O1xuICB9O1xuICBjb25zdCBhbmltYXRlID0gKCkgPT4ge1xuICAgIHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBpZiAoc3RhcnRUaW1lID09PSBudWxsKSB7XG4gICAgICBzdGFydFRpbWUgPSB0aW1lO1xuICAgIH1cbiAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCh0aW1lIC0gc3RhcnRUaW1lKSAvIGR1cmF0aW9uLCAxKSwgMCk7XG4gICAgY29uc3QgZWFzZVByb2dyZXNzID0gMC41IC0gTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDI7XG4gICAgbGV0IGN1cnJlbnRQb3NpdGlvbiA9IHN0YXJ0UG9zaXRpb24gKyBlYXNlUHJvZ3Jlc3MgKiAodGFyZ2V0UG9zaXRpb24gLSBzdGFydFBvc2l0aW9uKTtcbiAgICBpZiAoaXNPdXRPZkJvdW5kKGN1cnJlbnRQb3NpdGlvbiwgdGFyZ2V0UG9zaXRpb24pKSB7XG4gICAgICBjdXJyZW50UG9zaXRpb24gPSB0YXJnZXRQb3NpdGlvbjtcbiAgICB9XG4gICAgc3dpcGVyLndyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICBbc2lkZV06IGN1cnJlbnRQb3NpdGlvblxuICAgIH0pO1xuICAgIGlmIChpc091dE9mQm91bmQoY3VycmVudFBvc2l0aW9uLCB0YXJnZXRQb3NpdGlvbikpIHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnJztcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLm92ZXJmbG93ID0gJyc7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICAgIFtzaWRlXTogY3VycmVudFBvc2l0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoc3dpcGVyLmNzc01vZGVGcmFtZUlEKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpcGVyLmNzc01vZGVGcmFtZUlEID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcbiAgfTtcbiAgYW5pbWF0ZSgpO1xufVxuZnVuY3Rpb24gZ2V0U2xpZGVUcmFuc2Zvcm1FbChzbGlkZUVsKSB7XG4gIHJldHVybiBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtdHJhbnNmb3JtJykgfHwgc2xpZGVFbC5zaGFkb3dFbCAmJiBzbGlkZUVsLnNoYWRvd0VsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtdHJhbnNmb3JtJykgfHwgc2xpZGVFbDtcbn1cbmZ1bmN0aW9uIGZpbmRFbGVtZW50c0luRWxlbWVudHMoZWxlbWVudHMgPSBbXSwgc2VsZWN0b3IgPSAnJykge1xuICBjb25zdCBmb3VuZCA9IFtdO1xuICBlbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICBmb3VuZC5wdXNoKC4uLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbiAgfSk7XG4gIHJldHVybiBmb3VuZDtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRDaGlsZHJlbihlbGVtZW50LCBzZWxlY3RvciA9ICcnKSB7XG4gIHJldHVybiBbLi4uZWxlbWVudC5jaGlsZHJlbl0uZmlsdGVyKGVsID0+IGVsLm1hdGNoZXMoc2VsZWN0b3IpKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnLCBjbGFzc2VzID0gW10pIHtcbiAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGVsLmNsYXNzTGlzdC5hZGQoLi4uKEFycmF5LmlzQXJyYXkoY2xhc3NlcykgPyBjbGFzc2VzIDogW2NsYXNzZXNdKSk7XG4gIHJldHVybiBlbDtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRPZmZzZXQoZWwpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3QgYm94ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICBjb25zdCBjbGllbnRUb3AgPSBlbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgY29uc3QgY2xpZW50TGVmdCA9IGVsLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDA7XG4gIGNvbnN0IHNjcm9sbFRvcCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWSA6IGVsLnNjcm9sbFRvcDtcbiAgY29uc3Qgc2Nyb2xsTGVmdCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWCA6IGVsLnNjcm9sbExlZnQ7XG4gIHJldHVybiB7XG4gICAgdG9wOiBib3gudG9wICsgc2Nyb2xsVG9wIC0gY2xpZW50VG9wLFxuICAgIGxlZnQ6IGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCAtIGNsaWVudExlZnRcbiAgfTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRQcmV2QWxsKGVsLCBzZWxlY3Rvcikge1xuICBjb25zdCBwcmV2RWxzID0gW107XG4gIHdoaWxlIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgcHJldiA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChwcmV2Lm1hdGNoZXMoc2VsZWN0b3IpKSBwcmV2RWxzLnB1c2gocHJldik7XG4gICAgfSBlbHNlIHByZXZFbHMucHVzaChwcmV2KTtcbiAgICBlbCA9IHByZXY7XG4gIH1cbiAgcmV0dXJuIHByZXZFbHM7XG59XG5mdW5jdGlvbiBlbGVtZW50TmV4dEFsbChlbCwgc2VsZWN0b3IpIHtcbiAgY29uc3QgbmV4dEVscyA9IFtdO1xuICB3aGlsZSAoZWwubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgbmV4dCA9IGVsLm5leHRFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKG5leHQubWF0Y2hlcyhzZWxlY3RvcikpIG5leHRFbHMucHVzaChuZXh0KTtcbiAgICB9IGVsc2UgbmV4dEVscy5wdXNoKG5leHQpO1xuICAgIGVsID0gbmV4dDtcbiAgfVxuICByZXR1cm4gbmV4dEVscztcbn1cbmZ1bmN0aW9uIGVsZW1lbnRTdHlsZShlbCwgcHJvcCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xufVxuZnVuY3Rpb24gZWxlbWVudEluZGV4KGVsKSB7XG4gIGxldCBjaGlsZCA9IGVsO1xuICBsZXQgaTtcbiAgaWYgKGNoaWxkKSB7XG4gICAgaSA9IDA7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgd2hpbGUgKChjaGlsZCA9IGNoaWxkLnByZXZpb3VzU2libGluZykgIT09IG51bGwpIHtcbiAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkgaSArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gZWxlbWVudFBhcmVudHMoZWwsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBsZXQgcGFyZW50ID0gZWwucGFyZW50RWxlbWVudDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB3aGlsZSAocGFyZW50KSB7XG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAocGFyZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBwYXJlbnRzO1xufVxuZnVuY3Rpb24gZWxlbWVudFRyYW5zaXRpb25FbmQoZWwsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSBlbCkgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwoZWwsIGUpO1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG4gIGlmIChjYWxsYmFjaykge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG59XG5mdW5jdGlvbiBlbGVtZW50T3V0ZXJTaXplKGVsLCBzaXplLCBpbmNsdWRlTWFyZ2lucykge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgcmV0dXJuIGVsW3NpemUgPT09ICd3aWR0aCcgPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCddICsgcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShzaXplID09PSAnd2lkdGgnID8gJ21hcmdpbi1yaWdodCcgOiAnbWFyZ2luLXRvcCcpKSArIHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoc2l6ZSA9PT0gJ3dpZHRoJyA/ICdtYXJnaW4tbGVmdCcgOiAnbWFyZ2luLWJvdHRvbScpKTtcbiAgfVxuICByZXR1cm4gZWwub2Zmc2V0V2lkdGg7XG59XG5leHBvcnQgeyBhbmltYXRlQ1NTTW9kZVNjcm9sbCwgZGVsZXRlUHJvcHMsIG5leHRUaWNrLCBub3csIGdldFRyYW5zbGF0ZSwgaXNPYmplY3QsIGV4dGVuZCwgZ2V0Q29tcHV0ZWRTdHlsZSwgc2V0Q1NTUHJvcGVydHksIGdldFNsaWRlVHJhbnNmb3JtRWwsXG4vLyBkb21cbmZpbmRFbGVtZW50c0luRWxlbWVudHMsIGNyZWF0ZUVsZW1lbnQsIGVsZW1lbnRDaGlsZHJlbiwgZWxlbWVudE9mZnNldCwgZWxlbWVudFByZXZBbGwsIGVsZW1lbnROZXh0QWxsLCBlbGVtZW50U3R5bGUsIGVsZW1lbnRJbmRleCwgZWxlbWVudFBhcmVudHMsIGVsZW1lbnRUcmFuc2l0aW9uRW5kLCBlbGVtZW50T3V0ZXJTaXplIH07IiwiaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xubGV0IHN1cHBvcnQ7XG5mdW5jdGlvbiBjYWxjU3VwcG9ydCgpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgcmV0dXJuIHtcbiAgICBzbW9vdGhTY3JvbGw6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiAnc2Nyb2xsQmVoYXZpb3InIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSxcbiAgICB0b3VjaDogISEoJ29udG91Y2hzdGFydCcgaW4gd2luZG93IHx8IHdpbmRvdy5Eb2N1bWVudFRvdWNoICYmIGRvY3VtZW50IGluc3RhbmNlb2Ygd2luZG93LkRvY3VtZW50VG91Y2gpXG4gIH07XG59XG5mdW5jdGlvbiBnZXRTdXBwb3J0KCkge1xuICBpZiAoIXN1cHBvcnQpIHtcbiAgICBzdXBwb3J0ID0gY2FsY1N1cHBvcnQoKTtcbiAgfVxuICByZXR1cm4gc3VwcG9ydDtcbn1cbmV4cG9ydCB7IGdldFN1cHBvcnQgfTsiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IGdldFN1cHBvcnQgfSBmcm9tICcuL2dldC1zdXBwb3J0LmpzJztcbmxldCBkZXZpY2VDYWNoZWQ7XG5mdW5jdGlvbiBjYWxjRGV2aWNlKHtcbiAgdXNlckFnZW50XG59ID0ge30pIHtcbiAgY29uc3Qgc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IHBsYXRmb3JtID0gd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybTtcbiAgY29uc3QgdWEgPSB1c2VyQWdlbnQgfHwgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIGNvbnN0IGRldmljZSA9IHtcbiAgICBpb3M6IGZhbHNlLFxuICAgIGFuZHJvaWQ6IGZhbHNlXG4gIH07XG4gIGNvbnN0IHNjcmVlbldpZHRoID0gd2luZG93LnNjcmVlbi53aWR0aDtcbiAgY29uc3Qgc2NyZWVuSGVpZ2h0ID0gd2luZG93LnNjcmVlbi5oZWlnaHQ7XG4gIGNvbnN0IGFuZHJvaWQgPSB1YS5tYXRjaCgvKEFuZHJvaWQpOz9bXFxzXFwvXSsoW1xcZC5dKyk/Lyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgbGV0IGlwYWQgPSB1YS5tYXRjaCgvKGlQYWQpLipPU1xccyhbXFxkX10rKS8pO1xuICBjb25zdCBpcG9kID0gdWEubWF0Y2goLyhpUG9kKSguKk9TXFxzKFtcXGRfXSspKT8vKTtcbiAgY29uc3QgaXBob25lID0gIWlwYWQgJiYgdWEubWF0Y2goLyhpUGhvbmVcXHNPU3xpT1MpXFxzKFtcXGRfXSspLyk7XG4gIGNvbnN0IHdpbmRvd3MgPSBwbGF0Zm9ybSA9PT0gJ1dpbjMyJztcbiAgbGV0IG1hY29zID0gcGxhdGZvcm0gPT09ICdNYWNJbnRlbCc7XG5cbiAgLy8gaVBhZE9zIDEzIGZpeFxuICBjb25zdCBpUGFkU2NyZWVucyA9IFsnMTAyNHgxMzY2JywgJzEzNjZ4MTAyNCcsICc4MzR4MTE5NCcsICcxMTk0eDgzNCcsICc4MzR4MTExMicsICcxMTEyeDgzNCcsICc3Njh4MTAyNCcsICcxMDI0eDc2OCcsICc4MjB4MTE4MCcsICcxMTgweDgyMCcsICc4MTB4MTA4MCcsICcxMDgweDgxMCddO1xuICBpZiAoIWlwYWQgJiYgbWFjb3MgJiYgc3VwcG9ydC50b3VjaCAmJiBpUGFkU2NyZWVucy5pbmRleE9mKGAke3NjcmVlbldpZHRofXgke3NjcmVlbkhlaWdodH1gKSA+PSAwKSB7XG4gICAgaXBhZCA9IHVhLm1hdGNoKC8oVmVyc2lvbilcXC8oW1xcZC5dKykvKTtcbiAgICBpZiAoIWlwYWQpIGlwYWQgPSBbMCwgMSwgJzEzXzBfMCddO1xuICAgIG1hY29zID0gZmFsc2U7XG4gIH1cblxuICAvLyBBbmRyb2lkXG4gIGlmIChhbmRyb2lkICYmICF3aW5kb3dzKSB7XG4gICAgZGV2aWNlLm9zID0gJ2FuZHJvaWQnO1xuICAgIGRldmljZS5hbmRyb2lkID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXBhZCB8fCBpcGhvbmUgfHwgaXBvZCkge1xuICAgIGRldmljZS5vcyA9ICdpb3MnO1xuICAgIGRldmljZS5pb3MgPSB0cnVlO1xuICB9XG5cbiAgLy8gRXhwb3J0IG9iamVjdFxuICByZXR1cm4gZGV2aWNlO1xufVxuZnVuY3Rpb24gZ2V0RGV2aWNlKG92ZXJyaWRlcyA9IHt9KSB7XG4gIGlmICghZGV2aWNlQ2FjaGVkKSB7XG4gICAgZGV2aWNlQ2FjaGVkID0gY2FsY0RldmljZShvdmVycmlkZXMpO1xuICB9XG4gIHJldHVybiBkZXZpY2VDYWNoZWQ7XG59XG5leHBvcnQgeyBnZXREZXZpY2UgfTsiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmxldCBicm93c2VyO1xuZnVuY3Rpb24gY2FsY0Jyb3dzZXIoKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgbmVlZFBlcnNwZWN0aXZlRml4ID0gZmFsc2U7XG4gIGZ1bmN0aW9uIGlzU2FmYXJpKCkge1xuICAgIGNvbnN0IHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcbiAgICByZXR1cm4gdWEuaW5kZXhPZignc2FmYXJpJykgPj0gMCAmJiB1YS5pbmRleE9mKCdjaHJvbWUnKSA8IDAgJiYgdWEuaW5kZXhPZignYW5kcm9pZCcpIDwgMDtcbiAgfVxuICBpZiAoaXNTYWZhcmkoKSkge1xuICAgIGNvbnN0IHVhID0gU3RyaW5nKHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICBpZiAodWEuaW5jbHVkZXMoJ1ZlcnNpb24vJykpIHtcbiAgICAgIGNvbnN0IFttYWpvciwgbWlub3JdID0gdWEuc3BsaXQoJ1ZlcnNpb24vJylbMV0uc3BsaXQoJyAnKVswXS5zcGxpdCgnLicpLm1hcChudW0gPT4gTnVtYmVyKG51bSkpO1xuICAgICAgbmVlZFBlcnNwZWN0aXZlRml4ID0gbWFqb3IgPCAxNiB8fCBtYWpvciA9PT0gMTYgJiYgbWlub3IgPCAyO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIGlzU2FmYXJpOiBuZWVkUGVyc3BlY3RpdmVGaXggfHwgaXNTYWZhcmkoKSxcbiAgICBuZWVkUGVyc3BlY3RpdmVGaXgsXG4gICAgaXNXZWJWaWV3OiAvKGlQaG9uZXxpUG9kfGlQYWQpLipBcHBsZVdlYktpdCg/IS4qU2FmYXJpKS9pLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpXG4gIH07XG59XG5mdW5jdGlvbiBnZXRCcm93c2VyKCkge1xuICBpZiAoIWJyb3dzZXIpIHtcbiAgICBicm93c2VyID0gY2FsY0Jyb3dzZXIoKTtcbiAgfVxuICByZXR1cm4gYnJvd3Nlcjtcbn1cbmV4cG9ydCB7IGdldEJyb3dzZXIgfTsiLCIvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG9uKGV2ZW50cywgaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9uY2UoZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgZnVuY3Rpb24gb25jZUhhbmRsZXIoLi4uYXJncykge1xuICAgICAgc2VsZi5vZmYoZXZlbnRzLCBvbmNlSGFuZGxlcik7XG4gICAgICBpZiAob25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkpIHtcbiAgICAgICAgZGVsZXRlIG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5O1xuICAgICAgfVxuICAgICAgaGFuZGxlci5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9XG4gICAgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkgPSBoYW5kbGVyO1xuICAgIHJldHVybiBzZWxmLm9uKGV2ZW50cywgb25jZUhhbmRsZXIsIHByaW9yaXR5KTtcbiAgfSxcbiAgb25BbnkoaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpIDwgMCkge1xuICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnNbbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9mZkFueShoYW5kbGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0FueUxpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgaW5kZXggPSBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb2ZmKGV2ZW50cywgaGFuZGxlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKChldmVudEhhbmRsZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50SGFuZGxlciA9PT0gaGFuZGxlciB8fCBldmVudEhhbmRsZXIuX19lbWl0dGVyUHJveHkgJiYgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBlbWl0KC4uLmFyZ3MpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBsZXQgZXZlbnRzO1xuICAgIGxldCBkYXRhO1xuICAgIGxldCBjb250ZXh0O1xuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgZXZlbnRzID0gYXJnc1swXTtcbiAgICAgIGRhdGEgPSBhcmdzLnNsaWNlKDEsIGFyZ3MubGVuZ3RoKTtcbiAgICAgIGNvbnRleHQgPSBzZWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdLmV2ZW50cztcbiAgICAgIGRhdGEgPSBhcmdzWzBdLmRhdGE7XG4gICAgICBjb250ZXh0ID0gYXJnc1swXS5jb250ZXh0IHx8IHNlbGY7XG4gICAgfVxuICAgIGRhdGEudW5zaGlmdChjb250ZXh0KTtcbiAgICBjb25zdCBldmVudHNBcnJheSA9IEFycmF5LmlzQXJyYXkoZXZlbnRzKSA/IGV2ZW50cyA6IGV2ZW50cy5zcGxpdCgnICcpO1xuICAgIGV2ZW50c0FycmF5LmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5mb3JFYWNoKGV2ZW50SGFuZGxlciA9PiB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIFtldmVudCwgLi4uZGF0YV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVycyAmJiBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goZXZlbnRIYW5kbGVyID0+IHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9XG59OyIsImltcG9ydCB1cGRhdGVTaXplIGZyb20gJy4vdXBkYXRlU2l6ZS5qcyc7XG5pbXBvcnQgdXBkYXRlU2xpZGVzIGZyb20gJy4vdXBkYXRlU2xpZGVzLmpzJztcbmltcG9ydCB1cGRhdGVBdXRvSGVpZ2h0IGZyb20gJy4vdXBkYXRlQXV0b0hlaWdodC5qcyc7XG5pbXBvcnQgdXBkYXRlU2xpZGVzT2Zmc2V0IGZyb20gJy4vdXBkYXRlU2xpZGVzT2Zmc2V0LmpzJztcbmltcG9ydCB1cGRhdGVTbGlkZXNQcm9ncmVzcyBmcm9tICcuL3VwZGF0ZVNsaWRlc1Byb2dyZXNzLmpzJztcbmltcG9ydCB1cGRhdGVQcm9ncmVzcyBmcm9tICcuL3VwZGF0ZVByb2dyZXNzLmpzJztcbmltcG9ydCB1cGRhdGVTbGlkZXNDbGFzc2VzIGZyb20gJy4vdXBkYXRlU2xpZGVzQ2xhc3Nlcy5qcyc7XG5pbXBvcnQgdXBkYXRlQWN0aXZlSW5kZXggZnJvbSAnLi91cGRhdGVBY3RpdmVJbmRleC5qcyc7XG5pbXBvcnQgdXBkYXRlQ2xpY2tlZFNsaWRlIGZyb20gJy4vdXBkYXRlQ2xpY2tlZFNsaWRlLmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgdXBkYXRlU2l6ZSxcbiAgdXBkYXRlU2xpZGVzLFxuICB1cGRhdGVBdXRvSGVpZ2h0LFxuICB1cGRhdGVTbGlkZXNPZmZzZXQsXG4gIHVwZGF0ZVNsaWRlc1Byb2dyZXNzLFxuICB1cGRhdGVQcm9ncmVzcyxcbiAgdXBkYXRlU2xpZGVzQ2xhc3NlcyxcbiAgdXBkYXRlQWN0aXZlSW5kZXgsXG4gIHVwZGF0ZUNsaWNrZWRTbGlkZVxufTsiLCJpbXBvcnQgeyBlbGVtZW50U3R5bGUgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHdpZHRoO1xuICBsZXQgaGVpZ2h0O1xuICBjb25zdCBlbCA9IHN3aXBlci5lbDtcbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSBudWxsKSB7XG4gICAgd2lkdGggPSBzd2lwZXIucGFyYW1zLndpZHRoO1xuICB9IGVsc2Uge1xuICAgIHdpZHRoID0gZWwuY2xpZW50V2lkdGg7XG4gIH1cbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy5oZWlnaHQgIT09IG51bGwpIHtcbiAgICBoZWlnaHQgPSBzd2lwZXIucGFyYW1zLmhlaWdodDtcbiAgfSBlbHNlIHtcbiAgICBoZWlnaHQgPSBlbC5jbGllbnRIZWlnaHQ7XG4gIH1cbiAgaWYgKHdpZHRoID09PSAwICYmIHN3aXBlci5pc0hvcml6b250YWwoKSB8fCBoZWlnaHQgPT09IDAgJiYgc3dpcGVyLmlzVmVydGljYWwoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFN1YnRyYWN0IHBhZGRpbmdzXG4gIHdpZHRoID0gd2lkdGggLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLWxlZnQnKSB8fCAwLCAxMCkgLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLXJpZ2h0JykgfHwgMCwgMTApO1xuICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLXRvcCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctYm90dG9tJykgfHwgMCwgMTApO1xuICBpZiAoTnVtYmVyLmlzTmFOKHdpZHRoKSkgd2lkdGggPSAwO1xuICBpZiAoTnVtYmVyLmlzTmFOKGhlaWdodCkpIGhlaWdodCA9IDA7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHNpemU6IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHdpZHRoIDogaGVpZ2h0XG4gIH0pO1xufSIsImltcG9ydCB7IGVsZW1lbnRDaGlsZHJlbiwgZWxlbWVudE91dGVyU2l6ZSwgZWxlbWVudFN0eWxlLCBzZXRDU1NQcm9wZXJ0eSB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVTbGlkZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGZ1bmN0aW9uIGdldERpcmVjdGlvbkxhYmVsKHByb3BlcnR5KSB7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgcmV0dXJuIHByb3BlcnR5O1xuICAgIH1cbiAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICByZXR1cm4ge1xuICAgICAgJ3dpZHRoJzogJ2hlaWdodCcsXG4gICAgICAnbWFyZ2luLXRvcCc6ICdtYXJnaW4tbGVmdCcsXG4gICAgICAnbWFyZ2luLWJvdHRvbSAnOiAnbWFyZ2luLXJpZ2h0JyxcbiAgICAgICdtYXJnaW4tbGVmdCc6ICdtYXJnaW4tdG9wJyxcbiAgICAgICdtYXJnaW4tcmlnaHQnOiAnbWFyZ2luLWJvdHRvbScsXG4gICAgICAncGFkZGluZy1sZWZ0JzogJ3BhZGRpbmctdG9wJyxcbiAgICAgICdwYWRkaW5nLXJpZ2h0JzogJ3BhZGRpbmctYm90dG9tJyxcbiAgICAgICdtYXJnaW5SaWdodCc6ICdtYXJnaW5Cb3R0b20nXG4gICAgfVtwcm9wZXJ0eV07XG4gIH1cbiAgZnVuY3Rpb24gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShub2RlLCBsYWJlbCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KG5vZGUuZ2V0UHJvcGVydHlWYWx1ZShnZXREaXJlY3Rpb25MYWJlbChsYWJlbCkpIHx8IDApO1xuICB9XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGNvbnN0IHtcbiAgICB3cmFwcGVyRWwsXG4gICAgc2xpZGVzRWwsXG4gICAgc2l6ZTogc3dpcGVyU2l6ZSxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICB3cm9uZ1JUTFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBjb25zdCBwcmV2aW91c1NsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgY29uc3Qgc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gIGNvbnN0IHNsaWRlc0xlbmd0aCA9IGlzVmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzbGlkZXMubGVuZ3RoO1xuICBsZXQgc25hcEdyaWQgPSBbXTtcbiAgY29uc3Qgc2xpZGVzR3JpZCA9IFtdO1xuICBjb25zdCBzbGlkZXNTaXplc0dyaWQgPSBbXTtcbiAgbGV0IG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmU7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0QmVmb3JlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2Zmc2V0QmVmb3JlID0gcGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZS5jYWxsKHN3aXBlcik7XG4gIH1cbiAgbGV0IG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyO1xuICBpZiAodHlwZW9mIG9mZnNldEFmdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIuY2FsbChzd2lwZXIpO1xuICB9XG4gIGNvbnN0IHByZXZpb3VzU25hcEdyaWRMZW5ndGggPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICBjb25zdCBwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGggPSBzd2lwZXIuc2xpZGVzR3JpZC5sZW5ndGg7XG4gIGxldCBzcGFjZUJldHdlZW4gPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICBsZXQgc2xpZGVQb3NpdGlvbiA9IC1vZmZzZXRCZWZvcmU7XG4gIGxldCBwcmV2U2xpZGVTaXplID0gMDtcbiAgbGV0IGluZGV4ID0gMDtcbiAgaWYgKHR5cGVvZiBzd2lwZXJTaXplID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycgJiYgc3BhY2VCZXR3ZWVuLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4ucmVwbGFjZSgnJScsICcnKSkgLyAxMDAgKiBzd2lwZXJTaXplO1xuICB9XG4gIHN3aXBlci52aXJ0dWFsU2l6ZSA9IC1zcGFjZUJldHdlZW47XG5cbiAgLy8gcmVzZXQgbWFyZ2luc1xuICBzbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBpZiAocnRsKSB7XG4gICAgICBzbGlkZUVsLnN0eWxlLm1hcmdpbkxlZnQgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5SaWdodCA9ICcnO1xuICAgIH1cbiAgICBzbGlkZUVsLnN0eWxlLm1hcmdpbkJvdHRvbSA9ICcnO1xuICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luVG9wID0gJyc7XG4gIH0pO1xuXG4gIC8vIHJlc2V0IGNzc01vZGUgb2Zmc2V0c1xuICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZScsICcnKTtcbiAgICBzZXRDU1NQcm9wZXJ0eSh3cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYWZ0ZXInLCAnJyk7XG4gIH1cbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMSAmJiBzd2lwZXIuZ3JpZDtcbiAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgc3dpcGVyLmdyaWQuaW5pdFNsaWRlcyhzbGlkZXNMZW5ndGgpO1xuICB9XG5cbiAgLy8gQ2FsYyBzbGlkZXNcbiAgbGV0IHNsaWRlU2l6ZTtcbiAgY29uc3Qgc2hvdWxkUmVzZXRTbGlkZVNpemUgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5icmVha3BvaW50cyAmJiBPYmplY3Qua2V5cyhwYXJhbXMuYnJlYWtwb2ludHMpLmZpbHRlcihrZXkgPT4ge1xuICAgIHJldHVybiB0eXBlb2YgcGFyYW1zLmJyZWFrcG9pbnRzW2tleV0uc2xpZGVzUGVyVmlldyAhPT0gJ3VuZGVmaW5lZCc7XG4gIH0pLmxlbmd0aCA+IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzTGVuZ3RoOyBpICs9IDEpIHtcbiAgICBzbGlkZVNpemUgPSAwO1xuICAgIGxldCBzbGlkZTtcbiAgICBpZiAoc2xpZGVzW2ldKSBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5ncmlkLnVwZGF0ZVNsaWRlKGksIHNsaWRlLCBzbGlkZXNMZW5ndGgsIGdldERpcmVjdGlvbkxhYmVsKTtcbiAgICB9XG4gICAgaWYgKHNsaWRlc1tpXSAmJiBlbGVtZW50U3R5bGUoc2xpZGUsICdkaXNwbGF5JykgPT09ICdub25lJykgY29udGludWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgICBpZiAoc2hvdWxkUmVzZXRTbGlkZVNpemUpIHtcbiAgICAgICAgc2xpZGVzW2ldLnN0eWxlW2dldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGBgO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2xpZGVTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKHNsaWRlKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRUcmFuc2Zvcm0gPSBzbGlkZS5zdHlsZS50cmFuc2Zvcm07XG4gICAgICBjb25zdCBjdXJyZW50V2ViS2l0VHJhbnNmb3JtID0gc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUudHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICAgICAgc2xpZGVTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZWxlbWVudE91dGVyU2l6ZShzbGlkZSwgJ3dpZHRoJywgdHJ1ZSkgOiBlbGVtZW50T3V0ZXJTaXplKHNsaWRlLCAnaGVpZ2h0JywgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgY29uc3Qgd2lkdGggPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnd2lkdGgnKTtcbiAgICAgICAgY29uc3QgcGFkZGluZ0xlZnQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAncGFkZGluZy1sZWZ0Jyk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdSaWdodCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgIGNvbnN0IG1hcmdpbkxlZnQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnbWFyZ2luLWxlZnQnKTtcbiAgICAgICAgY29uc3QgbWFyZ2luUmlnaHQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnbWFyZ2luLXJpZ2h0Jyk7XG4gICAgICAgIGNvbnN0IGJveFNpemluZyA9IHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2JveC1zaXppbmcnKTtcbiAgICAgICAgaWYgKGJveFNpemluZyAmJiBib3hTaXppbmcgPT09ICdib3JkZXItYm94Jykge1xuICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGNsaWVudFdpZHRoLFxuICAgICAgICAgICAgb2Zmc2V0V2lkdGhcbiAgICAgICAgICB9ID0gc2xpZGU7XG4gICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodCArIChvZmZzZXRXaWR0aCAtIGNsaWVudFdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUudHJhbnNmb3JtID0gY3VycmVudFRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm07XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZVNpemUgPSAoc3dpcGVyU2l6ZSAtIChwYXJhbXMuc2xpZGVzUGVyVmlldyAtIDEpICogc3BhY2VCZXR3ZWVuKSAvIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcbiAgICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgICAgc2xpZGVzW2ldLnN0eWxlW2dldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGAke3NsaWRlU2l6ZX1weGA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUgPSBzbGlkZVNpemU7XG4gICAgfVxuICAgIHNsaWRlc1NpemVzR3JpZC5wdXNoKHNsaWRlU2l6ZSk7XG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgLyAyICsgcHJldlNsaWRlU2l6ZSAvIDIgKyBzcGFjZUJldHdlZW47XG4gICAgICBpZiAocHJldlNsaWRlU2l6ZSA9PT0gMCAmJiBpICE9PSAwKSBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiAtIHN3aXBlclNpemUgLyAyIC0gc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKGkgPT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICBpZiAoTWF0aC5hYnMoc2xpZGVQb3NpdGlvbikgPCAxIC8gMTAwMCkgc2xpZGVQb3NpdGlvbiA9IDA7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7XG4gICAgICBpZiAoaW5kZXggJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDApIHNuYXBHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmICgoaW5kZXggLSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgaW5kZXgpKSAlIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDApIHNuYXBHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSArIHNwYWNlQmV0d2VlbjtcbiAgICB9XG4gICAgc3dpcGVyLnZpcnR1YWxTaXplICs9IHNsaWRlU2l6ZSArIHNwYWNlQmV0d2VlbjtcbiAgICBwcmV2U2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIGluZGV4ICs9IDE7XG4gIH1cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5tYXgoc3dpcGVyLnZpcnR1YWxTaXplLCBzd2lwZXJTaXplKSArIG9mZnNldEFmdGVyO1xuICBpZiAocnRsICYmIHdyb25nUlRMICYmIChwYXJhbXMuZWZmZWN0ID09PSAnc2xpZGUnIHx8IHBhcmFtcy5lZmZlY3QgPT09ICdjb3ZlcmZsb3cnKSkge1xuICAgIHdyYXBwZXJFbC5zdHlsZS53aWR0aCA9IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW59cHhgO1xuICB9XG4gIGlmIChwYXJhbXMuc2V0V3JhcHBlclNpemUpIHtcbiAgICB3cmFwcGVyRWwuc3R5bGVbZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbn1weGA7XG4gIH1cbiAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgc3dpcGVyLmdyaWQudXBkYXRlV3JhcHBlclNpemUoc2xpZGVTaXplLCBzbmFwR3JpZCwgZ2V0RGlyZWN0aW9uTGFiZWwpO1xuICB9XG5cbiAgLy8gUmVtb3ZlIGxhc3QgZ3JpZCBlbGVtZW50cyBkZXBlbmRpbmcgb24gd2lkdGhcbiAgaWYgKCFwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICBjb25zdCBuZXdTbGlkZXNHcmlkID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbmFwR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgbGV0IHNsaWRlc0dyaWRJdGVtID0gc25hcEdyaWRbaV07XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVzR3JpZEl0ZW0gPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgIGlmIChzbmFwR3JpZFtpXSA8PSBzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKSB7XG4gICAgICAgIG5ld1NsaWRlc0dyaWQucHVzaChzbGlkZXNHcmlkSXRlbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHNuYXBHcmlkID0gbmV3U2xpZGVzR3JpZDtcbiAgICBpZiAoTWF0aC5mbG9vcihzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKSAtIE1hdGguZmxvb3Ioc25hcEdyaWRbc25hcEdyaWQubGVuZ3RoIC0gMV0pID4gMSkge1xuICAgICAgc25hcEdyaWQucHVzaChzd2lwZXIudmlydHVhbFNpemUgLSBzd2lwZXJTaXplKTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzVmlydHVhbCAmJiBwYXJhbXMubG9vcCkge1xuICAgIGNvbnN0IHNpemUgPSBzbGlkZXNTaXplc0dyaWRbMF0gKyBzcGFjZUJldHdlZW47XG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEpIHtcbiAgICAgIGNvbnN0IGdyb3VwcyA9IE1hdGguY2VpbCgoc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQWZ0ZXIpIC8gcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgIGNvbnN0IGdyb3VwU2l6ZSA9IHNpemUgKiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwczsgaSArPSAxKSB7XG4gICAgICAgIHNuYXBHcmlkLnB1c2goc25hcEdyaWRbc25hcEdyaWQubGVuZ3RoIC0gMV0gKyBncm91cFNpemUpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0FmdGVyOyBpICs9IDEpIHtcbiAgICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDEpIHtcbiAgICAgICAgc25hcEdyaWQucHVzaChzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSArIHNpemUpO1xuICAgICAgfVxuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAxXSArIHNpemUpO1xuICAgICAgc3dpcGVyLnZpcnR1YWxTaXplICs9IHNpemU7XG4gICAgfVxuICB9XG4gIGlmIChzbmFwR3JpZC5sZW5ndGggPT09IDApIHNuYXBHcmlkID0gWzBdO1xuICBpZiAocGFyYW1zLnNwYWNlQmV0d2VlbiAhPT0gMCkge1xuICAgIGNvbnN0IGtleSA9IHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBydGwgPyAnbWFyZ2luTGVmdCcgOiBnZXREaXJlY3Rpb25MYWJlbCgnbWFyZ2luUmlnaHQnKTtcbiAgICBzbGlkZXMuZmlsdGVyKChfLCBzbGlkZUluZGV4KSA9PiB7XG4gICAgICBpZiAoIXBhcmFtcy5jc3NNb2RlIHx8IHBhcmFtcy5sb29wKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmIChzbGlkZUluZGV4ID09PSBzbGlkZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KS5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgc2xpZGVFbC5zdHlsZVtrZXldID0gYCR7c3BhY2VCZXR3ZWVufXB4YDtcbiAgICB9KTtcbiAgfVxuICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlc0JvdW5kcykge1xuICAgIGxldCBhbGxTbGlkZXNTaXplID0gMDtcbiAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaChzbGlkZVNpemVWYWx1ZSA9PiB7XG4gICAgICBhbGxTbGlkZXNTaXplICs9IHNsaWRlU2l6ZVZhbHVlICsgKHBhcmFtcy5zcGFjZUJldHdlZW4gPyBwYXJhbXMuc3BhY2VCZXR3ZWVuIDogMCk7XG4gICAgfSk7XG4gICAgYWxsU2xpZGVzU2l6ZSAtPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICAgIGNvbnN0IG1heFNuYXAgPSBhbGxTbGlkZXNTaXplIC0gc3dpcGVyU2l6ZTtcbiAgICBzbmFwR3JpZCA9IHNuYXBHcmlkLm1hcChzbmFwID0+IHtcbiAgICAgIGlmIChzbmFwIDwgMCkgcmV0dXJuIC1vZmZzZXRCZWZvcmU7XG4gICAgICBpZiAoc25hcCA+IG1heFNuYXApIHJldHVybiBtYXhTbmFwICsgb2Zmc2V0QWZ0ZXI7XG4gICAgICByZXR1cm4gc25hcDtcbiAgICB9KTtcbiAgfVxuICBpZiAocGFyYW1zLmNlbnRlckluc3VmZmljaWVudFNsaWRlcykge1xuICAgIGxldCBhbGxTbGlkZXNTaXplID0gMDtcbiAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaChzbGlkZVNpemVWYWx1ZSA9PiB7XG4gICAgICBhbGxTbGlkZXNTaXplICs9IHNsaWRlU2l6ZVZhbHVlICsgKHBhcmFtcy5zcGFjZUJldHdlZW4gPyBwYXJhbXMuc3BhY2VCZXR3ZWVuIDogMCk7XG4gICAgfSk7XG4gICAgYWxsU2xpZGVzU2l6ZSAtPSBwYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICAgIGlmIChhbGxTbGlkZXNTaXplIDwgc3dpcGVyU2l6ZSkge1xuICAgICAgY29uc3QgYWxsU2xpZGVzT2Zmc2V0ID0gKHN3aXBlclNpemUgLSBhbGxTbGlkZXNTaXplKSAvIDI7XG4gICAgICBzbmFwR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgICAgc25hcEdyaWRbc25hcEluZGV4XSA9IHNuYXAgLSBhbGxTbGlkZXNPZmZzZXQ7XG4gICAgICB9KTtcbiAgICAgIHNsaWRlc0dyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICAgIHNsaWRlc0dyaWRbc25hcEluZGV4XSA9IHNuYXAgKyBhbGxTbGlkZXNPZmZzZXQ7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBzbGlkZXMsXG4gICAgc25hcEdyaWQsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBzbGlkZXNTaXplc0dyaWRcbiAgfSk7XG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNzc01vZGUgJiYgIXBhcmFtcy5jZW50ZXJlZFNsaWRlc0JvdW5kcykge1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1iZWZvcmUnLCBgJHstc25hcEdyaWRbMF19cHhgKTtcbiAgICBzZXRDU1NQcm9wZXJ0eSh3cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYWZ0ZXInLCBgJHtzd2lwZXIuc2l6ZSAvIDIgLSBzbGlkZXNTaXplc0dyaWRbc2xpZGVzU2l6ZXNHcmlkLmxlbmd0aCAtIDFdIC8gMn1weGApO1xuICAgIGNvbnN0IGFkZFRvU25hcEdyaWQgPSAtc3dpcGVyLnNuYXBHcmlkWzBdO1xuICAgIGNvbnN0IGFkZFRvU2xpZGVzR3JpZCA9IC1zd2lwZXIuc2xpZGVzR3JpZFswXTtcbiAgICBzd2lwZXIuc25hcEdyaWQgPSBzd2lwZXIuc25hcEdyaWQubWFwKHYgPT4gdiArIGFkZFRvU25hcEdyaWQpO1xuICAgIHN3aXBlci5zbGlkZXNHcmlkID0gc3dpcGVyLnNsaWRlc0dyaWQubWFwKHYgPT4gdiArIGFkZFRvU2xpZGVzR3JpZCk7XG4gIH1cbiAgaWYgKHNsaWRlc0xlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNMZW5ndGgpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVzTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbmFwR3JpZExlbmd0aCkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgc3dpcGVyLmVtaXQoJ3NuYXBHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHNsaWRlc0dyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGgpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVzR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgfVxuICBpZiAoIWlzVmlydHVhbCAmJiAhcGFyYW1zLmNzc01vZGUgJiYgKHBhcmFtcy5lZmZlY3QgPT09ICdzbGlkZScgfHwgcGFyYW1zLmVmZmVjdCA9PT0gJ2ZhZGUnKSkge1xuICAgIGNvbnN0IGJhY2tGYWNlSGlkZGVuQ2xhc3MgPSBgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31iYWNrZmFjZS1oaWRkZW5gO1xuICAgIGNvbnN0IGhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkID0gc3dpcGVyLmVsLmNsYXNzTGlzdC5jb250YWlucyhiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICBpZiAoc2xpZGVzTGVuZ3RoIDw9IHBhcmFtcy5tYXhCYWNrZmFjZUhpZGRlblNsaWRlcykge1xuICAgICAgaWYgKCFoYXNDbGFzc0JhY2tmYWNlQ2xhc3NBZGRlZCkgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoYmFja0ZhY2VIaWRkZW5DbGFzcyk7XG4gICAgfSBlbHNlIGlmIChoYXNDbGFzc0JhY2tmYWNlQ2xhc3NBZGRlZCkge1xuICAgICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoYmFja0ZhY2VIaWRkZW5DbGFzcyk7XG4gICAgfVxuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlQXV0b0hlaWdodChzcGVlZCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBhY3RpdmVTbGlkZXMgPSBbXTtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGxldCBuZXdIZWlnaHQgPSAwO1xuICBsZXQgaTtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ251bWJlcicpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIH0gZWxzZSBpZiAoc3BlZWQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgfVxuICBjb25zdCBnZXRTbGlkZUJ5SW5kZXggPSBpbmRleCA9PiB7XG4gICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgcmV0dXJuIHN3aXBlci5zbGlkZXMuZmlsdGVyKGVsID0+IHBhcnNlSW50KGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApID09PSBpbmRleClbMF07XG4gICAgfVxuICAgIHJldHVybiBzd2lwZXIuc2xpZGVzW2luZGV4XTtcbiAgfTtcbiAgLy8gRmluZCBzbGlkZXMgY3VycmVudGx5IGluIHZpZXdcbiAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgKHN3aXBlci52aXNpYmxlU2xpZGVzIHx8IFtdKS5mb3JFYWNoKHNsaWRlID0+IHtcbiAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4ICsgaTtcbiAgICAgICAgaWYgKGluZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggJiYgIWlzVmlydHVhbCkgYnJlYWs7XG4gICAgICAgIGFjdGl2ZVNsaWRlcy5wdXNoKGdldFNsaWRlQnlJbmRleChpbmRleCkpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBhY3RpdmVTbGlkZXMucHVzaChnZXRTbGlkZUJ5SW5kZXgoc3dpcGVyLmFjdGl2ZUluZGV4KSk7XG4gIH1cblxuICAvLyBGaW5kIG5ldyBoZWlnaHQgZnJvbSBoaWdoZXN0IHNsaWRlIGluIHZpZXdcbiAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZVNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2YgYWN0aXZlU2xpZGVzW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgaGVpZ2h0ID0gYWN0aXZlU2xpZGVzW2ldLm9mZnNldEhlaWdodDtcbiAgICAgIG5ld0hlaWdodCA9IGhlaWdodCA+IG5ld0hlaWdodCA/IGhlaWdodCA6IG5ld0hlaWdodDtcbiAgICB9XG4gIH1cblxuICAvLyBVcGRhdGUgSGVpZ2h0XG4gIGlmIChuZXdIZWlnaHQgfHwgbmV3SGVpZ2h0ID09PSAwKSBzd2lwZXIud3JhcHBlckVsLnN0eWxlLmhlaWdodCA9IGAke25ld0hlaWdodH1weGA7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlU2xpZGVzT2Zmc2V0KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgY29uc3QgbWludXNPZmZzZXQgPSBzd2lwZXIuaXNFbGVtZW50ID8gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc3dpcGVyLndyYXBwZXJFbC5vZmZzZXRMZWZ0IDogc3dpcGVyLndyYXBwZXJFbC5vZmZzZXRUb3AgOiAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZU9mZnNldCA9IChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZXNbaV0ub2Zmc2V0TGVmdCA6IHNsaWRlc1tpXS5vZmZzZXRUb3ApIC0gbWludXNPZmZzZXQ7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUgPSB0aGlzICYmIHRoaXMudHJhbnNsYXRlIHx8IDApIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3Qge1xuICAgIHNsaWRlcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBzbmFwR3JpZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc2xpZGVzLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICBpZiAodHlwZW9mIHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldCA9PT0gJ3VuZGVmaW5lZCcpIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgbGV0IG9mZnNldENlbnRlciA9IC10cmFuc2xhdGU7XG4gIGlmIChydGwpIG9mZnNldENlbnRlciA9IHRyYW5zbGF0ZTtcblxuICAvLyBWaXNpYmxlIFNsaWRlc1xuICBzbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBzbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgfSk7XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcyA9IFtdO1xuICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHNsaWRlID0gc2xpZGVzW2ldO1xuICAgIGxldCBzbGlkZU9mZnNldCA9IHNsaWRlLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgIGlmIChwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlT2Zmc2V0IC09IHNsaWRlc1swXS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICB9XG4gICAgY29uc3Qgc2xpZGVQcm9ncmVzcyA9IChvZmZzZXRDZW50ZXIgKyAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIDogMCkgLSBzbGlkZU9mZnNldCkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbik7XG4gICAgY29uc3Qgb3JpZ2luYWxTbGlkZVByb2dyZXNzID0gKG9mZnNldENlbnRlciAtIHNuYXBHcmlkWzBdICsgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IDApIC0gc2xpZGVPZmZzZXQpIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHBhcmFtcy5zcGFjZUJldHdlZW4pO1xuICAgIGNvbnN0IHNsaWRlQmVmb3JlID0gLShvZmZzZXRDZW50ZXIgLSBzbGlkZU9mZnNldCk7XG4gICAgY29uc3Qgc2xpZGVBZnRlciA9IHNsaWRlQmVmb3JlICsgc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICBjb25zdCBpc1Zpc2libGUgPSBzbGlkZUJlZm9yZSA+PSAwICYmIHNsaWRlQmVmb3JlIDwgc3dpcGVyLnNpemUgLSAxIHx8IHNsaWRlQWZ0ZXIgPiAxICYmIHNsaWRlQWZ0ZXIgPD0gc3dpcGVyLnNpemUgfHwgc2xpZGVCZWZvcmUgPD0gMCAmJiBzbGlkZUFmdGVyID49IHN3aXBlci5zaXplO1xuICAgIGlmIChpc1Zpc2libGUpIHtcbiAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzLnB1c2goaSk7XG4gICAgICBzbGlkZXNbaV0uY2xhc3NMaXN0LmFkZChwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MpO1xuICAgIH1cbiAgICBzbGlkZS5wcm9ncmVzcyA9IHJ0bCA/IC1zbGlkZVByb2dyZXNzIDogc2xpZGVQcm9ncmVzcztcbiAgICBzbGlkZS5vcmlnaW5hbFByb2dyZXNzID0gcnRsID8gLW9yaWdpbmFsU2xpZGVQcm9ncmVzcyA6IG9yaWdpbmFsU2xpZGVQcm9ncmVzcztcbiAgfVxufSIsImltcG9ydCB7IGVsZW1lbnRJbmRleCB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHR5cGVvZiB0cmFuc2xhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc3QgbXVsdGlwbGllciA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgdHJhbnNsYXRlID0gc3dpcGVyICYmIHN3aXBlci50cmFuc2xhdGUgJiYgc3dpcGVyLnRyYW5zbGF0ZSAqIG11bHRpcGxpZXIgfHwgMDtcbiAgfVxuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgbGV0IHtcbiAgICBwcm9ncmVzcyxcbiAgICBpc0JlZ2lubmluZyxcbiAgICBpc0VuZCxcbiAgICBwcm9ncmVzc0xvb3BcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qgd2FzQmVnaW5uaW5nID0gaXNCZWdpbm5pbmc7XG4gIGNvbnN0IHdhc0VuZCA9IGlzRW5kO1xuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBwcm9ncmVzcyA9IDA7XG4gICAgaXNCZWdpbm5pbmcgPSB0cnVlO1xuICAgIGlzRW5kID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBwcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gICAgY29uc3QgaXNCZWdpbm5pbmdSb3VuZGVkID0gTWF0aC5hYnModHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSA8IDE7XG4gICAgY29uc3QgaXNFbmRSb3VuZGVkID0gTWF0aC5hYnModHJhbnNsYXRlIC0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSA8IDE7XG4gICAgaXNCZWdpbm5pbmcgPSBpc0JlZ2lubmluZ1JvdW5kZWQgfHwgcHJvZ3Jlc3MgPD0gMDtcbiAgICBpc0VuZCA9IGlzRW5kUm91bmRlZCB8fCBwcm9ncmVzcyA+PSAxO1xuICAgIGlmIChpc0JlZ2lubmluZ1JvdW5kZWQpIHByb2dyZXNzID0gMDtcbiAgICBpZiAoaXNFbmRSb3VuZGVkKSBwcm9ncmVzcyA9IDE7XG4gIH1cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgY29uc3QgZmlyc3RTbGlkZUluZGV4ID0gZWxlbWVudEluZGV4KHN3aXBlci5zbGlkZXMuZmlsdGVyKGVsID0+IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSA9PT0gJzAnKVswXSk7XG4gICAgY29uc3QgbGFzdFNsaWRlSW5kZXggPSBlbGVtZW50SW5kZXgoc3dpcGVyLnNsaWRlcy5maWx0ZXIoZWwgPT4gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA9PT0gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxKVswXSk7XG4gICAgY29uc3QgZmlyc3RTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2ZpcnN0U2xpZGVJbmRleF07XG4gICAgY29uc3QgbGFzdFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbbGFzdFNsaWRlSW5kZXhdO1xuICAgIGNvbnN0IHRyYW5zbGF0ZU1heCA9IHN3aXBlci5zbGlkZXNHcmlkW3N3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IHRyYW5zbGF0ZUFicyA9IE1hdGguYWJzKHRyYW5zbGF0ZSk7XG4gICAgaWYgKHRyYW5zbGF0ZUFicyA+PSBmaXJzdFNsaWRlVHJhbnNsYXRlKSB7XG4gICAgICBwcm9ncmVzc0xvb3AgPSAodHJhbnNsYXRlQWJzIC0gZmlyc3RTbGlkZVRyYW5zbGF0ZSkgLyB0cmFuc2xhdGVNYXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2dyZXNzTG9vcCA9ICh0cmFuc2xhdGVBYnMgKyB0cmFuc2xhdGVNYXggLSBsYXN0U2xpZGVUcmFuc2xhdGUpIC8gdHJhbnNsYXRlTWF4O1xuICAgIH1cbiAgICBpZiAocHJvZ3Jlc3NMb29wID4gMSkgcHJvZ3Jlc3NMb29wIC09IDE7XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBwcm9ncmVzcyxcbiAgICBwcm9ncmVzc0xvb3AsXG4gICAgaXNCZWdpbm5pbmcsXG4gICAgaXNFbmRcbiAgfSk7XG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmF1dG9IZWlnaHQpIHN3aXBlci51cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICBpZiAoaXNCZWdpbm5pbmcgJiYgIXdhc0JlZ2lubmluZykge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEJlZ2lubmluZyB0b0VkZ2UnKTtcbiAgfVxuICBpZiAoaXNFbmQgJiYgIXdhc0VuZCkge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEVuZCB0b0VkZ2UnKTtcbiAgfVxuICBpZiAod2FzQmVnaW5uaW5nICYmICFpc0JlZ2lubmluZyB8fCB3YXNFbmQgJiYgIWlzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2Zyb21FZGdlJyk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3Byb2dyZXNzJywgcHJvZ3Jlc3MpO1xufSIsImltcG9ydCB7IGVsZW1lbnRDaGlsZHJlbiwgZWxlbWVudE5leHRBbGwsIGVsZW1lbnRQcmV2QWxsIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVwZGF0ZVNsaWRlc0NsYXNzZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXMsXG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsLFxuICAgIGFjdGl2ZUluZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGNvbnN0IGdldEZpbHRlcmVkU2xpZGUgPSBzZWxlY3RvciA9PiB7XG4gICAgcmV0dXJuIGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSR7c2VsZWN0b3J9LCBzd2lwZXItc2xpZGUke3NlbGVjdG9yfWApWzBdO1xuICB9O1xuICBzbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBzbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MsIHBhcmFtcy5zbGlkZU5leHRDbGFzcywgcGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgfSk7XG4gIGxldCBhY3RpdmVTbGlkZTtcbiAgaWYgKGlzVmlydHVhbCkge1xuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgbGV0IHNsaWRlSW5kZXggPSBhY3RpdmVJbmRleCAtIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICAgIGlmIChzbGlkZUluZGV4IDwgMCkgc2xpZGVJbmRleCA9IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyBzbGlkZUluZGV4O1xuICAgICAgaWYgKHNsaWRlSW5kZXggPj0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCkgc2xpZGVJbmRleCAtPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoO1xuICAgICAgYWN0aXZlU2xpZGUgPSBnZXRGaWx0ZXJlZFNsaWRlKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlSW5kZXh9XCJdYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGl2ZVNsaWRlID0gZ2V0RmlsdGVyZWRTbGlkZShgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHthY3RpdmVJbmRleH1cIl1gKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlU2xpZGUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdO1xuICB9XG4gIGlmIChhY3RpdmVTbGlkZSkge1xuICAgIC8vIEFjdGl2ZSBjbGFzc2VzXG4gICAgYWN0aXZlU2xpZGUuY2xhc3NMaXN0LmFkZChwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcyk7XG5cbiAgICAvLyBOZXh0IFNsaWRlXG4gICAgbGV0IG5leHRTbGlkZSA9IGVsZW1lbnROZXh0QWxsKGFjdGl2ZVNsaWRlLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKVswXTtcbiAgICBpZiAocGFyYW1zLmxvb3AgJiYgIW5leHRTbGlkZSkge1xuICAgICAgbmV4dFNsaWRlID0gc2xpZGVzWzBdO1xuICAgIH1cbiAgICBpZiAobmV4dFNsaWRlKSB7XG4gICAgICBuZXh0U2xpZGUuY2xhc3NMaXN0LmFkZChwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuICAgIH1cbiAgICAvLyBQcmV2IFNsaWRlXG4gICAgbGV0IHByZXZTbGlkZSA9IGVsZW1lbnRQcmV2QWxsKGFjdGl2ZVNsaWRlLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKVswXTtcbiAgICBpZiAocGFyYW1zLmxvb3AgJiYgIXByZXZTbGlkZSA9PT0gMCkge1xuICAgICAgcHJldlNsaWRlID0gc2xpZGVzW3NsaWRlcy5sZW5ndGggLSAxXTtcbiAgICB9XG4gICAgaWYgKHByZXZTbGlkZSkge1xuICAgICAgcHJldlNsaWRlLmNsYXNzTGlzdC5hZGQocGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgICB9XG4gIH1cbiAgc3dpcGVyLmVtaXRTbGlkZXNDbGFzc2VzKCk7XG59IiwiZXhwb3J0IGZ1bmN0aW9uIGdldEFjdGl2ZUluZGV4QnlUcmFuc2xhdGUoc3dpcGVyKSB7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXNHcmlkLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBsZXQgYWN0aXZlSW5kZXg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0gLSAoc2xpZGVzR3JpZFtpICsgMV0gLSBzbGlkZXNHcmlkW2ldKSAvIDIpIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSkge1xuICAgICAgICBhY3RpdmVJbmRleCA9IGkgKyAxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICB9XG4gIH1cbiAgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcbiAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4IDwgMCB8fCB0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSBhY3RpdmVJbmRleCA9IDA7XG4gIH1cbiAgcmV0dXJuIGFjdGl2ZUluZGV4O1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXBkYXRlQWN0aXZlSW5kZXgobmV3QWN0aXZlSW5kZXgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgY29uc3Qge1xuICAgIHNuYXBHcmlkLFxuICAgIHBhcmFtcyxcbiAgICBhY3RpdmVJbmRleDogcHJldmlvdXNJbmRleCxcbiAgICByZWFsSW5kZXg6IHByZXZpb3VzUmVhbEluZGV4LFxuICAgIHNuYXBJbmRleDogcHJldmlvdXNTbmFwSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGFjdGl2ZUluZGV4ID0gbmV3QWN0aXZlSW5kZXg7XG4gIGxldCBzbmFwSW5kZXg7XG4gIGNvbnN0IGdldFZpcnR1YWxSZWFsSW5kZXggPSBhSW5kZXggPT4ge1xuICAgIGxldCByZWFsSW5kZXggPSBhSW5kZXggLSBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgaWYgKHJlYWxJbmRleCA8IDApIHtcbiAgICAgIHJlYWxJbmRleCA9IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyByZWFsSW5kZXg7XG4gICAgfVxuICAgIGlmIChyZWFsSW5kZXggPj0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCkge1xuICAgICAgcmVhbEluZGV4IC09IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiByZWFsSW5kZXg7XG4gIH07XG4gIGlmICh0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgYWN0aXZlSW5kZXggPSBnZXRBY3RpdmVJbmRleEJ5VHJhbnNsYXRlKHN3aXBlcik7XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmluZGV4T2YodHJhbnNsYXRlKSA+PSAwKSB7XG4gICAgc25hcEluZGV4ID0gc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHNraXAgPSBNYXRoLm1pbihwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBhY3RpdmVJbmRleCk7XG4gICAgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGFjdGl2ZUluZGV4IC0gc2tpcCkgLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICB9XG4gIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxO1xuICBpZiAoYWN0aXZlSW5kZXggPT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoc25hcEluZGV4ICE9PSBwcmV2aW91c1NuYXBJbmRleCkge1xuICAgICAgc3dpcGVyLnNuYXBJbmRleCA9IHNuYXBJbmRleDtcbiAgICAgIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLnJlYWxJbmRleCA9IGdldFZpcnR1YWxSZWFsSW5kZXgoYWN0aXZlSW5kZXgpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgLy8gR2V0IHJlYWwgaW5kZXhcbiAgbGV0IHJlYWxJbmRleDtcbiAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgcGFyYW1zLmxvb3ApIHtcbiAgICByZWFsSW5kZXggPSBnZXRWaXJ0dWFsUmVhbEluZGV4KGFjdGl2ZUluZGV4KTtcbiAgfSBlbHNlIGlmIChzd2lwZXIuc2xpZGVzW2FjdGl2ZUluZGV4XSkge1xuICAgIHJlYWxJbmRleCA9IHBhcnNlSW50KHN3aXBlci5zbGlkZXNbYWN0aXZlSW5kZXhdLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSB8fCBhY3RpdmVJbmRleCwgMTApO1xuICB9IGVsc2Uge1xuICAgIHJlYWxJbmRleCA9IGFjdGl2ZUluZGV4O1xuICB9XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgc25hcEluZGV4LFxuICAgIHJlYWxJbmRleCxcbiAgICBwcmV2aW91c0luZGV4LFxuICAgIGFjdGl2ZUluZGV4XG4gIH0pO1xuICBzd2lwZXIuZW1pdCgnYWN0aXZlSW5kZXhDaGFuZ2UnKTtcbiAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuICBpZiAocHJldmlvdXNSZWFsSW5kZXggIT09IHJlYWxJbmRleCkge1xuICAgIHN3aXBlci5lbWl0KCdyZWFsSW5kZXhDaGFuZ2UnKTtcbiAgfVxuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkIHx8IHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KSB7XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlQ2hhbmdlJyk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1cGRhdGVDbGlja2VkU2xpZGUoZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCBzbGlkZSA9IGUuY2xvc2VzdChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgbGV0IHNsaWRlRm91bmQgPSBmYWxzZTtcbiAgbGV0IHNsaWRlSW5kZXg7XG4gIGlmIChzbGlkZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaV0gPT09IHNsaWRlKSB7XG4gICAgICAgIHNsaWRlRm91bmQgPSB0cnVlO1xuICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChzbGlkZSAmJiBzbGlkZUZvdW5kKSB7XG4gICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHNsaWRlO1xuICAgIGlmIChzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHBhcnNlSW50KHNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gc2xpZGVJbmRleDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHVuZGVmaW5lZDtcbiAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLnNsaWRlVG9DbGlja2VkU2xpZGUgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gdW5kZWZpbmVkICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHN3aXBlci5hY3RpdmVJbmRleCkge1xuICAgIHN3aXBlci5zbGlkZVRvQ2xpY2tlZFNsaWRlKCk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2l0aW9uRW1pdCh7XG4gIHN3aXBlcixcbiAgcnVuQ2FsbGJhY2tzLFxuICBkaXJlY3Rpb24sXG4gIHN0ZXBcbn0pIHtcbiAgY29uc3Qge1xuICAgIGFjdGl2ZUluZGV4LFxuICAgIHByZXZpb3VzSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGRpciA9IGRpcmVjdGlvbjtcbiAgaWYgKCFkaXIpIHtcbiAgICBpZiAoYWN0aXZlSW5kZXggPiBwcmV2aW91c0luZGV4KSBkaXIgPSAnbmV4dCc7ZWxzZSBpZiAoYWN0aXZlSW5kZXggPCBwcmV2aW91c0luZGV4KSBkaXIgPSAncHJldic7ZWxzZSBkaXIgPSAncmVzZXQnO1xuICB9XG4gIHN3aXBlci5lbWl0KGB0cmFuc2l0aW9uJHtzdGVwfWApO1xuICBpZiAocnVuQ2FsbGJhY2tzICYmIGFjdGl2ZUluZGV4ICE9PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKGRpciA9PT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlUmVzZXRUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdChgc2xpZGVDaGFuZ2VUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlTmV4dFRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KGBzbGlkZVByZXZUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIH1cbiAgfVxufSIsImltcG9ydCBzbGlkZVRvIGZyb20gJy4vc2xpZGVUby5qcyc7XG5pbXBvcnQgc2xpZGVUb0xvb3AgZnJvbSAnLi9zbGlkZVRvTG9vcC5qcyc7XG5pbXBvcnQgc2xpZGVOZXh0IGZyb20gJy4vc2xpZGVOZXh0LmpzJztcbmltcG9ydCBzbGlkZVByZXYgZnJvbSAnLi9zbGlkZVByZXYuanMnO1xuaW1wb3J0IHNsaWRlUmVzZXQgZnJvbSAnLi9zbGlkZVJlc2V0LmpzJztcbmltcG9ydCBzbGlkZVRvQ2xvc2VzdCBmcm9tICcuL3NsaWRlVG9DbG9zZXN0LmpzJztcbmltcG9ydCBzbGlkZVRvQ2xpY2tlZFNsaWRlIGZyb20gJy4vc2xpZGVUb0NsaWNrZWRTbGlkZS5qcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIHNsaWRlVG8sXG4gIHNsaWRlVG9Mb29wLFxuICBzbGlkZU5leHQsXG4gIHNsaWRlUHJldixcbiAgc2xpZGVSZXNldCxcbiAgc2xpZGVUb0Nsb3Nlc3QsXG4gIHNsaWRlVG9DbGlja2VkU2xpZGVcbn07IiwiaW1wb3J0IHsgYW5pbWF0ZUNTU01vZGVTY3JvbGwgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVUbyhpbmRleCA9IDAsIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsLCBpbml0aWFsKSB7XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgaW5kZXggPSBwYXJzZUludChpbmRleCwgMTApO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBzbGlkZUluZGV4ID0gaW5kZXg7XG4gIGlmIChzbGlkZUluZGV4IDwgMCkgc2xpZGVJbmRleCA9IDA7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc25hcEdyaWQsXG4gICAgc2xpZGVzR3JpZCxcbiAgICBwcmV2aW91c0luZGV4LFxuICAgIGFjdGl2ZUluZGV4LFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHdyYXBwZXJFbCxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24gfHwgIWVuYWJsZWQgJiYgIWludGVybmFsICYmICFpbml0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHNraXAgPSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgc2xpZGVJbmRleCk7XG4gIGxldCBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoc2xpZGVJbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxO1xuICBjb25zdCB0cmFuc2xhdGUgPSAtc25hcEdyaWRbc25hcEluZGV4XTtcbiAgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcbiAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkVHJhbnNsYXRlID0gLU1hdGguZmxvb3IodHJhbnNsYXRlICogMTAwKTtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRHcmlkID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkW2ldICogMTAwKTtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRHcmlkTmV4dCA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpICsgMV0gKiAxMDApO1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA8IG5vcm1hbGl6ZWRHcmlkTmV4dCAtIChub3JtYWxpemVkR3JpZE5leHQgLSBub3JtYWxpemVkR3JpZCkgLyAyKSB7XG4gICAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBub3JtYWxpemVkR3JpZCAmJiBub3JtYWxpemVkVHJhbnNsYXRlIDwgbm9ybWFsaXplZEdyaWROZXh0KSB7XG4gICAgICAgICAgc2xpZGVJbmRleCA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQpIHtcbiAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCAmJiBzbGlkZUluZGV4ICE9PSBhY3RpdmVJbmRleCkge1xuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHRyYW5zbGF0ZSA8IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlIDwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHRyYW5zbGF0ZSA+IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlID4gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICBpZiAoKGFjdGl2ZUluZGV4IHx8IDApICE9PSBzbGlkZUluZGV4KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHNsaWRlSW5kZXggIT09IChwcmV2aW91c0luZGV4IHx8IDApICYmIHJ1bkNhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVTbGlkZUNoYW5nZVN0YXJ0Jyk7XG4gIH1cblxuICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIGxldCBkaXJlY3Rpb247XG4gIGlmIChzbGlkZUluZGV4ID4gYWN0aXZlSW5kZXgpIGRpcmVjdGlvbiA9ICduZXh0JztlbHNlIGlmIChzbGlkZUluZGV4IDwgYWN0aXZlSW5kZXgpIGRpcmVjdGlvbiA9ICdwcmV2JztlbHNlIGRpcmVjdGlvbiA9ICdyZXNldCc7XG5cbiAgLy8gVXBkYXRlIEluZGV4XG4gIGlmIChydGwgJiYgLXRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSB8fCAhcnRsICYmIHRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSkge1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgICAvLyBVcGRhdGUgSGVpZ2h0XG4gICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgIH1cbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIGlmIChwYXJhbXMuZWZmZWN0ICE9PSAnc2xpZGUnKSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgfVxuICAgIGlmIChkaXJlY3Rpb24gIT09ICdyZXNldCcpIHtcbiAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgY29uc3QgaXNIID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIGNvbnN0IHQgPSBydGwgPyB0cmFuc2xhdGUgOiAtdHJhbnNsYXRlO1xuICAgIGlmIChzcGVlZCA9PT0gMCkge1xuICAgICAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnbm9uZSc7XG4gICAgICAgIHN3aXBlci5faW1tZWRpYXRlVmlydHVhbCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNWaXJ0dWFsICYmICFzd2lwZXIuX2Nzc01vZGVWaXJ0dWFsSW5pdGlhbFNldCAmJiBzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSA+IDApIHtcbiAgICAgICAgc3dpcGVyLl9jc3NNb2RlVmlydHVhbEluaXRpYWxTZXQgPSB0cnVlO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSB0O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSB0O1xuICAgICAgfVxuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnJztcbiAgICAgICAgICBzd2lwZXIuX2ltbWVkaWF0ZVZpcnR1YWwgPSBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghc3dpcGVyLnN1cHBvcnQuc21vb3RoU2Nyb2xsKSB7XG4gICAgICAgIGFuaW1hdGVDU1NNb2RlU2Nyb2xsKHtcbiAgICAgICAgICBzd2lwZXIsXG4gICAgICAgICAgdGFyZ2V0UG9zaXRpb246IHQsXG4gICAgICAgICAgc2lkZTogaXNIID8gJ2xlZnQnIDogJ3RvcCdcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgd3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgW2lzSCA/ICdsZWZ0JyA6ICd0b3AnXTogdCxcbiAgICAgICAgYmVoYXZpb3I6ICdzbW9vdGgnXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gIH0gZWxzZSBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICBpZiAoIXN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCkge1xuICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgaWYgKGUudGFyZ2V0ICE9PSB0aGlzKSByZXR1cm47XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IG51bGw7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQ7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59IiwiaW1wb3J0IHsgZWxlbWVudEluZGV4IH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNsaWRlVG9Mb29wKGluZGV4ID0gMCwgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgaW50ZXJuYWwpIHtcbiAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBpbmRleEFzTnVtYmVyID0gcGFyc2VJbnQoaW5kZXgsIDEwKTtcbiAgICBpbmRleCA9IGluZGV4QXNOdW1iZXI7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IG5ld0luZGV4ID0gaW5kZXg7XG4gIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgbmV3SW5kZXggPSBuZXdJbmRleCArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3SW5kZXggPSBlbGVtZW50SW5kZXgoc3dpcGVyLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSAqIDEgPT09IG5ld0luZGV4KVswXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhuZXdJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufSIsIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVOZXh0KHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBlbmFibGVkLFxuICAgIHBhcmFtcyxcbiAgICBhbmltYXRpbmdcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm4gc3dpcGVyO1xuICBsZXQgcGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvKSB7XG4gICAgcGVyR3JvdXAgPSBNYXRoLm1heChzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoJ2N1cnJlbnQnLCB0cnVlKSwgMSk7XG4gIH1cbiAgY29uc3QgaW5jcmVtZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwZXJHcm91cDtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiAhaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgZGlyZWN0aW9uOiAnbmV4dCdcbiAgICB9KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIud3JhcHBlckVsLmNsaWVudExlZnQ7XG4gIH1cbiAgaWYgKHBhcmFtcy5yZXdpbmQgJiYgc3dpcGVyLmlzRW5kKSB7XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKDAsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfVxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgaW5jcmVtZW50LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59IiwiLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVByZXYoc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgaW50ZXJuYWwpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHJ0bFRyYW5zbGF0ZSxcbiAgICBlbmFibGVkLFxuICAgIGFuaW1hdGluZ1xuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybiBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChhbmltYXRpbmcgJiYgIWlzVmlydHVhbCAmJiBwYXJhbXMubG9vcFByZXZlbnRzU2xpZGluZykgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgIGRpcmVjdGlvbjogJ3ByZXYnXG4gICAgfSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLndyYXBwZXJFbC5jbGllbnRMZWZ0O1xuICB9XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgZnVuY3Rpb24gbm9ybWFsaXplKHZhbCkge1xuICAgIGlmICh2YWwgPCAwKSByZXR1cm4gLU1hdGguZmxvb3IoTWF0aC5hYnModmFsKSk7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodmFsKTtcbiAgfVxuICBjb25zdCBub3JtYWxpemVkVHJhbnNsYXRlID0gbm9ybWFsaXplKHRyYW5zbGF0ZSk7XG4gIGNvbnN0IG5vcm1hbGl6ZWRTbmFwR3JpZCA9IHNuYXBHcmlkLm1hcCh2YWwgPT4gbm9ybWFsaXplKHZhbCkpO1xuICBsZXQgcHJldlNuYXAgPSBzbmFwR3JpZFtub3JtYWxpemVkU25hcEdyaWQuaW5kZXhPZihub3JtYWxpemVkVHJhbnNsYXRlKSAtIDFdO1xuICBpZiAodHlwZW9mIHByZXZTbmFwID09PSAndW5kZWZpbmVkJyAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgIGxldCBwcmV2U25hcEluZGV4O1xuICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gc25hcCkge1xuICAgICAgICAvLyBwcmV2U25hcCA9IHNuYXA7XG4gICAgICAgIHByZXZTbmFwSW5kZXggPSBzbmFwSW5kZXg7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHR5cGVvZiBwcmV2U25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcHJldlNuYXAgPSBzbmFwR3JpZFtwcmV2U25hcEluZGV4ID4gMCA/IHByZXZTbmFwSW5kZXggLSAxIDogcHJldlNuYXBJbmRleF07XG4gICAgfVxuICB9XG4gIGxldCBwcmV2SW5kZXggPSAwO1xuICBpZiAodHlwZW9mIHByZXZTbmFwICE9PSAndW5kZWZpbmVkJykge1xuICAgIHByZXZJbmRleCA9IHNsaWRlc0dyaWQuaW5kZXhPZihwcmV2U25hcCk7XG4gICAgaWYgKHByZXZJbmRleCA8IDApIHByZXZJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCAtIDE7XG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cEF1dG8pIHtcbiAgICAgIHByZXZJbmRleCA9IHByZXZJbmRleCAtIHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygncHJldmlvdXMnLCB0cnVlKSArIDE7XG4gICAgICBwcmV2SW5kZXggPSBNYXRoLm1heChwcmV2SW5kZXgsIDApO1xuICAgIH1cbiAgfVxuICBpZiAocGFyYW1zLnJld2luZCAmJiBzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICBjb25zdCBsYXN0SW5kZXggPSBzd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIC0gMSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obGFzdEluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHByZXZJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufSIsIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVSZXNldChzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCBpbnRlcm5hbCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59IiwiLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbGlkZVRvQ2xvc2VzdChzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCBpbnRlcm5hbCwgdGhyZXNob2xkID0gMC41KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCk7XG4gIGNvbnN0IHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChpbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGlmICh0cmFuc2xhdGUgPj0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF0pIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgb24gb3IgYWZ0ZXIgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYWZ0ZXIgaXQuXG4gICAgY29uc3QgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICBjb25zdCBuZXh0U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggKyAxXTtcbiAgICBpZiAodHJhbnNsYXRlIC0gY3VycmVudFNuYXAgPiAobmV4dFNuYXAgLSBjdXJyZW50U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4ICs9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBiZWZvcmUgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYmVmb3JlIGl0LlxuICAgIGNvbnN0IHByZXZTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCAtIDFdO1xuICAgIGNvbnN0IGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG4gICAgaWYgKHRyYW5zbGF0ZSAtIHByZXZTbmFwIDw9IChjdXJyZW50U25hcCAtIHByZXZTbmFwKSAqIHRocmVzaG9sZCkge1xuICAgICAgaW5kZXggLT0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICB9XG4gIH1cbiAgaW5kZXggPSBNYXRoLm1heChpbmRleCwgMCk7XG4gIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDEpO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn0iLCJpbXBvcnQgeyBlbGVtZW50Q2hpbGRyZW4sIGVsZW1lbnRJbmRleCwgbmV4dFRpY2sgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2xpZGVUb0NsaWNrZWRTbGlkZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBzbGlkZXNQZXJWaWV3ID0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gIGxldCBzbGlkZVRvSW5kZXggPSBzd2lwZXIuY2xpY2tlZEluZGV4O1xuICBsZXQgcmVhbEluZGV4O1xuICBjb25zdCBzbGlkZVNlbGVjdG9yID0gc3dpcGVyLmlzRWxlbWVudCA/IGBzd2lwZXItc2xpZGVgIDogYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWA7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSByZXR1cm47XG4gICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoc3dpcGVyLmNsaWNrZWRTbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBpZiAoc2xpZGVUb0luZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcyAtIHNsaWRlc1BlclZpZXcgLyAyIHx8IHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyArIHNsaWRlc1BlclZpZXcgLyAyKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIHNsaWRlVG9JbmRleCA9IGVsZW1lbnRJbmRleChlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAke3NsaWRlU2VsZWN0b3J9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdYClbMF0pO1xuICAgICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzbGlkZXNQZXJWaWV3KSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgc2xpZGVUb0luZGV4ID0gZWxlbWVudEluZGV4KGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYCR7c2xpZGVTZWxlY3Rvcn1bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl1gKVswXSk7XG4gICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgfVxufSIsImltcG9ydCB7IGdldFdpbmRvdywgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IG5vdyB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5cbi8vIE1vZGlmaWVkIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTQ1MjA1NTQvY3VzdG9tLWVsZW1lbnQtZ2V0cm9vdG5vZGUtY2xvc2VzdC1mdW5jdGlvbi1jcm9zc2luZy1tdWx0aXBsZS1wYXJlbnQtc2hhZG93ZFxuZnVuY3Rpb24gY2xvc2VzdEVsZW1lbnQoc2VsZWN0b3IsIGJhc2UgPSB0aGlzKSB7XG4gIGZ1bmN0aW9uIF9fY2xvc2VzdEZyb20oZWwpIHtcbiAgICBpZiAoIWVsIHx8IGVsID09PSBnZXREb2N1bWVudCgpIHx8IGVsID09PSBnZXRXaW5kb3coKSkgcmV0dXJuIG51bGw7XG4gICAgaWYgKGVsLmFzc2lnbmVkU2xvdCkgZWwgPSBlbC5hc3NpZ25lZFNsb3Q7XG4gICAgY29uc3QgZm91bmQgPSBlbC5jbG9zZXN0KHNlbGVjdG9yKTtcbiAgICBpZiAoIWZvdW5kICYmICFlbC5nZXRSb290Tm9kZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBmb3VuZCB8fCBfX2Nsb3Nlc3RGcm9tKGVsLmdldFJvb3ROb2RlKCkuaG9zdCk7XG4gIH1cbiAgcmV0dXJuIF9fY2xvc2VzdEZyb20oYmFzZSk7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvblRvdWNoU3RhcnQoZXZlbnQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGRhdGEuZXZDYWNoZS5wdXNoKGV2ZW50KTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZXZlbnQucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHJldHVybjtcbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcEZpeCgpO1xuICB9XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGxldCB0YXJnZXRFbCA9IGUudGFyZ2V0O1xuICBpZiAocGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnd3JhcHBlcicpIHtcbiAgICBpZiAoIXN3aXBlci53cmFwcGVyRWwuY29udGFpbnModGFyZ2V0RWwpKSByZXR1cm47XG4gIH1cbiAgaWYgKCd3aGljaCcgaW4gZSAmJiBlLndoaWNoID09PSAzKSByZXR1cm47XG4gIGlmICgnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uID4gMCkgcmV0dXJuO1xuICBpZiAoZGF0YS5pc1RvdWNoZWQgJiYgZGF0YS5pc01vdmVkKSByZXR1cm47XG5cbiAgLy8gY2hhbmdlIHRhcmdldCBlbCBmb3Igc2hhZG93IHJvb3QgY29tcG9uZW50XG4gIGNvbnN0IHN3aXBpbmdDbGFzc0hhc1ZhbHVlID0gISFwYXJhbXMubm9Td2lwaW5nQ2xhc3MgJiYgcGFyYW1zLm5vU3dpcGluZ0NsYXNzICE9PSAnJztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGNvbnN0IGV2ZW50UGF0aCA9IGV2ZW50LmNvbXBvc2VkUGF0aCA/IGV2ZW50LmNvbXBvc2VkUGF0aCgpIDogZXZlbnQucGF0aDtcbiAgaWYgKHN3aXBpbmdDbGFzc0hhc1ZhbHVlICYmIGUudGFyZ2V0ICYmIGUudGFyZ2V0LnNoYWRvd1Jvb3QgJiYgZXZlbnRQYXRoKSB7XG4gICAgdGFyZ2V0RWwgPSBldmVudFBhdGhbMF07XG4gIH1cbiAgY29uc3Qgbm9Td2lwaW5nU2VsZWN0b3IgPSBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgPyBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgOiBgLiR7cGFyYW1zLm5vU3dpcGluZ0NsYXNzfWA7XG4gIGNvbnN0IGlzVGFyZ2V0U2hhZG93ID0gISEoZS50YXJnZXQgJiYgZS50YXJnZXQuc2hhZG93Um9vdCk7XG5cbiAgLy8gdXNlIGNsb3Nlc3RFbGVtZW50IGZvciBzaGFkb3cgcm9vdCBlbGVtZW50IHRvIGdldCB0aGUgYWN0dWFsIGNsb3Nlc3QgZm9yIG5lc3RlZCBzaGFkb3cgcm9vdCBlbGVtZW50XG4gIGlmIChwYXJhbXMubm9Td2lwaW5nICYmIChpc1RhcmdldFNoYWRvdyA/IGNsb3Nlc3RFbGVtZW50KG5vU3dpcGluZ1NlbGVjdG9yLCB0YXJnZXRFbCkgOiB0YXJnZXRFbC5jbG9zZXN0KG5vU3dpcGluZ1NlbGVjdG9yKSkpIHtcbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMuc3dpcGVIYW5kbGVyKSB7XG4gICAgaWYgKCF0YXJnZXRFbC5jbG9zZXN0KHBhcmFtcy5zd2lwZUhhbmRsZXIpKSByZXR1cm47XG4gIH1cbiAgdG91Y2hlcy5jdXJyZW50WCA9IGUucGFnZVg7XG4gIHRvdWNoZXMuY3VycmVudFkgPSBlLnBhZ2VZO1xuICBjb25zdCBzdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICBjb25zdCBzdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuXG4gIC8vIERvIE5PVCBzdGFydCBpZiBpT1MgZWRnZSBzd2lwZSBpcyBkZXRlY3RlZC4gT3RoZXJ3aXNlIGlPUyBhcHAgY2Fubm90IHN3aXBlLXRvLWdvLWJhY2sgYW55bW9yZVxuXG4gIGNvbnN0IGVkZ2VTd2lwZURldGVjdGlvbiA9IHBhcmFtcy5lZGdlU3dpcGVEZXRlY3Rpb24gfHwgcGFyYW1zLmlPU0VkZ2VTd2lwZURldGVjdGlvbjtcbiAgY29uc3QgZWRnZVN3aXBlVGhyZXNob2xkID0gcGFyYW1zLmVkZ2VTd2lwZVRocmVzaG9sZCB8fCBwYXJhbXMuaU9TRWRnZVN3aXBlVGhyZXNob2xkO1xuICBpZiAoZWRnZVN3aXBlRGV0ZWN0aW9uICYmIChzdGFydFggPD0gZWRnZVN3aXBlVGhyZXNob2xkIHx8IHN0YXJ0WCA+PSB3aW5kb3cuaW5uZXJXaWR0aCAtIGVkZ2VTd2lwZVRocmVzaG9sZCkpIHtcbiAgICBpZiAoZWRnZVN3aXBlRGV0ZWN0aW9uID09PSAncHJldmVudCcpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihkYXRhLCB7XG4gICAgaXNUb3VjaGVkOiB0cnVlLFxuICAgIGlzTW92ZWQ6IGZhbHNlLFxuICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHRydWUsXG4gICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkXG4gIH0pO1xuICB0b3VjaGVzLnN0YXJ0WCA9IHN0YXJ0WDtcbiAgdG91Y2hlcy5zdGFydFkgPSBzdGFydFk7XG4gIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSB1bmRlZmluZWQ7XG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSBmYWxzZTtcbiAgbGV0IHByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgaWYgKHRhcmdldEVsLm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICBwcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuICAgIGlmICh0YXJnZXRFbC5ub2RlTmFtZSA9PT0gJ1NFTEVDVCcpIHtcbiAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSB0YXJnZXRFbCkge1xuICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICB9XG4gIGNvbnN0IHNob3VsZFByZXZlbnREZWZhdWx0ID0gcHJldmVudERlZmF1bHQgJiYgc3dpcGVyLmFsbG93VG91Y2hNb3ZlICYmIHBhcmFtcy50b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ7XG4gIGlmICgocGFyYW1zLnRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IHx8IHNob3VsZFByZXZlbnREZWZhdWx0KSAmJiAhdGFyZ2V0RWwuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgc3dpcGVyLnBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmIHN3aXBlci5mcmVlTW9kZSAmJiBzd2lwZXIuYW5pbWF0aW5nICYmICFwYXJhbXMuY3NzTW9kZSkge1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoU3RhcnQoKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgndG91Y2hTdGFydCcsIGUpO1xufSIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgeyBub3cgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb25Ub3VjaE1vdmUoZXZlbnQpIHtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZXZlbnQucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHJldHVybjtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgaWYgKCFkYXRhLmlzVG91Y2hlZCkge1xuICAgIGlmIChkYXRhLnN0YXJ0TW92aW5nICYmIGRhdGEuaXNTY3JvbGxpbmcpIHtcbiAgICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmVPcHBvc2l0ZScsIGUpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcG9pbnRlckluZGV4ID0gZGF0YS5ldkNhY2hlLmZpbmRJbmRleChjYWNoZWRFdiA9PiBjYWNoZWRFdi5wb2ludGVySWQgPT09IGUucG9pbnRlcklkKTtcbiAgaWYgKHBvaW50ZXJJbmRleCA+PSAwKSBkYXRhLmV2Q2FjaGVbcG9pbnRlckluZGV4XSA9IGU7XG4gIGNvbnN0IHRhcmdldFRvdWNoID0gZGF0YS5ldkNhY2hlLmxlbmd0aCA+IDEgPyBkYXRhLmV2Q2FjaGVbMF0gOiBlO1xuICBjb25zdCBwYWdlWCA9IHRhcmdldFRvdWNoLnBhZ2VYO1xuICBjb25zdCBwYWdlWSA9IHRhcmdldFRvdWNoLnBhZ2VZO1xuICBpZiAoZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlcikge1xuICAgIHRvdWNoZXMuc3RhcnRYID0gcGFnZVg7XG4gICAgdG91Y2hlcy5zdGFydFkgPSBwYWdlWTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dUb3VjaE1vdmUpIHtcbiAgICBpZiAoIWUudGFyZ2V0Lm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChkYXRhLmlzVG91Y2hlZCkge1xuICAgICAgT2JqZWN0LmFzc2lnbih0b3VjaGVzLCB7XG4gICAgICAgIHN0YXJ0WDogcGFnZVgsXG4gICAgICAgIHN0YXJ0WTogcGFnZVksXG4gICAgICAgIHByZXZYOiBzd2lwZXIudG91Y2hlcy5jdXJyZW50WCxcbiAgICAgICAgcHJldlk6IHN3aXBlci50b3VjaGVzLmN1cnJlbnRZLFxuICAgICAgICBjdXJyZW50WDogcGFnZVgsXG4gICAgICAgIGN1cnJlbnRZOiBwYWdlWVxuICAgICAgfSk7XG4gICAgICBkYXRhLnRvdWNoU3RhcnRUaW1lID0gbm93KCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMgJiYgIXBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci5pc1ZlcnRpY2FsKCkpIHtcbiAgICAgIC8vIFZlcnRpY2FsXG4gICAgICBpZiAocGFnZVkgPCB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWSA+IHRvdWNoZXMuc3RhcnRZICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwYWdlWCA8IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIHx8IHBhZ2VYID4gdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZS50YXJnZXQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgICAgZGF0YS5pc01vdmVkID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmIChkYXRhLmFsbG93VG91Y2hDYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlJywgZSk7XG4gIH1cbiAgaWYgKGUudGFyZ2V0VG91Y2hlcyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoID4gMSkgcmV0dXJuO1xuICB0b3VjaGVzLmN1cnJlbnRYID0gcGFnZVg7XG4gIHRvdWNoZXMuY3VycmVudFkgPSBwYWdlWTtcbiAgY29uc3QgZGlmZlggPSB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFg7XG4gIGNvbnN0IGRpZmZZID0gdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICBpZiAoc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQgJiYgTWF0aC5zcXJ0KGRpZmZYICoqIDIgKyBkaWZmWSAqKiAyKSA8IHN3aXBlci5wYXJhbXMudGhyZXNob2xkKSByZXR1cm47XG4gIGlmICh0eXBlb2YgZGF0YS5pc1Njcm9sbGluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsZXQgdG91Y2hBbmdsZTtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHRvdWNoZXMuY3VycmVudFkgPT09IHRvdWNoZXMuc3RhcnRZIHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgdG91Y2hlcy5jdXJyZW50WCA9PT0gdG91Y2hlcy5zdGFydFgpIHtcbiAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAoZGlmZlggKiBkaWZmWCArIGRpZmZZICogZGlmZlkgPj0gMjUpIHtcbiAgICAgICAgdG91Y2hBbmdsZSA9IE1hdGguYXRhbjIoTWF0aC5hYnMoZGlmZlkpLCBNYXRoLmFicyhkaWZmWCkpICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoQW5nbGUgPiBwYXJhbXMudG91Y2hBbmdsZSA6IDkwIC0gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmVPcHBvc2l0ZScsIGUpO1xuICB9XG4gIGlmICh0eXBlb2YgZGF0YS5zdGFydE1vdmluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodG91Y2hlcy5jdXJyZW50WCAhPT0gdG91Y2hlcy5zdGFydFggfHwgdG91Y2hlcy5jdXJyZW50WSAhPT0gdG91Y2hlcy5zdGFydFkpIHtcbiAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5pc1Njcm9sbGluZyB8fCBzd2lwZXIuem9vbSAmJiBzd2lwZXIucGFyYW1zLnpvb20gJiYgc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQgJiYgZGF0YS5ldkNhY2hlLmxlbmd0aCA+IDEpIHtcbiAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIWRhdGEuc3RhcnRNb3ZpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgaWYgKCFwYXJhbXMuY3NzTW9kZSAmJiBlLmNhbmNlbGFibGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgaWYgKHBhcmFtcy50b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24gJiYgIXBhcmFtcy5uZXN0ZWQpIHtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG4gIGxldCBkaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZGlmZlggOiBkaWZmWTtcbiAgbGV0IHRvdWNoZXNEaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMucHJldmlvdXNYIDogdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMucHJldmlvdXNZO1xuICBpZiAocGFyYW1zLm9uZVdheU1vdmVtZW50KSB7XG4gICAgZGlmZiA9IE1hdGguYWJzKGRpZmYpICogKHJ0bCA/IDEgOiAtMSk7XG4gICAgdG91Y2hlc0RpZmYgPSBNYXRoLmFicyh0b3VjaGVzRGlmZikgKiAocnRsID8gMSA6IC0xKTtcbiAgfVxuICB0b3VjaGVzLmRpZmYgPSBkaWZmO1xuICBkaWZmICo9IHBhcmFtcy50b3VjaFJhdGlvO1xuICBpZiAocnRsKSB7XG4gICAgZGlmZiA9IC1kaWZmO1xuICAgIHRvdWNoZXNEaWZmID0gLXRvdWNoZXNEaWZmO1xuICB9XG4gIGNvbnN0IHByZXZUb3VjaGVzRGlyZWN0aW9uID0gc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb247XG4gIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9IGRpZmYgPiAwID8gJ3ByZXYnIDogJ25leHQnO1xuICBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiA9IHRvdWNoZXNEaWZmID4gMCA/ICdwcmV2JyA6ICduZXh0JztcbiAgY29uc3QgaXNMb29wID0gc3dpcGVyLnBhcmFtcy5sb29wICYmICFwYXJhbXMuY3NzTW9kZTtcbiAgaWYgKCFkYXRhLmlzTW92ZWQpIHtcbiAgICBpZiAoaXNMb29wKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogc3dpcGVyLnN3aXBlRGlyZWN0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gICAgZGF0YS5zdGFydFRyYW5zbGF0ZSA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgY29uc3QgZXZ0ID0gbmV3IHdpbmRvdy5DdXN0b21FdmVudCgndHJhbnNpdGlvbmVuZCcsIHtcbiAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLmRpc3BhdGNoRXZlbnQoZXZ0KTtcbiAgICB9XG4gICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7XG4gICAgLy8gR3JhYiBDdXJzb3JcbiAgICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcih0cnVlKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlckZpcnN0TW92ZScsIGUpO1xuICB9XG4gIGxldCBsb29wRml4ZWQ7XG4gIGlmIChkYXRhLmlzTW92ZWQgJiYgcHJldlRvdWNoZXNEaXJlY3Rpb24gIT09IHN3aXBlci50b3VjaGVzRGlyZWN0aW9uICYmIGlzTG9vcCAmJiBNYXRoLmFicyhkaWZmKSA+PSAxKSB7XG4gICAgLy8gbmVlZCBhbm90aGVyIGxvb3AgZml4XG4gICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgZGlyZWN0aW9uOiBzd2lwZXIuc3dpcGVEaXJlY3Rpb24sXG4gICAgICBzZXRUcmFuc2xhdGU6IHRydWVcbiAgICB9KTtcbiAgICBsb29wRml4ZWQgPSB0cnVlO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzbGlkZXJNb3ZlJywgZSk7XG4gIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRpZmYgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICBsZXQgZGlzYWJsZVBhcmVudFN3aXBlciA9IHRydWU7XG4gIGxldCByZXNpc3RhbmNlUmF0aW8gPSBwYXJhbXMucmVzaXN0YW5jZVJhdGlvO1xuICBpZiAocGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMpIHtcbiAgICByZXNpc3RhbmNlUmF0aW8gPSAwO1xuICB9XG4gIGlmIChkaWZmID4gMCkge1xuICAgIGlmIChpc0xvb3AgJiYgIWxvb3BGaXhlZCAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gc3dpcGVyLnNpemUgLyAyIDogc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSkge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICBkaXJlY3Rpb246ICdwcmV2JyxcbiAgICAgICAgc2V0VHJhbnNsYXRlOiB0cnVlLFxuICAgICAgICBhY3RpdmVTbGlkZUluZGV4OiAwXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IGZhbHNlO1xuICAgICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSB7XG4gICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci5taW5UcmFuc2xhdGUoKSAtIDEgKyAoLXN3aXBlci5taW5UcmFuc2xhdGUoKSArIGRhdGEuc3RhcnRUcmFuc2xhdGUgKyBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW87XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGRpZmYgPCAwKSB7XG4gICAgaWYgKGlzTG9vcCAmJiAhbG9vcEZpeGVkICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyBzd2lwZXIuc2l6ZSAvIDIgOiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogJ25leHQnLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IE1hdGguY2VpbChwYXJzZUZsb2F0KHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpKVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkge1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyAxIC0gKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIGRhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW87XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkaXNhYmxlUGFyZW50U3dpcGVyKSB7XG4gICAgZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciA9IHRydWU7XG4gIH1cblxuICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmICFzd2lwZXIuYWxsb3dTbGlkZU5leHQpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG5cbiAgLy8gVGhyZXNob2xkXG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkge1xuICAgIGlmIChNYXRoLmFicyhkaWZmKSA+IHBhcmFtcy50aHJlc2hvbGQgfHwgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgIGlmICghZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgICAgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSB0cnVlO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgICAgdG91Y2hlcy5kaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYIDogdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmICghcGFyYW1zLmZvbGxvd0ZpbmdlciB8fCBwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuXG4gIC8vIFVwZGF0ZSBhY3RpdmUgaW5kZXggaW4gZnJlZSBtb2RlXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBzd2lwZXIuZnJlZU1vZGUpIHtcbiAgICBzd2lwZXIuZnJlZU1vZGUub25Ub3VjaE1vdmUoKTtcbiAgfVxuICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG4gIC8vIFVwZGF0ZSB0cmFuc2xhdGVcbiAgc3dpcGVyLnNldFRyYW5zbGF0ZShkYXRhLmN1cnJlbnRUcmFuc2xhdGUpO1xufSIsImltcG9ydCB7IG5vdywgbmV4dFRpY2sgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb25Ub3VjaEVuZChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgY29uc3QgcG9pbnRlckluZGV4ID0gZGF0YS5ldkNhY2hlLmZpbmRJbmRleChjYWNoZWRFdiA9PiBjYWNoZWRFdi5wb2ludGVySWQgPT09IGV2ZW50LnBvaW50ZXJJZCk7XG4gIGlmIChwb2ludGVySW5kZXggPj0gMCkge1xuICAgIGRhdGEuZXZDYWNoZS5zcGxpY2UocG9pbnRlckluZGV4LCAxKTtcbiAgfVxuICBpZiAoWydwb2ludGVyY2FuY2VsJywgJ3BvaW50ZXJvdXQnLCAncG9pbnRlcmxlYXZlJ10uaW5jbHVkZXMoZXZlbnQudHlwZSkpIHJldHVybjtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgaWYgKCFwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiBldmVudC5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgcmV0dXJuO1xuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoRW5kJywgZSk7XG4gIH1cbiAgZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzID0gZmFsc2U7XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5pc01vdmVkICYmIHBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gICAgfVxuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gUmV0dXJuIEdyYWIgQ3Vyc29yXG4gIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiBkYXRhLmlzTW92ZWQgJiYgZGF0YS5pc1RvdWNoZWQgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICB9XG5cbiAgLy8gVGltZSBkaWZmXG4gIGNvbnN0IHRvdWNoRW5kVGltZSA9IG5vdygpO1xuICBjb25zdCB0aW1lRGlmZiA9IHRvdWNoRW5kVGltZSAtIGRhdGEudG91Y2hTdGFydFRpbWU7XG5cbiAgLy8gVGFwLCBkb3VibGVUYXAsIENsaWNrXG4gIGlmIChzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIGNvbnN0IHBhdGhUcmVlID0gZS5wYXRoIHx8IGUuY29tcG9zZWRQYXRoICYmIGUuY29tcG9zZWRQYXRoKCk7XG4gICAgc3dpcGVyLnVwZGF0ZUNsaWNrZWRTbGlkZShwYXRoVHJlZSAmJiBwYXRoVHJlZVswXSB8fCBlLnRhcmdldCk7XG4gICAgc3dpcGVyLmVtaXQoJ3RhcCBjbGljaycsIGUpO1xuICAgIGlmICh0aW1lRGlmZiA8IDMwMCAmJiB0b3VjaEVuZFRpbWUgLSBkYXRhLmxhc3RDbGlja1RpbWUgPCAzMDApIHtcbiAgICAgIHN3aXBlci5lbWl0KCdkb3VibGVUYXAgZG91YmxlQ2xpY2snLCBlKTtcbiAgICB9XG4gIH1cbiAgZGF0YS5sYXN0Q2xpY2tUaW1lID0gbm93KCk7XG4gIG5leHRUaWNrKCgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5kZXN0cm95ZWQpIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgfSk7XG4gIGlmICghZGF0YS5pc1RvdWNoZWQgfHwgIWRhdGEuaXNNb3ZlZCB8fCAhc3dpcGVyLnN3aXBlRGlyZWN0aW9uIHx8IHRvdWNoZXMuZGlmZiA9PT0gMCB8fCBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPT09IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgbGV0IGN1cnJlbnRQb3M7XG4gIGlmIChwYXJhbXMuZm9sbG93RmluZ2VyKSB7XG4gICAgY3VycmVudFBvcyA9IHJ0bCA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICBjdXJyZW50UG9zID0gLWRhdGEuY3VycmVudFRyYW5zbGF0ZTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZnJlZU1vZGUub25Ub3VjaEVuZCh7XG4gICAgICBjdXJyZW50UG9zXG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRmluZCBjdXJyZW50IHNsaWRlXG4gIGxldCBzdG9wSW5kZXggPSAwO1xuICBsZXQgZ3JvdXBTaXplID0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFswXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICBjb25zdCBpbmNyZW1lbnQgPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0gJiYgY3VycmVudFBvcyA8IHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0pIHtcbiAgICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSAtIHNsaWRlc0dyaWRbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICBncm91cFNpemUgPSBzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMV0gLSBzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMl07XG4gICAgfVxuICB9XG4gIGxldCByZXdpbmRGaXJzdEluZGV4ID0gbnVsbDtcbiAgbGV0IHJld2luZExhc3RJbmRleCA9IG51bGw7XG4gIGlmIChwYXJhbXMucmV3aW5kKSB7XG4gICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgcmV3aW5kTGFzdEluZGV4ID0gc3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHN3aXBlci52aXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCAtIDEgOiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDE7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuaXNFbmQpIHtcbiAgICAgIHJld2luZEZpcnN0SW5kZXggPSAwO1xuICAgIH1cbiAgfVxuICAvLyBGaW5kIGN1cnJlbnQgc2xpZGUgc2l6ZVxuICBjb25zdCByYXRpbyA9IChjdXJyZW50UG9zIC0gc2xpZGVzR3JpZFtzdG9wSW5kZXhdKSAvIGdyb3VwU2l6ZTtcbiAgY29uc3QgaW5jcmVtZW50ID0gc3RvcEluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICBpZiAodGltZURpZmYgPiBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgLy8gTG9uZyB0b3VjaGVzXG4gICAgaWYgKCFwYXJhbXMubG9uZ1N3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICBpZiAocmF0aW8gPj0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykgc3dpcGVyLnNsaWRlVG8ocGFyYW1zLnJld2luZCAmJiBzd2lwZXIuaXNFbmQgPyByZXdpbmRGaXJzdEluZGV4IDogc3RvcEluZGV4ICsgaW5jcmVtZW50KTtlbHNlIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgaWYgKHJhdGlvID4gMSAtIHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgIH0gZWxzZSBpZiAocmV3aW5kTGFzdEluZGV4ICE9PSBudWxsICYmIHJhdGlvIDwgMCAmJiBNYXRoLmFicyhyYXRpbykgPiBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHJld2luZExhc3RJbmRleCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBTaG9ydCBzd2lwZXNcbiAgICBpZiAoIXBhcmFtcy5zaG9ydFN3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaXNOYXZCdXR0b25UYXJnZXQgPSBzd2lwZXIubmF2aWdhdGlvbiAmJiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKTtcbiAgICBpZiAoIWlzTmF2QnV0dG9uVGFyZ2V0KSB7XG4gICAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8ocmV3aW5kRmlyc3RJbmRleCAhPT0gbnVsbCA/IHJld2luZEZpcnN0SW5kZXggOiBzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHJld2luZExhc3RJbmRleCAhPT0gbnVsbCA/IHJld2luZExhc3RJbmRleCA6IHN0b3BJbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlLnRhcmdldCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBpbmNyZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgfVxufSIsImxldCB0aW1lb3V0O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgZWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKGVsICYmIGVsLm9mZnNldFdpZHRoID09PSAwKSByZXR1cm47XG5cbiAgLy8gQnJlYWtwb2ludHNcbiAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gIH1cblxuICAvLyBTYXZlIGxvY2tzXG4gIGNvbnN0IHtcbiAgICBhbGxvd1NsaWRlTmV4dCxcbiAgICBhbGxvd1NsaWRlUHJldixcbiAgICBzbmFwR3JpZFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcblxuICAvLyBEaXNhYmxlIGxvY2tzIG9uIHJlc2l6ZVxuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIGNvbnN0IGlzVmlydHVhbExvb3AgPSBpc1ZpcnR1YWwgJiYgcGFyYW1zLmxvb3A7XG4gIGlmICgocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmICFpc1ZpcnR1YWxMb29wKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiAhaXNWaXJ0dWFsKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0xvb3Aoc3dpcGVyLnJlYWxJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG4gIH1cbiAgaWYgKHN3aXBlci5hdXRvcGxheSAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZyAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHN3aXBlci5hdXRvcGxheS5yZXN1bWUoKTtcbiAgICB9LCA1MDApO1xuICB9XG4gIC8vIFJldHVybiBsb2NrcyBhZnRlciByZXNpemVcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb25DbGljayhlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgaWYgKCFzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3MpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24gJiYgc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb25TY3JvbGwoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICB3cmFwcGVyRWwsXG4gICAgcnRsVHJhbnNsYXRlLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICBzd2lwZXIudHJhbnNsYXRlID0gLXdyYXBwZXJFbC5zY3JvbGxMZWZ0O1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbFRvcDtcbiAgfVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgaWYgKHN3aXBlci50cmFuc2xhdGUgPT09IDApIHN3aXBlci50cmFuc2xhdGUgPSAwO1xuICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgbGV0IG5ld1Byb2dyZXNzO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHN3aXBlci50cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cbiAgaWYgKG5ld1Byb2dyZXNzICE9PSBzd2lwZXIucHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MocnRsVHJhbnNsYXRlID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlKTtcbiAgfVxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNsYXRlJywgc3dpcGVyLnRyYW5zbGF0ZSwgZmFsc2UpO1xufSIsImV4cG9ydCBjb25zdCBwcm9jZXNzTGF6eVByZWxvYWRlciA9IChzd2lwZXIsIGltYWdlRWwpID0+IHtcbiAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLnBhcmFtcykgcmV0dXJuO1xuICBjb25zdCBzbGlkZVNlbGVjdG9yID0gKCkgPT4gc3dpcGVyLmlzRWxlbWVudCA/IGBzd2lwZXItc2xpZGVgIDogYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gO1xuICBjb25zdCBzbGlkZUVsID0gaW1hZ2VFbC5jbG9zZXN0KHNsaWRlU2VsZWN0b3IoKSk7XG4gIGlmIChzbGlkZUVsKSB7XG4gICAgY29uc3QgbGF6eUVsID0gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKGAuJHtzd2lwZXIucGFyYW1zLmxhenlQcmVsb2FkZXJDbGFzc31gKTtcbiAgICBpZiAobGF6eUVsKSBsYXp5RWwucmVtb3ZlKCk7XG4gIH1cbn07IiwiaW1wb3J0IHsgcHJvY2Vzc0xhenlQcmVsb2FkZXIgfSBmcm9tICcuLi8uLi9zaGFyZWQvcHJvY2Vzcy1sYXp5LXByZWxvYWRlci5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvbkxvYWQoZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBwcm9jZXNzTGF6eVByZWxvYWRlcihzd2lwZXIsIGUudGFyZ2V0KTtcbiAgc3dpcGVyLnVwZGF0ZSgpO1xufSIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgb25Ub3VjaFN0YXJ0IGZyb20gJy4vb25Ub3VjaFN0YXJ0LmpzJztcbmltcG9ydCBvblRvdWNoTW92ZSBmcm9tICcuL29uVG91Y2hNb3ZlLmpzJztcbmltcG9ydCBvblRvdWNoRW5kIGZyb20gJy4vb25Ub3VjaEVuZC5qcyc7XG5pbXBvcnQgb25SZXNpemUgZnJvbSAnLi9vblJlc2l6ZS5qcyc7XG5pbXBvcnQgb25DbGljayBmcm9tICcuL29uQ2xpY2suanMnO1xuaW1wb3J0IG9uU2Nyb2xsIGZyb20gJy4vb25TY3JvbGwuanMnO1xuaW1wb3J0IG9uTG9hZCBmcm9tICcuL29uTG9hZC5qcyc7XG5sZXQgZHVtbXlFdmVudEF0dGFjaGVkID0gZmFsc2U7XG5mdW5jdGlvbiBkdW1teUV2ZW50TGlzdGVuZXIoKSB7fVxuY29uc3QgZXZlbnRzID0gKHN3aXBlciwgbWV0aG9kKSA9PiB7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBlbCxcbiAgICB3cmFwcGVyRWwsXG4gICAgZGV2aWNlXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGNhcHR1cmUgPSAhIXBhcmFtcy5uZXN0ZWQ7XG4gIGNvbnN0IGRvbU1ldGhvZCA9IG1ldGhvZCA9PT0gJ29uJyA/ICdhZGRFdmVudExpc3RlbmVyJyA6ICdyZW1vdmVFdmVudExpc3RlbmVyJztcbiAgY29uc3Qgc3dpcGVyTWV0aG9kID0gbWV0aG9kO1xuXG4gIC8vIFRvdWNoIEV2ZW50c1xuICBlbFtkb21NZXRob2RdKCdwb2ludGVyZG93bicsIHN3aXBlci5vblRvdWNoU3RhcnQsIHtcbiAgICBwYXNzaXZlOiBmYWxzZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcm1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIHtcbiAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICBjYXB0dXJlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVydXAnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJjYW5jZWwnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJvdXQnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJsZWF2ZScsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcblxuICAvLyBQcmV2ZW50IExpbmtzIENsaWNrc1xuICBpZiAocGFyYW1zLnByZXZlbnRDbGlja3MgfHwgcGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbikge1xuICAgIGVsW2RvbU1ldGhvZF0oJ2NsaWNrJywgc3dpcGVyLm9uQ2xpY2ssIHRydWUpO1xuICB9XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHdyYXBwZXJFbFtkb21NZXRob2RdKCdzY3JvbGwnLCBzd2lwZXIub25TY3JvbGwpO1xuICB9XG5cbiAgLy8gUmVzaXplIGhhbmRsZXJcbiAgaWYgKHBhcmFtcy51cGRhdGVPbldpbmRvd1Jlc2l6ZSkge1xuICAgIHN3aXBlcltzd2lwZXJNZXRob2RdKGRldmljZS5pb3MgfHwgZGV2aWNlLmFuZHJvaWQgPyAncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlIG9ic2VydmVyVXBkYXRlJyA6ICdyZXNpemUgb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyW3N3aXBlck1ldGhvZF0oJ29ic2VydmVyVXBkYXRlJywgb25SZXNpemUsIHRydWUpO1xuICB9XG5cbiAgLy8gSW1hZ2VzIGxvYWRlclxuICBlbFtkb21NZXRob2RdKCdsb2FkJywgc3dpcGVyLm9uTG9hZCwge1xuICAgIGNhcHR1cmU6IHRydWVcbiAgfSk7XG59O1xuZnVuY3Rpb24gYXR0YWNoRXZlbnRzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgc3dpcGVyLm9uVG91Y2hTdGFydCA9IG9uVG91Y2hTdGFydC5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vblRvdWNoTW92ZSA9IG9uVG91Y2hNb3ZlLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hFbmQgPSBvblRvdWNoRW5kLmJpbmQoc3dpcGVyKTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLm9uU2Nyb2xsID0gb25TY3JvbGwuYmluZChzd2lwZXIpO1xuICB9XG4gIHN3aXBlci5vbkNsaWNrID0gb25DbGljay5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vbkxvYWQgPSBvbkxvYWQuYmluZChzd2lwZXIpO1xuICBpZiAoIWR1bW15RXZlbnRBdHRhY2hlZCkge1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBkdW1teUV2ZW50TGlzdGVuZXIpO1xuICAgIGR1bW15RXZlbnRBdHRhY2hlZCA9IHRydWU7XG4gIH1cbiAgZXZlbnRzKHN3aXBlciwgJ29uJyk7XG59XG5mdW5jdGlvbiBkZXRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGV2ZW50cyhzd2lwZXIsICdvZmYnKTtcbn1cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYXR0YWNoRXZlbnRzLFxuICBkZXRhY2hFdmVudHNcbn07IiwiaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmNvbnN0IGlzR3JpZEVuYWJsZWQgPSAoc3dpcGVyLCBwYXJhbXMpID0+IHtcbiAgcmV0dXJuIHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldEJyZWFrcG9pbnQoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICByZWFsSW5kZXgsXG4gICAgaW5pdGlhbGl6ZWQsXG4gICAgcGFyYW1zLFxuICAgIGVsXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGJyZWFrcG9pbnRzID0gcGFyYW1zLmJyZWFrcG9pbnRzO1xuICBpZiAoIWJyZWFrcG9pbnRzIHx8IGJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAvLyBHZXQgYnJlYWtwb2ludCBmb3Igd2luZG93IHdpZHRoIGFuZCB1cGRhdGUgcGFyYW1ldGVyc1xuICBjb25zdCBicmVha3BvaW50ID0gc3dpcGVyLmdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMsIHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHNCYXNlLCBzd2lwZXIuZWwpO1xuICBpZiAoIWJyZWFrcG9pbnQgfHwgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ID09PSBicmVha3BvaW50KSByZXR1cm47XG4gIGNvbnN0IGJyZWFrcG9pbnRPbmx5UGFyYW1zID0gYnJlYWtwb2ludCBpbiBicmVha3BvaW50cyA/IGJyZWFrcG9pbnRzW2JyZWFrcG9pbnRdIDogdW5kZWZpbmVkO1xuICBjb25zdCBicmVha3BvaW50UGFyYW1zID0gYnJlYWtwb2ludE9ubHlQYXJhbXMgfHwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zO1xuICBjb25zdCB3YXNNdWx0aVJvdyA9IGlzR3JpZEVuYWJsZWQoc3dpcGVyLCBwYXJhbXMpO1xuICBjb25zdCBpc011bHRpUm93ID0gaXNHcmlkRW5hYmxlZChzd2lwZXIsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICBjb25zdCB3YXNFbmFibGVkID0gcGFyYW1zLmVuYWJsZWQ7XG4gIGlmICh3YXNNdWx0aVJvdyAmJiAhaXNNdWx0aVJvdykge1xuICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZGAsIGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCk7XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gIH0gZWxzZSBpZiAoIXdhc011bHRpUm93ICYmIGlzTXVsdGlSb3cpIHtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWRgKTtcbiAgICBpZiAoYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgJiYgYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgPT09ICdjb2x1bW4nIHx8ICFicmVha3BvaW50UGFyYW1zLmdyaWQuZmlsbCAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJykge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkLWNvbHVtbmApO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgfVxuXG4gIC8vIFRvZ2dsZSBuYXZpZ2F0aW9uLCBwYWdpbmF0aW9uLCBzY3JvbGxiYXJcbiAgWyduYXZpZ2F0aW9uJywgJ3BhZ2luYXRpb24nLCAnc2Nyb2xsYmFyJ10uZm9yRWFjaChwcm9wID0+IHtcbiAgICBjb25zdCB3YXNNb2R1bGVFbmFibGVkID0gcGFyYW1zW3Byb3BdICYmIHBhcmFtc1twcm9wXS5lbmFibGVkO1xuICAgIGNvbnN0IGlzTW9kdWxlRW5hYmxlZCA9IGJyZWFrcG9pbnRQYXJhbXNbcHJvcF0gJiYgYnJlYWtwb2ludFBhcmFtc1twcm9wXS5lbmFibGVkO1xuICAgIGlmICh3YXNNb2R1bGVFbmFibGVkICYmICFpc01vZHVsZUVuYWJsZWQpIHtcbiAgICAgIHN3aXBlcltwcm9wXS5kaXNhYmxlKCk7XG4gICAgfVxuICAgIGlmICghd2FzTW9kdWxlRW5hYmxlZCAmJiBpc01vZHVsZUVuYWJsZWQpIHtcbiAgICAgIHN3aXBlcltwcm9wXS5lbmFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBkaXJlY3Rpb25DaGFuZ2VkID0gYnJlYWtwb2ludFBhcmFtcy5kaXJlY3Rpb24gJiYgYnJlYWtwb2ludFBhcmFtcy5kaXJlY3Rpb24gIT09IHBhcmFtcy5kaXJlY3Rpb247XG4gIGNvbnN0IG5lZWRzUmVMb29wID0gcGFyYW1zLmxvb3AgJiYgKGJyZWFrcG9pbnRQYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gcGFyYW1zLnNsaWRlc1BlclZpZXcgfHwgZGlyZWN0aW9uQ2hhbmdlZCk7XG4gIGlmIChkaXJlY3Rpb25DaGFuZ2VkICYmIGluaXRpYWxpemVkKSB7XG4gICAgc3dpcGVyLmNoYW5nZURpcmVjdGlvbigpO1xuICB9XG4gIGV4dGVuZChzd2lwZXIucGFyYW1zLCBicmVha3BvaW50UGFyYW1zKTtcbiAgY29uc3QgaXNFbmFibGVkID0gc3dpcGVyLnBhcmFtcy5lbmFibGVkO1xuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2XG4gIH0pO1xuICBpZiAod2FzRW5hYmxlZCAmJiAhaXNFbmFibGVkKSB7XG4gICAgc3dpcGVyLmRpc2FibGUoKTtcbiAgfSBlbHNlIGlmICghd2FzRW5hYmxlZCAmJiBpc0VuYWJsZWQpIHtcbiAgICBzd2lwZXIuZW5hYmxlKCk7XG4gIH1cbiAgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ID0gYnJlYWtwb2ludDtcbiAgc3dpcGVyLmVtaXQoJ19iZWZvcmVCcmVha3BvaW50JywgYnJlYWtwb2ludFBhcmFtcyk7XG4gIGlmIChuZWVkc1JlTG9vcCAmJiBpbml0aWFsaXplZCkge1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKHJlYWxJbmRleCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdicmVha3BvaW50JywgYnJlYWtwb2ludFBhcmFtcyk7XG59IiwiZXhwb3J0IGRlZmF1bHQge1xuICBpbml0OiB0cnVlLFxuICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgb25lV2F5TW92ZW1lbnQ6IGZhbHNlLFxuICB0b3VjaEV2ZW50c1RhcmdldDogJ3dyYXBwZXInLFxuICBpbml0aWFsU2xpZGU6IDAsXG4gIHNwZWVkOiAzMDAsXG4gIGNzc01vZGU6IGZhbHNlLFxuICB1cGRhdGVPbldpbmRvd1Jlc2l6ZTogdHJ1ZSxcbiAgcmVzaXplT2JzZXJ2ZXI6IHRydWUsXG4gIG5lc3RlZDogZmFsc2UsXG4gIGNyZWF0ZUVsZW1lbnRzOiBmYWxzZSxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgZm9jdXNhYmxlRWxlbWVudHM6ICdpbnB1dCwgc2VsZWN0LCBvcHRpb24sIHRleHRhcmVhLCBidXR0b24sIHZpZGVvLCBsYWJlbCcsXG4gIC8vIE92ZXJyaWRlc1xuICB3aWR0aDogbnVsbCxcbiAgaGVpZ2h0OiBudWxsLFxuICAvL1xuICBwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb246IGZhbHNlLFxuICAvLyBzc3JcbiAgdXNlckFnZW50OiBudWxsLFxuICB1cmw6IG51bGwsXG4gIC8vIFRvIHN1cHBvcnQgaU9TJ3Mgc3dpcGUtdG8tZ28tYmFjayBnZXN0dXJlICh3aGVuIGJlaW5nIHVzZWQgaW4tYXBwKS5cbiAgZWRnZVN3aXBlRGV0ZWN0aW9uOiBmYWxzZSxcbiAgZWRnZVN3aXBlVGhyZXNob2xkOiAyMCxcbiAgLy8gQXV0b2hlaWdodFxuICBhdXRvSGVpZ2h0OiBmYWxzZSxcbiAgLy8gU2V0IHdyYXBwZXIgd2lkdGhcbiAgc2V0V3JhcHBlclNpemU6IGZhbHNlLFxuICAvLyBWaXJ0dWFsIFRyYW5zbGF0ZVxuICB2aXJ0dWFsVHJhbnNsYXRlOiBmYWxzZSxcbiAgLy8gRWZmZWN0c1xuICBlZmZlY3Q6ICdzbGlkZScsXG4gIC8vICdzbGlkZScgb3IgJ2ZhZGUnIG9yICdjdWJlJyBvciAnY292ZXJmbG93JyBvciAnZmxpcCdcblxuICAvLyBCcmVha3BvaW50c1xuICBicmVha3BvaW50czogdW5kZWZpbmVkLFxuICBicmVha3BvaW50c0Jhc2U6ICd3aW5kb3cnLFxuICAvLyBTbGlkZXMgZ3JpZFxuICBzcGFjZUJldHdlZW46IDAsXG4gIHNsaWRlc1BlclZpZXc6IDEsXG4gIHNsaWRlc1Blckdyb3VwOiAxLFxuICBzbGlkZXNQZXJHcm91cFNraXA6IDAsXG4gIHNsaWRlc1Blckdyb3VwQXV0bzogZmFsc2UsXG4gIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgY2VudGVyZWRTbGlkZXNCb3VuZHM6IGZhbHNlLFxuICBzbGlkZXNPZmZzZXRCZWZvcmU6IDAsXG4gIC8vIGluIHB4XG4gIHNsaWRlc09mZnNldEFmdGVyOiAwLFxuICAvLyBpbiBweFxuICBub3JtYWxpemVTbGlkZUluZGV4OiB0cnVlLFxuICBjZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXM6IGZhbHNlLFxuICAvLyBEaXNhYmxlIHN3aXBlciBhbmQgaGlkZSBuYXZpZ2F0aW9uIHdoZW4gY29udGFpbmVyIG5vdCBvdmVyZmxvd1xuICB3YXRjaE92ZXJmbG93OiB0cnVlLFxuICAvLyBSb3VuZCBsZW5ndGhcbiAgcm91bmRMZW5ndGhzOiBmYWxzZSxcbiAgLy8gVG91Y2hlc1xuICB0b3VjaFJhdGlvOiAxLFxuICB0b3VjaEFuZ2xlOiA0NSxcbiAgc2ltdWxhdGVUb3VjaDogdHJ1ZSxcbiAgc2hvcnRTd2lwZXM6IHRydWUsXG4gIGxvbmdTd2lwZXM6IHRydWUsXG4gIGxvbmdTd2lwZXNSYXRpbzogMC41LFxuICBsb25nU3dpcGVzTXM6IDMwMCxcbiAgZm9sbG93RmluZ2VyOiB0cnVlLFxuICBhbGxvd1RvdWNoTW92ZTogdHJ1ZSxcbiAgdGhyZXNob2xkOiA1LFxuICB0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb246IGZhbHNlLFxuICB0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ6IHRydWUsXG4gIHRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0OiBmYWxzZSxcbiAgdG91Y2hSZWxlYXNlT25FZGdlczogZmFsc2UsXG4gIC8vIFVuaXF1ZSBOYXZpZ2F0aW9uIEVsZW1lbnRzXG4gIHVuaXF1ZU5hdkVsZW1lbnRzOiB0cnVlLFxuICAvLyBSZXNpc3RhbmNlXG4gIHJlc2lzdGFuY2U6IHRydWUsXG4gIHJlc2lzdGFuY2VSYXRpbzogMC44NSxcbiAgLy8gUHJvZ3Jlc3NcbiAgd2F0Y2hTbGlkZXNQcm9ncmVzczogZmFsc2UsXG4gIC8vIEN1cnNvclxuICBncmFiQ3Vyc29yOiBmYWxzZSxcbiAgLy8gQ2xpY2tzXG4gIHByZXZlbnRDbGlja3M6IHRydWUsXG4gIHByZXZlbnRDbGlja3NQcm9wYWdhdGlvbjogdHJ1ZSxcbiAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2UsXG4gIC8vIGxvb3BcbiAgbG9vcDogZmFsc2UsXG4gIGxvb3BlZFNsaWRlczogbnVsbCxcbiAgbG9vcFByZXZlbnRzU2xpZGluZzogdHJ1ZSxcbiAgLy8gcmV3aW5kXG4gIHJld2luZDogZmFsc2UsXG4gIC8vIFN3aXBpbmcvbm8gc3dpcGluZ1xuICBhbGxvd1NsaWRlUHJldjogdHJ1ZSxcbiAgYWxsb3dTbGlkZU5leHQ6IHRydWUsXG4gIHN3aXBlSGFuZGxlcjogbnVsbCxcbiAgLy8gJy5zd2lwZS1oYW5kbGVyJyxcbiAgbm9Td2lwaW5nOiB0cnVlLFxuICBub1N3aXBpbmdDbGFzczogJ3N3aXBlci1uby1zd2lwaW5nJyxcbiAgbm9Td2lwaW5nU2VsZWN0b3I6IG51bGwsXG4gIC8vIFBhc3NpdmUgTGlzdGVuZXJzXG4gIHBhc3NpdmVMaXN0ZW5lcnM6IHRydWUsXG4gIG1heEJhY2tmYWNlSGlkZGVuU2xpZGVzOiAxMCxcbiAgLy8gTlNcbiAgY29udGFpbmVyTW9kaWZpZXJDbGFzczogJ3N3aXBlci0nLFxuICAvLyBORVdcbiAgc2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZScsXG4gIHNsaWRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtYWN0aXZlJyxcbiAgc2xpZGVWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtdmlzaWJsZScsXG4gIHNsaWRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLW5leHQnLFxuICBzbGlkZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1wcmV2JyxcbiAgd3JhcHBlckNsYXNzOiAnc3dpcGVyLXdyYXBwZXInLFxuICBsYXp5UHJlbG9hZGVyQ2xhc3M6ICdzd2lwZXItbGF6eS1wcmVsb2FkZXInLFxuICAvLyBDYWxsYmFja3NcbiAgcnVuQ2FsbGJhY2tzT25Jbml0OiB0cnVlLFxuICAvLyBJbnRlcm5hbHNcbiAgX2VtaXRDbGFzc2VzOiBmYWxzZVxufTsiLCJpbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbW9kdWxlRXh0ZW5kUGFyYW1zKHBhcmFtcywgYWxsTW9kdWxlc1BhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24gZXh0ZW5kUGFyYW1zKG9iaiA9IHt9KSB7XG4gICAgY29uc3QgbW9kdWxlUGFyYW1OYW1lID0gT2JqZWN0LmtleXMob2JqKVswXTtcbiAgICBjb25zdCBtb2R1bGVQYXJhbXMgPSBvYmpbbW9kdWxlUGFyYW1OYW1lXTtcbiAgICBpZiAodHlwZW9mIG1vZHVsZVBhcmFtcyAhPT0gJ29iamVjdCcgfHwgbW9kdWxlUGFyYW1zID09PSBudWxsKSB7XG4gICAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKFsnbmF2aWdhdGlvbicsICdwYWdpbmF0aW9uJywgJ3Njcm9sbGJhciddLmluZGV4T2YobW9kdWxlUGFyYW1OYW1lKSA+PSAwICYmIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSB0cnVlKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHtcbiAgICAgICAgYXV0bzogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKCEobW9kdWxlUGFyYW1OYW1lIGluIHBhcmFtcyAmJiAnZW5hYmxlZCcgaW4gbW9kdWxlUGFyYW1zKSkge1xuICAgICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gdHJ1ZSkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPT09ICdvYmplY3QnICYmICEoJ2VuYWJsZWQnIGluIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCA9IHRydWU7XG4gICAgfVxuICAgIGlmICghcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID0ge1xuICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICB9O1xuICAgIGV4dGVuZChhbGxNb2R1bGVzUGFyYW1zLCBvYmopO1xuICB9O1xufSIsIi8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogXCJvZmZcIiAqL1xuaW1wb3J0IHsgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IGV4dGVuZCwgbm93LCBkZWxldGVQcm9wcywgY3JlYXRlRWxlbWVudCwgZWxlbWVudENoaWxkcmVuLCBlbGVtZW50U3R5bGUgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMuanMnO1xuaW1wb3J0IHsgZ2V0U3VwcG9ydCB9IGZyb20gJy4uL3NoYXJlZC9nZXQtc3VwcG9ydC5qcyc7XG5pbXBvcnQgeyBnZXREZXZpY2UgfSBmcm9tICcuLi9zaGFyZWQvZ2V0LWRldmljZS5qcyc7XG5pbXBvcnQgeyBnZXRCcm93c2VyIH0gZnJvbSAnLi4vc2hhcmVkL2dldC1icm93c2VyLmpzJztcbmltcG9ydCBSZXNpemUgZnJvbSAnLi9tb2R1bGVzL3Jlc2l6ZS9yZXNpemUuanMnO1xuaW1wb3J0IE9ic2VydmVyIGZyb20gJy4vbW9kdWxlcy9vYnNlcnZlci9vYnNlcnZlci5qcyc7XG5pbXBvcnQgZXZlbnRzRW1pdHRlciBmcm9tICcuL2V2ZW50cy1lbWl0dGVyLmpzJztcbmltcG9ydCB1cGRhdGUgZnJvbSAnLi91cGRhdGUvaW5kZXguanMnO1xuaW1wb3J0IHRyYW5zbGF0ZSBmcm9tICcuL3RyYW5zbGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbiBmcm9tICcuL3RyYW5zaXRpb24vaW5kZXguanMnO1xuaW1wb3J0IHNsaWRlIGZyb20gJy4vc2xpZGUvaW5kZXguanMnO1xuaW1wb3J0IGxvb3AgZnJvbSAnLi9sb29wL2luZGV4LmpzJztcbmltcG9ydCBncmFiQ3Vyc29yIGZyb20gJy4vZ3JhYi1jdXJzb3IvaW5kZXguanMnO1xuaW1wb3J0IGV2ZW50cyBmcm9tICcuL2V2ZW50cy9pbmRleC5qcyc7XG5pbXBvcnQgYnJlYWtwb2ludHMgZnJvbSAnLi9icmVha3BvaW50cy9pbmRleC5qcyc7XG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuL2NsYXNzZXMvaW5kZXguanMnO1xuaW1wb3J0IGNoZWNrT3ZlcmZsb3cgZnJvbSAnLi9jaGVjay1vdmVyZmxvdy9pbmRleC5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0cy5qcyc7XG5pbXBvcnQgbW9kdWxlRXh0ZW5kUGFyYW1zIGZyb20gJy4vbW9kdWxlRXh0ZW5kUGFyYW1zLmpzJztcbmltcG9ydCB7IHByb2Nlc3NMYXp5UHJlbG9hZGVyIH0gZnJvbSAnLi4vc2hhcmVkL3Byb2Nlc3MtbGF6eS1wcmVsb2FkZXIuanMnO1xuY29uc3QgcHJvdG90eXBlcyA9IHtcbiAgZXZlbnRzRW1pdHRlcixcbiAgdXBkYXRlLFxuICB0cmFuc2xhdGUsXG4gIHRyYW5zaXRpb24sXG4gIHNsaWRlLFxuICBsb29wLFxuICBncmFiQ3Vyc29yLFxuICBldmVudHMsXG4gIGJyZWFrcG9pbnRzLFxuICBjaGVja092ZXJmbG93LFxuICBjbGFzc2VzXG59O1xuY29uc3QgZXh0ZW5kZWREZWZhdWx0cyA9IHt9O1xuY2xhc3MgU3dpcGVyIHtcbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIGxldCBlbDtcbiAgICBsZXQgcGFyYW1zO1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiBhcmdzWzBdLmNvbnN0cnVjdG9yICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmdzWzBdKS5zbGljZSg4LCAtMSkgPT09ICdPYmplY3QnKSB7XG4gICAgICBwYXJhbXMgPSBhcmdzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBbZWwsIHBhcmFtc10gPSBhcmdzO1xuICAgIH1cbiAgICBpZiAoIXBhcmFtcykgcGFyYW1zID0ge307XG4gICAgcGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMpO1xuICAgIGlmIChlbCAmJiAhcGFyYW1zLmVsKSBwYXJhbXMuZWwgPSBlbDtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgaWYgKHBhcmFtcy5lbCAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCkubGVuZ3RoID4gMSkge1xuICAgICAgY29uc3Qgc3dpcGVycyA9IFtdO1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpLmZvckVhY2goY29udGFpbmVyRWwgPT4ge1xuICAgICAgICBjb25zdCBuZXdQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcywge1xuICAgICAgICAgIGVsOiBjb250YWluZXJFbFxuICAgICAgICB9KTtcbiAgICAgICAgc3dpcGVycy5wdXNoKG5ldyBTd2lwZXIobmV3UGFyYW1zKSk7XG4gICAgICB9KTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICAgIHJldHVybiBzd2lwZXJzO1xuICAgIH1cblxuICAgIC8vIFN3aXBlciBJbnN0YW5jZVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLl9fc3dpcGVyX18gPSB0cnVlO1xuICAgIHN3aXBlci5zdXBwb3J0ID0gZ2V0U3VwcG9ydCgpO1xuICAgIHN3aXBlci5kZXZpY2UgPSBnZXREZXZpY2Uoe1xuICAgICAgdXNlckFnZW50OiBwYXJhbXMudXNlckFnZW50XG4gICAgfSk7XG4gICAgc3dpcGVyLmJyb3dzZXIgPSBnZXRCcm93c2VyKCk7XG4gICAgc3dpcGVyLmV2ZW50c0xpc3RlbmVycyA9IHt9O1xuICAgIHN3aXBlci5ldmVudHNBbnlMaXN0ZW5lcnMgPSBbXTtcbiAgICBzd2lwZXIubW9kdWxlcyA9IFsuLi5zd2lwZXIuX19tb2R1bGVzX19dO1xuICAgIGlmIChwYXJhbXMubW9kdWxlcyAmJiBBcnJheS5pc0FycmF5KHBhcmFtcy5tb2R1bGVzKSkge1xuICAgICAgc3dpcGVyLm1vZHVsZXMucHVzaCguLi5wYXJhbXMubW9kdWxlcyk7XG4gICAgfVxuICAgIGNvbnN0IGFsbE1vZHVsZXNQYXJhbXMgPSB7fTtcbiAgICBzd2lwZXIubW9kdWxlcy5mb3JFYWNoKG1vZCA9PiB7XG4gICAgICBtb2Qoe1xuICAgICAgICBwYXJhbXMsXG4gICAgICAgIHN3aXBlcixcbiAgICAgICAgZXh0ZW5kUGFyYW1zOiBtb2R1bGVFeHRlbmRQYXJhbXMocGFyYW1zLCBhbGxNb2R1bGVzUGFyYW1zKSxcbiAgICAgICAgb246IHN3aXBlci5vbi5iaW5kKHN3aXBlciksXG4gICAgICAgIG9uY2U6IHN3aXBlci5vbmNlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb2ZmOiBzd2lwZXIub2ZmLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZW1pdDogc3dpcGVyLmVtaXQuYmluZChzd2lwZXIpXG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIG1vZHVsZXMgcGFyYW1zXG4gICAgY29uc3Qgc3dpcGVyUGFyYW1zID0gZXh0ZW5kKHt9LCBkZWZhdWx0cywgYWxsTW9kdWxlc1BhcmFtcyk7XG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBwYXNzZWQgcGFyYW1zXG4gICAgc3dpcGVyLnBhcmFtcyA9IGV4dGVuZCh7fSwgc3dpcGVyUGFyYW1zLCBleHRlbmRlZERlZmF1bHRzLCBwYXJhbXMpO1xuICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcyA9IGV4dGVuZCh7fSwgc3dpcGVyLnBhcmFtcyk7XG4gICAgc3dpcGVyLnBhc3NlZFBhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zKTtcblxuICAgIC8vIGFkZCBldmVudCBsaXN0ZW5lcnNcbiAgICBpZiAoc3dpcGVyLnBhcmFtcyAmJiBzd2lwZXIucGFyYW1zLm9uKSB7XG4gICAgICBPYmplY3Qua2V5cyhzd2lwZXIucGFyYW1zLm9uKS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICAgIHN3aXBlci5vbihldmVudE5hbWUsIHN3aXBlci5wYXJhbXMub25bZXZlbnROYW1lXSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbkFueSkge1xuICAgICAgc3dpcGVyLm9uQW55KHN3aXBlci5wYXJhbXMub25BbnkpO1xuICAgIH1cblxuICAgIC8vIEV4dGVuZCBTd2lwZXJcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgICAgZW5hYmxlZDogc3dpcGVyLnBhcmFtcy5lbmFibGVkLFxuICAgICAgZWwsXG4gICAgICAvLyBDbGFzc2VzXG4gICAgICBjbGFzc05hbWVzOiBbXSxcbiAgICAgIC8vIFNsaWRlc1xuICAgICAgc2xpZGVzOiBbXSxcbiAgICAgIHNsaWRlc0dyaWQ6IFtdLFxuICAgICAgc25hcEdyaWQ6IFtdLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkOiBbXSxcbiAgICAgIC8vIGlzRGlyZWN0aW9uXG4gICAgICBpc0hvcml6b250YWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgICAgfSxcbiAgICAgIGlzVmVydGljYWwoKSB7XG4gICAgICAgIHJldHVybiBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJztcbiAgICAgIH0sXG4gICAgICAvLyBJbmRleGVzXG4gICAgICBhY3RpdmVJbmRleDogMCxcbiAgICAgIHJlYWxJbmRleDogMCxcbiAgICAgIC8vXG4gICAgICBpc0JlZ2lubmluZzogdHJ1ZSxcbiAgICAgIGlzRW5kOiBmYWxzZSxcbiAgICAgIC8vIFByb3BzXG4gICAgICB0cmFuc2xhdGU6IDAsXG4gICAgICBwcmV2aW91c1RyYW5zbGF0ZTogMCxcbiAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgdmVsb2NpdHk6IDAsXG4gICAgICBhbmltYXRpbmc6IGZhbHNlLFxuICAgICAgLy8gTG9ja3NcbiAgICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgICAgYWxsb3dTbGlkZVByZXY6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZVByZXYsXG4gICAgICAvLyBUb3VjaCBFdmVudHNcbiAgICAgIHRvdWNoRXZlbnRzRGF0YToge1xuICAgICAgICBpc1RvdWNoZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNNb3ZlZDogdW5kZWZpbmVkLFxuICAgICAgICBhbGxvd1RvdWNoQ2FsbGJhY2tzOiB1bmRlZmluZWQsXG4gICAgICAgIHRvdWNoU3RhcnRUaW1lOiB1bmRlZmluZWQsXG4gICAgICAgIGlzU2Nyb2xsaW5nOiB1bmRlZmluZWQsXG4gICAgICAgIGN1cnJlbnRUcmFuc2xhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRUcmFuc2xhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxsb3dUaHJlc2hvbGRNb3ZlOiB1bmRlZmluZWQsXG4gICAgICAgIC8vIEZvcm0gZWxlbWVudHMgdG8gbWF0Y2hcbiAgICAgICAgZm9jdXNhYmxlRWxlbWVudHM6IHN3aXBlci5wYXJhbXMuZm9jdXNhYmxlRWxlbWVudHMsXG4gICAgICAgIC8vIExhc3QgY2xpY2sgdGltZVxuICAgICAgICBsYXN0Q2xpY2tUaW1lOiBub3coKSxcbiAgICAgICAgY2xpY2tUaW1lb3V0OiB1bmRlZmluZWQsXG4gICAgICAgIC8vIFZlbG9jaXRpZXNcbiAgICAgICAgdmVsb2NpdGllczogW10sXG4gICAgICAgIGFsbG93TW9tZW50dW1Cb3VuY2U6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgZXZDYWNoZTogW11cbiAgICAgIH0sXG4gICAgICAvLyBDbGlja3NcbiAgICAgIGFsbG93Q2xpY2s6IHRydWUsXG4gICAgICAvLyBUb3VjaGVzXG4gICAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICAgIHRvdWNoZXM6IHtcbiAgICAgICAgc3RhcnRYOiAwLFxuICAgICAgICBzdGFydFk6IDAsXG4gICAgICAgIGN1cnJlbnRYOiAwLFxuICAgICAgICBjdXJyZW50WTogMCxcbiAgICAgICAgZGlmZjogMFxuICAgICAgfSxcbiAgICAgIC8vIEltYWdlc1xuICAgICAgaW1hZ2VzVG9Mb2FkOiBbXSxcbiAgICAgIGltYWdlc0xvYWRlZDogMFxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfc3dpcGVyJyk7XG5cbiAgICAvLyBJbml0XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaW5pdCkge1xuICAgICAgc3dpcGVyLmluaXQoKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYXBwIGluc3RhbmNlXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnN0cnVjdG9yLXJldHVyblxuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgcmVjYWxjU2xpZGVzKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzRWwsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIHN3aXBlci5zbGlkZXMgPSBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICB9XG4gIGVuYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5lbmFibGVkID0gdHJ1ZTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnZW5hYmxlJyk7XG4gIH1cbiAgZGlzYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBzd2lwZXIuZW5hYmxlZCA9IGZhbHNlO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci51bnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ2Rpc2FibGUnKTtcbiAgfVxuICBzZXRQcm9ncmVzcyhwcm9ncmVzcywgc3BlZWQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHByb2dyZXNzID0gTWF0aC5taW4oTWF0aC5tYXgocHJvZ3Jlc3MsIDApLCAxKTtcbiAgICBjb25zdCBtaW4gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgY29uc3QgbWF4ID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgIGNvbnN0IGN1cnJlbnQgPSAobWF4IC0gbWluKSAqIHByb2dyZXNzICsgbWluO1xuICAgIHN3aXBlci50cmFuc2xhdGVUbyhjdXJyZW50LCB0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnID8gMCA6IHNwZWVkKTtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9XG4gIGVtaXRDb250YWluZXJDbGFzc2VzKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLl9lbWl0Q2xhc3NlcyB8fCAhc3dpcGVyLmVsKSByZXR1cm47XG4gICAgY29uc3QgY2xzID0gc3dpcGVyLmVsLmNsYXNzTmFtZS5zcGxpdCgnICcpLmZpbHRlcihjbGFzc05hbWUgPT4ge1xuICAgICAgcmV0dXJuIGNsYXNzTmFtZS5pbmRleE9mKCdzd2lwZXInKSA9PT0gMCB8fCBjbGFzc05hbWUuaW5kZXhPZihzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpID09PSAwO1xuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdfY29udGFpbmVyQ2xhc3NlcycsIGNscy5qb2luKCcgJykpO1xuICB9XG4gIGdldFNsaWRlQ2xhc3NlcyhzbGlkZUVsKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuICcnO1xuICAgIHJldHVybiBzbGlkZUVsLmNsYXNzTmFtZS5zcGxpdCgnICcpLmZpbHRlcihjbGFzc05hbWUgPT4ge1xuICAgICAgcmV0dXJuIGNsYXNzTmFtZS5pbmRleE9mKCdzd2lwZXItc2xpZGUnKSA9PT0gMCB8fCBjbGFzc05hbWUuaW5kZXhPZihzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpID09PSAwO1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgfVxuICBlbWl0U2xpZGVzQ2xhc3NlcygpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5fZW1pdENsYXNzZXMgfHwgIXN3aXBlci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IHVwZGF0ZXMgPSBbXTtcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBjb25zdCBjbGFzc05hbWVzID0gc3dpcGVyLmdldFNsaWRlQ2xhc3NlcyhzbGlkZUVsKTtcbiAgICAgIHVwZGF0ZXMucHVzaCh7XG4gICAgICAgIHNsaWRlRWwsXG4gICAgICAgIGNsYXNzTmFtZXNcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLmVtaXQoJ19zbGlkZUNsYXNzJywgc2xpZGVFbCwgY2xhc3NOYW1lcyk7XG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ19zbGlkZUNsYXNzZXMnLCB1cGRhdGVzKTtcbiAgfVxuICBzbGlkZXNQZXJWaWV3RHluYW1pYyh2aWV3ID0gJ2N1cnJlbnQnLCBleGFjdCA9IGZhbHNlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBwYXJhbXMsXG4gICAgICBzbGlkZXMsXG4gICAgICBzbGlkZXNHcmlkLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkLFxuICAgICAgc2l6ZTogc3dpcGVyU2l6ZSxcbiAgICAgIGFjdGl2ZUluZGV4XG4gICAgfSA9IHN3aXBlcjtcbiAgICBsZXQgc3B2ID0gMTtcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBsZXQgc2xpZGVTaXplID0gc2xpZGVzW2FjdGl2ZUluZGV4XS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICBsZXQgYnJlYWtMb29wO1xuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAodmlldyA9PT0gJ2N1cnJlbnQnKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluVmlldyA9IGV4YWN0ID8gc2xpZGVzR3JpZFtpXSArIHNsaWRlc1NpemVzR3JpZFtpXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZSA6IHNsaWRlc0dyaWRbaV0gLSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSA8IHN3aXBlclNpemU7XG4gICAgICAgICAgaWYgKHNsaWRlSW5WaWV3KSB7XG4gICAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHByZXZpb3VzXG4gICAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgICAgY29uc3Qgc2xpZGVJblZpZXcgPSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSAtIHNsaWRlc0dyaWRbaV0gPCBzd2lwZXJTaXplO1xuICAgICAgICAgIGlmIChzbGlkZUluVmlldykge1xuICAgICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzcHY7XG4gIH1cbiAgdXBkYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIHNuYXBHcmlkLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IHN3aXBlcjtcbiAgICAvLyBCcmVha3BvaW50c1xuICAgIGlmIChwYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfVxuICAgIFsuLi5zd2lwZXIuZWwucXVlcnlTZWxlY3RvckFsbCgnW2xvYWRpbmc9XCJsYXp5XCJdJyldLmZvckVhY2goaW1hZ2VFbCA9PiB7XG4gICAgICBpZiAoaW1hZ2VFbC5jb21wbGV0ZSkge1xuICAgICAgICBwcm9jZXNzTGF6eVByZWxvYWRlcihzd2lwZXIsIGltYWdlRWwpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHN3aXBlci51cGRhdGVTaXplKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgY29uc3QgdHJhbnNsYXRlVmFsdWUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSAqIC0xIDogc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGNvbnN0IG5ld1RyYW5zbGF0ZSA9IE1hdGgubWluKE1hdGgubWF4KHRyYW5zbGF0ZVZhbHVlLCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpLCBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cbiAgICBsZXQgdHJhbnNsYXRlZDtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiBzd2lwZXIucGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQpIHtcbiAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRyYW5zbGF0ZWQpIHtcbiAgICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgndXBkYXRlJyk7XG4gIH1cbiAgY2hhbmdlRGlyZWN0aW9uKG5ld0RpcmVjdGlvbiwgbmVlZFVwZGF0ZSA9IHRydWUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGN1cnJlbnREaXJlY3Rpb24gPSBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbjtcbiAgICBpZiAoIW5ld0RpcmVjdGlvbikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBuZXdEaXJlY3Rpb24gPSBjdXJyZW50RGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgIH1cbiAgICBpZiAobmV3RGlyZWN0aW9uID09PSBjdXJyZW50RGlyZWN0aW9uIHx8IG5ld0RpcmVjdGlvbiAhPT0gJ2hvcml6b250YWwnICYmIG5ld0RpcmVjdGlvbiAhPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICB9XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7Y3VycmVudERpcmVjdGlvbn1gKTtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtuZXdEaXJlY3Rpb259YCk7XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gICAgc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPSBuZXdEaXJlY3Rpb247XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdjaGFuZ2VEaXJlY3Rpb24nKTtcbiAgICBpZiAobmVlZFVwZGF0ZSkgc3dpcGVyLnVwZGF0ZSgpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgY2hhbmdlTGFuZ3VhZ2VEaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLnJ0bCAmJiBkaXJlY3Rpb24gPT09ICdydGwnIHx8ICFzd2lwZXIucnRsICYmIGRpcmVjdGlvbiA9PT0gJ2x0cicpIHJldHVybjtcbiAgICBzd2lwZXIucnRsID0gZGlyZWN0aW9uID09PSAncnRsJztcbiAgICBzd2lwZXIucnRsVHJhbnNsYXRlID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiBzd2lwZXIucnRsO1xuICAgIGlmIChzd2lwZXIucnRsKSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9cnRsYCk7XG4gICAgICBzd2lwZXIuZWwuZGlyID0gJ3J0bCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ydGxgKTtcbiAgICAgIHN3aXBlci5lbC5kaXIgPSAnbHRyJztcbiAgICB9XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG4gIG1vdW50KGVsZW1lbnQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIubW91bnRlZCkgcmV0dXJuIHRydWU7XG5cbiAgICAvLyBGaW5kIGVsXG4gICAgbGV0IGVsID0gZWxlbWVudCB8fCBzd2lwZXIucGFyYW1zLmVsO1xuICAgIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIH1cbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsLnN3aXBlciA9IHN3aXBlcjtcbiAgICBpZiAoZWwuc2hhZG93RWwpIHtcbiAgICAgIHN3aXBlci5pc0VsZW1lbnQgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBnZXRXcmFwcGVyU2VsZWN0b3IgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gYC4keyhzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcyB8fCAnJykudHJpbSgpLnNwbGl0KCcgJykuam9pbignLicpfWA7XG4gICAgfTtcbiAgICBjb25zdCBnZXRXcmFwcGVyID0gKCkgPT4ge1xuICAgICAgaWYgKGVsICYmIGVsLnNoYWRvd1Jvb3QgJiYgZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihnZXRXcmFwcGVyU2VsZWN0b3IoKSk7XG4gICAgICAgIC8vIENoaWxkcmVuIG5lZWRzIHRvIHJldHVybiBzbG90IGl0ZW1zXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gZWxlbWVudENoaWxkcmVuKGVsLCBnZXRXcmFwcGVyU2VsZWN0b3IoKSlbMF07XG4gICAgfTtcbiAgICAvLyBGaW5kIFdyYXBwZXJcbiAgICBsZXQgd3JhcHBlckVsID0gZ2V0V3JhcHBlcigpO1xuICAgIGlmICghd3JhcHBlckVsICYmIHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHtcbiAgICAgIHdyYXBwZXJFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHN3aXBlci5wYXJhbXMud3JhcHBlckNsYXNzKTtcbiAgICAgIGVsLmFwcGVuZCh3cmFwcGVyRWwpO1xuICAgICAgZWxlbWVudENoaWxkcmVuKGVsLCBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWApLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgIHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVFbCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICAgIGVsLFxuICAgICAgd3JhcHBlckVsLFxuICAgICAgc2xpZGVzRWw6IHN3aXBlci5pc0VsZW1lbnQgPyBlbCA6IHdyYXBwZXJFbCxcbiAgICAgIG1vdW50ZWQ6IHRydWUsXG4gICAgICAvLyBSVExcbiAgICAgIHJ0bDogZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8IGVsZW1lbnRTdHlsZShlbCwgJ2RpcmVjdGlvbicpID09PSAncnRsJyxcbiAgICAgIHJ0bFRyYW5zbGF0ZTogc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiAoZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8IGVsZW1lbnRTdHlsZShlbCwgJ2RpcmVjdGlvbicpID09PSAncnRsJyksXG4gICAgICB3cm9uZ1JUTDogZWxlbWVudFN0eWxlKHdyYXBwZXJFbCwgJ2Rpc3BsYXknKSA9PT0gJy13ZWJraXQtYm94J1xuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGluaXQoZWwpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybiBzd2lwZXI7XG4gICAgY29uc3QgbW91bnRlZCA9IHN3aXBlci5tb3VudChlbCk7XG4gICAgaWYgKG1vdW50ZWQgPT09IGZhbHNlKSByZXR1cm4gc3dpcGVyO1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVJbml0Jyk7XG5cbiAgICAvLyBTZXQgYnJlYWtwb2ludFxuICAgIGlmIChzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgIH1cblxuICAgIC8vIEFkZCBDbGFzc2VzXG4gICAgc3dpcGVyLmFkZENsYXNzZXMoKTtcblxuICAgIC8vIFVwZGF0ZSBzaXplXG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcblxuICAgIC8vIFVwZGF0ZSBzbGlkZXNcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykge1xuICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICB9XG5cbiAgICAvLyBTZXQgR3JhYiBDdXJzb3JcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cblxuICAgIC8vIFNsaWRlIFRvIEluaXRpYWwgU2xpZGVcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wICYmIHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSwgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGxvb3BcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgIH1cblxuICAgIC8vIEF0dGFjaCBldmVudHNcbiAgICBzd2lwZXIuYXR0YWNoRXZlbnRzKCk7XG4gICAgWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKCdbbG9hZGluZz1cImxhenlcIl0nKV0uZm9yRWFjaChpbWFnZUVsID0+IHtcbiAgICAgIGlmIChpbWFnZUVsLmNvbXBsZXRlKSB7XG4gICAgICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgaW1hZ2VFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbWFnZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBlID0+IHtcbiAgICAgICAgICBwcm9jZXNzTGF6eVByZWxvYWRlcihzd2lwZXIsIGUudGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBJbml0IEZsYWdcbiAgICBzd2lwZXIuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuXG4gICAgLy8gRW1pdFxuICAgIHN3aXBlci5lbWl0KCdpbml0Jyk7XG4gICAgc3dpcGVyLmVtaXQoJ2FmdGVySW5pdCcpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgZGVzdHJveShkZWxldGVJbnN0YW5jZSA9IHRydWUsIGNsZWFuU3R5bGVzID0gdHJ1ZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgZWwsXG4gICAgICB3cmFwcGVyRWwsXG4gICAgICBzbGlkZXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyLmRlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVEZXN0cm95Jyk7XG5cbiAgICAvLyBJbml0IEZsYWdcbiAgICBzd2lwZXIuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgIC8vIERldGFjaCBldmVudHNcbiAgICBzd2lwZXIuZGV0YWNoRXZlbnRzKCk7XG5cbiAgICAvLyBEZXN0cm95IGxvb3BcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIH1cblxuICAgIC8vIENsZWFudXAgc3R5bGVzXG4gICAgaWYgKGNsZWFuU3R5bGVzKSB7XG4gICAgICBzd2lwZXIucmVtb3ZlQ2xhc3NlcygpO1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgd3JhcHBlckVsLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgIGlmIChzbGlkZXMgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBzbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgICBzbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzLCBwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcywgcGFyYW1zLnNsaWRlTmV4dENsYXNzLCBwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICAgICAgICAgIHNsaWRlRWwucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICAgIHNsaWRlRWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ2Rlc3Ryb3knKTtcblxuICAgIC8vIERldGFjaCBlbWl0dGVyIGV2ZW50c1xuICAgIE9iamVjdC5rZXlzKHN3aXBlci5ldmVudHNMaXN0ZW5lcnMpLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIHN3aXBlci5vZmYoZXZlbnROYW1lKTtcbiAgICB9KTtcbiAgICBpZiAoZGVsZXRlSW5zdGFuY2UgIT09IGZhbHNlKSB7XG4gICAgICBzd2lwZXIuZWwuc3dpcGVyID0gbnVsbDtcbiAgICAgIGRlbGV0ZVByb3BzKHN3aXBlcik7XG4gICAgfVxuICAgIHN3aXBlci5kZXN0cm95ZWQgPSB0cnVlO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHN0YXRpYyBleHRlbmREZWZhdWx0cyhuZXdEZWZhdWx0cykge1xuICAgIGV4dGVuZChleHRlbmRlZERlZmF1bHRzLCBuZXdEZWZhdWx0cyk7XG4gIH1cbiAgc3RhdGljIGdldCBleHRlbmRlZERlZmF1bHRzKCkge1xuICAgIHJldHVybiBleHRlbmRlZERlZmF1bHRzO1xuICB9XG4gIHN0YXRpYyBnZXQgZGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRzO1xuICB9XG4gIHN0YXRpYyBpbnN0YWxsTW9kdWxlKG1vZCkge1xuICAgIGlmICghU3dpcGVyLnByb3RvdHlwZS5fX21vZHVsZXNfXykgU3dpcGVyLnByb3RvdHlwZS5fX21vZHVsZXNfXyA9IFtdO1xuICAgIGNvbnN0IG1vZHVsZXMgPSBTd2lwZXIucHJvdG90eXBlLl9fbW9kdWxlc19fO1xuICAgIGlmICh0eXBlb2YgbW9kID09PSAnZnVuY3Rpb24nICYmIG1vZHVsZXMuaW5kZXhPZihtb2QpIDwgMCkge1xuICAgICAgbW9kdWxlcy5wdXNoKG1vZCk7XG4gICAgfVxuICB9XG4gIHN0YXRpYyB1c2UobW9kdWxlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgbW9kdWxlLmZvckVhY2gobSA9PiBTd2lwZXIuaW5zdGFsbE1vZHVsZShtKSk7XG4gICAgICByZXR1cm4gU3dpcGVyO1xuICAgIH1cbiAgICBTd2lwZXIuaW5zdGFsbE1vZHVsZShtb2R1bGUpO1xuICAgIHJldHVybiBTd2lwZXI7XG4gIH1cbn1cbk9iamVjdC5rZXlzKHByb3RvdHlwZXMpLmZvckVhY2gocHJvdG90eXBlR3JvdXAgPT4ge1xuICBPYmplY3Qua2V5cyhwcm90b3R5cGVzW3Byb3RvdHlwZUdyb3VwXSkuZm9yRWFjaChwcm90b01ldGhvZCA9PiB7XG4gICAgU3dpcGVyLnByb3RvdHlwZVtwcm90b01ldGhvZF0gPSBwcm90b3R5cGVzW3Byb3RvdHlwZUdyb3VwXVtwcm90b01ldGhvZF07XG4gIH0pO1xufSk7XG5Td2lwZXIudXNlKFtSZXNpemUsIE9ic2VydmVyXSk7XG5leHBvcnQgZGVmYXVsdCBTd2lwZXI7IiwiaW1wb3J0IGdldFRyYW5zbGF0ZSBmcm9tICcuL2dldFRyYW5zbGF0ZS5qcyc7XG5pbXBvcnQgc2V0VHJhbnNsYXRlIGZyb20gJy4vc2V0VHJhbnNsYXRlLmpzJztcbmltcG9ydCBtaW5UcmFuc2xhdGUgZnJvbSAnLi9taW5UcmFuc2xhdGUuanMnO1xuaW1wb3J0IG1heFRyYW5zbGF0ZSBmcm9tICcuL21heFRyYW5zbGF0ZS5qcyc7XG5pbXBvcnQgdHJhbnNsYXRlVG8gZnJvbSAnLi90cmFuc2xhdGVUby5qcyc7XG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldFRyYW5zbGF0ZSxcbiAgc2V0VHJhbnNsYXRlLFxuICBtaW5UcmFuc2xhdGUsXG4gIG1heFRyYW5zbGF0ZSxcbiAgdHJhbnNsYXRlVG9cbn07IiwiaW1wb3J0IHsgZ2V0VHJhbnNsYXRlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFN3aXBlclRyYW5zbGF0ZShheGlzID0gdGhpcy5pc0hvcml6b250YWwoKSA/ICd4JyA6ICd5Jykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHRyYW5zbGF0ZSxcbiAgICB3cmFwcGVyRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgcmV0dXJuIHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuIHRyYW5zbGF0ZTtcbiAgfVxuICBsZXQgY3VycmVudFRyYW5zbGF0ZSA9IGdldFRyYW5zbGF0ZSh3cmFwcGVyRWwsIGF4aXMpO1xuICBpZiAocnRsKSBjdXJyZW50VHJhbnNsYXRlID0gLWN1cnJlbnRUcmFuc2xhdGU7XG4gIHJldHVybiBjdXJyZW50VHJhbnNsYXRlIHx8IDA7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBwYXJhbXMsXG4gICAgd3JhcHBlckVsLFxuICAgIHByb2dyZXNzXG4gIH0gPSBzd2lwZXI7XG4gIGxldCB4ID0gMDtcbiAgbGV0IHkgPSAwO1xuICBjb25zdCB6ID0gMDtcbiAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgIHggPSBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICB9IGVsc2Uge1xuICAgIHkgPSB0cmFuc2xhdGU7XG4gIH1cbiAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICB4ID0gTWF0aC5mbG9vcih4KTtcbiAgICB5ID0gTWF0aC5mbG9vcih5KTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICB3cmFwcGVyRWxbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gLXggOiAteTtcbiAgfSBlbHNlIGlmICghcGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICB3cmFwcGVyRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7eH1weCwgJHt5fXB4LCAke3p9cHgpYDtcbiAgfVxuICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICBzd2lwZXIudHJhbnNsYXRlID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8geCA6IHk7XG5cbiAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byB1cGRhdGUgcHJvZ3Jlc3NcbiAgbGV0IG5ld1Byb2dyZXNzO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgfVxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHByb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zbGF0ZScsIHN3aXBlci50cmFuc2xhdGUsIGJ5Q29udHJvbGxlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWluVHJhbnNsYXRlKCkge1xuICByZXR1cm4gLXRoaXMuc25hcEdyaWRbMF07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWF4VHJhbnNsYXRlKCkge1xuICByZXR1cm4gLXRoaXMuc25hcEdyaWRbdGhpcy5zbmFwR3JpZC5sZW5ndGggLSAxXTtcbn0iLCJpbXBvcnQgeyBhbmltYXRlQ1NTTW9kZVNjcm9sbCB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2xhdGVUbyh0cmFuc2xhdGUgPSAwLCBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCB0cmFuc2xhdGVCb3VuZHMgPSB0cnVlLCBpbnRlcm5hbCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHdyYXBwZXJFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IG1pblRyYW5zbGF0ZSA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgY29uc3QgbWF4VHJhbnNsYXRlID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICBsZXQgbmV3VHJhbnNsYXRlO1xuICBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA+IG1pblRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWluVHJhbnNsYXRlO2Vsc2UgaWYgKHRyYW5zbGF0ZUJvdW5kcyAmJiB0cmFuc2xhdGUgPCBtYXhUcmFuc2xhdGUpIG5ld1RyYW5zbGF0ZSA9IG1heFRyYW5zbGF0ZTtlbHNlIG5ld1RyYW5zbGF0ZSA9IHRyYW5zbGF0ZTtcblxuICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1RyYW5zbGF0ZSk7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIGNvbnN0IGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSAtbmV3VHJhbnNsYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXN3aXBlci5zdXBwb3J0LnNtb290aFNjcm9sbCkge1xuICAgICAgICBhbmltYXRlQ1NTTW9kZVNjcm9sbCh7XG4gICAgICAgICAgc3dpcGVyLFxuICAgICAgICAgIHRhcmdldFBvc2l0aW9uOiAtbmV3VHJhbnNsYXRlLFxuICAgICAgICAgIHNpZGU6IGlzSCA/ICdsZWZ0JyA6ICd0b3AnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgIFtpc0ggPyAnbGVmdCcgOiAndG9wJ106IC1uZXdUcmFuc2xhdGUsXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChzcGVlZCA9PT0gMCkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICBpZiAoIXN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn0iLCJpbXBvcnQgc2V0VHJhbnNpdGlvbiBmcm9tICcuL3NldFRyYW5zaXRpb24uanMnO1xuaW1wb3J0IHRyYW5zaXRpb25TdGFydCBmcm9tICcuL3RyYW5zaXRpb25TdGFydC5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbkVuZCBmcm9tICcuL3RyYW5zaXRpb25FbmQuanMnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBzZXRUcmFuc2l0aW9uLFxuICB0cmFuc2l0aW9uU3RhcnQsXG4gIHRyYW5zaXRpb25FbmRcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zaXRpb24nLCBkdXJhdGlvbiwgYnlDb250cm9sbGVyKTtcbn0iLCJpbXBvcnQgdHJhbnNpdGlvbkVtaXQgZnJvbSAnLi90cmFuc2l0aW9uRW1pdC5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzID0gdHJ1ZSwgZGlyZWN0aW9uKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gIH1cbiAgdHJhbnNpdGlvbkVtaXQoe1xuICAgIHN3aXBlcixcbiAgICBydW5DYWxsYmFja3MsXG4gICAgZGlyZWN0aW9uLFxuICAgIHN0ZXA6ICdTdGFydCdcbiAgfSk7XG59IiwiaW1wb3J0IHRyYW5zaXRpb25FbWl0IGZyb20gJy4vdHJhbnNpdGlvbkVtaXQuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MgPSB0cnVlLCBkaXJlY3Rpb24pIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgdHJhbnNpdGlvbkVtaXQoe1xuICAgIHN3aXBlcixcbiAgICBydW5DYWxsYmFja3MsXG4gICAgZGlyZWN0aW9uLFxuICAgIHN0ZXA6ICdFbmQnXG4gIH0pO1xufSIsImltcG9ydCBsb29wQ3JlYXRlIGZyb20gJy4vbG9vcENyZWF0ZS5qcyc7XG5pbXBvcnQgbG9vcEZpeCBmcm9tICcuL2xvb3BGaXguanMnO1xuaW1wb3J0IGxvb3BEZXN0cm95IGZyb20gJy4vbG9vcERlc3Ryb3kuanMnO1xuZXhwb3J0IGRlZmF1bHQge1xuICBsb29wQ3JlYXRlLFxuICBsb29wRml4LFxuICBsb29wRGVzdHJveVxufTsiLCJpbXBvcnQgeyBlbGVtZW50Q2hpbGRyZW4gfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbG9vcENyZWF0ZShzbGlkZVJlYWxJbmRleCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghcGFyYW1zLmxvb3AgfHwgc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgY29uc3Qgc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgc2xpZGVzLmZvckVhY2goKGVsLCBpbmRleCkgPT4ge1xuICAgIGVsLnNldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBpbmRleCk7XG4gIH0pO1xuICBzd2lwZXIubG9vcEZpeCh7XG4gICAgc2xpZGVSZWFsSW5kZXgsXG4gICAgZGlyZWN0aW9uOiBwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyB1bmRlZmluZWQgOiAnbmV4dCdcbiAgfSk7XG59IiwiaW1wb3J0IHsgZWxlbWVudEluZGV4IH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvb3BGaXgoe1xuICBzbGlkZVJlYWxJbmRleCxcbiAgc2xpZGVUbyA9IHRydWUsXG4gIGRpcmVjdGlvbixcbiAgc2V0VHJhbnNsYXRlLFxuICBhY3RpdmVTbGlkZUluZGV4LFxuICBieUNvbnRyb2xsZXIsXG4gIGJ5TW91c2V3aGVlbFxufSA9IHt9KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSByZXR1cm47XG4gIHN3aXBlci5lbWl0KCdiZWZvcmVMb29wRml4Jyk7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXMsXG4gICAgYWxsb3dTbGlkZVByZXYsXG4gICAgYWxsb3dTbGlkZU5leHQsXG4gICAgc2xpZGVzRWwsXG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IHRydWU7XG4gIGlmIChzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgaWYgKHNsaWRlVG8pIHtcbiAgICAgIGlmICghcGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHN3aXBlci5zbmFwSW5kZXggPT09IDApIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnNuYXBJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJWaWV3KSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyBzd2lwZXIuc25hcEluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci5zbmFwSW5kZXggPT09IHN3aXBlci5zbmFwR3JpZC5sZW5ndGggLSAxKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgICBzd2lwZXIuZW1pdCgnbG9vcEZpeCcpO1xuICAgIHJldHVybjtcbiAgfVxuICBjb25zdCBzbGlkZXNQZXJWaWV3ID0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogTWF0aC5jZWlsKHBhcnNlRmxvYXQocGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSk7XG4gIGxldCBsb29wZWRTbGlkZXMgPSBwYXJhbXMubG9vcGVkU2xpZGVzIHx8IHNsaWRlc1BlclZpZXc7XG4gIGlmIChsb29wZWRTbGlkZXMgJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgIT09IDApIHtcbiAgICBsb29wZWRTbGlkZXMgKz0gcGFyYW1zLnNsaWRlc1Blckdyb3VwIC0gbG9vcGVkU2xpZGVzICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICB9XG4gIHN3aXBlci5sb29wZWRTbGlkZXMgPSBsb29wZWRTbGlkZXM7XG4gIGNvbnN0IHByZXBlbmRTbGlkZXNJbmRleGVzID0gW107XG4gIGNvbnN0IGFwcGVuZFNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgbGV0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICBpZiAodHlwZW9mIGFjdGl2ZVNsaWRlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgYWN0aXZlU2xpZGVJbmRleCA9IGVsZW1lbnRJbmRleChzd2lwZXIuc2xpZGVzLmZpbHRlcihlbCA9PiBlbC5jbGFzc0xpc3QuY29udGFpbnMoJ3N3aXBlci1zbGlkZS1hY3RpdmUnKSlbMF0pO1xuICB9IGVsc2Uge1xuICAgIGFjdGl2ZUluZGV4ID0gYWN0aXZlU2xpZGVJbmRleDtcbiAgfVxuICBjb25zdCBpc05leHQgPSBkaXJlY3Rpb24gPT09ICduZXh0JyB8fCAhZGlyZWN0aW9uO1xuICBjb25zdCBpc1ByZXYgPSBkaXJlY3Rpb24gPT09ICdwcmV2JyB8fCAhZGlyZWN0aW9uO1xuICBsZXQgc2xpZGVzUHJlcGVuZGVkID0gMDtcbiAgbGV0IHNsaWRlc0FwcGVuZGVkID0gMDtcbiAgLy8gcHJlcGVuZCBsYXN0IHNsaWRlcyBiZWZvcmUgc3RhcnRcbiAgaWYgKGFjdGl2ZVNsaWRlSW5kZXggPCBsb29wZWRTbGlkZXMpIHtcbiAgICBzbGlkZXNQcmVwZW5kZWQgPSBsb29wZWRTbGlkZXMgLSBhY3RpdmVTbGlkZUluZGV4O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9vcGVkU2xpZGVzIC0gYWN0aXZlU2xpZGVJbmRleDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGkgLSBNYXRoLmZsb29yKGkgLyBzbGlkZXMubGVuZ3RoKSAqIHNsaWRlcy5sZW5ndGg7XG4gICAgICBwcmVwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKHNsaWRlcy5sZW5ndGggLSBpbmRleCAtIDEpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhY3RpdmVTbGlkZUluZGV4IC8qICsgc2xpZGVzUGVyVmlldyAqLyA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gbG9vcGVkU2xpZGVzICogMikge1xuICAgIHNsaWRlc0FwcGVuZGVkID0gYWN0aXZlU2xpZGVJbmRleCAtIChzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIGxvb3BlZFNsaWRlcyAqIDIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzQXBwZW5kZWQ7IGkgKz0gMSkge1xuICAgICAgY29uc3QgaW5kZXggPSBpIC0gTWF0aC5mbG9vcihpIC8gc2xpZGVzLmxlbmd0aCkgKiBzbGlkZXMubGVuZ3RoO1xuICAgICAgYXBwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICB9XG4gIH1cbiAgaWYgKGlzUHJldikge1xuICAgIHByZXBlbmRTbGlkZXNJbmRleGVzLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgc2xpZGVzRWwucHJlcGVuZChzd2lwZXIuc2xpZGVzW2luZGV4XSk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKGlzTmV4dCkge1xuICAgIGFwcGVuZFNsaWRlc0luZGV4ZXMuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICBzbGlkZXNFbC5hcHBlbmQoc3dpcGVyLnNsaWRlc1tpbmRleF0pO1xuICAgIH0pO1xuICB9XG4gIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG4gIGlmIChzbGlkZVRvKSB7XG4gICAgaWYgKHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNQcmV2KSB7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlUmVhbEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBjdXJyZW50U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleF07XG4gICAgICAgIGNvbnN0IG5ld1NsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXggKyBzbGlkZXNQcmVwZW5kZWRdO1xuICAgICAgICBjb25zdCBkaWZmID0gbmV3U2xpZGVUcmFuc2xhdGUgLSBjdXJyZW50U2xpZGVUcmFuc2xhdGU7XG4gICAgICAgIGlmIChieU1vdXNld2hlZWwpIHtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHN3aXBlci50cmFuc2xhdGUgLSBkaWZmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhhY3RpdmVJbmRleCArIHNsaWRlc1ByZXBlbmRlZCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIGlmIChzZXRUcmFuc2xhdGUpIHtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaGVzW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzdGFydFgnIDogJ3N0YXJ0WSddICs9IGRpZmY7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2V0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG9Mb29wKHNsaWRlUmVhbEluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoID4gMCAmJiBpc05leHQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVSZWFsSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2FjdGl2ZUluZGV4XTtcbiAgICAgICAgY29uc3QgbmV3U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleCAtIHNsaWRlc0FwcGVuZGVkXTtcbiAgICAgICAgY29uc3QgZGlmZiA9IG5ld1NsaWRlVHJhbnNsYXRlIC0gY3VycmVudFNsaWRlVHJhbnNsYXRlO1xuICAgICAgICBpZiAoYnlNb3VzZXdoZWVsKSB7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShzd2lwZXIudHJhbnNsYXRlIC0gZGlmZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oYWN0aXZlSW5kZXggLSBzbGlkZXNBcHBlbmRlZCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIGlmIChzZXRUcmFuc2xhdGUpIHtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaGVzW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzdGFydFgnIDogJ3N0YXJ0WSddICs9IGRpZmY7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUb0xvb3Aoc2xpZGVSZWFsSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIgJiYgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCAmJiAhYnlDb250cm9sbGVyKSB7XG4gICAgY29uc3QgbG9vcFBhcmFtcyA9IHtcbiAgICAgIHNsaWRlUmVhbEluZGV4LFxuICAgICAgc2xpZGVUbzogZmFsc2UsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBzZXRUcmFuc2xhdGUsXG4gICAgICBhY3RpdmVTbGlkZUluZGV4LFxuICAgICAgYnlDb250cm9sbGVyOiB0cnVlXG4gICAgfTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSkge1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbC5mb3JFYWNoKGMgPT4ge1xuICAgICAgICBpZiAoYy5wYXJhbXMubG9vcCkgYy5sb29wRml4KGxvb3BQYXJhbXMpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuY29udHJvbGxlci5jb250cm9sIGluc3RhbmNlb2Ygc3dpcGVyLmNvbnN0cnVjdG9yICYmIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wucGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wubG9vcEZpeChsb29wUGFyYW1zKTtcbiAgICB9XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ2xvb3BGaXgnKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb29wRGVzdHJveSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHNsaWRlcyxcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFwYXJhbXMubG9vcCB8fCBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIGNvbnN0IG5ld1NsaWRlc09yZGVyID0gW107XG4gIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIGNvbnN0IGluZGV4ID0gdHlwZW9mIHNsaWRlRWwuc3dpcGVyU2xpZGVJbmRleCA9PT0gJ3VuZGVmaW5lZCcgPyBzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSAqIDEgOiBzbGlkZUVsLnN3aXBlclNsaWRlSW5kZXg7XG4gICAgbmV3U2xpZGVzT3JkZXJbaW5kZXhdID0gc2xpZGVFbDtcbiAgfSk7XG4gIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHNsaWRlRWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICB9KTtcbiAgbmV3U2xpZGVzT3JkZXIuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBzbGlkZXNFbC5hcHBlbmQoc2xpZGVFbCk7XG4gIH0pO1xuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIHN3aXBlci5zbGlkZVRvKHN3aXBlci5yZWFsSW5kZXgsIDApO1xufSIsImltcG9ydCBzZXRHcmFiQ3Vyc29yIGZyb20gJy4vc2V0R3JhYkN1cnNvci5qcyc7XG5pbXBvcnQgdW5zZXRHcmFiQ3Vyc29yIGZyb20gJy4vdW5zZXRHcmFiQ3Vyc29yLmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0R3JhYkN1cnNvcixcbiAgdW5zZXRHcmFiQ3Vyc29yXG59OyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldEdyYWJDdXJzb3IobW92aW5nKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoIHx8IHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIGNvbnN0IGVsID0gc3dpcGVyLnBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyBzd2lwZXIuZWwgOiBzd2lwZXIud3JhcHBlckVsO1xuICBlbC5zdHlsZS5jdXJzb3IgPSAnbW92ZSc7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICdncmFiYmluZycgOiAnZ3JhYic7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5zZXRHcmFiQ3Vyc29yKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgc3dpcGVyW3N3aXBlci5wYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gJ2VsJyA6ICd3cmFwcGVyRWwnXS5zdHlsZS5jdXJzb3IgPSAnJztcbn0iLCJpbXBvcnQgc2V0QnJlYWtwb2ludCBmcm9tICcuL3NldEJyZWFrcG9pbnQuanMnO1xuaW1wb3J0IGdldEJyZWFrcG9pbnQgZnJvbSAnLi9nZXRCcmVha3BvaW50LmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgc2V0QnJlYWtwb2ludCxcbiAgZ2V0QnJlYWtwb2ludFxufTsiLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMsIGJhc2UgPSAnd2luZG93JywgY29udGFpbmVyRWwpIHtcbiAgaWYgKCFicmVha3BvaW50cyB8fCBiYXNlID09PSAnY29udGFpbmVyJyAmJiAhY29udGFpbmVyRWwpIHJldHVybiB1bmRlZmluZWQ7XG4gIGxldCBicmVha3BvaW50ID0gZmFsc2U7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBjdXJyZW50SGVpZ2h0ID0gYmFzZSA9PT0gJ3dpbmRvdycgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiBjb250YWluZXJFbC5jbGllbnRIZWlnaHQ7XG4gIGNvbnN0IHBvaW50cyA9IE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5tYXAocG9pbnQgPT4ge1xuICAgIGlmICh0eXBlb2YgcG9pbnQgPT09ICdzdHJpbmcnICYmIHBvaW50LmluZGV4T2YoJ0AnKSA9PT0gMCkge1xuICAgICAgY29uc3QgbWluUmF0aW8gPSBwYXJzZUZsb2F0KHBvaW50LnN1YnN0cigxKSk7XG4gICAgICBjb25zdCB2YWx1ZSA9IGN1cnJlbnRIZWlnaHQgKiBtaW5SYXRpbztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICBwb2ludFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBwb2ludCxcbiAgICAgIHBvaW50XG4gICAgfTtcbiAgfSk7XG4gIHBvaW50cy5zb3J0KChhLCBiKSA9PiBwYXJzZUludChhLnZhbHVlLCAxMCkgLSBwYXJzZUludChiLnZhbHVlLCAxMCkpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHBvaW50LFxuICAgICAgdmFsdWVcbiAgICB9ID0gcG9pbnRzW2ldO1xuICAgIGlmIChiYXNlID09PSAnd2luZG93Jykge1xuICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKGAobWluLXdpZHRoOiAke3ZhbHVlfXB4KWApLm1hdGNoZXMpIHtcbiAgICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFsdWUgPD0gY29udGFpbmVyRWwuY2xpZW50V2lkdGgpIHtcbiAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJyZWFrcG9pbnQgfHwgJ21heCc7XG59IiwiZnVuY3Rpb24gY2hlY2tPdmVyZmxvdygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGlzTG9ja2VkOiB3YXNMb2NrZWQsXG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXNPZmZzZXRCZWZvcmVcbiAgfSA9IHBhcmFtcztcbiAgaWYgKHNsaWRlc09mZnNldEJlZm9yZSkge1xuICAgIGNvbnN0IGxhc3RTbGlkZUluZGV4ID0gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGxhc3RTbGlkZVJpZ2h0RWRnZSA9IHN3aXBlci5zbGlkZXNHcmlkW2xhc3RTbGlkZUluZGV4XSArIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbbGFzdFNsaWRlSW5kZXhdICsgc2xpZGVzT2Zmc2V0QmVmb3JlICogMjtcbiAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc2l6ZSA+IGxhc3RTbGlkZVJpZ2h0RWRnZTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoID09PSAxO1xuICB9XG4gIGlmIChwYXJhbXMuYWxsb3dTbGlkZU5leHQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSAhc3dpcGVyLmlzTG9ja2VkO1xuICB9XG4gIGlmIChwYXJhbXMuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSAhc3dpcGVyLmlzTG9ja2VkO1xuICB9XG4gIGlmICh3YXNMb2NrZWQgJiYgd2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICBzd2lwZXIuaXNFbmQgPSBmYWxzZTtcbiAgfVxuICBpZiAod2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICBzd2lwZXIuZW1pdChzd2lwZXIuaXNMb2NrZWQgPyAnbG9jaycgOiAndW5sb2NrJyk7XG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY2hlY2tPdmVyZmxvd1xufTsiLCJpbXBvcnQgYWRkQ2xhc3NlcyBmcm9tICcuL2FkZENsYXNzZXMuanMnO1xuaW1wb3J0IHJlbW92ZUNsYXNzZXMgZnJvbSAnLi9yZW1vdmVDbGFzc2VzLmpzJztcbmV4cG9ydCBkZWZhdWx0IHtcbiAgYWRkQ2xhc3NlcyxcbiAgcmVtb3ZlQ2xhc3Nlc1xufTsiLCJmdW5jdGlvbiBwcmVwYXJlQ2xhc3NlcyhlbnRyaWVzLCBwcmVmaXgpIHtcbiAgY29uc3QgcmVzdWx0Q2xhc3NlcyA9IFtdO1xuICBlbnRyaWVzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmtleXMoaXRlbSkuZm9yRWFjaChjbGFzc05hbWVzID0+IHtcbiAgICAgICAgaWYgKGl0ZW1bY2xhc3NOYW1lc10pIHtcbiAgICAgICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgY2xhc3NOYW1lcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgaXRlbSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdENsYXNzZXM7XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lcyxcbiAgICBwYXJhbXMsXG4gICAgcnRsLFxuICAgIGVsLFxuICAgIGRldmljZVxuICB9ID0gc3dpcGVyO1xuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgY29uc3Qgc3VmZml4ZXMgPSBwcmVwYXJlQ2xhc3NlcyhbJ2luaXRpYWxpemVkJywgcGFyYW1zLmRpcmVjdGlvbiwge1xuICAgICdmcmVlLW1vZGUnOiBzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkXG4gIH0sIHtcbiAgICAnYXV0b2hlaWdodCc6IHBhcmFtcy5hdXRvSGVpZ2h0XG4gIH0sIHtcbiAgICAncnRsJzogcnRsXG4gIH0sIHtcbiAgICAnZ3JpZCc6IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxXG4gIH0sIHtcbiAgICAnZ3JpZC1jb2x1bW4nOiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMSAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJ1xuICB9LCB7XG4gICAgJ2FuZHJvaWQnOiBkZXZpY2UuYW5kcm9pZFxuICB9LCB7XG4gICAgJ2lvcyc6IGRldmljZS5pb3NcbiAgfSwge1xuICAgICdjc3MtbW9kZSc6IHBhcmFtcy5jc3NNb2RlXG4gIH0sIHtcbiAgICAnY2VudGVyZWQnOiBwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXNcbiAgfSwge1xuICAgICd3YXRjaC1wcm9ncmVzcyc6IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzXG4gIH1dLCBwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyk7XG4gIGNsYXNzTmFtZXMucHVzaCguLi5zdWZmaXhlcyk7XG4gIGVsLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3NOYW1lcyk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbW92ZUNsYXNzZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBlbCxcbiAgICBjbGFzc05hbWVzXG4gIH0gPSBzd2lwZXI7XG4gIGVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uY2xhc3NOYW1lcyk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufSIsImltcG9ydCB7IGdldFdpbmRvdyB9IGZyb20gJ3Nzci13aW5kb3cnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUmVzaXplKHtcbiAgc3dpcGVyLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IG9ic2VydmVyID0gbnVsbDtcbiAgbGV0IGFuaW1hdGlvbkZyYW1lID0gbnVsbDtcbiAgY29uc3QgcmVzaXplSGFuZGxlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBlbWl0KCdiZWZvcmVSZXNpemUnKTtcbiAgICBlbWl0KCdyZXNpemUnKTtcbiAgfTtcbiAgY29uc3QgY3JlYXRlT2JzZXJ2ZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgICBhbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0XG4gICAgICAgIH0gPSBzd2lwZXI7XG4gICAgICAgIGxldCBuZXdXaWR0aCA9IHdpZHRoO1xuICAgICAgICBsZXQgbmV3SGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICBlbnRyaWVzLmZvckVhY2goKHtcbiAgICAgICAgICBjb250ZW50Qm94U2l6ZSxcbiAgICAgICAgICBjb250ZW50UmVjdCxcbiAgICAgICAgICB0YXJnZXRcbiAgICAgICAgfSkgPT4ge1xuICAgICAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0ICE9PSBzd2lwZXIuZWwpIHJldHVybjtcbiAgICAgICAgICBuZXdXaWR0aCA9IGNvbnRlbnRSZWN0ID8gY29udGVudFJlY3Qud2lkdGggOiAoY29udGVudEJveFNpemVbMF0gfHwgY29udGVudEJveFNpemUpLmlubGluZVNpemU7XG4gICAgICAgICAgbmV3SGVpZ2h0ID0gY29udGVudFJlY3QgPyBjb250ZW50UmVjdC5oZWlnaHQgOiAoY29udGVudEJveFNpemVbMF0gfHwgY29udGVudEJveFNpemUpLmJsb2NrU2l6ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChuZXdXaWR0aCAhPT0gd2lkdGggfHwgbmV3SGVpZ2h0ICE9PSBoZWlnaHQpIHtcbiAgICAgICAgICByZXNpemVIYW5kbGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUoc3dpcGVyLmVsKTtcbiAgfTtcbiAgY29uc3QgcmVtb3ZlT2JzZXJ2ZXIgPSAoKSA9PiB7XG4gICAgaWYgKGFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uRnJhbWUpO1xuICAgIH1cbiAgICBpZiAob2JzZXJ2ZXIgJiYgb2JzZXJ2ZXIudW5vYnNlcnZlICYmIHN3aXBlci5lbCkge1xuICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKHN3aXBlci5lbCk7XG4gICAgICBvYnNlcnZlciA9IG51bGw7XG4gICAgfVxuICB9O1xuICBjb25zdCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgZW1pdCgnb3JpZW50YXRpb25jaGFuZ2UnKTtcbiAgfTtcbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucmVzaXplT2JzZXJ2ZXIgJiYgdHlwZW9mIHdpbmRvdy5SZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNyZWF0ZU9ic2VydmVyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVIYW5kbGVyKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgcmVtb3ZlT2JzZXJ2ZXIoKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlcik7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgfSk7XG59IiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgeyBlbGVtZW50UGFyZW50cyB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBPYnNlcnZlcih7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBjb25zdCBvYnNlcnZlcnMgPSBbXTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGF0dGFjaCA9ICh0YXJnZXQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IE9ic2VydmVyRnVuYyA9IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyIHx8IHdpbmRvdy5XZWJraXRNdXRhdGlvbk9ic2VydmVyO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE9ic2VydmVyRnVuYyhtdXRhdGlvbnMgPT4ge1xuICAgICAgLy8gVGhlIG9ic2VydmVyVXBkYXRlIGV2ZW50IHNob3VsZCBvbmx5IGJlIHRyaWdnZXJlZFxuICAgICAgLy8gb25jZSBkZXNwaXRlIHRoZSBudW1iZXIgb2YgbXV0YXRpb25zLiAgQWRkaXRpb25hbFxuICAgICAgLy8gdHJpZ2dlcnMgYXJlIHJlZHVuZGFudCBhbmQgYXJlIHZlcnkgY29zdGx5XG4gICAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9ic2VydmVyVXBkYXRlID0gZnVuY3Rpb24gb2JzZXJ2ZXJVcGRhdGUoKSB7XG4gICAgICAgIGVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgIH07XG4gICAgICBpZiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG9ic2VydmVyVXBkYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KG9ic2VydmVyVXBkYXRlLCAwKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCwge1xuICAgICAgYXR0cmlidXRlczogdHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcyA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5hdHRyaWJ1dGVzLFxuICAgICAgY2hpbGRMaXN0OiB0eXBlb2Ygb3B0aW9ucy5jaGlsZExpc3QgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hpbGRMaXN0LFxuICAgICAgY2hhcmFjdGVyRGF0YTogdHlwZW9mIG9wdGlvbnMuY2hhcmFjdGVyRGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGFyYWN0ZXJEYXRhXG4gICAgfSk7XG4gICAgb2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICB9O1xuICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5vYnNlcnZlcikgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm9ic2VydmVQYXJlbnRzKSB7XG4gICAgICBjb25zdCBjb250YWluZXJQYXJlbnRzID0gZWxlbWVudFBhcmVudHMoc3dpcGVyLmVsKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGFpbmVyUGFyZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhdHRhY2goY29udGFpbmVyUGFyZW50c1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIE9ic2VydmUgY29udGFpbmVyXG4gICAgYXR0YWNoKHN3aXBlci5lbCwge1xuICAgICAgY2hpbGRMaXN0OiBzd2lwZXIucGFyYW1zLm9ic2VydmVTbGlkZUNoaWxkcmVuXG4gICAgfSk7XG5cbiAgICAvLyBPYnNlcnZlIHdyYXBwZXJcbiAgICBhdHRhY2goc3dpcGVyLndyYXBwZXJFbCwge1xuICAgICAgYXR0cmlidXRlczogZmFsc2VcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgICBvYnNlcnZlcnMuZm9yRWFjaChvYnNlcnZlciA9PiB7XG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXJzLnNwbGljZSgwLCBvYnNlcnZlcnMubGVuZ3RoKTtcbiAgfTtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBvYnNlcnZlcjogZmFsc2UsXG4gICAgb2JzZXJ2ZVBhcmVudHM6IGZhbHNlLFxuICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiBmYWxzZVxuICB9KTtcbiAgb24oJ2luaXQnLCBpbml0KTtcbiAgb24oJ2Rlc3Ryb3knLCBkZXN0cm95KTtcbn0iLCJpbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgZWxlbWVudENoaWxkcmVuLCBzZXRDU1NQcm9wZXJ0eSB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBWaXJ0dWFsKHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uLFxuICBlbWl0XG59KSB7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgdmlydHVhbDoge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBzbGlkZXM6IFtdLFxuICAgICAgY2FjaGU6IHRydWUsXG4gICAgICByZW5kZXJTbGlkZTogbnVsbCxcbiAgICAgIHJlbmRlckV4dGVybmFsOiBudWxsLFxuICAgICAgcmVuZGVyRXh0ZXJuYWxVcGRhdGU6IHRydWUsXG4gICAgICBhZGRTbGlkZXNCZWZvcmU6IDAsXG4gICAgICBhZGRTbGlkZXNBZnRlcjogMFxuICAgIH1cbiAgfSk7XG4gIGxldCBjc3NNb2RlVGltZW91dDtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBzd2lwZXIudmlydHVhbCA9IHtcbiAgICBjYWNoZToge30sXG4gICAgZnJvbTogdW5kZWZpbmVkLFxuICAgIHRvOiB1bmRlZmluZWQsXG4gICAgc2xpZGVzOiBbXSxcbiAgICBvZmZzZXQ6IDAsXG4gICAgc2xpZGVzR3JpZDogW11cbiAgfTtcbiAgY29uc3QgdGVtcERPTSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBmdW5jdGlvbiByZW5kZXJTbGlkZShzbGlkZSwgaW5kZXgpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnZpcnR1YWw7XG4gICAgaWYgKHBhcmFtcy5jYWNoZSAmJiBzd2lwZXIudmlydHVhbC5jYWNoZVtpbmRleF0pIHtcbiAgICAgIHJldHVybiBzd2lwZXIudmlydHVhbC5jYWNoZVtpbmRleF07XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGxldCBzbGlkZUVsO1xuICAgIGlmIChwYXJhbXMucmVuZGVyU2xpZGUpIHtcbiAgICAgIHNsaWRlRWwgPSBwYXJhbXMucmVuZGVyU2xpZGUuY2FsbChzd2lwZXIsIHNsaWRlLCBpbmRleCk7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlRWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRlbXBET00uaW5uZXJIVE1MID0gc2xpZGVFbDtcbiAgICAgICAgc2xpZGVFbCA9IHRlbXBET00uY2hpbGRyZW5bMF07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBzbGlkZUVsID0gY3JlYXRlRWxlbWVudCgnc3dpcGVyLXNsaWRlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlRWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3MpO1xuICAgIH1cbiAgICBzbGlkZUVsLnNldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBpbmRleCk7XG4gICAgaWYgKCFwYXJhbXMucmVuZGVyU2xpZGUpIHtcbiAgICAgIHNsaWRlRWwudGV4dENvbnRlbnQgPSBzbGlkZTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5jYWNoZSkgc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdID0gc2xpZGVFbDtcbiAgICByZXR1cm4gc2xpZGVFbDtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoZm9yY2UpIHtcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNQZXJWaWV3LFxuICAgICAgc2xpZGVzUGVyR3JvdXAsXG4gICAgICBjZW50ZXJlZFNsaWRlcyxcbiAgICAgIGxvb3A6IGlzTG9vcFxuICAgIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgIGNvbnN0IHtcbiAgICAgIGFkZFNsaWRlc0JlZm9yZSxcbiAgICAgIGFkZFNsaWRlc0FmdGVyXG4gICAgfSA9IHN3aXBlci5wYXJhbXMudmlydHVhbDtcbiAgICBjb25zdCB7XG4gICAgICBmcm9tOiBwcmV2aW91c0Zyb20sXG4gICAgICB0bzogcHJldmlvdXNUbyxcbiAgICAgIHNsaWRlcyxcbiAgICAgIHNsaWRlc0dyaWQ6IHByZXZpb3VzU2xpZGVzR3JpZCxcbiAgICAgIG9mZnNldDogcHJldmlvdXNPZmZzZXRcbiAgICB9ID0gc3dpcGVyLnZpcnR1YWw7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIH1cbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCB8fCAwO1xuICAgIGxldCBvZmZzZXRQcm9wO1xuICAgIGlmIChzd2lwZXIucnRsVHJhbnNsYXRlKSBvZmZzZXRQcm9wID0gJ3JpZ2h0JztlbHNlIG9mZnNldFByb3AgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJztcbiAgICBsZXQgc2xpZGVzQWZ0ZXI7XG4gICAgbGV0IHNsaWRlc0JlZm9yZTtcbiAgICBpZiAoY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlc0FmdGVyID0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0FmdGVyO1xuICAgICAgc2xpZGVzQmVmb3JlID0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0JlZm9yZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVzQWZ0ZXIgPSBzbGlkZXNQZXJWaWV3ICsgKHNsaWRlc1Blckdyb3VwIC0gMSkgKyBhZGRTbGlkZXNBZnRlcjtcbiAgICAgIHNsaWRlc0JlZm9yZSA9IChpc0xvb3AgPyBzbGlkZXNQZXJWaWV3IDogc2xpZGVzUGVyR3JvdXApICsgYWRkU2xpZGVzQmVmb3JlO1xuICAgIH1cbiAgICBsZXQgZnJvbSA9IGFjdGl2ZUluZGV4IC0gc2xpZGVzQmVmb3JlO1xuICAgIGxldCB0byA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzQWZ0ZXI7XG4gICAgaWYgKCFpc0xvb3ApIHtcbiAgICAgIGZyb20gPSBNYXRoLm1heChmcm9tLCAwKTtcbiAgICAgIHRvID0gTWF0aC5taW4odG8sIHNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICB9XG4gICAgbGV0IG9mZnNldCA9IChzd2lwZXIuc2xpZGVzR3JpZFtmcm9tXSB8fCAwKSAtIChzd2lwZXIuc2xpZGVzR3JpZFswXSB8fCAwKTtcbiAgICBpZiAoaXNMb29wICYmIGFjdGl2ZUluZGV4ID49IHNsaWRlc0JlZm9yZSkge1xuICAgICAgZnJvbSAtPSBzbGlkZXNCZWZvcmU7XG4gICAgICBpZiAoIWNlbnRlcmVkU2xpZGVzKSBvZmZzZXQgKz0gc3dpcGVyLnNsaWRlc0dyaWRbMF07XG4gICAgfSBlbHNlIGlmIChpc0xvb3AgJiYgYWN0aXZlSW5kZXggPCBzbGlkZXNCZWZvcmUpIHtcbiAgICAgIGZyb20gPSAtc2xpZGVzQmVmb3JlO1xuICAgICAgaWYgKGNlbnRlcmVkU2xpZGVzKSBvZmZzZXQgKz0gc3dpcGVyLnNsaWRlc0dyaWRbMF07XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnZpcnR1YWwsIHtcbiAgICAgIGZyb20sXG4gICAgICB0byxcbiAgICAgIG9mZnNldCxcbiAgICAgIHNsaWRlc0dyaWQ6IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgICAgc2xpZGVzQmVmb3JlLFxuICAgICAgc2xpZGVzQWZ0ZXJcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBvblJlbmRlcmVkKCkge1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgZW1pdCgndmlydHVhbFVwZGF0ZScpO1xuICAgIH1cbiAgICBpZiAocHJldmlvdXNGcm9tID09PSBmcm9tICYmIHByZXZpb3VzVG8gPT09IHRvICYmICFmb3JjZSkge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNHcmlkICE9PSBwcmV2aW91c1NsaWRlc0dyaWQgJiYgb2Zmc2V0ICE9PSBwcmV2aW91c09mZnNldCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgICAgc2xpZGVFbC5zdHlsZVtvZmZzZXRQcm9wXSA9IGAke29mZnNldH1weGA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICBlbWl0KCd2aXJ0dWFsVXBkYXRlJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwucmVuZGVyRXh0ZXJuYWwpIHtcbiAgICAgIHN3aXBlci5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbC5jYWxsKHN3aXBlciwge1xuICAgICAgICBvZmZzZXQsXG4gICAgICAgIGZyb20sXG4gICAgICAgIHRvLFxuICAgICAgICBzbGlkZXM6IGZ1bmN0aW9uIGdldFNsaWRlcygpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZXNUb1JlbmRlciA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IGkgPSBmcm9tOyBpIDw9IHRvOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHNsaWRlc1RvUmVuZGVyLnB1c2goc2xpZGVzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHNsaWRlc1RvUmVuZGVyO1xuICAgICAgICB9KClcbiAgICAgIH0pO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbFVwZGF0ZSkge1xuICAgICAgICBvblJlbmRlcmVkKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbWl0KCd2aXJ0dWFsVXBkYXRlJyk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHByZXBlbmRJbmRleGVzID0gW107XG4gICAgY29uc3QgYXBwZW5kSW5kZXhlcyA9IFtdO1xuICAgIGNvbnN0IGdldFNsaWRlSW5kZXggPSBpbmRleCA9PiB7XG4gICAgICBsZXQgc2xpZGVJbmRleCA9IGluZGV4O1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBzbGlkZUluZGV4ID0gc2xpZGVzLmxlbmd0aCArIGluZGV4O1xuICAgICAgfSBlbHNlIGlmIChzbGlkZUluZGV4ID49IHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIHNsaWRlSW5kZXggPSBzbGlkZUluZGV4IC0gc2xpZGVzLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBzbGlkZUluZGV4O1xuICAgIH07XG4gICAgaWYgKGZvcmNlKSB7XG4gICAgICBzd2lwZXIuc2xpZGVzRWwucXVlcnlTZWxlY3RvckFsbChgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCkuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgc2xpZGVFbC5yZW1vdmUoKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gcHJldmlvdXNGcm9tOyBpIDw9IHByZXZpb3VzVG87IGkgKz0gMSkge1xuICAgICAgICBpZiAoaSA8IGZyb20gfHwgaSA+IHRvKSB7XG4gICAgICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IGdldFNsaWRlSW5kZXgoaSk7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlc0VsLnF1ZXJ5U2VsZWN0b3JBbGwoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlSW5kZXh9XCJdLCBzd2lwZXItc2xpZGVbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3NsaWRlSW5kZXh9XCJdYCkuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgICAgIHNsaWRlRWwucmVtb3ZlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbG9vcEZyb20gPSBpc0xvb3AgPyAtc2xpZGVzLmxlbmd0aCA6IDA7XG4gICAgY29uc3QgbG9vcFRvID0gaXNMb29wID8gc2xpZGVzLmxlbmd0aCAqIDIgOiBzbGlkZXMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSBsb29wRnJvbTsgaSA8IGxvb3BUbzsgaSArPSAxKSB7XG4gICAgICBpZiAoaSA+PSBmcm9tICYmIGkgPD0gdG8pIHtcbiAgICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IGdldFNsaWRlSW5kZXgoaSk7XG4gICAgICAgIGlmICh0eXBlb2YgcHJldmlvdXNUbyA9PT0gJ3VuZGVmaW5lZCcgfHwgZm9yY2UpIHtcbiAgICAgICAgICBhcHBlbmRJbmRleGVzLnB1c2goc2xpZGVJbmRleCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGkgPiBwcmV2aW91c1RvKSBhcHBlbmRJbmRleGVzLnB1c2goc2xpZGVJbmRleCk7XG4gICAgICAgICAgaWYgKGkgPCBwcmV2aW91c0Zyb20pIHByZXBlbmRJbmRleGVzLnB1c2goc2xpZGVJbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgYXBwZW5kSW5kZXhlcy5mb3JFYWNoKGluZGV4ID0+IHtcbiAgICAgIHN3aXBlci5zbGlkZXNFbC5hcHBlbmQocmVuZGVyU2xpZGUoc2xpZGVzW2luZGV4XSwgaW5kZXgpKTtcbiAgICB9KTtcbiAgICBpZiAoaXNMb29wKSB7XG4gICAgICBmb3IgKGxldCBpID0gcHJlcGVuZEluZGV4ZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBwcmVwZW5kSW5kZXhlc1tpXTtcbiAgICAgICAgc3dpcGVyLnNsaWRlc0VsLnByZXBlbmQocmVuZGVyU2xpZGUoc2xpZGVzW2luZGV4XSwgaW5kZXgpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcHJlcGVuZEluZGV4ZXMuc29ydCgoYSwgYikgPT4gYiAtIGEpO1xuICAgICAgcHJlcGVuZEluZGV4ZXMuZm9yRWFjaChpbmRleCA9PiB7XG4gICAgICAgIHN3aXBlci5zbGlkZXNFbC5wcmVwZW5kKHJlbmRlclNsaWRlKHNsaWRlc1tpbmRleF0sIGluZGV4KSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgZWxlbWVudENoaWxkcmVuKHN3aXBlci5zbGlkZXNFbCwgJy5zd2lwZXItc2xpZGUsIHN3aXBlci1zbGlkZScpLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBzbGlkZUVsLnN0eWxlW29mZnNldFByb3BdID0gYCR7b2Zmc2V0fXB4YDtcbiAgICB9KTtcbiAgICBvblJlbmRlcmVkKCk7XG4gIH1cbiAgZnVuY3Rpb24gYXBwZW5kU2xpZGUoc2xpZGVzKSB7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSkgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnB1c2goc2xpZGVzW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnB1c2goc2xpZGVzKTtcbiAgICB9XG4gICAgdXBkYXRlKHRydWUpO1xuICB9XG4gIGZ1bmN0aW9uIHByZXBlbmRTbGlkZShzbGlkZXMpIHtcbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICBsZXQgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIDE7XG4gICAgbGV0IG51bWJlck9mTmV3U2xpZGVzID0gMTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzbGlkZXMpKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldKSBzd2lwZXIudmlydHVhbC5zbGlkZXMudW5zaGlmdChzbGlkZXNbaV0pO1xuICAgICAgfVxuICAgICAgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIHNsaWRlcy5sZW5ndGg7XG4gICAgICBudW1iZXJPZk5ld1NsaWRlcyA9IHNsaWRlcy5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy51bnNoaWZ0KHNsaWRlcyk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgIGNvbnN0IGNhY2hlID0gc3dpcGVyLnZpcnR1YWwuY2FjaGU7XG4gICAgICBjb25zdCBuZXdDYWNoZSA9IHt9O1xuICAgICAgT2JqZWN0LmtleXMoY2FjaGUpLmZvckVhY2goY2FjaGVkSW5kZXggPT4ge1xuICAgICAgICBjb25zdCBjYWNoZWRFbCA9IGNhY2hlW2NhY2hlZEluZGV4XTtcbiAgICAgICAgY29uc3QgY2FjaGVkRWxJbmRleCA9IGNhY2hlZEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgICAgaWYgKGNhY2hlZEVsSW5kZXgpIHtcbiAgICAgICAgICBjYWNoZWRFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgcGFyc2VJbnQoY2FjaGVkRWxJbmRleCwgMTApICsgbnVtYmVyT2ZOZXdTbGlkZXMpO1xuICAgICAgICB9XG4gICAgICAgIG5ld0NhY2hlW3BhcnNlSW50KGNhY2hlZEluZGV4LCAxMCkgKyBudW1iZXJPZk5ld1NsaWRlc10gPSBjYWNoZWRFbDtcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGUgPSBuZXdDYWNoZTtcbiAgICB9XG4gICAgdXBkYXRlKHRydWUpO1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgfVxuICBmdW5jdGlvbiByZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKSB7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNJbmRleGVzID09PSAndW5kZWZpbmVkJyB8fCBzbGlkZXNJbmRleGVzID09PSBudWxsKSByZXR1cm47XG4gICAgbGV0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNsaWRlc0luZGV4ZXMpKSB7XG4gICAgICBmb3IgKGxldCBpID0gc2xpZGVzSW5kZXhlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMuc3BsaWNlKHNsaWRlc0luZGV4ZXNbaV0sIDEpO1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICAgICAgZGVsZXRlIHN3aXBlci52aXJ0dWFsLmNhY2hlW3NsaWRlc0luZGV4ZXNbaV1dO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzbGlkZXNJbmRleGVzW2ldIDwgYWN0aXZlSW5kZXgpIGFjdGl2ZUluZGV4IC09IDE7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gTWF0aC5tYXgoYWN0aXZlSW5kZXgsIDApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMuc3BsaWNlKHNsaWRlc0luZGV4ZXMsIDEpO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgICBkZWxldGUgc3dpcGVyLnZpcnR1YWwuY2FjaGVbc2xpZGVzSW5kZXhlc107XG4gICAgICB9XG4gICAgICBpZiAoc2xpZGVzSW5kZXhlcyA8IGFjdGl2ZUluZGV4KSBhY3RpdmVJbmRleCAtPSAxO1xuICAgICAgYWN0aXZlSW5kZXggPSBNYXRoLm1heChhY3RpdmVJbmRleCwgMCk7XG4gICAgfVxuICAgIHVwZGF0ZSh0cnVlKTtcbiAgICBzd2lwZXIuc2xpZGVUbyhhY3RpdmVJbmRleCwgMCk7XG4gIH1cbiAgZnVuY3Rpb24gcmVtb3ZlQWxsU2xpZGVzKCkge1xuICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcyA9IFtdO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLmNhY2hlID0ge307XG4gICAgfVxuICAgIHVwZGF0ZSh0cnVlKTtcbiAgICBzd2lwZXIuc2xpZGVUbygwLCAwKTtcbiAgfVxuICBvbignYmVmb3JlSW5pdCcsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gICAgbGV0IGRvbVNsaWRlc0Fzc2lnbmVkO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhc3NlZFBhcmFtcy52aXJ0dWFsLnNsaWRlcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IHNsaWRlcyA9IFsuLi5zd2lwZXIuc2xpZGVzRWwuY2hpbGRyZW5dLmZpbHRlcihlbCA9PiBlbC5tYXRjaGVzKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKSk7XG4gICAgICBpZiAoc2xpZGVzICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzID0gWy4uLnNsaWRlc107XG4gICAgICAgIGRvbVNsaWRlc0Fzc2lnbmVkID0gdHJ1ZTtcbiAgICAgICAgc2xpZGVzLmZvckVhY2goKHNsaWRlRWwsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgICAgICBzbGlkZUVsLnNldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBzbGlkZUluZGV4KTtcbiAgICAgICAgICBzd2lwZXIudmlydHVhbC5jYWNoZVtzbGlkZUluZGV4XSA9IHNsaWRlRWw7XG4gICAgICAgICAgc2xpZGVFbC5yZW1vdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghZG9tU2xpZGVzQXNzaWduZWQpIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcyA9IHN3aXBlci5wYXJhbXMudmlydHVhbC5zbGlkZXM7XG4gICAgfVxuICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfXZpcnR1YWxgKTtcbiAgICBzd2lwZXIucGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlKSB7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignc2V0VHJhbnNsYXRlJywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlICYmICFzd2lwZXIuX2ltbWVkaWF0ZVZpcnR1YWwpIHtcbiAgICAgIGNsZWFyVGltZW91dChjc3NNb2RlVGltZW91dCk7XG4gICAgICBjc3NNb2RlVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB1cGRhdGUoKTtcbiAgICAgIH0sIDEwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdpbml0IHVwZGF0ZSByZXNpemUnLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHNldENTU1Byb3BlcnR5KHN3aXBlci53cmFwcGVyRWwsICctLXN3aXBlci12aXJ0dWFsLXNpemUnLCBgJHtzd2lwZXIudmlydHVhbFNpemV9cHhgKTtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuYXNzaWduKHN3aXBlci52aXJ0dWFsLCB7XG4gICAgYXBwZW5kU2xpZGUsXG4gICAgcHJlcGVuZFNsaWRlLFxuICAgIHJlbW92ZVNsaWRlLFxuICAgIHJlbW92ZUFsbFNsaWRlcyxcbiAgICB1cGRhdGVcbiAgfSk7XG59IiwiLyogZXNsaW50LWRpc2FibGUgY29uc2lzdGVudC1yZXR1cm4gKi9cbmltcG9ydCB7IGdldFdpbmRvdywgZ2V0RG9jdW1lbnQgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IGVsZW1lbnRPZmZzZXQsIGVsZW1lbnRQYXJlbnRzIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEtleWJvYXJkKHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uLFxuICBlbWl0XG59KSB7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHN3aXBlci5rZXlib2FyZCA9IHtcbiAgICBlbmFibGVkOiBmYWxzZVxuICB9O1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGtleWJvYXJkOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIG9ubHlJblZpZXdwb3J0OiB0cnVlLFxuICAgICAgcGFnZVVwRG93bjogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIGhhbmRsZShldmVudCkge1xuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcbiAgICBjb25zdCB7XG4gICAgICBydGxUcmFuc2xhdGU6IHJ0bFxuICAgIH0gPSBzd2lwZXI7XG4gICAgbGV0IGUgPSBldmVudDtcbiAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50OyAvLyBqcXVlcnkgZml4XG4gICAgY29uc3Qga2MgPSBlLmtleUNvZGUgfHwgZS5jaGFyQ29kZTtcbiAgICBjb25zdCBwYWdlVXBEb3duID0gc3dpcGVyLnBhcmFtcy5rZXlib2FyZC5wYWdlVXBEb3duO1xuICAgIGNvbnN0IGlzUGFnZVVwID0gcGFnZVVwRG93biAmJiBrYyA9PT0gMzM7XG4gICAgY29uc3QgaXNQYWdlRG93biA9IHBhZ2VVcERvd24gJiYga2MgPT09IDM0O1xuICAgIGNvbnN0IGlzQXJyb3dMZWZ0ID0ga2MgPT09IDM3O1xuICAgIGNvbnN0IGlzQXJyb3dSaWdodCA9IGtjID09PSAzOTtcbiAgICBjb25zdCBpc0Fycm93VXAgPSBrYyA9PT0gMzg7XG4gICAgY29uc3QgaXNBcnJvd0Rvd24gPSBrYyA9PT0gNDA7XG4gICAgLy8gRGlyZWN0aW9ucyBsb2Nrc1xuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgaXNBcnJvd1JpZ2h0IHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgaXNBcnJvd0Rvd24gfHwgaXNQYWdlRG93bikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBpc0Fycm93TGVmdCB8fCBzd2lwZXIuaXNWZXJ0aWNhbCgpICYmIGlzQXJyb3dVcCB8fCBpc1BhZ2VVcCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGUuc2hpZnRLZXkgfHwgZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZSAmJiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJykpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmtleWJvYXJkLm9ubHlJblZpZXdwb3J0ICYmIChpc1BhZ2VVcCB8fCBpc1BhZ2VEb3duIHx8IGlzQXJyb3dMZWZ0IHx8IGlzQXJyb3dSaWdodCB8fCBpc0Fycm93VXAgfHwgaXNBcnJvd0Rvd24pKSB7XG4gICAgICBsZXQgaW5WaWV3ID0gZmFsc2U7XG4gICAgICAvLyBDaGVjayB0aGF0IHN3aXBlciBzaG91bGQgYmUgaW5zaWRlIG9mIHZpc2libGUgYXJlYSBvZiB3aW5kb3dcbiAgICAgIGlmIChlbGVtZW50UGFyZW50cyhzd2lwZXIuZWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKS5sZW5ndGggPiAwICYmIGVsZW1lbnRQYXJlbnRzKHN3aXBlci5lbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzc31gKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVsID0gc3dpcGVyLmVsO1xuICAgICAgY29uc3Qgc3dpcGVyV2lkdGggPSBlbC5jbGllbnRXaWR0aDtcbiAgICAgIGNvbnN0IHN3aXBlckhlaWdodCA9IGVsLmNsaWVudEhlaWdodDtcbiAgICAgIGNvbnN0IHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgICBjb25zdCB3aW5kb3dIZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgICBjb25zdCBzd2lwZXJPZmZzZXQgPSBlbGVtZW50T2Zmc2V0KGVsKTtcbiAgICAgIGlmIChydGwpIHN3aXBlck9mZnNldC5sZWZ0IC09IGVsLnNjcm9sbExlZnQ7XG4gICAgICBjb25zdCBzd2lwZXJDb29yZCA9IFtbc3dpcGVyT2Zmc2V0LmxlZnQsIHN3aXBlck9mZnNldC50b3BdLCBbc3dpcGVyT2Zmc2V0LmxlZnQgKyBzd2lwZXJXaWR0aCwgc3dpcGVyT2Zmc2V0LnRvcF0sIFtzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcCArIHN3aXBlckhlaWdodF0sIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlcldpZHRoLCBzd2lwZXJPZmZzZXQudG9wICsgc3dpcGVySGVpZ2h0XV07XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlckNvb3JkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IHBvaW50ID0gc3dpcGVyQ29vcmRbaV07XG4gICAgICAgIGlmIChwb2ludFswXSA+PSAwICYmIHBvaW50WzBdIDw9IHdpbmRvd1dpZHRoICYmIHBvaW50WzFdID49IDAgJiYgcG9pbnRbMV0gPD0gd2luZG93SGVpZ2h0KSB7XG4gICAgICAgICAgaWYgKHBvaW50WzBdID09PSAwICYmIHBvaW50WzFdID09PSAwKSBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgIGluVmlldyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghaW5WaWV3KSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBpZiAoaXNQYWdlVXAgfHwgaXNQYWdlRG93biB8fCBpc0Fycm93TGVmdCB8fCBpc0Fycm93UmlnaHQpIHtcbiAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmICgoaXNQYWdlRG93biB8fCBpc0Fycm93UmlnaHQpICYmICFydGwgfHwgKGlzUGFnZVVwIHx8IGlzQXJyb3dMZWZ0KSAmJiBydGwpIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgIGlmICgoaXNQYWdlVXAgfHwgaXNBcnJvd0xlZnQpICYmICFydGwgfHwgKGlzUGFnZURvd24gfHwgaXNBcnJvd1JpZ2h0KSAmJiBydGwpIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzUGFnZVVwIHx8IGlzUGFnZURvd24gfHwgaXNBcnJvd1VwIHx8IGlzQXJyb3dEb3duKSB7XG4gICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAoaXNQYWdlRG93biB8fCBpc0Fycm93RG93bikgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgaWYgKGlzUGFnZVVwIHx8IGlzQXJyb3dVcCkgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgIH1cbiAgICBlbWl0KCdrZXlQcmVzcycsIGtjKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICBpZiAoc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQpIHJldHVybjtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlKTtcbiAgICBzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCA9IHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBpZiAoIXN3aXBlci5rZXlib2FyZC5lbmFibGVkKSByZXR1cm47XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGhhbmRsZSk7XG4gICAgc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQgPSBmYWxzZTtcbiAgfVxuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5rZXlib2FyZC5lbmFibGVkKSB7XG4gICAgICBlbmFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQpIHtcbiAgICAgIGRpc2FibGUoKTtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5rZXlib2FyZCwge1xuICAgIGVuYWJsZSxcbiAgICBkaXNhYmxlXG4gIH0pO1xufSIsIi8qIGVzbGludC1kaXNhYmxlIGNvbnNpc3RlbnQtcmV0dXJuICovXG5pbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IG5vdywgbmV4dFRpY2sgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTW91c2V3aGVlbCh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBtb3VzZXdoZWVsOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgICAgIGludmVydDogZmFsc2UsXG4gICAgICBmb3JjZVRvQXhpczogZmFsc2UsXG4gICAgICBzZW5zaXRpdml0eTogMSxcbiAgICAgIGV2ZW50c1RhcmdldDogJ2NvbnRhaW5lcicsXG4gICAgICB0aHJlc2hvbGREZWx0YTogbnVsbCxcbiAgICAgIHRocmVzaG9sZFRpbWU6IG51bGxcbiAgICB9XG4gIH0pO1xuICBzd2lwZXIubW91c2V3aGVlbCA9IHtcbiAgICBlbmFibGVkOiBmYWxzZVxuICB9O1xuICBsZXQgdGltZW91dDtcbiAgbGV0IGxhc3RTY3JvbGxUaW1lID0gbm93KCk7XG4gIGxldCBsYXN0RXZlbnRCZWZvcmVTbmFwO1xuICBjb25zdCByZWNlbnRXaGVlbEV2ZW50cyA9IFtdO1xuICBmdW5jdGlvbiBub3JtYWxpemUoZSkge1xuICAgIC8vIFJlYXNvbmFibGUgZGVmYXVsdHNcbiAgICBjb25zdCBQSVhFTF9TVEVQID0gMTA7XG4gICAgY29uc3QgTElORV9IRUlHSFQgPSA0MDtcbiAgICBjb25zdCBQQUdFX0hFSUdIVCA9IDgwMDtcbiAgICBsZXQgc1ggPSAwO1xuICAgIGxldCBzWSA9IDA7IC8vIHNwaW5YLCBzcGluWVxuICAgIGxldCBwWCA9IDA7XG4gICAgbGV0IHBZID0gMDsgLy8gcGl4ZWxYLCBwaXhlbFlcblxuICAgIC8vIExlZ2FjeVxuICAgIGlmICgnZGV0YWlsJyBpbiBlKSB7XG4gICAgICBzWSA9IGUuZGV0YWlsO1xuICAgIH1cbiAgICBpZiAoJ3doZWVsRGVsdGEnIGluIGUpIHtcbiAgICAgIHNZID0gLWUud2hlZWxEZWx0YSAvIDEyMDtcbiAgICB9XG4gICAgaWYgKCd3aGVlbERlbHRhWScgaW4gZSkge1xuICAgICAgc1kgPSAtZS53aGVlbERlbHRhWSAvIDEyMDtcbiAgICB9XG4gICAgaWYgKCd3aGVlbERlbHRhWCcgaW4gZSkge1xuICAgICAgc1ggPSAtZS53aGVlbERlbHRhWCAvIDEyMDtcbiAgICB9XG5cbiAgICAvLyBzaWRlIHNjcm9sbGluZyBvbiBGRiB3aXRoIERPTU1vdXNlU2Nyb2xsXG4gICAgaWYgKCdheGlzJyBpbiBlICYmIGUuYXhpcyA9PT0gZS5IT1JJWk9OVEFMX0FYSVMpIHtcbiAgICAgIHNYID0gc1k7XG4gICAgICBzWSA9IDA7XG4gICAgfVxuICAgIHBYID0gc1ggKiBQSVhFTF9TVEVQO1xuICAgIHBZID0gc1kgKiBQSVhFTF9TVEVQO1xuICAgIGlmICgnZGVsdGFZJyBpbiBlKSB7XG4gICAgICBwWSA9IGUuZGVsdGFZO1xuICAgIH1cbiAgICBpZiAoJ2RlbHRhWCcgaW4gZSkge1xuICAgICAgcFggPSBlLmRlbHRhWDtcbiAgICB9XG4gICAgaWYgKGUuc2hpZnRLZXkgJiYgIXBYKSB7XG4gICAgICAvLyBpZiB1c2VyIHNjcm9sbHMgd2l0aCBzaGlmdCBoZSB3YW50cyBob3Jpem9udGFsIHNjcm9sbFxuICAgICAgcFggPSBwWTtcbiAgICAgIHBZID0gMDtcbiAgICB9XG4gICAgaWYgKChwWCB8fCBwWSkgJiYgZS5kZWx0YU1vZGUpIHtcbiAgICAgIGlmIChlLmRlbHRhTW9kZSA9PT0gMSkge1xuICAgICAgICAvLyBkZWx0YSBpbiBMSU5FIHVuaXRzXG4gICAgICAgIHBYICo9IExJTkVfSEVJR0hUO1xuICAgICAgICBwWSAqPSBMSU5FX0hFSUdIVDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlbHRhIGluIFBBR0UgdW5pdHNcbiAgICAgICAgcFggKj0gUEFHRV9IRUlHSFQ7XG4gICAgICAgIHBZICo9IFBBR0VfSEVJR0hUO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZhbGwtYmFjayBpZiBzcGluIGNhbm5vdCBiZSBkZXRlcm1pbmVkXG4gICAgaWYgKHBYICYmICFzWCkge1xuICAgICAgc1ggPSBwWCA8IDEgPyAtMSA6IDE7XG4gICAgfVxuICAgIGlmIChwWSAmJiAhc1kpIHtcbiAgICAgIHNZID0gcFkgPCAxID8gLTEgOiAxO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgc3Bpblg6IHNYLFxuICAgICAgc3Bpblk6IHNZLFxuICAgICAgcGl4ZWxYOiBwWCxcbiAgICAgIHBpeGVsWTogcFlcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZU1vdXNlRW50ZXIoKSB7XG4gICAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5tb3VzZUVudGVyZWQgPSB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZU1vdXNlTGVhdmUoKSB7XG4gICAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5tb3VzZUVudGVyZWQgPSBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiBhbmltYXRlU2xpZGVyKG5ld0V2ZW50KSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGREZWx0YSAmJiBuZXdFdmVudC5kZWx0YSA8IHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGREZWx0YSkge1xuICAgICAgLy8gUHJldmVudCBpZiBkZWx0YSBvZiB3aGVlbCBzY3JvbGwgZGVsdGEgaXMgYmVsb3cgY29uZmlndXJlZCB0aHJlc2hvbGRcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGRUaW1lICYmIG5vdygpIC0gbGFzdFNjcm9sbFRpbWUgPCBzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwudGhyZXNob2xkVGltZSkge1xuICAgICAgLy8gUHJldmVudCBpZiB0aW1lIGJldHdlZW4gc2Nyb2xscyBpcyBiZWxvdyBjb25maWd1cmVkIHRocmVzaG9sZFxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBtb3ZlbWVudCBpcyBOT1QgYmlnIGVub3VnaCBhbmRcbiAgICAvLyBpZiB0aGUgbGFzdCB0aW1lIHRoZSB1c2VyIHNjcm9sbGVkIHdhcyB0b28gY2xvc2UgdG8gdGhlIGN1cnJlbnQgb25lIChhdm9pZCBjb250aW51b3VzbHkgdHJpZ2dlcmluZyB0aGUgc2xpZGVyKTpcbiAgICAvLyAgIERvbid0IGdvIGFueSBmdXJ0aGVyIChhdm9pZCBpbnNpZ25pZmljYW50IHNjcm9sbCBtb3ZlbWVudCkuXG4gICAgaWYgKG5ld0V2ZW50LmRlbHRhID49IDYgJiYgbm93KCkgLSBsYXN0U2Nyb2xsVGltZSA8IDYwKSB7XG4gICAgICAvLyBSZXR1cm4gZmFsc2UgYXMgYSBkZWZhdWx0XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gSWYgdXNlciBpcyBzY3JvbGxpbmcgdG93YXJkcyB0aGUgZW5kOlxuICAgIC8vICAgSWYgdGhlIHNsaWRlciBoYXNuJ3QgaGl0IHRoZSBsYXRlc3Qgc2xpZGUgb3JcbiAgICAvLyAgIGlmIHRoZSBzbGlkZXIgaXMgYSBsb29wIGFuZFxuICAgIC8vICAgaWYgdGhlIHNsaWRlciBpc24ndCBtb3ZpbmcgcmlnaHQgbm93OlxuICAgIC8vICAgICBHbyB0byBuZXh0IHNsaWRlIGFuZFxuICAgIC8vICAgICBlbWl0IGEgc2Nyb2xsIGV2ZW50LlxuICAgIC8vIEVsc2UgKHRoZSB1c2VyIGlzIHNjcm9sbGluZyB0b3dhcmRzIHRoZSBiZWdpbm5pbmcpIGFuZFxuICAgIC8vIGlmIHRoZSBzbGlkZXIgaGFzbid0IGhpdCB0aGUgZmlyc3Qgc2xpZGUgb3JcbiAgICAvLyBpZiB0aGUgc2xpZGVyIGlzIGEgbG9vcCBhbmRcbiAgICAvLyBpZiB0aGUgc2xpZGVyIGlzbid0IG1vdmluZyByaWdodCBub3c6XG4gICAgLy8gICBHbyB0byBwcmV2IHNsaWRlIGFuZFxuICAgIC8vICAgZW1pdCBhIHNjcm9sbCBldmVudC5cbiAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uIDwgMCkge1xuICAgICAgaWYgKCghc3dpcGVyLmlzRW5kIHx8IHN3aXBlci5wYXJhbXMubG9vcCkgJiYgIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgICBlbWl0KCdzY3JvbGwnLCBuZXdFdmVudC5yYXcpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoKCFzd2lwZXIuaXNCZWdpbm5pbmcgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSAmJiAhc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgZW1pdCgnc2Nyb2xsJywgbmV3RXZlbnQucmF3KTtcbiAgICB9XG4gICAgLy8gSWYgeW91IGdvdCBoZXJlIGlzIGJlY2F1c2UgYW4gYW5pbWF0aW9uIGhhcyBiZWVuIHRyaWdnZXJlZCBzbyBzdG9yZSB0aGUgY3VycmVudCB0aW1lXG4gICAgbGFzdFNjcm9sbFRpbWUgPSBuZXcgd2luZG93LkRhdGUoKS5nZXRUaW1lKCk7XG4gICAgLy8gUmV0dXJuIGZhbHNlIGFzIGEgZGVmYXVsdFxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiByZWxlYXNlU2Nyb2xsKG5ld0V2ZW50KSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsO1xuICAgIGlmIChuZXdFdmVudC5kaXJlY3Rpb24gPCAwKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgcGFyYW1zLnJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgICAgIC8vIFJldHVybiB0cnVlIHRvIGFuaW1hdGUgc2Nyb2xsIG9uIGVkZ2VzXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgcGFyYW1zLnJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgICAvLyBSZXR1cm4gdHJ1ZSB0byBhbmltYXRlIHNjcm9sbCBvbiBlZGdlc1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGUoZXZlbnQpIHtcbiAgICBsZXQgZSA9IGV2ZW50O1xuICAgIGxldCBkaXNhYmxlUGFyZW50U3dpcGVyID0gdHJ1ZTtcbiAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgbGV0IHRhcmdldEVsID0gc3dpcGVyLmVsO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0ICE9PSAnY29udGFpbmVyJykge1xuICAgICAgdGFyZ2V0RWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQpO1xuICAgIH1cbiAgICBjb25zdCB0YXJnZXRFbENvbnRhaW5zVGFyZ2V0ID0gdGFyZ2V0RWwgJiYgdGFyZ2V0RWwuY29udGFpbnMoZS50YXJnZXQpO1xuICAgIGlmICghc3dpcGVyLm1vdXNlRW50ZXJlZCAmJiAhdGFyZ2V0RWxDb250YWluc1RhcmdldCAmJiAhcGFyYW1zLnJlbGVhc2VPbkVkZ2VzKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50OyAvLyBqcXVlcnkgZml4XG4gICAgbGV0IGRlbHRhID0gMDtcbiAgICBjb25zdCBydGxGYWN0b3IgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gLTEgOiAxO1xuICAgIGNvbnN0IGRhdGEgPSBub3JtYWxpemUoZSk7XG4gICAgaWYgKHBhcmFtcy5mb3JjZVRvQXhpcykge1xuICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICBpZiAoTWF0aC5hYnMoZGF0YS5waXhlbFgpID4gTWF0aC5hYnMoZGF0YS5waXhlbFkpKSBkZWx0YSA9IC1kYXRhLnBpeGVsWCAqIHJ0bEZhY3RvcjtlbHNlIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhkYXRhLnBpeGVsWSkgPiBNYXRoLmFicyhkYXRhLnBpeGVsWCkpIGRlbHRhID0gLWRhdGEucGl4ZWxZO2Vsc2UgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbHRhID0gTWF0aC5hYnMoZGF0YS5waXhlbFgpID4gTWF0aC5hYnMoZGF0YS5waXhlbFkpID8gLWRhdGEucGl4ZWxYICogcnRsRmFjdG9yIDogLWRhdGEucGl4ZWxZO1xuICAgIH1cbiAgICBpZiAoZGVsdGEgPT09IDApIHJldHVybiB0cnVlO1xuICAgIGlmIChwYXJhbXMuaW52ZXJ0KSBkZWx0YSA9IC1kZWx0YTtcblxuICAgIC8vIEdldCB0aGUgc2Nyb2xsIHBvc2l0aW9uc1xuICAgIGxldCBwb3NpdGlvbnMgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCkgKyBkZWx0YSAqIHBhcmFtcy5zZW5zaXRpdml0eTtcbiAgICBpZiAocG9zaXRpb25zID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkgcG9zaXRpb25zID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgIGlmIChwb3NpdGlvbnMgPD0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSBwb3NpdGlvbnMgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG5cbiAgICAvLyBXaGVuIGxvb3AgaXMgdHJ1ZTpcbiAgICAvLyAgICAgdGhlIGRpc2FibGVQYXJlbnRTd2lwZXIgd2lsbCBiZSB0cnVlLlxuICAgIC8vIFdoZW4gbG9vcCBpcyBmYWxzZTpcbiAgICAvLyAgICAgaWYgdGhlIHNjcm9sbCBwb3NpdGlvbnMgaXMgbm90IG9uIGVkZ2UsXG4gICAgLy8gICAgIHRoZW4gdGhlIGRpc2FibGVQYXJlbnRTd2lwZXIgd2lsbCBiZSB0cnVlLlxuICAgIC8vICAgICBpZiB0aGUgc2Nyb2xsIG9uIGVkZ2UgcG9zaXRpb25zLFxuICAgIC8vICAgICB0aGVuIHRoZSBkaXNhYmxlUGFyZW50U3dpcGVyIHdpbGwgYmUgZmFsc2UuXG4gICAgZGlzYWJsZVBhcmVudFN3aXBlciA9IHN3aXBlci5wYXJhbXMubG9vcCA/IHRydWUgOiAhKHBvc2l0aW9ucyA9PT0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIHx8IHBvc2l0aW9ucyA9PT0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKTtcbiAgICBpZiAoZGlzYWJsZVBhcmVudFN3aXBlciAmJiBzd2lwZXIucGFyYW1zLm5lc3RlZCkgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuZnJlZU1vZGUgfHwgIXN3aXBlci5wYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCkge1xuICAgICAgLy8gUmVnaXN0ZXIgdGhlIG5ldyBldmVudCBpbiBhIHZhcmlhYmxlIHdoaWNoIHN0b3JlcyB0aGUgcmVsZXZhbnQgZGF0YVxuICAgICAgY29uc3QgbmV3RXZlbnQgPSB7XG4gICAgICAgIHRpbWU6IG5vdygpLFxuICAgICAgICBkZWx0YTogTWF0aC5hYnMoZGVsdGEpLFxuICAgICAgICBkaXJlY3Rpb246IE1hdGguc2lnbihkZWx0YSksXG4gICAgICAgIHJhdzogZXZlbnRcbiAgICAgIH07XG5cbiAgICAgIC8vIEtlZXAgdGhlIG1vc3QgcmVjZW50IGV2ZW50c1xuICAgICAgaWYgKHJlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnNoaWZ0KCk7IC8vIG9ubHkgc3RvcmUgdGhlIGxhc3QgTiBldmVudHNcbiAgICAgIH1cblxuICAgICAgY29uc3QgcHJldkV2ZW50ID0gcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID8gcmVjZW50V2hlZWxFdmVudHNbcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgICByZWNlbnRXaGVlbEV2ZW50cy5wdXNoKG5ld0V2ZW50KTtcblxuICAgICAgLy8gSWYgdGhlcmUgaXMgYXQgbGVhc3Qgb25lIHByZXZpb3VzIHJlY29yZGVkIGV2ZW50OlxuICAgICAgLy8gICBJZiBkaXJlY3Rpb24gaGFzIGNoYW5nZWQgb3JcbiAgICAgIC8vICAgaWYgdGhlIHNjcm9sbCBpcyBxdWlja2VyIHRoYW4gdGhlIHByZXZpb3VzIG9uZTpcbiAgICAgIC8vICAgICBBbmltYXRlIHRoZSBzbGlkZXIuXG4gICAgICAvLyBFbHNlICh0aGlzIGlzIHRoZSBmaXJzdCB0aW1lIHRoZSB3aGVlbCBpcyBtb3ZlZCk6XG4gICAgICAvLyAgICAgQW5pbWF0ZSB0aGUgc2xpZGVyLlxuICAgICAgaWYgKHByZXZFdmVudCkge1xuICAgICAgICBpZiAobmV3RXZlbnQuZGlyZWN0aW9uICE9PSBwcmV2RXZlbnQuZGlyZWN0aW9uIHx8IG5ld0V2ZW50LmRlbHRhID4gcHJldkV2ZW50LmRlbHRhIHx8IG5ld0V2ZW50LnRpbWUgPiBwcmV2RXZlbnQudGltZSArIDE1MCkge1xuICAgICAgICAgIGFuaW1hdGVTbGlkZXIobmV3RXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbmltYXRlU2xpZGVyKG5ld0V2ZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgaXQncyB0aW1lIHRvIHJlbGVhc2UgdGhlIHNjcm9sbDpcbiAgICAgIC8vICAgUmV0dXJuIG5vdyBzbyB5b3UgZG9uJ3QgaGl0IHRoZSBwcmV2ZW50RGVmYXVsdC5cbiAgICAgIGlmIChyZWxlYXNlU2Nyb2xsKG5ld0V2ZW50KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRnJlZW1vZGUgb3Igc2Nyb2xsQ29udGFpbmVyOlxuXG4gICAgICAvLyBJZiB3ZSByZWNlbnRseSBzbmFwcGVkIGFmdGVyIGEgbW9tZW50dW0gc2Nyb2xsLCB0aGVuIGlnbm9yZSB3aGVlbCBldmVudHNcbiAgICAgIC8vIHRvIGdpdmUgdGltZSBmb3IgdGhlIGRlY2VsZXJhdGlvbiB0byBmaW5pc2guIFN0b3AgaWdub3JpbmcgYWZ0ZXIgNTAwIG1zZWNzXG4gICAgICAvLyBvciBpZiBpdCdzIGEgbmV3IHNjcm9sbCAobGFyZ2VyIGRlbHRhIG9yIGludmVyc2Ugc2lnbiBhcyBsYXN0IGV2ZW50IGJlZm9yZVxuICAgICAgLy8gYW4gZW5kLW9mLW1vbWVudHVtIHNuYXApLlxuICAgICAgY29uc3QgbmV3RXZlbnQgPSB7XG4gICAgICAgIHRpbWU6IG5vdygpLFxuICAgICAgICBkZWx0YTogTWF0aC5hYnMoZGVsdGEpLFxuICAgICAgICBkaXJlY3Rpb246IE1hdGguc2lnbihkZWx0YSlcbiAgICAgIH07XG4gICAgICBjb25zdCBpZ25vcmVXaGVlbEV2ZW50cyA9IGxhc3RFdmVudEJlZm9yZVNuYXAgJiYgbmV3RXZlbnQudGltZSA8IGxhc3RFdmVudEJlZm9yZVNuYXAudGltZSArIDUwMCAmJiBuZXdFdmVudC5kZWx0YSA8PSBsYXN0RXZlbnRCZWZvcmVTbmFwLmRlbHRhICYmIG5ld0V2ZW50LmRpcmVjdGlvbiA9PT0gbGFzdEV2ZW50QmVmb3JlU25hcC5kaXJlY3Rpb247XG4gICAgICBpZiAoIWlnbm9yZVdoZWVsRXZlbnRzKSB7XG4gICAgICAgIGxhc3RFdmVudEJlZm9yZVNuYXAgPSB1bmRlZmluZWQ7XG4gICAgICAgIGxldCBwb3NpdGlvbiA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKSArIGRlbHRhICogcGFyYW1zLnNlbnNpdGl2aXR5O1xuICAgICAgICBjb25zdCB3YXNCZWdpbm5pbmcgPSBzd2lwZXIuaXNCZWdpbm5pbmc7XG4gICAgICAgIGNvbnN0IHdhc0VuZCA9IHN3aXBlci5pc0VuZDtcbiAgICAgICAgaWYgKHBvc2l0aW9uID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkgcG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgIGlmIChwb3NpdGlvbiA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHBvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShwb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgICAgaWYgKCF3YXNCZWdpbm5pbmcgJiYgc3dpcGVyLmlzQmVnaW5uaW5nIHx8ICF3YXNFbmQgJiYgc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICAgICAgZGlyZWN0aW9uOiBuZXdFdmVudC5kaXJlY3Rpb24gPCAwID8gJ25leHQnIDogJ3ByZXYnLFxuICAgICAgICAgICAgYnlNb3VzZXdoZWVsOiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUuc3RpY2t5KSB7XG4gICAgICAgICAgLy8gV2hlbiB3aGVlbCBzY3JvbGxpbmcgc3RhcnRzIHdpdGggc3RpY2t5IChha2Egc25hcCkgZW5hYmxlZCwgdGhlbiBkZXRlY3RcbiAgICAgICAgICAvLyB0aGUgZW5kIG9mIGEgbW9tZW50dW0gc2Nyb2xsIGJ5IHN0b3JpbmcgcmVjZW50IChOPTE1Pykgd2hlZWwgZXZlbnRzLlxuICAgICAgICAgIC8vIDEuIGRvIGFsbCBOIGV2ZW50cyBoYXZlIGRlY3JlYXNpbmcgb3Igc2FtZSAoYWJzb2x1dGUgdmFsdWUpIGRlbHRhP1xuICAgICAgICAgIC8vIDIuIGRpZCBhbGwgTiBldmVudHMgYXJyaXZlIGluIHRoZSBsYXN0IE0gKE09NTAwPykgbXNlY3M/XG4gICAgICAgICAgLy8gMy4gZG9lcyB0aGUgZWFybGllc3QgZXZlbnQgaGF2ZSBhbiAoYWJzb2x1dGUgdmFsdWUpIGRlbHRhIHRoYXQnc1xuICAgICAgICAgIC8vICAgIGF0IGxlYXN0IFAgKFA9MT8pIGxhcmdlciB0aGFuIHRoZSBtb3N0IHJlY2VudCBldmVudCdzIGRlbHRhP1xuICAgICAgICAgIC8vIDQuIGRvZXMgdGhlIGxhdGVzdCBldmVudCBoYXZlIGEgZGVsdGEgdGhhdCdzIHNtYWxsZXIgdGhhbiBRIChRPTY/KSBwaXhlbHM/XG4gICAgICAgICAgLy8gSWYgMS00IGFyZSBcInllc1wiIHRoZW4gd2UncmUgbmVhciB0aGUgZW5kIG9mIGEgbW9tZW50dW0gc2Nyb2xsIGRlY2VsZXJhdGlvbi5cbiAgICAgICAgICAvLyBTbmFwIGltbWVkaWF0ZWx5IGFuZCBpZ25vcmUgcmVtYWluaW5nIHdoZWVsIGV2ZW50cyBpbiB0aGlzIHNjcm9sbC5cbiAgICAgICAgICAvLyBTZWUgY29tbWVudCBhYm92ZSBmb3IgXCJyZW1haW5pbmcgd2hlZWwgZXZlbnRzIGluIHRoaXMgc2Nyb2xsXCIgZGV0ZXJtaW5hdGlvbi5cbiAgICAgICAgICAvLyBJZiAxLTQgYXJlbid0IHNhdGlzZmllZCwgdGhlbiB3YWl0IHRvIHNuYXAgdW50aWwgNTAwbXMgYWZ0ZXIgdGhlIGxhc3QgZXZlbnQuXG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICAgIHRpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKHJlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCA+PSAxNSkge1xuICAgICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMuc2hpZnQoKTsgLy8gb25seSBzdG9yZSB0aGUgbGFzdCBOIGV2ZW50c1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHByZXZFdmVudCA9IHJlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCA/IHJlY2VudFdoZWVsRXZlbnRzW3JlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuICAgICAgICAgIGNvbnN0IGZpcnN0RXZlbnQgPSByZWNlbnRXaGVlbEV2ZW50c1swXTtcbiAgICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5wdXNoKG5ld0V2ZW50KTtcbiAgICAgICAgICBpZiAocHJldkV2ZW50ICYmIChuZXdFdmVudC5kZWx0YSA+IHByZXZFdmVudC5kZWx0YSB8fCBuZXdFdmVudC5kaXJlY3Rpb24gIT09IHByZXZFdmVudC5kaXJlY3Rpb24pKSB7XG4gICAgICAgICAgICAvLyBJbmNyZWFzaW5nIG9yIHJldmVyc2Utc2lnbiBkZWx0YSBtZWFucyB0aGUgdXNlciBzdGFydGVkIHNjcm9sbGluZyBhZ2Fpbi4gQ2xlYXIgdGhlIHdoZWVsIGV2ZW50IGxvZy5cbiAgICAgICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnNwbGljZSgwKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlY2VudFdoZWVsRXZlbnRzLmxlbmd0aCA+PSAxNSAmJiBuZXdFdmVudC50aW1lIC0gZmlyc3RFdmVudC50aW1lIDwgNTAwICYmIGZpcnN0RXZlbnQuZGVsdGEgLSBuZXdFdmVudC5kZWx0YSA+PSAxICYmIG5ld0V2ZW50LmRlbHRhIDw9IDYpIHtcbiAgICAgICAgICAgIC8vIFdlJ3JlIGF0IHRoZSBlbmQgb2YgdGhlIGRlY2VsZXJhdGlvbiBvZiBhIG1vbWVudHVtIHNjcm9sbCwgc28gdGhlcmUncyBubyBuZWVkXG4gICAgICAgICAgICAvLyB0byB3YWl0IGZvciBtb3JlIGV2ZW50cy4gU25hcCBBU0FQIG9uIHRoZSBuZXh0IHRpY2suXG4gICAgICAgICAgICAvLyBBbHNvLCBiZWNhdXNlIHRoZXJlJ3Mgc29tZSByZW1haW5pbmcgbW9tZW50dW0gd2UnbGwgYmlhcyB0aGUgc25hcCBpbiB0aGVcbiAgICAgICAgICAgIC8vIGRpcmVjdGlvbiBvZiB0aGUgb25nb2luZyBzY3JvbGwgYmVjYXVzZSBpdCdzIGJldHRlciBVWCBmb3IgdGhlIHNjcm9sbCB0byBzbmFwXG4gICAgICAgICAgICAvLyBpbiB0aGUgc2FtZSBkaXJlY3Rpb24gYXMgdGhlIHNjcm9sbCBpbnN0ZWFkIG9mIHJldmVyc2luZyB0byBzbmFwLiAgVGhlcmVmb3JlLFxuICAgICAgICAgICAgLy8gaWYgaXQncyBhbHJlYWR5IHNjcm9sbGVkIG1vcmUgdGhhbiAyMCUgaW4gdGhlIGN1cnJlbnQgZGlyZWN0aW9uLCBrZWVwIGdvaW5nLlxuICAgICAgICAgICAgY29uc3Qgc25hcFRvVGhyZXNob2xkID0gZGVsdGEgPiAwID8gMC44IDogMC4yO1xuICAgICAgICAgICAgbGFzdEV2ZW50QmVmb3JlU25hcCA9IG5ld0V2ZW50O1xuICAgICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMuc3BsaWNlKDApO1xuICAgICAgICAgICAgdGltZW91dCA9IG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHVuZGVmaW5lZCwgc25hcFRvVGhyZXNob2xkKTtcbiAgICAgICAgICAgIH0sIDApOyAvLyBubyBkZWxheTsgbW92ZSBvbiBuZXh0IHRpY2tcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgICAgICAgIC8vIGlmIHdlIGdldCBoZXJlLCB0aGVuIHdlIGhhdmVuJ3QgZGV0ZWN0ZWQgdGhlIGVuZCBvZiBhIG1vbWVudHVtIHNjcm9sbCwgc29cbiAgICAgICAgICAgIC8vIHdlJ2xsIGNvbnNpZGVyIGEgc2Nyb2xsIFwiY29tcGxldGVcIiB3aGVuIHRoZXJlIGhhdmVuJ3QgYmVlbiBhbnkgd2hlZWwgZXZlbnRzXG4gICAgICAgICAgICAvLyBmb3IgNTAwbXMuXG4gICAgICAgICAgICB0aW1lb3V0ID0gbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBzbmFwVG9UaHJlc2hvbGQgPSAwLjU7XG4gICAgICAgICAgICAgIGxhc3RFdmVudEJlZm9yZVNuYXAgPSBuZXdFdmVudDtcbiAgICAgICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMuc3BsaWNlKDApO1xuICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3Qoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdW5kZWZpbmVkLCBzbmFwVG9UaHJlc2hvbGQpO1xuICAgICAgICAgICAgfSwgNTAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFbWl0IGV2ZW50XG4gICAgICAgIGlmICghaWdub3JlV2hlZWxFdmVudHMpIGVtaXQoJ3Njcm9sbCcsIGUpO1xuXG4gICAgICAgIC8vIFN0b3AgYXV0b3BsYXlcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkgJiYgc3dpcGVyLnBhcmFtcy5hdXRvcGxheURpc2FibGVPbkludGVyYWN0aW9uKSBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICAvLyBSZXR1cm4gcGFnZSBzY3JvbGwgb24gZWRnZSBwb3NpdGlvbnNcbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSBzd2lwZXIubWluVHJhbnNsYXRlKCkgfHwgcG9zaXRpb24gPT09IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZ1bmN0aW9uIGV2ZW50cyhtZXRob2QpIHtcbiAgICBsZXQgdGFyZ2V0RWwgPSBzd2lwZXIuZWw7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQgIT09ICdjb250YWluZXInKSB7XG4gICAgICB0YXJnZXRFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCk7XG4gICAgfVxuICAgIHRhcmdldEVsW21ldGhvZF0oJ21vdXNlZW50ZXInLCBoYW5kbGVNb3VzZUVudGVyKTtcbiAgICB0YXJnZXRFbFttZXRob2RdKCdtb3VzZWxlYXZlJywgaGFuZGxlTW91c2VMZWF2ZSk7XG4gICAgdGFyZ2V0RWxbbWV0aG9kXSgnd2hlZWwnLCBoYW5kbGUpO1xuICB9XG4gIGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3doZWVsJywgaGFuZGxlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCkgcmV0dXJuIGZhbHNlO1xuICAgIGV2ZW50cygnYWRkRXZlbnRMaXN0ZW5lcicpO1xuICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSB0cnVlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCkgcmV0dXJuIGZhbHNlO1xuICAgIGV2ZW50cygncmVtb3ZlRXZlbnRMaXN0ZW5lcicpO1xuICAgIHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgZGlzYWJsZSgpO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmVuYWJsZWQpIGVuYWJsZSgpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgZW5hYmxlKCk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSBkaXNhYmxlKCk7XG4gIH0pO1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5tb3VzZXdoZWVsLCB7XG4gICAgZW5hYmxlLFxuICAgIGRpc2FibGVcbiAgfSk7XG59IiwiaW1wb3J0IHsgY3JlYXRlRWxlbWVudCwgZWxlbWVudENoaWxkcmVuIH0gZnJvbSAnLi91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgb3JpZ2luYWxQYXJhbXMsIHBhcmFtcywgY2hlY2tQcm9wcykge1xuICBpZiAoc3dpcGVyLnBhcmFtcy5jcmVhdGVFbGVtZW50cykge1xuICAgIE9iamVjdC5rZXlzKGNoZWNrUHJvcHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmICghcGFyYW1zW2tleV0gJiYgcGFyYW1zLmF1dG8gPT09IHRydWUpIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBlbGVtZW50Q2hpbGRyZW4oc3dpcGVyLmVsLCBgLiR7Y2hlY2tQcm9wc1trZXldfWApWzBdO1xuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnZGl2JywgY2hlY2tQcm9wc1trZXldKTtcbiAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGNoZWNrUHJvcHNba2V5XTtcbiAgICAgICAgICBzd2lwZXIuZWwuYXBwZW5kKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtc1trZXldID0gZWxlbWVudDtcbiAgICAgICAgb3JpZ2luYWxQYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhcmFtcztcbn0iLCJpbXBvcnQgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCBmcm9tICcuLi8uLi9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTmF2aWdhdGlvbih7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIG5hdmlnYXRpb246IHtcbiAgICAgIG5leHRFbDogbnVsbCxcbiAgICAgIHByZXZFbDogbnVsbCxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWRpc2FibGVkJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLWJ1dHRvbi1oaWRkZW4nLFxuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLWJ1dHRvbi1sb2NrJyxcbiAgICAgIG5hdmlnYXRpb25EaXNhYmxlZENsYXNzOiAnc3dpcGVyLW5hdmlnYXRpb24tZGlzYWJsZWQnXG4gICAgfVxuICB9KTtcbiAgc3dpcGVyLm5hdmlnYXRpb24gPSB7XG4gICAgbmV4dEVsOiBudWxsLFxuICAgIHByZXZFbDogbnVsbFxuICB9O1xuICBjb25zdCBtYWtlRWxlbWVudHNBcnJheSA9IGVsID0+IHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZWwpKSBlbCA9IFtlbF0uZmlsdGVyKGUgPT4gISFlKTtcbiAgICByZXR1cm4gZWw7XG4gIH07XG4gIGZ1bmN0aW9uIGdldEVsKGVsKSB7XG4gICAgbGV0IHJlcztcbiAgICBpZiAoZWwgJiYgdHlwZW9mIGVsID09PSAnc3RyaW5nJyAmJiBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICByZXMgPSBzd2lwZXIuZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICAgIGlmIChyZXMpIHJldHVybiByZXM7XG4gICAgfVxuICAgIGlmIChlbCkge1xuICAgICAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHJlcyA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsKV07XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgZWwgPT09ICdzdHJpbmcnICYmIHJlcy5sZW5ndGggPiAxICYmIHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKGVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmVzID0gc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZWwgJiYgIXJlcykgcmV0dXJuIGVsO1xuICAgIC8vIGlmIChBcnJheS5pc0FycmF5KHJlcykgJiYgcmVzLmxlbmd0aCA9PT0gMSkgcmVzID0gcmVzWzBdO1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgZnVuY3Rpb24gdG9nZ2xlRWwoZWwsIGRpc2FibGVkKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgaWYgKHN1YkVsKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdFtkaXNhYmxlZCA/ICdhZGQnIDogJ3JlbW92ZSddKC4uLnBhcmFtcy5kaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgICBpZiAoc3ViRWwudGFnTmFtZSA9PT0gJ0JVVFRPTicpIHN1YkVsLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICAgICBzdWJFbC5jbGFzc0xpc3Rbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZCcgOiAncmVtb3ZlJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgLy8gVXBkYXRlIE5hdmlnYXRpb24gQnV0dG9uc1xuICAgIGNvbnN0IHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICB0b2dnbGVFbChwcmV2RWwsIGZhbHNlKTtcbiAgICAgIHRvZ2dsZUVsKG5leHRFbCwgZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0b2dnbGVFbChwcmV2RWwsIHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpO1xuICAgIHRvZ2dsZUVsKG5leHRFbCwgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLnJld2luZCk7XG4gIH1cbiAgZnVuY3Rpb24gb25QcmV2Q2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgIGVtaXQoJ25hdmlnYXRpb25QcmV2Jyk7XG4gIH1cbiAgZnVuY3Rpb24gb25OZXh0Q2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgIGVtaXQoJ25hdmlnYXRpb25OZXh0Jyk7XG4gIH1cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb247XG4gICAgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5uYXZpZ2F0aW9uLCBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24sIHtcbiAgICAgIG5leHRFbDogJ3N3aXBlci1idXR0b24tbmV4dCcsXG4gICAgICBwcmV2RWw6ICdzd2lwZXItYnV0dG9uLXByZXYnXG4gICAgfSk7XG4gICAgaWYgKCEocGFyYW1zLm5leHRFbCB8fCBwYXJhbXMucHJldkVsKSkgcmV0dXJuO1xuICAgIGxldCBuZXh0RWwgPSBnZXRFbChwYXJhbXMubmV4dEVsKTtcbiAgICBsZXQgcHJldkVsID0gZ2V0RWwocGFyYW1zLnByZXZFbCk7XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIubmF2aWdhdGlvbiwge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSk7XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGNvbnN0IGluaXRCdXR0b24gPSAoZWwsIGRpcikgPT4ge1xuICAgICAgaWYgKGVsKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGlyID09PSAnbmV4dCcgPyBvbk5leHRDbGljayA6IG9uUHJldkNsaWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQgJiYgZWwpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCguLi5wYXJhbXMubG9ja0NsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgfVxuICAgIH07XG4gICAgbmV4dEVsLmZvckVhY2goZWwgPT4gaW5pdEJ1dHRvbihlbCwgJ25leHQnKSk7XG4gICAgcHJldkVsLmZvckVhY2goZWwgPT4gaW5pdEJ1dHRvbihlbCwgJ3ByZXYnKSk7XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBjb25zdCBkZXN0cm95QnV0dG9uID0gKGVsLCBkaXIpID0+IHtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGlyID09PSAnbmV4dCcgPyBvbk5leHRDbGljayA6IG9uUHJldkNsaWNrKTtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmRpc2FibGVkQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgfTtcbiAgICBuZXh0RWwuZm9yRWFjaChlbCA9PiBkZXN0cm95QnV0dG9uKGVsLCAnbmV4dCcpKTtcbiAgICBwcmV2RWwuZm9yRWFjaChlbCA9PiBkZXN0cm95QnV0dG9uKGVsLCAncHJldicpKTtcbiAgfVxuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGRpc2FibGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdCgpO1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3RvRWRnZSBmcm9tRWRnZSBsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRlc3Ryb3koKTtcbiAgfSk7XG4gIG9uKCdlbmFibGUgZGlzYWJsZScsICgpID0+IHtcbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBbLi4ubmV4dEVsLCAuLi5wcmV2RWxdLmZpbHRlcihlbCA9PiAhIWVsKS5mb3JFYWNoKGVsID0+IGVsLmNsYXNzTGlzdFtzd2lwZXIuZW5hYmxlZCA/ICdyZW1vdmUnIDogJ2FkZCddKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5sb2NrQ2xhc3MpKTtcbiAgfSk7XG4gIG9uKCdjbGljaycsIChfcywgZSkgPT4ge1xuICAgIGxldCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGNvbnN0IHRhcmdldEVsID0gZS50YXJnZXQ7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRlT25DbGljayAmJiAhcHJldkVsLmluY2x1ZGVzKHRhcmdldEVsKSAmJiAhbmV4dEVsLmluY2x1ZGVzKHRhcmdldEVsKSkge1xuICAgICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uY2xpY2thYmxlICYmIChzd2lwZXIucGFnaW5hdGlvbi5lbCA9PT0gdGFyZ2V0RWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uZWwuY29udGFpbnModGFyZ2V0RWwpKSkgcmV0dXJuO1xuICAgICAgbGV0IGlzSGlkZGVuO1xuICAgICAgaWYgKG5leHRFbC5sZW5ndGgpIHtcbiAgICAgICAgaXNIaWRkZW4gPSBuZXh0RWxbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICB9IGVsc2UgaWYgKHByZXZFbC5sZW5ndGgpIHtcbiAgICAgICAgaXNIaWRkZW4gPSBwcmV2RWxbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICB9XG4gICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgZW1pdCgnbmF2aWdhdGlvblNob3cnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVtaXQoJ25hdmlnYXRpb25IaWRlJyk7XG4gICAgICB9XG4gICAgICBbLi4ubmV4dEVsLCAuLi5wcmV2RWxdLmZpbHRlcihlbCA9PiAhIWVsKS5mb3JFYWNoKGVsID0+IGVsLmNsYXNzTGlzdC50b2dnbGUoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZW5hYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKC4uLnN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5uYXZpZ2F0aW9uRGlzYWJsZWRDbGFzcy5zcGxpdCgnICcpKTtcbiAgICBpbml0KCk7XG4gICAgdXBkYXRlKCk7XG4gIH07XG4gIGNvbnN0IGRpc2FibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoLi4uc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLm5hdmlnYXRpb25EaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgIGRlc3Ryb3koKTtcbiAgfTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIubmF2aWdhdGlvbiwge1xuICAgIGVuYWJsZSxcbiAgICBkaXNhYmxlLFxuICAgIHVwZGF0ZSxcbiAgICBpbml0LFxuICAgIGRlc3Ryb3lcbiAgfSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2xhc3Nlc1RvU2VsZWN0b3IoY2xhc3NlcyA9ICcnKSB7XG4gIHJldHVybiBgLiR7Y2xhc3Nlcy50cmltKCkucmVwbGFjZSgvKFtcXC46IVxcL10pL2csICdcXFxcJDEnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIC5yZXBsYWNlKC8gL2csICcuJyl9YDtcbn0iLCJpbXBvcnQgY2xhc3Nlc1RvU2VsZWN0b3IgZnJvbSAnLi4vLi4vc2hhcmVkL2NsYXNzZXMtdG8tc2VsZWN0b3IuanMnO1xuaW1wb3J0IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgZnJvbSAnLi4vLi4vc2hhcmVkL2NyZWF0ZS1lbGVtZW50LWlmLW5vdC1kZWZpbmVkLmpzJztcbmltcG9ydCB7IGVsZW1lbnRJbmRleCwgZWxlbWVudE91dGVyU2l6ZSwgZWxlbWVudFBhcmVudHMgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGFnaW5hdGlvbih7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvbixcbiAgZW1pdFxufSkge1xuICBjb25zdCBwZnggPSAnc3dpcGVyLXBhZ2luYXRpb24nO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIGVsOiBudWxsLFxuICAgICAgYnVsbGV0RWxlbWVudDogJ3NwYW4nLFxuICAgICAgY2xpY2thYmxlOiBmYWxzZSxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIHJlbmRlckJ1bGxldDogbnVsbCxcbiAgICAgIHJlbmRlclByb2dyZXNzYmFyOiBudWxsLFxuICAgICAgcmVuZGVyRnJhY3Rpb246IG51bGwsXG4gICAgICByZW5kZXJDdXN0b206IG51bGwsXG4gICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlOiBmYWxzZSxcbiAgICAgIHR5cGU6ICdidWxsZXRzJyxcbiAgICAgIC8vICdidWxsZXRzJyBvciAncHJvZ3Jlc3NiYXInIG9yICdmcmFjdGlvbicgb3IgJ2N1c3RvbSdcbiAgICAgIGR5bmFtaWNCdWxsZXRzOiBmYWxzZSxcbiAgICAgIGR5bmFtaWNNYWluQnVsbGV0czogMSxcbiAgICAgIGZvcm1hdEZyYWN0aW9uQ3VycmVudDogbnVtYmVyID0+IG51bWJlcixcbiAgICAgIGZvcm1hdEZyYWN0aW9uVG90YWw6IG51bWJlciA9PiBudW1iZXIsXG4gICAgICBidWxsZXRDbGFzczogYCR7cGZ4fS1idWxsZXRgLFxuICAgICAgYnVsbGV0QWN0aXZlQ2xhc3M6IGAke3BmeH0tYnVsbGV0LWFjdGl2ZWAsXG4gICAgICBtb2RpZmllckNsYXNzOiBgJHtwZnh9LWAsXG4gICAgICBjdXJyZW50Q2xhc3M6IGAke3BmeH0tY3VycmVudGAsXG4gICAgICB0b3RhbENsYXNzOiBgJHtwZnh9LXRvdGFsYCxcbiAgICAgIGhpZGRlbkNsYXNzOiBgJHtwZnh9LWhpZGRlbmAsXG4gICAgICBwcm9ncmVzc2JhckZpbGxDbGFzczogYCR7cGZ4fS1wcm9ncmVzc2Jhci1maWxsYCxcbiAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzczogYCR7cGZ4fS1wcm9ncmVzc2Jhci1vcHBvc2l0ZWAsXG4gICAgICBjbGlja2FibGVDbGFzczogYCR7cGZ4fS1jbGlja2FibGVgLFxuICAgICAgbG9ja0NsYXNzOiBgJHtwZnh9LWxvY2tgLFxuICAgICAgaG9yaXpvbnRhbENsYXNzOiBgJHtwZnh9LWhvcml6b250YWxgLFxuICAgICAgdmVydGljYWxDbGFzczogYCR7cGZ4fS12ZXJ0aWNhbGAsXG4gICAgICBwYWdpbmF0aW9uRGlzYWJsZWRDbGFzczogYCR7cGZ4fS1kaXNhYmxlZGBcbiAgICB9XG4gIH0pO1xuICBzd2lwZXIucGFnaW5hdGlvbiA9IHtcbiAgICBlbDogbnVsbCxcbiAgICBidWxsZXRzOiBbXVxuICB9O1xuICBsZXQgYnVsbGV0U2l6ZTtcbiAgbGV0IGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gIGNvbnN0IG1ha2VFbGVtZW50c0FycmF5ID0gZWwgPT4ge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShlbCkpIGVsID0gW2VsXS5maWx0ZXIoZSA9PiAhIWUpO1xuICAgIHJldHVybiBlbDtcbiAgfTtcbiAgZnVuY3Rpb24gaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSB7XG4gICAgcmV0dXJuICFzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLmVsIHx8IEFycmF5LmlzQXJyYXkoc3dpcGVyLnBhZ2luYXRpb24uZWwpICYmIHN3aXBlci5wYWdpbmF0aW9uLmVsLmxlbmd0aCA9PT0gMDtcbiAgfVxuICBmdW5jdGlvbiBzZXRTaWRlQnVsbGV0cyhidWxsZXRFbCwgcG9zaXRpb24pIHtcbiAgICBjb25zdCB7XG4gICAgICBidWxsZXRBY3RpdmVDbGFzc1xuICAgIH0gPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKCFidWxsZXRFbCkgcmV0dXJuO1xuICAgIGJ1bGxldEVsID0gYnVsbGV0RWxbYCR7cG9zaXRpb24gPT09ICdwcmV2JyA/ICdwcmV2aW91cycgOiAnbmV4dCd9RWxlbWVudFNpYmxpbmdgXTtcbiAgICBpZiAoYnVsbGV0RWwpIHtcbiAgICAgIGJ1bGxldEVsLmNsYXNzTGlzdC5hZGQoYCR7YnVsbGV0QWN0aXZlQ2xhc3N9LSR7cG9zaXRpb259YCk7XG4gICAgICBidWxsZXRFbCA9IGJ1bGxldEVsW2Ake3Bvc2l0aW9uID09PSAncHJldicgPyAncHJldmlvdXMnIDogJ25leHQnfUVsZW1lbnRTaWJsaW5nYF07XG4gICAgICBpZiAoYnVsbGV0RWwpIHtcbiAgICAgICAgYnVsbGV0RWwuY2xhc3NMaXN0LmFkZChgJHtidWxsZXRBY3RpdmVDbGFzc30tJHtwb3NpdGlvbn0tJHtwb3NpdGlvbn1gKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gb25CdWxsZXRDbGljayhlKSB7XG4gICAgY29uc3QgYnVsbGV0RWwgPSBlLnRhcmdldC5jbG9zZXN0KGNsYXNzZXNUb1NlbGVjdG9yKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpO1xuICAgIGlmICghYnVsbGV0RWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGNvbnN0IGluZGV4ID0gZWxlbWVudEluZGV4KGJ1bGxldEVsKSAqIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG9Mb29wKGluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgLy8gUmVuZGVyIHx8IFVwZGF0ZSBQYWdpbmF0aW9uIGJ1bGxldHMvaXRlbXNcbiAgICBjb25zdCBydGwgPSBzd2lwZXIucnRsO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIC8vIEN1cnJlbnQvVG90YWxcbiAgICBsZXQgY3VycmVudDtcbiAgICBjb25zdCBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICBjb25zdCB0b3RhbCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbChzbGlkZXNMZW5ndGggLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgY3VycmVudCA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxID8gTWF0aC5mbG9vcihzd2lwZXIucmVhbEluZGV4IC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIucmVhbEluZGV4O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjdXJyZW50ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudCA9IHN3aXBlci5hY3RpdmVJbmRleCB8fCAwO1xuICAgIH1cbiAgICAvLyBUeXBlc1xuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBidWxsZXRzID0gc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cztcbiAgICAgIGxldCBmaXJzdEluZGV4O1xuICAgICAgbGV0IGxhc3RJbmRleDtcbiAgICAgIGxldCBtaWRJbmRleDtcbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgYnVsbGV0U2l6ZSA9IGVsZW1lbnRPdXRlclNpemUoYnVsbGV0c1swXSwgc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnLCB0cnVlKTtcbiAgICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICAgICAgc3ViRWwuc3R5bGVbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA9IGAke2J1bGxldFNpemUgKiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpfXB4YDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID4gMSAmJiBzd2lwZXIucHJldmlvdXNJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ICs9IGN1cnJlbnQgLSAoc3dpcGVyLnByZXZpb3VzSW5kZXggfHwgMCk7XG4gICAgICAgICAgaWYgKGR5bmFtaWNCdWxsZXRJbmRleCA+IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxKSB7XG4gICAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggPSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGR5bmFtaWNCdWxsZXRJbmRleCA8IDApIHtcbiAgICAgICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZpcnN0SW5kZXggPSBNYXRoLm1heChjdXJyZW50IC0gZHluYW1pY0J1bGxldEluZGV4LCAwKTtcbiAgICAgICAgbGFzdEluZGV4ID0gZmlyc3RJbmRleCArIChNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cykgLSAxKTtcbiAgICAgICAgbWlkSW5kZXggPSAobGFzdEluZGV4ICsgZmlyc3RJbmRleCkgLyAyO1xuICAgICAgfVxuICAgICAgYnVsbGV0cy5mb3JFYWNoKGJ1bGxldEVsID0+IHtcbiAgICAgICAgYnVsbGV0RWwuY2xhc3NMaXN0LnJlbW92ZSguLi5bJycsICctbmV4dCcsICctbmV4dC1uZXh0JywgJy1wcmV2JywgJy1wcmV2LXByZXYnLCAnLW1haW4nXS5tYXAoc3VmZml4ID0+IGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30ke3N1ZmZpeH1gKSk7XG4gICAgICB9KTtcbiAgICAgIGlmIChlbC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGJ1bGxldHMuZm9yRWFjaChidWxsZXQgPT4ge1xuICAgICAgICAgIGNvbnN0IGJ1bGxldEluZGV4ID0gZWxlbWVudEluZGV4KGJ1bGxldCk7XG4gICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBjdXJyZW50KSB7XG4gICAgICAgICAgICBidWxsZXQuY2xhc3NMaXN0LmFkZChwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPj0gZmlyc3RJbmRleCAmJiBidWxsZXRJbmRleCA8PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1tYWluYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGZpcnN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoYnVsbGV0LCAncHJldicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoYnVsbGV0LCAnbmV4dCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBidWxsZXQgPSBidWxsZXRzW2N1cnJlbnRdO1xuICAgICAgICBpZiAoYnVsbGV0KSB7XG4gICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgY29uc3QgZmlyc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzW2ZpcnN0SW5kZXhdO1xuICAgICAgICAgIGNvbnN0IGxhc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzW2xhc3RJbmRleF07XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGZpcnN0SW5kZXg7IGkgPD0gbGFzdEluZGV4OyBpICs9IDEpIHtcbiAgICAgICAgICAgIGJ1bGxldHNbaV0uY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW1haW5gKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2V0U2lkZUJ1bGxldHMoZmlyc3REaXNwbGF5ZWRCdWxsZXQsICdwcmV2Jyk7XG4gICAgICAgICAgc2V0U2lkZUJ1bGxldHMobGFzdERpc3BsYXllZEJ1bGxldCwgJ25leHQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICBjb25zdCBkeW5hbWljQnVsbGV0c0xlbmd0aCA9IE1hdGgubWluKGJ1bGxldHMubGVuZ3RoLCBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzICsgNCk7XG4gICAgICAgIGNvbnN0IGJ1bGxldHNPZmZzZXQgPSAoYnVsbGV0U2l6ZSAqIGR5bmFtaWNCdWxsZXRzTGVuZ3RoIC0gYnVsbGV0U2l6ZSkgLyAyIC0gbWlkSW5kZXggKiBidWxsZXRTaXplO1xuICAgICAgICBjb25zdCBvZmZzZXRQcm9wID0gcnRsID8gJ3JpZ2h0JyA6ICdsZWZ0JztcbiAgICAgICAgYnVsbGV0cy5mb3JFYWNoKGJ1bGxldCA9PiB7XG4gICAgICAgICAgYnVsbGV0LnN0eWxlW3N3aXBlci5pc0hvcml6b250YWwoKSA/IG9mZnNldFByb3AgOiAndG9wJ10gPSBgJHtidWxsZXRzT2Zmc2V0fXB4YDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsLmZvckVhY2goKHN1YkVsLCBzdWJFbEluZGV4KSA9PiB7XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgICAgc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMuY3VycmVudENsYXNzKSkuZm9yRWFjaChmcmFjdGlvbkVsID0+IHtcbiAgICAgICAgICBmcmFjdGlvbkVsLnRleHRDb250ZW50ID0gcGFyYW1zLmZvcm1hdEZyYWN0aW9uQ3VycmVudChjdXJyZW50ICsgMSk7XG4gICAgICAgIH0pO1xuICAgICAgICBzdWJFbC5xdWVyeVNlbGVjdG9yQWxsKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy50b3RhbENsYXNzKSkuZm9yRWFjaCh0b3RhbEVsID0+IHtcbiAgICAgICAgICB0b3RhbEVsLnRleHRDb250ZW50ID0gcGFyYW1zLmZvcm1hdEZyYWN0aW9uVG90YWwodG90YWwpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJykge1xuICAgICAgICBsZXQgcHJvZ3Jlc3NiYXJEaXJlY3Rpb247XG4gICAgICAgIGlmIChwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgICAgIHByb2dyZXNzYmFyRGlyZWN0aW9uID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdob3Jpem9udGFsJyA6ICd2ZXJ0aWNhbCc7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2NhbGUgPSAoY3VycmVudCArIDEpIC8gdG90YWw7XG4gICAgICAgIGxldCBzY2FsZVggPSAxO1xuICAgICAgICBsZXQgc2NhbGVZID0gMTtcbiAgICAgICAgaWYgKHByb2dyZXNzYmFyRGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcpIHtcbiAgICAgICAgICBzY2FsZVggPSBzY2FsZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzY2FsZVkgPSBzY2FsZTtcbiAgICAgICAgfVxuICAgICAgICBzdWJFbC5xdWVyeVNlbGVjdG9yQWxsKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcykpLmZvckVhY2gocHJvZ3Jlc3NFbCA9PiB7XG4gICAgICAgICAgcHJvZ3Jlc3NFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlWCgke3NjYWxlWH0pIHNjYWxlWSgke3NjYWxlWX0pYDtcbiAgICAgICAgICBwcm9ncmVzc0VsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke3N3aXBlci5wYXJhbXMuc3BlZWR9bXNgO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2N1c3RvbScgJiYgcGFyYW1zLnJlbmRlckN1c3RvbSkge1xuICAgICAgICBzdWJFbC5pbm5lckhUTUwgPSBwYXJhbXMucmVuZGVyQ3VzdG9tKHN3aXBlciwgY3VycmVudCArIDEsIHRvdGFsKTtcbiAgICAgICAgaWYgKHN1YkVsSW5kZXggPT09IDApIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzdWJFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3ViRWxJbmRleCA9PT0gMCkgZW1pdCgncGFnaW5hdGlvblJlbmRlcicsIHN1YkVsKTtcbiAgICAgICAgZW1pdCgncGFnaW5hdGlvblVwZGF0ZScsIHN1YkVsKTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0W3N3aXBlci5pc0xvY2tlZCA/ICdhZGQnIDogJ3JlbW92ZSddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAvLyBSZW5kZXIgQ29udGFpbmVyXG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmIChpc1BhZ2luYXRpb25EaXNhYmxlZCgpKSByZXR1cm47XG4gICAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgbGV0IGVsID0gc3dpcGVyLnBhZ2luYXRpb24uZWw7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgbGV0IHBhZ2luYXRpb25IVE1MID0gJyc7XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycpIHtcbiAgICAgIGxldCBudW1iZXJPZkJ1bGxldHMgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBNYXRoLmNlaWwoc2xpZGVzTGVuZ3RoIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgc3dpcGVyLnBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmIG51bWJlck9mQnVsbGV0cyA+IHNsaWRlc0xlbmd0aCkge1xuICAgICAgICBudW1iZXJPZkJ1bGxldHMgPSBzbGlkZXNMZW5ndGg7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlck9mQnVsbGV0czsgaSArPSAxKSB7XG4gICAgICAgIGlmIChwYXJhbXMucmVuZGVyQnVsbGV0KSB7XG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gcGFyYW1zLnJlbmRlckJ1bGxldC5jYWxsKHN3aXBlciwgaSwgcGFyYW1zLmJ1bGxldENsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBgPCR7cGFyYW1zLmJ1bGxldEVsZW1lbnR9IGNsYXNzPVwiJHtwYXJhbXMuYnVsbGV0Q2xhc3N9XCI+PC8ke3BhcmFtcy5idWxsZXRFbGVtZW50fT5gO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykge1xuICAgICAgaWYgKHBhcmFtcy5yZW5kZXJGcmFjdGlvbikge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IHBhcmFtcy5yZW5kZXJGcmFjdGlvbi5jYWxsKHN3aXBlciwgcGFyYW1zLmN1cnJlbnRDbGFzcywgcGFyYW1zLnRvdGFsQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy5jdXJyZW50Q2xhc3N9XCI+PC9zcGFuPmAgKyAnIC8gJyArIGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLnRvdGFsQ2xhc3N9XCI+PC9zcGFuPmA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJykge1xuICAgICAgaWYgKHBhcmFtcy5yZW5kZXJQcm9ncmVzc2Jhcikge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IHBhcmFtcy5yZW5kZXJQcm9ncmVzc2Jhci5jYWxsKHN3aXBlciwgcGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gYDxzcGFuIGNsYXNzPVwiJHtwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3N9XCI+PC9zcGFuPmA7XG4gICAgICB9XG4gICAgfVxuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgaWYgKHBhcmFtcy50eXBlICE9PSAnY3VzdG9tJykge1xuICAgICAgICBzdWJFbC5pbm5lckhUTUwgPSBwYWdpbmF0aW9uSFRNTCB8fCAnJztcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgPSBbLi4uc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMuYnVsbGV0Q2xhc3MpKV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHBhcmFtcy50eXBlICE9PSAnY3VzdG9tJykge1xuICAgICAgZW1pdCgncGFnaW5hdGlvblJlbmRlcicsIGVsWzBdKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24gPSBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLnBhZ2luYXRpb24sIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbiwge1xuICAgICAgZWw6ICdzd2lwZXItcGFnaW5hdGlvbidcbiAgICB9KTtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKCFwYXJhbXMuZWwpIHJldHVybjtcbiAgICBsZXQgZWw7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmIHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIGVsID0gc3dpcGVyLmVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihwYXJhbXMuZWwpO1xuICAgIH1cbiAgICBpZiAoIWVsICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbCA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCldO1xuICAgIH1cbiAgICBpZiAoIWVsKSB7XG4gICAgICBlbCA9IHBhcmFtcy5lbDtcbiAgICB9XG4gICAgaWYgKCFlbCB8fCBlbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBBcnJheS5pc0FycmF5KGVsKSAmJiBlbC5sZW5ndGggPiAxKSB7XG4gICAgICBlbCA9IFsuLi5zd2lwZXIuZWwucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpXTtcbiAgICAgIC8vIGNoZWNrIGlmIGl0IGJlbG9uZ3MgdG8gYW5vdGhlciBuZXN0ZWQgU3dpcGVyXG4gICAgICBpZiAoZWwubGVuZ3RoID4gMSkge1xuICAgICAgICBlbCA9IGVsLmZpbHRlcihzdWJFbCA9PiB7XG4gICAgICAgICAgaWYgKGVsZW1lbnRQYXJlbnRzKHN1YkVsLCAnLnN3aXBlcicpWzBdICE9PSBzd2lwZXIuZWwpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSlbMF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGVsKSAmJiBlbC5sZW5ndGggPT09IDEpIGVsID0gZWxbMF07XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIucGFnaW5hdGlvbiwge1xuICAgICAgZWxcbiAgICB9KTtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMuY2xpY2thYmxlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5tb2RpZmllckNsYXNzfSR7cGFyYW1zLnR5cGV9LWR5bmFtaWNgKTtcbiAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPCAxKSB7XG4gICAgICAgICAgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJyAmJiBwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICAgc3ViRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkJ1bGxldENsaWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGlmIChlbCkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuaGlkZGVuQ2xhc3MpO1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAgICAgc3ViRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkJ1bGxldENsaWNrKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzKSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3MpKTtcbiAgfVxuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGRpc2FibGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdCgpO1xuICAgICAgcmVuZGVyKCk7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignYWN0aXZlSW5kZXhDaGFuZ2UnLCAoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3NuYXBJbmRleENoYW5nZScsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdzbmFwR3JpZExlbmd0aENoYW5nZScsICgpID0+IHtcbiAgICByZW5kZXIoKTtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRlc3Ryb3koKTtcbiAgfSk7XG4gIG9uKCdlbmFibGUgZGlzYWJsZScsICgpID0+IHtcbiAgICBsZXQge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0W3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZScgOiAnYWRkJ10oc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmxvY2tDbGFzcykpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdjbGljaycsIChfcywgZSkgPT4ge1xuICAgIGNvbnN0IHRhcmdldEVsID0gZS50YXJnZXQ7XG4gICAgbGV0IHtcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlci5wYWdpbmF0aW9uO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShlbCkpIGVsID0gW2VsXS5maWx0ZXIoZWxlbWVudCA9PiAhIWVsZW1lbnQpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uZWwgJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGVPbkNsaWNrICYmIGVsICYmIGVsLmxlbmd0aCA+IDAgJiYgIXRhcmdldEVsLmNsYXNzTGlzdC5jb250YWlucyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKSB7XG4gICAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgKHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCAmJiB0YXJnZXRFbCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsIHx8IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCAmJiB0YXJnZXRFbCA9PT0gc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKSkgcmV0dXJuO1xuICAgICAgY29uc3QgaXNIaWRkZW4gPSBlbFswXS5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgIGlmIChpc0hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICBlbWl0KCdwYWdpbmF0aW9uU2hvdycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW1pdCgncGFnaW5hdGlvbkhpZGUnKTtcbiAgICAgIH1cbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0LnRvZ2dsZShzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBlbmFibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKTtcbiAgICBsZXQge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpKTtcbiAgICB9XG4gICAgaW5pdCgpO1xuICAgIHJlbmRlcigpO1xuICAgIHVwZGF0ZSgpO1xuICB9O1xuICBjb25zdCBkaXNhYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcyk7XG4gICAgbGV0IHtcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlci5wYWdpbmF0aW9uO1xuICAgIGlmIChlbCkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHN1YkVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKSk7XG4gICAgfVxuICAgIGRlc3Ryb3koKTtcbiAgfTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIucGFnaW5hdGlvbiwge1xuICAgIGVuYWJsZSxcbiAgICBkaXNhYmxlLFxuICAgIHJlbmRlcixcbiAgICB1cGRhdGUsXG4gICAgaW5pdCxcbiAgICBkZXN0cm95XG4gIH0pO1xufSIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50LCBlbGVtZW50T2Zmc2V0LCBuZXh0VGljayB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5pbXBvcnQgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCBmcm9tICcuLi8uLi9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2Nyb2xsYmFyKHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uLFxuICBlbWl0XG59KSB7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgbGV0IGlzVG91Y2hlZCA9IGZhbHNlO1xuICBsZXQgdGltZW91dCA9IG51bGw7XG4gIGxldCBkcmFnVGltZW91dCA9IG51bGw7XG4gIGxldCBkcmFnU3RhcnRQb3M7XG4gIGxldCBkcmFnU2l6ZTtcbiAgbGV0IHRyYWNrU2l6ZTtcbiAgbGV0IGRpdmlkZXI7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgc2Nyb2xsYmFyOiB7XG4gICAgICBlbDogbnVsbCxcbiAgICAgIGRyYWdTaXplOiAnYXV0bycsXG4gICAgICBoaWRlOiBmYWxzZSxcbiAgICAgIGRyYWdnYWJsZTogZmFsc2UsXG4gICAgICBzbmFwT25SZWxlYXNlOiB0cnVlLFxuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLXNjcm9sbGJhci1sb2NrJyxcbiAgICAgIGRyYWdDbGFzczogJ3N3aXBlci1zY3JvbGxiYXItZHJhZycsXG4gICAgICBzY3JvbGxiYXJEaXNhYmxlZENsYXNzOiAnc3dpcGVyLXNjcm9sbGJhci1kaXNhYmxlZCcsXG4gICAgICBob3Jpem9udGFsQ2xhc3M6IGBzd2lwZXItc2Nyb2xsYmFyLWhvcml6b250YWxgLFxuICAgICAgdmVydGljYWxDbGFzczogYHN3aXBlci1zY3JvbGxiYXItdmVydGljYWxgXG4gICAgfVxuICB9KTtcbiAgc3dpcGVyLnNjcm9sbGJhciA9IHtcbiAgICBlbDogbnVsbCxcbiAgICBkcmFnRWw6IG51bGxcbiAgfTtcbiAgZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB7XG4gICAgICBzY3JvbGxiYXIsXG4gICAgICBydGxUcmFuc2xhdGU6IHJ0bFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3Qge1xuICAgICAgZHJhZ0VsLFxuICAgICAgZWxcbiAgICB9ID0gc2Nyb2xsYmFyO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIGNvbnN0IHByb2dyZXNzID0gc3dpcGVyLnBhcmFtcy5sb29wID8gc3dpcGVyLnByb2dyZXNzTG9vcCA6IHN3aXBlci5wcm9ncmVzcztcbiAgICBsZXQgbmV3U2l6ZSA9IGRyYWdTaXplO1xuICAgIGxldCBuZXdQb3MgPSAodHJhY2tTaXplIC0gZHJhZ1NpemUpICogcHJvZ3Jlc3M7XG4gICAgaWYgKHJ0bCkge1xuICAgICAgbmV3UG9zID0gLW5ld1BvcztcbiAgICAgIGlmIChuZXdQb3MgPiAwKSB7XG4gICAgICAgIG5ld1NpemUgPSBkcmFnU2l6ZSAtIG5ld1BvcztcbiAgICAgICAgbmV3UG9zID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoLW5ld1BvcyArIGRyYWdTaXplID4gdHJhY2tTaXplKSB7XG4gICAgICAgIG5ld1NpemUgPSB0cmFja1NpemUgKyBuZXdQb3M7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXdQb3MgPCAwKSB7XG4gICAgICBuZXdTaXplID0gZHJhZ1NpemUgKyBuZXdQb3M7XG4gICAgICBuZXdQb3MgPSAwO1xuICAgIH0gZWxzZSBpZiAobmV3UG9zICsgZHJhZ1NpemUgPiB0cmFja1NpemUpIHtcbiAgICAgIG5ld1NpemUgPSB0cmFja1NpemUgLSBuZXdQb3M7XG4gICAgfVxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIGRyYWdFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHtuZXdQb3N9cHgsIDAsIDApYDtcbiAgICAgIGRyYWdFbC5zdHlsZS53aWR0aCA9IGAke25ld1NpemV9cHhgO1xuICAgIH0gZWxzZSB7XG4gICAgICBkcmFnRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDBweCwgJHtuZXdQb3N9cHgsIDApYDtcbiAgICAgIGRyYWdFbC5zdHlsZS5oZWlnaHQgPSBgJHtuZXdTaXplfXB4YDtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMTtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICc0MDBtcyc7XG4gICAgICB9LCAxMDAwKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICBzd2lwZXIuc2Nyb2xsYmFyLmRyYWdFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCB7XG4gICAgICBkcmFnRWwsXG4gICAgICBlbFxuICAgIH0gPSBzY3JvbGxiYXI7XG4gICAgZHJhZ0VsLnN0eWxlLndpZHRoID0gJyc7XG4gICAgZHJhZ0VsLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgIHRyYWNrU2l6ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IGVsLm9mZnNldFdpZHRoIDogZWwub2Zmc2V0SGVpZ2h0O1xuICAgIGRpdmlkZXIgPSBzd2lwZXIuc2l6ZSAvIChzd2lwZXIudmlydHVhbFNpemUgKyBzd2lwZXIucGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZSAtIChzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzID8gc3dpcGVyLnNuYXBHcmlkWzBdIDogMCkpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnU2l6ZSA9PT0gJ2F1dG8nKSB7XG4gICAgICBkcmFnU2l6ZSA9IHRyYWNrU2l6ZSAqIGRpdmlkZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRyYWdTaXplID0gcGFyc2VJbnQoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ1NpemUsIDEwKTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgZHJhZ0VsLnN0eWxlLndpZHRoID0gYCR7ZHJhZ1NpemV9cHhgO1xuICAgIH0gZWxzZSB7XG4gICAgICBkcmFnRWwuc3R5bGUuaGVpZ2h0ID0gYCR7ZHJhZ1NpemV9cHhgO1xuICAgIH1cbiAgICBpZiAoZGl2aWRlciA+PSAxKSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5oaWRlKSB7XG4gICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgc2Nyb2xsYmFyLmVsLmNsYXNzTGlzdFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkJyA6ICdyZW1vdmUnXShzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5sb2NrQ2xhc3MpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZXRQb2ludGVyUG9zaXRpb24oZSkge1xuICAgIHJldHVybiBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBlLmNsaWVudFggOiBlLmNsaWVudFk7XG4gIH1cbiAgZnVuY3Rpb24gc2V0RHJhZ1Bvc2l0aW9uKGUpIHtcbiAgICBjb25zdCB7XG4gICAgICBzY3JvbGxiYXIsXG4gICAgICBydGxUcmFuc2xhdGU6IHJ0bFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3Qge1xuICAgICAgZWxcbiAgICB9ID0gc2Nyb2xsYmFyO1xuICAgIGxldCBwb3NpdGlvblJhdGlvO1xuICAgIHBvc2l0aW9uUmF0aW8gPSAoZ2V0UG9pbnRlclBvc2l0aW9uKGUpIC0gZWxlbWVudE9mZnNldChlbClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddIC0gKGRyYWdTdGFydFBvcyAhPT0gbnVsbCA/IGRyYWdTdGFydFBvcyA6IGRyYWdTaXplIC8gMikpIC8gKHRyYWNrU2l6ZSAtIGRyYWdTaXplKTtcbiAgICBwb3NpdGlvblJhdGlvID0gTWF0aC5tYXgoTWF0aC5taW4ocG9zaXRpb25SYXRpbywgMSksIDApO1xuICAgIGlmIChydGwpIHtcbiAgICAgIHBvc2l0aW9uUmF0aW8gPSAxIC0gcG9zaXRpb25SYXRpbztcbiAgICB9XG4gICAgY29uc3QgcG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCkgKyAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAqIHBvc2l0aW9uUmF0aW87XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHBvc2l0aW9uKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHBvc2l0aW9uKTtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9XG4gIGZ1bmN0aW9uIG9uRHJhZ1N0YXJ0KGUpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICBjb25zdCB7XG4gICAgICBzY3JvbGxiYXIsXG4gICAgICB3cmFwcGVyRWxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHtcbiAgICAgIGVsLFxuICAgICAgZHJhZ0VsXG4gICAgfSA9IHNjcm9sbGJhcjtcbiAgICBpc1RvdWNoZWQgPSB0cnVlO1xuICAgIGRyYWdTdGFydFBvcyA9IGUudGFyZ2V0ID09PSBkcmFnRWwgPyBnZXRQb2ludGVyUG9zaXRpb24oZSkgLSBlLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJ10gOiBudWxsO1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHdyYXBwZXJFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMTAwbXMnO1xuICAgIGRyYWdFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMTAwbXMnO1xuICAgIHNldERyYWdQb3NpdGlvbihlKTtcbiAgICBjbGVhclRpbWVvdXQoZHJhZ1RpbWVvdXQpO1xuICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwbXMnO1xuICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGVbJ3Njcm9sbC1zbmFwLXR5cGUnXSA9ICdub25lJztcbiAgICB9XG4gICAgZW1pdCgnc2Nyb2xsYmFyRHJhZ1N0YXJ0JywgZSk7XG4gIH1cbiAgZnVuY3Rpb24gb25EcmFnTW92ZShlKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyLFxuICAgICAgd3JhcHBlckVsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCB7XG4gICAgICBlbCxcbiAgICAgIGRyYWdFbFxuICAgIH0gPSBzY3JvbGxiYXI7XG4gICAgaWYgKCFpc1RvdWNoZWQpIHJldHVybjtcbiAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO2Vsc2UgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgIHNldERyYWdQb3NpdGlvbihlKTtcbiAgICB3cmFwcGVyRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBtcyc7XG4gICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBtcyc7XG4gICAgZHJhZ0VsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwbXMnO1xuICAgIGVtaXQoJ3Njcm9sbGJhckRyYWdNb3ZlJywgZSk7XG4gIH1cbiAgZnVuY3Rpb24gb25EcmFnRW5kKGUpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICBjb25zdCB7XG4gICAgICBzY3JvbGxiYXIsXG4gICAgICB3cmFwcGVyRWxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHtcbiAgICAgIGVsXG4gICAgfSA9IHNjcm9sbGJhcjtcbiAgICBpZiAoIWlzVG91Y2hlZCkgcmV0dXJuO1xuICAgIGlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGVbJ3Njcm9sbC1zbmFwLXR5cGUnXSA9ICcnO1xuICAgICAgd3JhcHBlckVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcnO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgIGNsZWFyVGltZW91dChkcmFnVGltZW91dCk7XG4gICAgICBkcmFnVGltZW91dCA9IG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICc0MDBtcyc7XG4gICAgICB9LCAxMDAwKTtcbiAgICB9XG4gICAgZW1pdCgnc2Nyb2xsYmFyRHJhZ0VuZCcsIGUpO1xuICAgIGlmIChwYXJhbXMuc25hcE9uUmVsZWFzZSkge1xuICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGV2ZW50cyhtZXRob2QpIHtcbiAgICBjb25zdCB7XG4gICAgICBzY3JvbGxiYXIsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IGVsID0gc2Nyb2xsYmFyLmVsO1xuICAgIGlmICghZWwpIHJldHVybjtcbiAgICBjb25zdCB0YXJnZXQgPSBlbDtcbiAgICBjb25zdCBhY3RpdmVMaXN0ZW5lciA9IHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0gOiBmYWxzZTtcbiAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPSBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgIHBhc3NpdmU6IHRydWUsXG4gICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0gOiBmYWxzZTtcbiAgICBpZiAoIXRhcmdldCkgcmV0dXJuO1xuICAgIGNvbnN0IGV2ZW50TWV0aG9kID0gbWV0aG9kID09PSAnb24nID8gJ2FkZEV2ZW50TGlzdGVuZXInIDogJ3JlbW92ZUV2ZW50TGlzdGVuZXInO1xuICAgIHRhcmdldFtldmVudE1ldGhvZF0oJ3BvaW50ZXJkb3duJywgb25EcmFnU3RhcnQsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICBkb2N1bWVudFtldmVudE1ldGhvZF0oJ3BvaW50ZXJtb3ZlJywgb25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgIGRvY3VtZW50W2V2ZW50TWV0aG9kXSgncG9pbnRlcnVwJywgb25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICB9XG4gIGZ1bmN0aW9uIGVuYWJsZURyYWdnYWJsZSgpIHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgZXZlbnRzKCdvbicpO1xuICB9XG4gIGZ1bmN0aW9uIGRpc2FibGVEcmFnZ2FibGUoKSB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIGV2ZW50cygnb2ZmJyk7XG4gIH1cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBjb25zdCB7XG4gICAgICBzY3JvbGxiYXIsXG4gICAgICBlbDogc3dpcGVyRWxcbiAgICB9ID0gc3dpcGVyO1xuICAgIHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5zY3JvbGxiYXIsIHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLCB7XG4gICAgICBlbDogJ3N3aXBlci1zY3JvbGxiYXInXG4gICAgfSk7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgaWYgKCFwYXJhbXMuZWwpIHJldHVybjtcbiAgICBsZXQgZWw7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmIHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIGVsID0gc3dpcGVyLmVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihwYXJhbXMuZWwpO1xuICAgIH1cbiAgICBpZiAoIWVsICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKTtcbiAgICB9IGVsc2UgaWYgKCFlbCkge1xuICAgICAgZWwgPSBwYXJhbXMuZWw7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmIGVsLmxlbmd0aCA+IDEgJiYgc3dpcGVyRWwucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpLmxlbmd0aCA9PT0gMSkge1xuICAgICAgZWwgPSBzd2lwZXJFbC5xdWVyeVNlbGVjdG9yKHBhcmFtcy5lbCk7XG4gICAgfVxuICAgIGlmIChlbC5sZW5ndGggPiAwKSBlbCA9IGVsWzBdO1xuICAgIGVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICBsZXQgZHJhZ0VsO1xuICAgIGlmIChlbCkge1xuICAgICAgZHJhZ0VsID0gZWwucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzfWApO1xuICAgICAgaWYgKCFkcmFnRWwpIHtcbiAgICAgICAgZHJhZ0VsID0gY3JlYXRlRWxlbWVudCgnZGl2Jywgc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzKTtcbiAgICAgICAgZWwuYXBwZW5kKGRyYWdFbCk7XG4gICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24oc2Nyb2xsYmFyLCB7XG4gICAgICBlbCxcbiAgICAgIGRyYWdFbFxuICAgIH0pO1xuICAgIGlmIChwYXJhbXMuZHJhZ2dhYmxlKSB7XG4gICAgICBlbmFibGVEcmFnZ2FibGUoKTtcbiAgICB9XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbC5jbGFzc0xpc3Rbc3dpcGVyLmVuYWJsZWQgPyAncmVtb3ZlJyA6ICdhZGQnXShzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5sb2NrQ2xhc3MpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIGNvbnN0IGVsID0gc3dpcGVyLnNjcm9sbGJhci5lbDtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICB9XG4gICAgZGlzYWJsZURyYWdnYWJsZSgpO1xuICB9XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBkaXNhYmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluaXQoKTtcbiAgICAgIHVwZGF0ZVNpemUoKTtcbiAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCd1cGRhdGUgcmVzaXplIG9ic2VydmVyVXBkYXRlIGxvY2sgdW5sb2NrJywgKCkgPT4ge1xuICAgIHVwZGF0ZVNpemUoKTtcbiAgfSk7XG4gIG9uKCdzZXRUcmFuc2xhdGUnLCAoKSA9PiB7XG4gICAgc2V0VHJhbnNsYXRlKCk7XG4gIH0pO1xuICBvbignc2V0VHJhbnNpdGlvbicsIChfcywgZHVyYXRpb24pID0+IHtcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfSk7XG4gIG9uKCdlbmFibGUgZGlzYWJsZScsICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBlbFxuICAgIH0gPSBzd2lwZXIuc2Nyb2xsYmFyO1xuICAgIGlmIChlbCkge1xuICAgICAgZWwuY2xhc3NMaXN0W3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZScgOiAnYWRkJ10oc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKTtcbiAgICB9XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBkZXN0cm95KCk7XG4gIH0pO1xuICBjb25zdCBlbmFibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuc2Nyb2xsYmFyRGlzYWJsZWRDbGFzcyk7XG4gICAgaWYgKHN3aXBlci5zY3JvbGxiYXIuZWwpIHtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuZWwuY2xhc3NMaXN0LnJlbW92ZShzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5zY3JvbGxiYXJEaXNhYmxlZENsYXNzKTtcbiAgICB9XG4gICAgaW5pdCgpO1xuICAgIHVwZGF0ZVNpemUoKTtcbiAgICBzZXRUcmFuc2xhdGUoKTtcbiAgfTtcbiAgY29uc3QgZGlzYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5zY3JvbGxiYXJEaXNhYmxlZENsYXNzKTtcbiAgICBpZiAoc3dpcGVyLnNjcm9sbGJhci5lbCkge1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5lbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLnNjcm9sbGJhckRpc2FibGVkQ2xhc3MpO1xuICAgIH1cbiAgICBkZXN0cm95KCk7XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLnNjcm9sbGJhciwge1xuICAgIGVuYWJsZSxcbiAgICBkaXNhYmxlLFxuICAgIHVwZGF0ZVNpemUsXG4gICAgc2V0VHJhbnNsYXRlLFxuICAgIGluaXQsXG4gICAgZGVzdHJveVxuICB9KTtcbn0iLCJpbXBvcnQgeyBlbGVtZW50Q2hpbGRyZW4gfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gUGFyYWxsYXgoe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtcyxcbiAgb25cbn0pIHtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBwYXJhbGxheDoge1xuICAgICAgZW5hYmxlZDogZmFsc2VcbiAgICB9XG4gIH0pO1xuICBjb25zdCBzZXRUcmFuc2Zvcm0gPSAoZWwsIHByb2dyZXNzKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgcnRsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBydGxGYWN0b3IgPSBydGwgPyAtMSA6IDE7XG4gICAgY29uc3QgcCA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItcGFyYWxsYXgnKSB8fCAnMCc7XG4gICAgbGV0IHggPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXgnKTtcbiAgICBsZXQgeSA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItcGFyYWxsYXgteScpO1xuICAgIGNvbnN0IHNjYWxlID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZScpO1xuICAgIGNvbnN0IG9wYWNpdHkgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHknKTtcbiAgICBjb25zdCByb3RhdGUgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXJvdGF0ZScpO1xuICAgIGlmICh4IHx8IHkpIHtcbiAgICAgIHggPSB4IHx8ICcwJztcbiAgICAgIHkgPSB5IHx8ICcwJztcbiAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgeCA9IHA7XG4gICAgICB5ID0gJzAnO1xuICAgIH0gZWxzZSB7XG4gICAgICB5ID0gcDtcbiAgICAgIHggPSAnMCc7XG4gICAgfVxuICAgIGlmICh4LmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgICB4ID0gYCR7cGFyc2VJbnQoeCwgMTApICogcHJvZ3Jlc3MgKiBydGxGYWN0b3J9JWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSBgJHt4ICogcHJvZ3Jlc3MgKiBydGxGYWN0b3J9cHhgO1xuICAgIH1cbiAgICBpZiAoeS5pbmRleE9mKCclJykgPj0gMCkge1xuICAgICAgeSA9IGAke3BhcnNlSW50KHksIDEwKSAqIHByb2dyZXNzfSVgO1xuICAgIH0gZWxzZSB7XG4gICAgICB5ID0gYCR7eSAqIHByb2dyZXNzfXB4YDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcGFjaXR5ICE9PSAndW5kZWZpbmVkJyAmJiBvcGFjaXR5ICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBjdXJyZW50T3BhY2l0eSA9IG9wYWNpdHkgLSAob3BhY2l0eSAtIDEpICogKDEgLSBNYXRoLmFicyhwcm9ncmVzcykpO1xuICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IGN1cnJlbnRPcGFjaXR5O1xuICAgIH1cbiAgICBsZXQgdHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7eH0sICR7eX0sIDBweClgO1xuICAgIGlmICh0eXBlb2Ygc2NhbGUgIT09ICd1bmRlZmluZWQnICYmIHNjYWxlICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBjdXJyZW50U2NhbGUgPSBzY2FsZSAtIChzY2FsZSAtIDEpICogKDEgLSBNYXRoLmFicyhwcm9ncmVzcykpO1xuICAgICAgdHJhbnNmb3JtICs9IGAgc2NhbGUoJHtjdXJyZW50U2NhbGV9KWA7XG4gICAgfVxuICAgIGlmIChyb3RhdGUgJiYgdHlwZW9mIHJvdGF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgcm90YXRlICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBjdXJyZW50Um90YXRlID0gcm90YXRlICogcHJvZ3Jlc3MgKiAtMTtcbiAgICAgIHRyYW5zZm9ybSArPSBgIHJvdGF0ZSgke2N1cnJlbnRSb3RhdGV9ZGVnKWA7XG4gICAgfVxuICAgIGVsLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgfTtcbiAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGVsLFxuICAgICAgc2xpZGVzLFxuICAgICAgcHJvZ3Jlc3MsXG4gICAgICBzbmFwR3JpZFxuICAgIH0gPSBzd2lwZXI7XG4gICAgZWxlbWVudENoaWxkcmVuKGVsLCAnW2RhdGEtc3dpcGVyLXBhcmFsbGF4XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXNjYWxlXScpLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc2V0VHJhbnNmb3JtKHN1YkVsLCBwcm9ncmVzcyk7XG4gICAgfSk7XG4gICAgc2xpZGVzLmZvckVhY2goKHNsaWRlRWwsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgIGxldCBzbGlkZVByb2dyZXNzID0gc2xpZGVFbC5wcm9ncmVzcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSAmJiBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJykge1xuICAgICAgICBzbGlkZVByb2dyZXNzICs9IE1hdGguY2VpbChzbGlkZUluZGV4IC8gMikgLSBwcm9ncmVzcyAqIChzbmFwR3JpZC5sZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHNsaWRlUHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChzbGlkZVByb2dyZXNzLCAtMSksIDEpO1xuICAgICAgc2xpZGVFbC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtcm90YXRlXScpLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgICBzZXRUcmFuc2Zvcm0oc3ViRWwsIHNsaWRlUHJvZ3Jlc3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IHNldFRyYW5zaXRpb24gPSAoZHVyYXRpb24gPSBzd2lwZXIucGFyYW1zLnNwZWVkKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZV0nKS5mb3JFYWNoKHBhcmFsbGF4RWwgPT4ge1xuICAgICAgbGV0IHBhcmFsbGF4RHVyYXRpb24gPSBwYXJzZUludChwYXJhbGxheEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItcGFyYWxsYXgtZHVyYXRpb24nKSwgMTApIHx8IGR1cmF0aW9uO1xuICAgICAgaWYgKGR1cmF0aW9uID09PSAwKSBwYXJhbGxheER1cmF0aW9uID0gMDtcbiAgICAgIHBhcmFsbGF4RWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7cGFyYWxsYXhEdXJhdGlvbn1tc2A7XG4gICAgfSk7XG4gIH07XG4gIG9uKCdiZWZvcmVJbml0JywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYXJhbGxheC5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gIH0pO1xuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgIHNldFRyYW5zbGF0ZSgpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zbGF0ZScsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgIHNldFRyYW5zbGF0ZSgpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zaXRpb24nLCAoX3N3aXBlciwgZHVyYXRpb24pID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICB9KTtcbn0iLCJpbXBvcnQgeyBnZXRXaW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcbmltcG9ydCB7IGVsZW1lbnRDaGlsZHJlbiwgZWxlbWVudE9mZnNldCwgZWxlbWVudFBhcmVudHMsIGdldFRyYW5zbGF0ZSB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBab29tKHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uLFxuICBlbWl0XG59KSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIHpvb206IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgbWF4UmF0aW86IDMsXG4gICAgICBtaW5SYXRpbzogMSxcbiAgICAgIHRvZ2dsZTogdHJ1ZSxcbiAgICAgIGNvbnRhaW5lckNsYXNzOiAnc3dpcGVyLXpvb20tY29udGFpbmVyJyxcbiAgICAgIHpvb21lZFNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUtem9vbWVkJ1xuICAgIH1cbiAgfSk7XG4gIHN3aXBlci56b29tID0ge1xuICAgIGVuYWJsZWQ6IGZhbHNlXG4gIH07XG4gIGxldCBjdXJyZW50U2NhbGUgPSAxO1xuICBsZXQgaXNTY2FsaW5nID0gZmFsc2U7XG4gIGxldCBmYWtlR2VzdHVyZVRvdWNoZWQ7XG4gIGxldCBmYWtlR2VzdHVyZU1vdmVkO1xuICBjb25zdCBldkNhY2hlID0gW107XG4gIGNvbnN0IGdlc3R1cmUgPSB7XG4gICAgc2xpZGVFbDogdW5kZWZpbmVkLFxuICAgIHNsaWRlV2lkdGg6IHVuZGVmaW5lZCxcbiAgICBzbGlkZUhlaWdodDogdW5kZWZpbmVkLFxuICAgIGltYWdlRWw6IHVuZGVmaW5lZCxcbiAgICBpbWFnZVdyYXBFbDogdW5kZWZpbmVkLFxuICAgIG1heFJhdGlvOiAzXG4gIH07XG4gIGNvbnN0IGltYWdlID0ge1xuICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgIGlzTW92ZWQ6IHVuZGVmaW5lZCxcbiAgICBjdXJyZW50WDogdW5kZWZpbmVkLFxuICAgIGN1cnJlbnRZOiB1bmRlZmluZWQsXG4gICAgbWluWDogdW5kZWZpbmVkLFxuICAgIG1pblk6IHVuZGVmaW5lZCxcbiAgICBtYXhYOiB1bmRlZmluZWQsXG4gICAgbWF4WTogdW5kZWZpbmVkLFxuICAgIHdpZHRoOiB1bmRlZmluZWQsXG4gICAgaGVpZ2h0OiB1bmRlZmluZWQsXG4gICAgc3RhcnRYOiB1bmRlZmluZWQsXG4gICAgc3RhcnRZOiB1bmRlZmluZWQsXG4gICAgdG91Y2hlc1N0YXJ0OiB7fSxcbiAgICB0b3VjaGVzQ3VycmVudDoge31cbiAgfTtcbiAgY29uc3QgdmVsb2NpdHkgPSB7XG4gICAgeDogdW5kZWZpbmVkLFxuICAgIHk6IHVuZGVmaW5lZCxcbiAgICBwcmV2UG9zaXRpb25YOiB1bmRlZmluZWQsXG4gICAgcHJldlBvc2l0aW9uWTogdW5kZWZpbmVkLFxuICAgIHByZXZUaW1lOiB1bmRlZmluZWRcbiAgfTtcbiAgbGV0IHNjYWxlID0gMTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN3aXBlci56b29tLCAnc2NhbGUnLCB7XG4gICAgZ2V0KCkge1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH0sXG4gICAgc2V0KHZhbHVlKSB7XG4gICAgICBpZiAoc2NhbGUgIT09IHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGltYWdlRWwgPSBnZXN0dXJlLmltYWdlRWw7XG4gICAgICAgIGNvbnN0IHNsaWRlRWwgPSBnZXN0dXJlLnNsaWRlRWw7XG4gICAgICAgIGVtaXQoJ3pvb21DaGFuZ2UnLCB2YWx1ZSwgaW1hZ2VFbCwgc2xpZGVFbCk7XG4gICAgICB9XG4gICAgICBzY2FsZSA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIGdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoKSB7XG4gICAgaWYgKGV2Q2FjaGUubGVuZ3RoIDwgMikgcmV0dXJuIDE7XG4gICAgY29uc3QgeDEgPSBldkNhY2hlWzBdLnBhZ2VYO1xuICAgIGNvbnN0IHkxID0gZXZDYWNoZVswXS5wYWdlWTtcbiAgICBjb25zdCB4MiA9IGV2Q2FjaGVbMV0ucGFnZVg7XG4gICAgY29uc3QgeTIgPSBldkNhY2hlWzFdLnBhZ2VZO1xuICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KCh4MiAtIHgxKSAqKiAyICsgKHkyIC0geTEpICoqIDIpO1xuICAgIHJldHVybiBkaXN0YW5jZTtcbiAgfVxuICBmdW5jdGlvbiBnZXRTY2FsZU9yaWdpbigpIHtcbiAgICBpZiAoZXZDYWNoZS5sZW5ndGggPCAyKSByZXR1cm4ge1xuICAgICAgeDogbnVsbCxcbiAgICAgIHk6IG51bGxcbiAgICB9O1xuICAgIGNvbnN0IGJveCA9IGdlc3R1cmUuaW1hZ2VFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4gWyhldkNhY2hlWzBdLnBhZ2VYICsgKGV2Q2FjaGVbMV0ucGFnZVggLSBldkNhY2hlWzBdLnBhZ2VYKSAvIDIgLSBib3gueCkgLyBjdXJyZW50U2NhbGUsIChldkNhY2hlWzBdLnBhZ2VZICsgKGV2Q2FjaGVbMV0ucGFnZVkgLSBldkNhY2hlWzBdLnBhZ2VZKSAvIDIgLSBib3gueSkgLyBjdXJyZW50U2NhbGVdO1xuICB9XG4gIGZ1bmN0aW9uIGdldFNsaWRlU2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuIHN3aXBlci5pc0VsZW1lbnQgPyBgc3dpcGVyLXNsaWRlYCA6IGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YDtcbiAgfVxuICBmdW5jdGlvbiBldmVudFdpdGhpblNsaWRlKGUpIHtcbiAgICBjb25zdCBzbGlkZVNlbGVjdG9yID0gZ2V0U2xpZGVTZWxlY3RvcigpO1xuICAgIGlmIChlLnRhcmdldC5tYXRjaGVzKHNsaWRlU2VsZWN0b3IpKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoc3dpcGVyLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbnRhaW5zKGUudGFyZ2V0KSkubGVuZ3RoID4gMCkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZ1bmN0aW9uIGV2ZW50V2l0aGluWm9vbUNvbnRhaW5lcihlKSB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBgLiR7c3dpcGVyLnBhcmFtcy56b29tLmNvbnRhaW5lckNsYXNzfWA7XG4gICAgaWYgKGUudGFyZ2V0Lm1hdGNoZXMoc2VsZWN0b3IpKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKV0uZmlsdGVyKGNvbnRhaW5lckVsID0+IGNvbnRhaW5lckVsLmNvbnRhaW5zKGUudGFyZ2V0KSkubGVuZ3RoID4gMCkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLy8gRXZlbnRzXG4gIGZ1bmN0aW9uIG9uR2VzdHVyZVN0YXJ0KGUpIHtcbiAgICBpZiAoIWV2ZW50V2l0aGluU2xpZGUoZSkpIHJldHVybjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgZmFrZUdlc3R1cmVUb3VjaGVkID0gZmFsc2U7XG4gICAgZmFrZUdlc3R1cmVNb3ZlZCA9IGZhbHNlO1xuICAgIGV2Q2FjaGUucHVzaChlKTtcbiAgICBpZiAoZXZDYWNoZS5sZW5ndGggPCAyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZha2VHZXN0dXJlVG91Y2hlZCA9IHRydWU7XG4gICAgZ2VzdHVyZS5zY2FsZVN0YXJ0ID0gZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcygpO1xuICAgIGlmICghZ2VzdHVyZS5zbGlkZUVsKSB7XG4gICAgICBnZXN0dXJlLnNsaWRlRWwgPSBlLnRhcmdldC5jbG9zZXN0KGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgICAgIGlmICghZ2VzdHVyZS5zbGlkZUVsKSBnZXN0dXJlLnNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzW3N3aXBlci5hY3RpdmVJbmRleF07XG4gICAgICBsZXQgaW1hZ2VFbCA9IGdlc3R1cmUuc2xpZGVFbC5xdWVyeVNlbGVjdG9yKGAuJHtwYXJhbXMuY29udGFpbmVyQ2xhc3N9YCk7XG4gICAgICBpZiAoaW1hZ2VFbCkge1xuICAgICAgICBpbWFnZUVsID0gaW1hZ2VFbC5xdWVyeVNlbGVjdG9yQWxsKCdwaWN0dXJlLCBpbWcsIHN2ZywgY2FudmFzLCAuc3dpcGVyLXpvb20tdGFyZ2V0JylbMF07XG4gICAgICB9XG4gICAgICBnZXN0dXJlLmltYWdlRWwgPSBpbWFnZUVsO1xuICAgICAgaWYgKGltYWdlRWwpIHtcbiAgICAgICAgZ2VzdHVyZS5pbWFnZVdyYXBFbCA9IGVsZW1lbnRQYXJlbnRzKGdlc3R1cmUuaW1hZ2VFbCwgYC4ke3BhcmFtcy5jb250YWluZXJDbGFzc31gKVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoIWdlc3R1cmUuaW1hZ2VXcmFwRWwpIHtcbiAgICAgICAgZ2VzdHVyZS5pbWFnZUVsID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBnZXN0dXJlLm1heFJhdGlvID0gZ2VzdHVyZS5pbWFnZVdyYXBFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXpvb20nKSB8fCBwYXJhbXMubWF4UmF0aW87XG4gICAgfVxuICAgIGlmIChnZXN0dXJlLmltYWdlRWwpIHtcbiAgICAgIGNvbnN0IFtvcmlnaW5YLCBvcmlnaW5ZXSA9IGdldFNjYWxlT3JpZ2luKCk7XG4gICAgICBnZXN0dXJlLmltYWdlRWwuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gYCR7b3JpZ2luWH1weCAke29yaWdpbll9cHhgO1xuICAgICAgZ2VzdHVyZS5pbWFnZUVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwbXMnO1xuICAgIH1cbiAgICBpc1NjYWxpbmcgPSB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIG9uR2VzdHVyZUNoYW5nZShlKSB7XG4gICAgaWYgKCFldmVudFdpdGhpblNsaWRlKGUpKSByZXR1cm47XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCBwb2ludGVySW5kZXggPSBldkNhY2hlLmZpbmRJbmRleChjYWNoZWRFdiA9PiBjYWNoZWRFdi5wb2ludGVySWQgPT09IGUucG9pbnRlcklkKTtcbiAgICBpZiAocG9pbnRlckluZGV4ID49IDApIGV2Q2FjaGVbcG9pbnRlckluZGV4XSA9IGU7XG4gICAgaWYgKGV2Q2FjaGUubGVuZ3RoIDwgMikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmYWtlR2VzdHVyZU1vdmVkID0gdHJ1ZTtcbiAgICBnZXN0dXJlLnNjYWxlTW92ZSA9IGdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoKTtcbiAgICBpZiAoIWdlc3R1cmUuaW1hZ2VFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB6b29tLnNjYWxlID0gZ2VzdHVyZS5zY2FsZU1vdmUgLyBnZXN0dXJlLnNjYWxlU3RhcnQgKiBjdXJyZW50U2NhbGU7XG4gICAgaWYgKHpvb20uc2NhbGUgPiBnZXN0dXJlLm1heFJhdGlvKSB7XG4gICAgICB6b29tLnNjYWxlID0gZ2VzdHVyZS5tYXhSYXRpbyAtIDEgKyAoem9vbS5zY2FsZSAtIGdlc3R1cmUubWF4UmF0aW8gKyAxKSAqKiAwLjU7XG4gICAgfVxuICAgIGlmICh6b29tLnNjYWxlIDwgcGFyYW1zLm1pblJhdGlvKSB7XG4gICAgICB6b29tLnNjYWxlID0gcGFyYW1zLm1pblJhdGlvICsgMSAtIChwYXJhbXMubWluUmF0aW8gLSB6b29tLnNjYWxlICsgMSkgKiogMC41O1xuICAgIH1cbiAgICBnZXN0dXJlLmltYWdlRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgke3pvb20uc2NhbGV9KWA7XG4gIH1cbiAgZnVuY3Rpb24gb25HZXN0dXJlRW5kKGUpIHtcbiAgICBpZiAoIWV2ZW50V2l0aGluU2xpZGUoZSkpIHJldHVybjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHBvaW50ZXJJbmRleCA9IGV2Q2FjaGUuZmluZEluZGV4KGNhY2hlZEV2ID0+IGNhY2hlZEV2LnBvaW50ZXJJZCA9PT0gZS5wb2ludGVySWQpO1xuICAgIGlmIChwb2ludGVySW5kZXggPj0gMCkgZXZDYWNoZS5zcGxpY2UocG9pbnRlckluZGV4LCAxKTtcbiAgICBpZiAoIWZha2VHZXN0dXJlVG91Y2hlZCB8fCAhZmFrZUdlc3R1cmVNb3ZlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmYWtlR2VzdHVyZVRvdWNoZWQgPSBmYWxzZTtcbiAgICBmYWtlR2VzdHVyZU1vdmVkID0gZmFsc2U7XG4gICAgaWYgKCFnZXN0dXJlLmltYWdlRWwpIHJldHVybjtcbiAgICB6b29tLnNjYWxlID0gTWF0aC5tYXgoTWF0aC5taW4oem9vbS5zY2FsZSwgZ2VzdHVyZS5tYXhSYXRpbyksIHBhcmFtcy5taW5SYXRpbyk7XG4gICAgZ2VzdHVyZS5pbWFnZUVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke3N3aXBlci5wYXJhbXMuc3BlZWR9bXNgO1xuICAgIGdlc3R1cmUuaW1hZ2VFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKCR7em9vbS5zY2FsZX0pYDtcbiAgICBjdXJyZW50U2NhbGUgPSB6b29tLnNjYWxlO1xuICAgIGlzU2NhbGluZyA9IGZhbHNlO1xuICAgIGlmICh6b29tLnNjYWxlID09PSAxKSBnZXN0dXJlLnNsaWRlRWwgPSB1bmRlZmluZWQ7XG4gIH1cbiAgZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KGUpIHtcbiAgICBjb25zdCBkZXZpY2UgPSBzd2lwZXIuZGV2aWNlO1xuICAgIGlmICghZ2VzdHVyZS5pbWFnZUVsKSByZXR1cm47XG4gICAgaWYgKGltYWdlLmlzVG91Y2hlZCkgcmV0dXJuO1xuICAgIGlmIChkZXZpY2UuYW5kcm9pZCAmJiBlLmNhbmNlbGFibGUpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpbWFnZS5pc1RvdWNoZWQgPSB0cnVlO1xuICAgIGltYWdlLnRvdWNoZXNTdGFydC54ID0gZS5wYWdlWDtcbiAgICBpbWFnZS50b3VjaGVzU3RhcnQueSA9IGUucGFnZVk7XG4gIH1cbiAgZnVuY3Rpb24gb25Ub3VjaE1vdmUoZSkge1xuICAgIGlmICghZXZlbnRXaXRoaW5TbGlkZShlKSB8fCAhZXZlbnRXaXRoaW5ab29tQ29udGFpbmVyKGUpKSByZXR1cm47XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGlmICghZ2VzdHVyZS5pbWFnZUVsKSByZXR1cm47XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICBpZiAoIWltYWdlLmlzVG91Y2hlZCB8fCAhZ2VzdHVyZS5zbGlkZUVsKSByZXR1cm47XG4gICAgaWYgKCFpbWFnZS5pc01vdmVkKSB7XG4gICAgICBpbWFnZS53aWR0aCA9IGdlc3R1cmUuaW1hZ2VFbC5vZmZzZXRXaWR0aDtcbiAgICAgIGltYWdlLmhlaWdodCA9IGdlc3R1cmUuaW1hZ2VFbC5vZmZzZXRIZWlnaHQ7XG4gICAgICBpbWFnZS5zdGFydFggPSBnZXRUcmFuc2xhdGUoZ2VzdHVyZS5pbWFnZVdyYXBFbCwgJ3gnKSB8fCAwO1xuICAgICAgaW1hZ2Uuc3RhcnRZID0gZ2V0VHJhbnNsYXRlKGdlc3R1cmUuaW1hZ2VXcmFwRWwsICd5JykgfHwgMDtcbiAgICAgIGdlc3R1cmUuc2xpZGVXaWR0aCA9IGdlc3R1cmUuc2xpZGVFbC5vZmZzZXRXaWR0aDtcbiAgICAgIGdlc3R1cmUuc2xpZGVIZWlnaHQgPSBnZXN0dXJlLnNsaWRlRWwub2Zmc2V0SGVpZ2h0O1xuICAgICAgZ2VzdHVyZS5pbWFnZVdyYXBFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMG1zJztcbiAgICB9XG4gICAgLy8gRGVmaW5lIGlmIHdlIG5lZWQgaW1hZ2UgZHJhZ1xuICAgIGNvbnN0IHNjYWxlZFdpZHRoID0gaW1hZ2Uud2lkdGggKiB6b29tLnNjYWxlO1xuICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IGltYWdlLmhlaWdodCAqIHpvb20uc2NhbGU7XG4gICAgaWYgKHNjYWxlZFdpZHRoIDwgZ2VzdHVyZS5zbGlkZVdpZHRoICYmIHNjYWxlZEhlaWdodCA8IGdlc3R1cmUuc2xpZGVIZWlnaHQpIHJldHVybjtcbiAgICBpbWFnZS5taW5YID0gTWF0aC5taW4oZ2VzdHVyZS5zbGlkZVdpZHRoIC8gMiAtIHNjYWxlZFdpZHRoIC8gMiwgMCk7XG4gICAgaW1hZ2UubWF4WCA9IC1pbWFnZS5taW5YO1xuICAgIGltYWdlLm1pblkgPSBNYXRoLm1pbihnZXN0dXJlLnNsaWRlSGVpZ2h0IC8gMiAtIHNjYWxlZEhlaWdodCAvIDIsIDApO1xuICAgIGltYWdlLm1heFkgPSAtaW1hZ2UubWluWTtcbiAgICBpbWFnZS50b3VjaGVzQ3VycmVudC54ID0gZXZDYWNoZS5sZW5ndGggPiAwID8gZXZDYWNoZVswXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA9IGV2Q2FjaGUubGVuZ3RoID4gMCA/IGV2Q2FjaGVbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICAgIGlmICghaW1hZ2UuaXNNb3ZlZCAmJiAhaXNTY2FsaW5nKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIChNYXRoLmZsb29yKGltYWdlLm1pblgpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WCkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueCA8IGltYWdlLnRvdWNoZXNTdGFydC54IHx8IE1hdGguZmxvb3IoaW1hZ2UubWF4WCkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRYKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC54ID4gaW1hZ2UudG91Y2hlc1N0YXJ0LngpKSB7XG4gICAgICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSAmJiAoTWF0aC5mbG9vcihpbWFnZS5taW5ZKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFkpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPCBpbWFnZS50b3VjaGVzU3RhcnQueSB8fCBNYXRoLmZsb29yKGltYWdlLm1heFkpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WSkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA+IGltYWdlLnRvdWNoZXNTdGFydC55KSkge1xuICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZS5jYW5jZWxhYmxlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaW1hZ2UuaXNNb3ZlZCA9IHRydWU7XG4gICAgaW1hZ2UuY3VycmVudFggPSBpbWFnZS50b3VjaGVzQ3VycmVudC54IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LnggKyBpbWFnZS5zdGFydFg7XG4gICAgaW1hZ2UuY3VycmVudFkgPSBpbWFnZS50b3VjaGVzQ3VycmVudC55IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LnkgKyBpbWFnZS5zdGFydFk7XG4gICAgaWYgKGltYWdlLmN1cnJlbnRYIDwgaW1hZ2UubWluWCkge1xuICAgICAgaW1hZ2UuY3VycmVudFggPSBpbWFnZS5taW5YICsgMSAtIChpbWFnZS5taW5YIC0gaW1hZ2UuY3VycmVudFggKyAxKSAqKiAwLjg7XG4gICAgfVxuICAgIGlmIChpbWFnZS5jdXJyZW50WCA+IGltYWdlLm1heFgpIHtcbiAgICAgIGltYWdlLmN1cnJlbnRYID0gaW1hZ2UubWF4WCAtIDEgKyAoaW1hZ2UuY3VycmVudFggLSBpbWFnZS5tYXhYICsgMSkgKiogMC44O1xuICAgIH1cbiAgICBpZiAoaW1hZ2UuY3VycmVudFkgPCBpbWFnZS5taW5ZKSB7XG4gICAgICBpbWFnZS5jdXJyZW50WSA9IGltYWdlLm1pblkgKyAxIC0gKGltYWdlLm1pblkgLSBpbWFnZS5jdXJyZW50WSArIDEpICoqIDAuODtcbiAgICB9XG4gICAgaWYgKGltYWdlLmN1cnJlbnRZID4gaW1hZ2UubWF4WSkge1xuICAgICAgaW1hZ2UuY3VycmVudFkgPSBpbWFnZS5tYXhZIC0gMSArIChpbWFnZS5jdXJyZW50WSAtIGltYWdlLm1heFkgKyAxKSAqKiAwLjg7XG4gICAgfVxuXG4gICAgLy8gVmVsb2NpdHlcbiAgICBpZiAoIXZlbG9jaXR5LnByZXZQb3NpdGlvblgpIHZlbG9jaXR5LnByZXZQb3NpdGlvblggPSBpbWFnZS50b3VjaGVzQ3VycmVudC54O1xuICAgIGlmICghdmVsb2NpdHkucHJldlBvc2l0aW9uWSkgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7XG4gICAgaWYgKCF2ZWxvY2l0eS5wcmV2VGltZSkgdmVsb2NpdHkucHJldlRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHZlbG9jaXR5LnggPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblgpIC8gKERhdGUubm93KCkgLSB2ZWxvY2l0eS5wcmV2VGltZSkgLyAyO1xuICAgIHZlbG9jaXR5LnkgPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblkpIC8gKERhdGUubm93KCkgLSB2ZWxvY2l0eS5wcmV2VGltZSkgLyAyO1xuICAgIGlmIChNYXRoLmFicyhpbWFnZS50b3VjaGVzQ3VycmVudC54IC0gdmVsb2NpdHkucHJldlBvc2l0aW9uWCkgPCAyKSB2ZWxvY2l0eS54ID0gMDtcbiAgICBpZiAoTWF0aC5hYnMoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblkpIDwgMikgdmVsb2NpdHkueSA9IDA7XG4gICAgdmVsb2NpdHkucHJldlBvc2l0aW9uWCA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lng7XG4gICAgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7XG4gICAgdmVsb2NpdHkucHJldlRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7aW1hZ2UuY3VycmVudFh9cHgsICR7aW1hZ2UuY3VycmVudFl9cHgsMClgO1xuICB9XG4gIGZ1bmN0aW9uIG9uVG91Y2hFbmQoKSB7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGlmICghZ2VzdHVyZS5pbWFnZUVsKSByZXR1cm47XG4gICAgaWYgKCFpbWFnZS5pc1RvdWNoZWQgfHwgIWltYWdlLmlzTW92ZWQpIHtcbiAgICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgaW1hZ2UuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBpbWFnZS5pc01vdmVkID0gZmFsc2U7XG4gICAgbGV0IG1vbWVudHVtRHVyYXRpb25YID0gMzAwO1xuICAgIGxldCBtb21lbnR1bUR1cmF0aW9uWSA9IDMwMDtcbiAgICBjb25zdCBtb21lbnR1bURpc3RhbmNlWCA9IHZlbG9jaXR5LnggKiBtb21lbnR1bUR1cmF0aW9uWDtcbiAgICBjb25zdCBuZXdQb3NpdGlvblggPSBpbWFnZS5jdXJyZW50WCArIG1vbWVudHVtRGlzdGFuY2VYO1xuICAgIGNvbnN0IG1vbWVudHVtRGlzdGFuY2VZID0gdmVsb2NpdHkueSAqIG1vbWVudHVtRHVyYXRpb25ZO1xuICAgIGNvbnN0IG5ld1Bvc2l0aW9uWSA9IGltYWdlLmN1cnJlbnRZICsgbW9tZW50dW1EaXN0YW5jZVk7XG5cbiAgICAvLyBGaXggZHVyYXRpb25cbiAgICBpZiAodmVsb2NpdHkueCAhPT0gMCkgbW9tZW50dW1EdXJhdGlvblggPSBNYXRoLmFicygobmV3UG9zaXRpb25YIC0gaW1hZ2UuY3VycmVudFgpIC8gdmVsb2NpdHkueCk7XG4gICAgaWYgKHZlbG9jaXR5LnkgIT09IDApIG1vbWVudHVtRHVyYXRpb25ZID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uWSAtIGltYWdlLmN1cnJlbnRZKSAvIHZlbG9jaXR5LnkpO1xuICAgIGNvbnN0IG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLm1heChtb21lbnR1bUR1cmF0aW9uWCwgbW9tZW50dW1EdXJhdGlvblkpO1xuICAgIGltYWdlLmN1cnJlbnRYID0gbmV3UG9zaXRpb25YO1xuICAgIGltYWdlLmN1cnJlbnRZID0gbmV3UG9zaXRpb25ZO1xuXG4gICAgLy8gRGVmaW5lIGlmIHdlIG5lZWQgaW1hZ2UgZHJhZ1xuICAgIGNvbnN0IHNjYWxlZFdpZHRoID0gaW1hZ2Uud2lkdGggKiB6b29tLnNjYWxlO1xuICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IGltYWdlLmhlaWdodCAqIHpvb20uc2NhbGU7XG4gICAgaW1hZ2UubWluWCA9IE1hdGgubWluKGdlc3R1cmUuc2xpZGVXaWR0aCAvIDIgLSBzY2FsZWRXaWR0aCAvIDIsIDApO1xuICAgIGltYWdlLm1heFggPSAtaW1hZ2UubWluWDtcbiAgICBpbWFnZS5taW5ZID0gTWF0aC5taW4oZ2VzdHVyZS5zbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyLCAwKTtcbiAgICBpbWFnZS5tYXhZID0gLWltYWdlLm1pblk7XG4gICAgaW1hZ2UuY3VycmVudFggPSBNYXRoLm1heChNYXRoLm1pbihpbWFnZS5jdXJyZW50WCwgaW1hZ2UubWF4WCksIGltYWdlLm1pblgpO1xuICAgIGltYWdlLmN1cnJlbnRZID0gTWF0aC5tYXgoTWF0aC5taW4oaW1hZ2UuY3VycmVudFksIGltYWdlLm1heFkpLCBpbWFnZS5taW5ZKTtcbiAgICBnZXN0dXJlLmltYWdlV3JhcEVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke21vbWVudHVtRHVyYXRpb259bXNgO1xuICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7aW1hZ2UuY3VycmVudFh9cHgsICR7aW1hZ2UuY3VycmVudFl9cHgsMClgO1xuICB9XG4gIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHtcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgaWYgKGdlc3R1cmUuc2xpZGVFbCAmJiBzd2lwZXIucHJldmlvdXNJbmRleCAhPT0gc3dpcGVyLmFjdGl2ZUluZGV4KSB7XG4gICAgICBpZiAoZ2VzdHVyZS5pbWFnZUVsKSB7XG4gICAgICAgIGdlc3R1cmUuaW1hZ2VFbC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKDEpJztcbiAgICAgIH1cbiAgICAgIGlmIChnZXN0dXJlLmltYWdlV3JhcEVsKSB7XG4gICAgICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZTNkKDAsMCwwKSc7XG4gICAgICB9XG4gICAgICB6b29tLnNjYWxlID0gMTtcbiAgICAgIGN1cnJlbnRTY2FsZSA9IDE7XG4gICAgICBnZXN0dXJlLnNsaWRlRWwgPSB1bmRlZmluZWQ7XG4gICAgICBnZXN0dXJlLmltYWdlRWwgPSB1bmRlZmluZWQ7XG4gICAgICBnZXN0dXJlLmltYWdlV3JhcEVsID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB6b29tSW4oZSkge1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgaWYgKCFnZXN0dXJlLnNsaWRlRWwpIHtcbiAgICAgIGlmIChlICYmIGUudGFyZ2V0KSB7XG4gICAgICAgIGdlc3R1cmUuc2xpZGVFbCA9IGUudGFyZ2V0LmNsb3Nlc3QoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICAgICAgfVxuICAgICAgaWYgKCFnZXN0dXJlLnNsaWRlRWwpIHtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCkge1xuICAgICAgICAgIGdlc3R1cmUuc2xpZGVFbCA9IGVsZW1lbnRDaGlsZHJlbihzd2lwZXIuc2xpZGVzRWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3N9YClbMF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2VzdHVyZS5zbGlkZUVsID0gc3dpcGVyLnNsaWRlc1tzd2lwZXIuYWN0aXZlSW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgaW1hZ2VFbCA9IGdlc3R1cmUuc2xpZGVFbC5xdWVyeVNlbGVjdG9yKGAuJHtwYXJhbXMuY29udGFpbmVyQ2xhc3N9YCk7XG4gICAgICBpZiAoaW1hZ2VFbCkge1xuICAgICAgICBpbWFnZUVsID0gaW1hZ2VFbC5xdWVyeVNlbGVjdG9yQWxsKCdwaWN0dXJlLCBpbWcsIHN2ZywgY2FudmFzLCAuc3dpcGVyLXpvb20tdGFyZ2V0JylbMF07XG4gICAgICB9XG4gICAgICBnZXN0dXJlLmltYWdlRWwgPSBpbWFnZUVsO1xuICAgICAgaWYgKGltYWdlRWwpIHtcbiAgICAgICAgZ2VzdHVyZS5pbWFnZVdyYXBFbCA9IGVsZW1lbnRQYXJlbnRzKGdlc3R1cmUuaW1hZ2VFbCwgYC4ke3BhcmFtcy5jb250YWluZXJDbGFzc31gKVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghZ2VzdHVyZS5pbWFnZUVsIHx8ICFnZXN0dXJlLmltYWdlV3JhcEVsKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS50b3VjaEFjdGlvbiA9ICdub25lJztcbiAgICB9XG4gICAgZ2VzdHVyZS5zbGlkZUVsLmNsYXNzTGlzdC5hZGQoYCR7cGFyYW1zLnpvb21lZFNsaWRlQ2xhc3N9YCk7XG4gICAgbGV0IHRvdWNoWDtcbiAgICBsZXQgdG91Y2hZO1xuICAgIGxldCBvZmZzZXRYO1xuICAgIGxldCBvZmZzZXRZO1xuICAgIGxldCBkaWZmWDtcbiAgICBsZXQgZGlmZlk7XG4gICAgbGV0IHRyYW5zbGF0ZVg7XG4gICAgbGV0IHRyYW5zbGF0ZVk7XG4gICAgbGV0IGltYWdlV2lkdGg7XG4gICAgbGV0IGltYWdlSGVpZ2h0O1xuICAgIGxldCBzY2FsZWRXaWR0aDtcbiAgICBsZXQgc2NhbGVkSGVpZ2h0O1xuICAgIGxldCB0cmFuc2xhdGVNaW5YO1xuICAgIGxldCB0cmFuc2xhdGVNaW5ZO1xuICAgIGxldCB0cmFuc2xhdGVNYXhYO1xuICAgIGxldCB0cmFuc2xhdGVNYXhZO1xuICAgIGxldCBzbGlkZVdpZHRoO1xuICAgIGxldCBzbGlkZUhlaWdodDtcbiAgICBpZiAodHlwZW9mIGltYWdlLnRvdWNoZXNTdGFydC54ID09PSAndW5kZWZpbmVkJyAmJiBlKSB7XG4gICAgICB0b3VjaFggPSBlLnBhZ2VYO1xuICAgICAgdG91Y2hZID0gZS5wYWdlWTtcbiAgICB9IGVsc2Uge1xuICAgICAgdG91Y2hYID0gaW1hZ2UudG91Y2hlc1N0YXJ0Lng7XG4gICAgICB0b3VjaFkgPSBpbWFnZS50b3VjaGVzU3RhcnQueTtcbiAgICB9XG4gICAgY29uc3QgZm9yY2Vab29tUmF0aW8gPSB0eXBlb2YgZSA9PT0gJ251bWJlcicgPyBlIDogbnVsbDtcbiAgICBpZiAoY3VycmVudFNjYWxlID09PSAxICYmIGZvcmNlWm9vbVJhdGlvKSB7XG4gICAgICB0b3VjaFggPSB1bmRlZmluZWQ7XG4gICAgICB0b3VjaFkgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHpvb20uc2NhbGUgPSBmb3JjZVpvb21SYXRpbyB8fCBnZXN0dXJlLmltYWdlV3JhcEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcbiAgICBjdXJyZW50U2NhbGUgPSBmb3JjZVpvb21SYXRpbyB8fCBnZXN0dXJlLmltYWdlV3JhcEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcbiAgICBpZiAoZSAmJiAhKGN1cnJlbnRTY2FsZSA9PT0gMSAmJiBmb3JjZVpvb21SYXRpbykpIHtcbiAgICAgIHNsaWRlV2lkdGggPSBnZXN0dXJlLnNsaWRlRWwub2Zmc2V0V2lkdGg7XG4gICAgICBzbGlkZUhlaWdodCA9IGdlc3R1cmUuc2xpZGVFbC5vZmZzZXRIZWlnaHQ7XG4gICAgICBvZmZzZXRYID0gZWxlbWVudE9mZnNldChnZXN0dXJlLnNsaWRlRWwpLmxlZnQgKyB3aW5kb3cuc2Nyb2xsWDtcbiAgICAgIG9mZnNldFkgPSBlbGVtZW50T2Zmc2V0KGdlc3R1cmUuc2xpZGVFbCkudG9wICsgd2luZG93LnNjcm9sbFk7XG4gICAgICBkaWZmWCA9IG9mZnNldFggKyBzbGlkZVdpZHRoIC8gMiAtIHRvdWNoWDtcbiAgICAgIGRpZmZZID0gb2Zmc2V0WSArIHNsaWRlSGVpZ2h0IC8gMiAtIHRvdWNoWTtcbiAgICAgIGltYWdlV2lkdGggPSBnZXN0dXJlLmltYWdlRWwub2Zmc2V0V2lkdGg7XG4gICAgICBpbWFnZUhlaWdodCA9IGdlc3R1cmUuaW1hZ2VFbC5vZmZzZXRIZWlnaHQ7XG4gICAgICBzY2FsZWRXaWR0aCA9IGltYWdlV2lkdGggKiB6b29tLnNjYWxlO1xuICAgICAgc2NhbGVkSGVpZ2h0ID0gaW1hZ2VIZWlnaHQgKiB6b29tLnNjYWxlO1xuICAgICAgdHJhbnNsYXRlTWluWCA9IE1hdGgubWluKHNsaWRlV2lkdGggLyAyIC0gc2NhbGVkV2lkdGggLyAyLCAwKTtcbiAgICAgIHRyYW5zbGF0ZU1pblkgPSBNYXRoLm1pbihzbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyLCAwKTtcbiAgICAgIHRyYW5zbGF0ZU1heFggPSAtdHJhbnNsYXRlTWluWDtcbiAgICAgIHRyYW5zbGF0ZU1heFkgPSAtdHJhbnNsYXRlTWluWTtcbiAgICAgIHRyYW5zbGF0ZVggPSBkaWZmWCAqIHpvb20uc2NhbGU7XG4gICAgICB0cmFuc2xhdGVZID0gZGlmZlkgKiB6b29tLnNjYWxlO1xuICAgICAgaWYgKHRyYW5zbGF0ZVggPCB0cmFuc2xhdGVNaW5YKSB7XG4gICAgICAgIHRyYW5zbGF0ZVggPSB0cmFuc2xhdGVNaW5YO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zbGF0ZVggPiB0cmFuc2xhdGVNYXhYKSB7XG4gICAgICAgIHRyYW5zbGF0ZVggPSB0cmFuc2xhdGVNYXhYO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zbGF0ZVkgPCB0cmFuc2xhdGVNaW5ZKSB7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVNaW5ZO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zbGF0ZVkgPiB0cmFuc2xhdGVNYXhZKSB7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVNYXhZO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2xhdGVYID0gMDtcbiAgICAgIHRyYW5zbGF0ZVkgPSAwO1xuICAgIH1cbiAgICBnZXN0dXJlLmltYWdlV3JhcEVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICczMDBtcyc7XG4gICAgZ2VzdHVyZS5pbWFnZVdyYXBFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVYfXB4LCAke3RyYW5zbGF0ZVl9cHgsMClgO1xuICAgIGdlc3R1cmUuaW1hZ2VFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMzAwbXMnO1xuICAgIGdlc3R1cmUuaW1hZ2VFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKCR7em9vbS5zY2FsZX0pYDtcbiAgfVxuICBmdW5jdGlvbiB6b29tT3V0KCkge1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgaWYgKCFnZXN0dXJlLnNsaWRlRWwpIHtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgJiYgc3dpcGVyLnZpcnR1YWwpIHtcbiAgICAgICAgZ2VzdHVyZS5zbGlkZUVsID0gZWxlbWVudENoaWxkcmVuKHN3aXBlci5zbGlkZXNFbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzc31gKVswXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdlc3R1cmUuc2xpZGVFbCA9IHN3aXBlci5zbGlkZXNbc3dpcGVyLmFjdGl2ZUluZGV4XTtcbiAgICAgIH1cbiAgICAgIGxldCBpbWFnZUVsID0gZ2VzdHVyZS5zbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoYC4ke3BhcmFtcy5jb250YWluZXJDbGFzc31gKTtcbiAgICAgIGlmIChpbWFnZUVsKSB7XG4gICAgICAgIGltYWdlRWwgPSBpbWFnZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ3BpY3R1cmUsIGltZywgc3ZnLCBjYW52YXMsIC5zd2lwZXItem9vbS10YXJnZXQnKVswXTtcbiAgICAgIH1cbiAgICAgIGdlc3R1cmUuaW1hZ2VFbCA9IGltYWdlRWw7XG4gICAgICBpZiAoaW1hZ2VFbCkge1xuICAgICAgICBnZXN0dXJlLmltYWdlV3JhcEVsID0gZWxlbWVudFBhcmVudHMoZ2VzdHVyZS5pbWFnZUVsLCBgLiR7cGFyYW1zLmNvbnRhaW5lckNsYXNzfWApWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2VzdHVyZS5pbWFnZVdyYXBFbCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFnZXN0dXJlLmltYWdlRWwgfHwgIWdlc3R1cmUuaW1hZ2VXcmFwRWwpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLm92ZXJmbG93ID0gJyc7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnRvdWNoQWN0aW9uID0gJyc7XG4gICAgfVxuICAgIHpvb20uc2NhbGUgPSAxO1xuICAgIGN1cnJlbnRTY2FsZSA9IDE7XG4gICAgZ2VzdHVyZS5pbWFnZVdyYXBFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMzAwbXMnO1xuICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZTNkKDAsMCwwKSc7XG4gICAgZ2VzdHVyZS5pbWFnZUVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICczMDBtcyc7XG4gICAgZ2VzdHVyZS5pbWFnZUVsLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSknO1xuICAgIGdlc3R1cmUuc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKGAke3BhcmFtcy56b29tZWRTbGlkZUNsYXNzfWApO1xuICAgIGdlc3R1cmUuc2xpZGVFbCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIFRvZ2dsZSBab29tXG4gIGZ1bmN0aW9uIHpvb21Ub2dnbGUoZSkge1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBpZiAoem9vbS5zY2FsZSAmJiB6b29tLnNjYWxlICE9PSAxKSB7XG4gICAgICAvLyBab29tIE91dFxuICAgICAgem9vbU91dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBab29tIEluXG4gICAgICB6b29tSW4oZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdldExpc3RlbmVycygpIHtcbiAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPSBzd2lwZXIucGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9IDogZmFsc2U7XG4gICAgY29uc3QgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSA9IHN3aXBlci5wYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH0gOiB0cnVlO1xuICAgIHJldHVybiB7XG4gICAgICBwYXNzaXZlTGlzdGVuZXIsXG4gICAgICBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlXG4gICAgfTtcbiAgfVxuXG4gIC8vIEF0dGFjaC9EZXRhY2ggRXZlbnRzXG4gIGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgaWYgKHpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgIHpvb20uZW5hYmxlZCA9IHRydWU7XG4gICAgY29uc3Qge1xuICAgICAgcGFzc2l2ZUxpc3RlbmVyLFxuICAgICAgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZVxuICAgIH0gPSBnZXRMaXN0ZW5lcnMoKTtcblxuICAgIC8vIFNjYWxlIGltYWdlXG5cbiAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgb25HZXN0dXJlU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIG9uR2VzdHVyZUNoYW5nZSwgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSk7XG4gICAgWydwb2ludGVydXAnLCAncG9pbnRlcmNhbmNlbCddLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9KTtcblxuICAgIC8vIE1vdmUgaW1hZ2VcbiAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgb25Ub3VjaE1vdmUsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpO1xuICB9XG4gIGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGlmICghem9vbS5lbmFibGVkKSByZXR1cm47XG4gICAgem9vbS5lbmFibGVkID0gZmFsc2U7XG4gICAgY29uc3Qge1xuICAgICAgcGFzc2l2ZUxpc3RlbmVyLFxuICAgICAgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZVxuICAgIH0gPSBnZXRMaXN0ZW5lcnMoKTtcblxuICAgIC8vIFNjYWxlIGltYWdlXG4gICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvbkdlc3R1cmVDaGFuZ2UsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpO1xuICAgIFsncG9pbnRlcnVwJywgJ3BvaW50ZXJjYW5jZWwnXS5mb3JFYWNoKGV2ZW50TmFtZSA9PiB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBvbkdlc3R1cmVFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgfSk7XG5cbiAgICAvLyBNb3ZlIGltYWdlXG4gICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybW92ZScsIG9uVG91Y2hNb3ZlLCBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlKTtcbiAgfVxuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQpIHtcbiAgICAgIGVuYWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRpc2FibGUoKTtcbiAgfSk7XG4gIG9uKCd0b3VjaFN0YXJ0JywgKF9zLCBlKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIuem9vbS5lbmFibGVkKSByZXR1cm47XG4gICAgb25Ub3VjaFN0YXJ0KGUpO1xuICB9KTtcbiAgb24oJ3RvdWNoRW5kJywgKF9zLCBlKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIuem9vbS5lbmFibGVkKSByZXR1cm47XG4gICAgb25Ub3VjaEVuZChlKTtcbiAgfSk7XG4gIG9uKCdkb3VibGVUYXAnLCAoX3MsIGUpID0+IHtcbiAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcgJiYgc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnpvb20udG9nZ2xlKSB7XG4gICAgICB6b29tVG9nZ2xlKGUpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCd0cmFuc2l0aW9uRW5kJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkKSB7XG4gICAgICBvblRyYW5zaXRpb25FbmQoKTtcbiAgICB9XG4gIH0pO1xuICBvbignc2xpZGVDaGFuZ2UnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBvblRyYW5zaXRpb25FbmQoKTtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuYXNzaWduKHN3aXBlci56b29tLCB7XG4gICAgZW5hYmxlLFxuICAgIGRpc2FibGUsXG4gICAgaW46IHpvb21JbixcbiAgICBvdXQ6IHpvb21PdXQsXG4gICAgdG9nZ2xlOiB6b29tVG9nZ2xlXG4gIH0pO1xufSIsIi8qIGVzbGludCBuby1iaXR3aXNlOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiPj5cIl0gfV0gKi9cbmltcG9ydCB7IGVsZW1lbnRUcmFuc2l0aW9uRW5kLCBuZXh0VGljayB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBDb250cm9sbGVyKHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uXG59KSB7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgY29udHJvbGxlcjoge1xuICAgICAgY29udHJvbDogdW5kZWZpbmVkLFxuICAgICAgaW52ZXJzZTogZmFsc2UsXG4gICAgICBieTogJ3NsaWRlJyAvLyBvciAnY29udGFpbmVyJ1xuICAgIH1cbiAgfSk7XG5cbiAgc3dpcGVyLmNvbnRyb2xsZXIgPSB7XG4gICAgY29udHJvbDogdW5kZWZpbmVkXG4gIH07XG4gIGZ1bmN0aW9uIExpbmVhclNwbGluZSh4LCB5KSB7XG4gICAgY29uc3QgYmluYXJ5U2VhcmNoID0gZnVuY3Rpb24gc2VhcmNoKCkge1xuICAgICAgbGV0IG1heEluZGV4O1xuICAgICAgbGV0IG1pbkluZGV4O1xuICAgICAgbGV0IGd1ZXNzO1xuICAgICAgcmV0dXJuIChhcnJheSwgdmFsKSA9PiB7XG4gICAgICAgIG1pbkluZGV4ID0gLTE7XG4gICAgICAgIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoO1xuICAgICAgICB3aGlsZSAobWF4SW5kZXggLSBtaW5JbmRleCA+IDEpIHtcbiAgICAgICAgICBndWVzcyA9IG1heEluZGV4ICsgbWluSW5kZXggPj4gMTtcbiAgICAgICAgICBpZiAoYXJyYXlbZ3Vlc3NdIDw9IHZhbCkge1xuICAgICAgICAgICAgbWluSW5kZXggPSBndWVzcztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF4SW5kZXggPSBndWVzcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heEluZGV4O1xuICAgICAgfTtcbiAgICB9KCk7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMubGFzdEluZGV4ID0geC5sZW5ndGggLSAxO1xuICAgIC8vIEdpdmVuIGFuIHggdmFsdWUgKHgyKSwgcmV0dXJuIHRoZSBleHBlY3RlZCB5MiB2YWx1ZTpcbiAgICAvLyAoeDEseTEpIGlzIHRoZSBrbm93biBwb2ludCBiZWZvcmUgZ2l2ZW4gdmFsdWUsXG4gICAgLy8gKHgzLHkzKSBpcyB0aGUga25vd24gcG9pbnQgYWZ0ZXIgZ2l2ZW4gdmFsdWUuXG4gICAgbGV0IGkxO1xuICAgIGxldCBpMztcbiAgICB0aGlzLmludGVycG9sYXRlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUoeDIpIHtcbiAgICAgIGlmICgheDIpIHJldHVybiAwO1xuXG4gICAgICAvLyBHZXQgdGhlIGluZGV4ZXMgb2YgeDEgYW5kIHgzICh0aGUgYXJyYXkgaW5kZXhlcyBiZWZvcmUgYW5kIGFmdGVyIGdpdmVuIHgyKTpcbiAgICAgIGkzID0gYmluYXJ5U2VhcmNoKHRoaXMueCwgeDIpO1xuICAgICAgaTEgPSBpMyAtIDE7XG5cbiAgICAgIC8vIFdlIGhhdmUgb3VyIGluZGV4ZXMgaTEgJiBpMywgc28gd2UgY2FuIGNhbGN1bGF0ZSBhbHJlYWR5OlxuICAgICAgLy8geTIgOj0gKCh4MuKIkngxKSDDlyAoeTPiiJJ5MSkpIMO3ICh4M+KIkngxKSArIHkxXG4gICAgICByZXR1cm4gKHgyIC0gdGhpcy54W2kxXSkgKiAodGhpcy55W2kzXSAtIHRoaXMueVtpMV0pIC8gKHRoaXMueFtpM10gLSB0aGlzLnhbaTFdKSArIHRoaXMueVtpMV07XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvLyB4eHg6IGZvciBub3cgaSB3aWxsIGp1c3Qgc2F2ZSBvbmUgc3BsaW5lIGZ1bmN0aW9uIHRvIHRvXG4gIGZ1bmN0aW9uIGdldEludGVycG9sYXRlRnVuY3Rpb24oYykge1xuICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBuZXcgTGluZWFyU3BsaW5lKHN3aXBlci5zbGlkZXNHcmlkLCBjLnNsaWRlc0dyaWQpIDogbmV3IExpbmVhclNwbGluZShzd2lwZXIuc25hcEdyaWQsIGMuc25hcEdyaWQpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoX3QsIGJ5Q29udHJvbGxlcikge1xuICAgIGNvbnN0IGNvbnRyb2xsZWQgPSBzd2lwZXIuY29udHJvbGxlci5jb250cm9sO1xuICAgIGxldCBtdWx0aXBsaWVyO1xuICAgIGxldCBjb250cm9sbGVkVHJhbnNsYXRlO1xuICAgIGNvbnN0IFN3aXBlciA9IHN3aXBlci5jb25zdHJ1Y3RvcjtcbiAgICBmdW5jdGlvbiBzZXRDb250cm9sbGVkVHJhbnNsYXRlKGMpIHtcbiAgICAgIC8vIHRoaXMgd2lsbCBjcmVhdGUgYW4gSW50ZXJwb2xhdGUgZnVuY3Rpb24gYmFzZWQgb24gdGhlIHNuYXBHcmlkc1xuICAgICAgLy8geCBpcyB0aGUgR3JpZCBvZiB0aGUgc2Nyb2xsZWQgc2Nyb2xsZXIgYW5kIHkgd2lsbCBiZSB0aGUgY29udHJvbGxlZCBzY3JvbGxlclxuICAgICAgLy8gaXQgbWFrZXMgc2Vuc2UgdG8gY3JlYXRlIHRoaXMgb25seSBvbmNlIGFuZCByZWNhbGwgaXQgZm9yIHRoZSBpbnRlcnBvbGF0aW9uXG4gICAgICAvLyB0aGUgZnVuY3Rpb24gZG9lcyBhIGxvdCBvZiB2YWx1ZSBjYWNoaW5nIGZvciBwZXJmb3JtYW5jZVxuICAgICAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdzbGlkZScpIHtcbiAgICAgICAgZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbihjKTtcbiAgICAgICAgLy8gaSBhbSBub3Qgc3VyZSB3aHkgdGhlIHZhbHVlcyBoYXZlIHRvIGJlIG11bHRpcGxpY2F0ZWQgdGhpcyB3YXksIHRyaWVkIHRvIGludmVydCB0aGUgc25hcEdyaWRcbiAgICAgICAgLy8gYnV0IGl0IGRpZCBub3Qgd29yayBvdXRcbiAgICAgICAgY29udHJvbGxlZFRyYW5zbGF0ZSA9IC1zd2lwZXIuY29udHJvbGxlci5zcGxpbmUuaW50ZXJwb2xhdGUoLXRyYW5zbGF0ZSk7XG4gICAgICB9XG4gICAgICBpZiAoIWNvbnRyb2xsZWRUcmFuc2xhdGUgfHwgc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmJ5ID09PSAnY29udGFpbmVyJykge1xuICAgICAgICBtdWx0aXBsaWVyID0gKGMubWF4VHJhbnNsYXRlKCkgLSBjLm1pblRyYW5zbGF0ZSgpKSAvIChzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBtdWx0aXBsaWVyICsgYy5taW5UcmFuc2xhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuaW52ZXJzZSkge1xuICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gYy5tYXhUcmFuc2xhdGUoKSAtIGNvbnRyb2xsZWRUcmFuc2xhdGU7XG4gICAgICB9XG4gICAgICBjLnVwZGF0ZVByb2dyZXNzKGNvbnRyb2xsZWRUcmFuc2xhdGUpO1xuICAgICAgYy5zZXRUcmFuc2xhdGUoY29udHJvbGxlZFRyYW5zbGF0ZSwgc3dpcGVyKTtcbiAgICAgIGMudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIGMudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250cm9sbGVkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChjb250cm9sbGVkW2ldICE9PSBieUNvbnRyb2xsZXIgJiYgY29udHJvbGxlZFtpXSBpbnN0YW5jZW9mIFN3aXBlcikge1xuICAgICAgICAgIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoY29udHJvbGxlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7XG4gICAgICBzZXRDb250cm9sbGVkVHJhbnNsYXRlKGNvbnRyb2xsZWQpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgICBjb25zdCBTd2lwZXIgPSBzd2lwZXIuY29uc3RydWN0b3I7XG4gICAgY29uc3QgY29udHJvbGxlZCA9IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2w7XG4gICAgbGV0IGk7XG4gICAgZnVuY3Rpb24gc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oYykge1xuICAgICAgYy5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBzd2lwZXIpO1xuICAgICAgaWYgKGR1cmF0aW9uICE9PSAwKSB7XG4gICAgICAgIGMudHJhbnNpdGlvblN0YXJ0KCk7XG4gICAgICAgIGlmIChjLnBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgYy51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxlbWVudFRyYW5zaXRpb25FbmQoYy53cmFwcGVyRWwsICgpID0+IHtcbiAgICAgICAgICBpZiAoIWNvbnRyb2xsZWQpIHJldHVybjtcbiAgICAgICAgICBjLnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRyb2xsZWQpKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY29udHJvbGxlZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoY29udHJvbGxlZFtpXSAhPT0gYnlDb250cm9sbGVyICYmIGNvbnRyb2xsZWRbaV0gaW5zdGFuY2VvZiBTd2lwZXIpIHtcbiAgICAgICAgICBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjb250cm9sbGVkW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoY29udHJvbGxlZCBpbnN0YW5jZW9mIFN3aXBlciAmJiBieUNvbnRyb2xsZXIgIT09IGNvbnRyb2xsZWQpIHtcbiAgICAgIHNldENvbnRyb2xsZWRUcmFuc2l0aW9uKGNvbnRyb2xsZWQpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiByZW1vdmVTcGxpbmUoKSB7XG4gICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lID0gdW5kZWZpbmVkO1xuICAgICAgZGVsZXRlIHN3aXBlci5jb250cm9sbGVyLnNwbGluZTtcbiAgICB9XG4gIH1cbiAgb24oJ2JlZm9yZUluaXQnLCAoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIChcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5jb250cm9sID09PSAnc3RyaW5nJyB8fCBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSkge1xuICAgICAgY29uc3QgY29udHJvbEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5jb250cm9sKTtcbiAgICAgIGlmIChjb250cm9sRWxlbWVudCAmJiBjb250cm9sRWxlbWVudC5zd2lwZXIpIHtcbiAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCA9IGNvbnRyb2xFbGVtZW50LnN3aXBlcjtcbiAgICAgIH0gZWxzZSBpZiAoY29udHJvbEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3Qgb25Db250cm9sbGVyU3dpcGVyID0gZSA9PiB7XG4gICAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCA9IGUuZGV0YWlsWzBdO1xuICAgICAgICAgIHN3aXBlci51cGRhdGUoKTtcbiAgICAgICAgICBjb250cm9sRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdpbml0Jywgb25Db250cm9sbGVyU3dpcGVyKTtcbiAgICAgICAgfTtcbiAgICAgICAgY29udHJvbEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5pdCcsIG9uQ29udHJvbGxlclN3aXBlcik7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wgPSBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbDtcbiAgfSk7XG4gIG9uKCd1cGRhdGUnLCAoKSA9PiB7XG4gICAgcmVtb3ZlU3BsaW5lKCk7XG4gIH0pO1xuICBvbigncmVzaXplJywgKCkgPT4ge1xuICAgIHJlbW92ZVNwbGluZSgpO1xuICB9KTtcbiAgb24oJ29ic2VydmVyVXBkYXRlJywgKCkgPT4ge1xuICAgIHJlbW92ZVNwbGluZSgpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zbGF0ZScsIChfcywgdHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpID0+IHtcbiAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICBzd2lwZXIuY29udHJvbGxlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zaXRpb24nLCAoX3MsIGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpID0+IHtcbiAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICBzd2lwZXIuY29udHJvbGxlci5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xuICB9KTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIuY29udHJvbGxlciwge1xuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2l0aW9uXG4gIH0pO1xufSIsImltcG9ydCBjbGFzc2VzVG9TZWxlY3RvciBmcm9tICcuLi8uLi9zaGFyZWQvY2xhc3Nlcy10by1zZWxlY3Rvci5qcyc7XG5pbXBvcnQgeyBjcmVhdGVFbGVtZW50LCBlbGVtZW50SW5kZXggfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQTExeSh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvblxufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGExMXk6IHtcbiAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICBub3RpZmljYXRpb25DbGFzczogJ3N3aXBlci1ub3RpZmljYXRpb24nLFxuICAgICAgcHJldlNsaWRlTWVzc2FnZTogJ1ByZXZpb3VzIHNsaWRlJyxcbiAgICAgIG5leHRTbGlkZU1lc3NhZ2U6ICdOZXh0IHNsaWRlJyxcbiAgICAgIGZpcnN0U2xpZGVNZXNzYWdlOiAnVGhpcyBpcyB0aGUgZmlyc3Qgc2xpZGUnLFxuICAgICAgbGFzdFNsaWRlTWVzc2FnZTogJ1RoaXMgaXMgdGhlIGxhc3Qgc2xpZGUnLFxuICAgICAgcGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2U6ICdHbyB0byBzbGlkZSB7e2luZGV4fX0nLFxuICAgICAgc2xpZGVMYWJlbE1lc3NhZ2U6ICd7e2luZGV4fX0gLyB7e3NsaWRlc0xlbmd0aH19JyxcbiAgICAgIGNvbnRhaW5lck1lc3NhZ2U6IG51bGwsXG4gICAgICBjb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlOiBudWxsLFxuICAgICAgaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2U6IG51bGwsXG4gICAgICBzbGlkZVJvbGU6ICdncm91cCcsXG4gICAgICBpZDogbnVsbFxuICAgIH1cbiAgfSk7XG4gIHN3aXBlci5hMTF5ID0ge1xuICAgIGNsaWNrZWQ6IGZhbHNlXG4gIH07XG4gIGxldCBsaXZlUmVnaW9uID0gbnVsbDtcbiAgZnVuY3Rpb24gbm90aWZ5KG1lc3NhZ2UpIHtcbiAgICBjb25zdCBub3RpZmljYXRpb24gPSBsaXZlUmVnaW9uO1xuICAgIGlmIChub3RpZmljYXRpb24ubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgbm90aWZpY2F0aW9uLmlubmVySFRNTCA9ICcnO1xuICAgIG5vdGlmaWNhdGlvbi5pbm5lckhUTUwgPSBtZXNzYWdlO1xuICB9XG4gIGNvbnN0IG1ha2VFbGVtZW50c0FycmF5ID0gZWwgPT4ge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShlbCkpIGVsID0gW2VsXS5maWx0ZXIoZSA9PiAhIWUpO1xuICAgIHJldHVybiBlbDtcbiAgfTtcbiAgZnVuY3Rpb24gZ2V0UmFuZG9tTnVtYmVyKHNpemUgPSAxNikge1xuICAgIGNvbnN0IHJhbmRvbUNoYXIgPSAoKSA9PiBNYXRoLnJvdW5kKDE2ICogTWF0aC5yYW5kb20oKSkudG9TdHJpbmcoMTYpO1xuICAgIHJldHVybiAneCcucmVwZWF0KHNpemUpLnJlcGxhY2UoL3gvZywgcmFuZG9tQ2hhcik7XG4gIH1cbiAgZnVuY3Rpb24gbWFrZUVsRm9jdXNhYmxlKGVsKSB7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ3RhYkluZGV4JywgJzAnKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBtYWtlRWxOb3RGb2N1c2FibGUoZWwpIHtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgndGFiSW5kZXgnLCAnLTEnKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBhZGRFbFJvbGUoZWwsIHJvbGUpIHtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgncm9sZScsIHJvbGUpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGFkZEVsUm9sZURlc2NyaXB0aW9uKGVsLCBkZXNjcmlwdGlvbikge1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCdhcmlhLXJvbGVkZXNjcmlwdGlvbicsIGRlc2NyaXB0aW9uKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBhZGRFbENvbnRyb2xzKGVsLCBjb250cm9scykge1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCdhcmlhLWNvbnRyb2xzJywgY29udHJvbHMpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGFkZEVsTGFiZWwoZWwsIGxhYmVsKSB7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBsYWJlbCk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYWRkRWxJZChlbCwgaWQpIHtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYWRkRWxMaXZlKGVsLCBsaXZlKSB7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsIGxpdmUpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGRpc2FibGVFbChlbCkge1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJywgdHJ1ZSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZW5hYmxlRWwoZWwpIHtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcsIGZhbHNlKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBvbkVudGVyT3JTcGFjZUtleShlKSB7XG4gICAgaWYgKGUua2V5Q29kZSAhPT0gMTMgJiYgZS5rZXlDb2RlICE9PSAzMikgcmV0dXJuO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICBjb25zdCB0YXJnZXRFbCA9IGUudGFyZ2V0O1xuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiBzd2lwZXIucGFnaW5hdGlvbi5lbCAmJiAodGFyZ2V0RWwgPT09IHN3aXBlci5wYWdpbmF0aW9uLmVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLmVsLmNvbnRhaW5zKGUudGFyZ2V0KSkpIHtcbiAgICAgIGlmICghZS50YXJnZXQubWF0Y2hlcyhjbGFzc2VzVG9TZWxlY3Rvcihzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKSkgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsICYmIHRhcmdldEVsID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwpIHtcbiAgICAgIGlmICghKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgIG5vdGlmeShwYXJhbXMubGFzdFNsaWRlTWVzc2FnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub3RpZnkocGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsICYmIHRhcmdldEVsID09PSBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwpIHtcbiAgICAgIGlmICghKHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICAgIG5vdGlmeShwYXJhbXMuZmlyc3RTbGlkZU1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm90aWZ5KHBhcmFtcy5wcmV2U2xpZGVNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHRhcmdldEVsLm1hdGNoZXMoY2xhc3Nlc1RvU2VsZWN0b3Ioc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSkpIHtcbiAgICAgIHRhcmdldEVsLmNsaWNrKCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZU5hdmlnYXRpb24oKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCB8fCBzd2lwZXIucGFyYW1zLnJld2luZCB8fCAhc3dpcGVyLm5hdmlnYXRpb24pIHJldHVybjtcbiAgICBjb25zdCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgaWYgKHByZXZFbCkge1xuICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICBkaXNhYmxlRWwocHJldkVsKTtcbiAgICAgICAgbWFrZUVsTm90Rm9jdXNhYmxlKHByZXZFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmFibGVFbChwcmV2RWwpO1xuICAgICAgICBtYWtlRWxGb2N1c2FibGUocHJldkVsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5leHRFbCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICBkaXNhYmxlRWwobmV4dEVsKTtcbiAgICAgICAgbWFrZUVsTm90Rm9jdXNhYmxlKG5leHRFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbmFibGVFbChuZXh0RWwpO1xuICAgICAgICBtYWtlRWxGb2N1c2FibGUobmV4dEVsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaGFzUGFnaW5hdGlvbigpIHtcbiAgICByZXR1cm4gc3dpcGVyLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aDtcbiAgfVxuICBmdW5jdGlvbiBoYXNDbGlja2FibGVQYWdpbmF0aW9uKCkge1xuICAgIHJldHVybiBoYXNQYWdpbmF0aW9uKCkgJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVQYWdpbmF0aW9uKCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICBpZiAoIWhhc1BhZ2luYXRpb24oKSkgcmV0dXJuO1xuICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMuZm9yRWFjaChidWxsZXRFbCA9PiB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSkge1xuICAgICAgICBtYWtlRWxGb2N1c2FibGUoYnVsbGV0RWwpO1xuICAgICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5yZW5kZXJCdWxsZXQpIHtcbiAgICAgICAgICBhZGRFbFJvbGUoYnVsbGV0RWwsICdidXR0b24nKTtcbiAgICAgICAgICBhZGRFbExhYmVsKGJ1bGxldEVsLCBwYXJhbXMucGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2UucmVwbGFjZSgvXFx7XFx7aW5kZXhcXH1cXH0vLCBlbGVtZW50SW5kZXgoYnVsbGV0RWwpICsgMSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYnVsbGV0RWwubWF0Y2hlcyhgLiR7c3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldEFjdGl2ZUNsYXNzfWApKSB7XG4gICAgICAgIGJ1bGxldEVsLnNldEF0dHJpYnV0ZSgnYXJpYS1jdXJyZW50JywgJ3RydWUnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1bGxldEVsLnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1jdXJyZW50Jyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgY29uc3QgaW5pdE5hdkVsID0gKGVsLCB3cmFwcGVySWQsIG1lc3NhZ2UpID0+IHtcbiAgICBtYWtlRWxGb2N1c2FibGUoZWwpO1xuICAgIGlmIChlbC50YWdOYW1lICE9PSAnQlVUVE9OJykge1xuICAgICAgYWRkRWxSb2xlKGVsLCAnYnV0dG9uJyk7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25FbnRlck9yU3BhY2VLZXkpO1xuICAgIH1cbiAgICBhZGRFbExhYmVsKGVsLCBtZXNzYWdlKTtcbiAgICBhZGRFbENvbnRyb2xzKGVsLCB3cmFwcGVySWQpO1xuICB9O1xuICBjb25zdCBoYW5kbGVQb2ludGVyRG93biA9ICgpID0+IHtcbiAgICBzd2lwZXIuYTExeS5jbGlja2VkID0gdHJ1ZTtcbiAgfTtcbiAgY29uc3QgaGFuZGxlUG9pbnRlclVwID0gKCkgPT4ge1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBpZiAoIXN3aXBlci5kZXN0cm95ZWQpIHtcbiAgICAgICAgICBzd2lwZXIuYTExeS5jbGlja2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBoYW5kbGVGb2N1cyA9IGUgPT4ge1xuICAgIGlmIChzd2lwZXIuYTExeS5jbGlja2VkKSByZXR1cm47XG4gICAgY29uc3Qgc2xpZGVFbCA9IGUudGFyZ2V0LmNsb3Nlc3QoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICAgIGlmICghc2xpZGVFbCB8fCAhc3dpcGVyLnNsaWRlcy5pbmNsdWRlcyhzbGlkZUVsKSkgcmV0dXJuO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gc3dpcGVyLnNsaWRlcy5pbmRleE9mKHNsaWRlRWwpID09PSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgY29uc3QgaXNWaXNpYmxlID0gc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzICYmIHN3aXBlci52aXNpYmxlU2xpZGVzICYmIHN3aXBlci52aXNpYmxlU2xpZGVzLmluY2x1ZGVzKHNsaWRlRWwpO1xuICAgIGlmIChpc0FjdGl2ZSB8fCBpc1Zpc2libGUpIHJldHVybjtcbiAgICBpZiAoZS5zb3VyY2VDYXBhYmlsaXRpZXMgJiYgZS5zb3VyY2VDYXBhYmlsaXRpZXMuZmlyZXNUb3VjaEV2ZW50cykgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHN3aXBlci5lbC5zY3JvbGxMZWZ0ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVsLnNjcm9sbFRvcCA9IDA7XG4gICAgfVxuICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMuaW5kZXhPZihzbGlkZUVsKSwgMCk7XG4gIH07XG4gIGNvbnN0IGluaXRTbGlkZXMgPSAoKSA9PiB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgIGlmIChwYXJhbXMuaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UpIHtcbiAgICAgIGFkZEVsUm9sZURlc2NyaXB0aW9uKHN3aXBlci5zbGlkZXMsIHBhcmFtcy5pdGVtUm9sZURlc2NyaXB0aW9uTWVzc2FnZSk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuc2xpZGVSb2xlKSB7XG4gICAgICBhZGRFbFJvbGUoc3dpcGVyLnNsaWRlcywgcGFyYW1zLnNsaWRlUm9sZSk7XG4gICAgfVxuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIGlmIChwYXJhbXMuc2xpZGVMYWJlbE1lc3NhZ2UpIHtcbiAgICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaCgoc2xpZGVFbCwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IHBhcnNlSW50KHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCkgOiBpbmRleDtcbiAgICAgICAgY29uc3QgYXJpYUxhYmVsTWVzc2FnZSA9IHBhcmFtcy5zbGlkZUxhYmVsTWVzc2FnZS5yZXBsYWNlKC9cXHtcXHtpbmRleFxcfVxcfS8sIHNsaWRlSW5kZXggKyAxKS5yZXBsYWNlKC9cXHtcXHtzbGlkZXNMZW5ndGhcXH1cXH0vLCBzbGlkZXNMZW5ndGgpO1xuICAgICAgICBhZGRFbExhYmVsKHNsaWRlRWwsIGFyaWFMYWJlbE1lc3NhZ2UpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICBzd2lwZXIuZWwuYXBwZW5kKGxpdmVSZWdpb24pO1xuXG4gICAgLy8gQ29udGFpbmVyXG4gICAgY29uc3QgY29udGFpbmVyRWwgPSBzd2lwZXIuZWw7XG4gICAgaWYgKHBhcmFtcy5jb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlKSB7XG4gICAgICBhZGRFbFJvbGVEZXNjcmlwdGlvbihjb250YWluZXJFbCwgcGFyYW1zLmNvbnRhaW5lclJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLmNvbnRhaW5lck1lc3NhZ2UpIHtcbiAgICAgIGFkZEVsTGFiZWwoY29udGFpbmVyRWwsIHBhcmFtcy5jb250YWluZXJNZXNzYWdlKTtcbiAgICB9XG5cbiAgICAvLyBXcmFwcGVyXG4gICAgY29uc3Qgd3JhcHBlckVsID0gc3dpcGVyLndyYXBwZXJFbDtcbiAgICBjb25zdCB3cmFwcGVySWQgPSBwYXJhbXMuaWQgfHwgd3JhcHBlckVsLmdldEF0dHJpYnV0ZSgnaWQnKSB8fCBgc3dpcGVyLXdyYXBwZXItJHtnZXRSYW5kb21OdW1iZXIoMTYpfWA7XG4gICAgY29uc3QgbGl2ZSA9IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkgJiYgc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5lbmFibGVkID8gJ29mZicgOiAncG9saXRlJztcbiAgICBhZGRFbElkKHdyYXBwZXJFbCwgd3JhcHBlcklkKTtcbiAgICBhZGRFbExpdmUod3JhcHBlckVsLCBsaXZlKTtcblxuICAgIC8vIFNsaWRlXG4gICAgaW5pdFNsaWRlcygpO1xuXG4gICAgLy8gTmF2aWdhdGlvblxuICAgIGxldCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb24gPyBzd2lwZXIubmF2aWdhdGlvbiA6IHt9O1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBpZiAobmV4dEVsKSB7XG4gICAgICBuZXh0RWwuZm9yRWFjaChlbCA9PiBpbml0TmF2RWwoZWwsIHdyYXBwZXJJZCwgcGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpKTtcbiAgICB9XG4gICAgaWYgKHByZXZFbCkge1xuICAgICAgcHJldkVsLmZvckVhY2goZWwgPT4gaW5pdE5hdkVsKGVsLCB3cmFwcGVySWQsIHBhcmFtcy5wcmV2U2xpZGVNZXNzYWdlKSk7XG4gICAgfVxuXG4gICAgLy8gUGFnaW5hdGlvblxuICAgIGlmIChoYXNDbGlja2FibGVQYWdpbmF0aW9uKCkpIHtcbiAgICAgIGNvbnN0IHBhZ2luYXRpb25FbCA9IEFycmF5LmlzQXJyYXkoc3dpcGVyLnBhZ2luYXRpb24uZWwpID8gc3dpcGVyLnBhZ2luYXRpb24uZWwgOiBbc3dpcGVyLnBhZ2luYXRpb24uZWxdO1xuICAgICAgcGFnaW5hdGlvbkVsLmZvckVhY2goZWwgPT4ge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25FbnRlck9yU3BhY2VLZXkpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVGFiIGZvY3VzXG4gICAgc3dpcGVyLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgaGFuZGxlRm9jdXMsIHRydWUpO1xuICAgIHN3aXBlci5lbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgICBzd2lwZXIuZWwuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgaGFuZGxlUG9pbnRlclVwLCB0cnVlKTtcbiAgfTtcbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBpZiAobGl2ZVJlZ2lvbiAmJiBsaXZlUmVnaW9uLmxlbmd0aCA+IDApIGxpdmVSZWdpb24ucmVtb3ZlKCk7XG4gICAgbGV0IHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbiA/IHN3aXBlci5uYXZpZ2F0aW9uIDoge307XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGlmIChuZXh0RWwpIHtcbiAgICAgIG5leHRFbC5mb3JFYWNoKGVsID0+IGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbkVudGVyT3JTcGFjZUtleSkpO1xuICAgIH1cbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuZm9yRWFjaChlbCA9PiBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgb25FbnRlck9yU3BhY2VLZXkpKTtcbiAgICB9XG5cbiAgICAvLyBQYWdpbmF0aW9uXG4gICAgaWYgKGhhc0NsaWNrYWJsZVBhZ2luYXRpb24oKSkge1xuICAgICAgY29uc3QgcGFnaW5hdGlvbkVsID0gQXJyYXkuaXNBcnJheShzd2lwZXIucGFnaW5hdGlvbi5lbCkgPyBzd2lwZXIucGFnaW5hdGlvbi5lbCA6IFtzd2lwZXIucGFnaW5hdGlvbi5lbF07XG4gICAgICBwYWdpbmF0aW9uRWwuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbkVudGVyT3JTcGFjZUtleSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBUYWIgZm9jdXNcbiAgICBzd2lwZXIuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBoYW5kbGVGb2N1cywgdHJ1ZSk7XG4gICAgc3dpcGVyLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJkb3duJywgaGFuZGxlUG9pbnRlckRvd24sIHRydWUpO1xuICAgIHN3aXBlci5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCBoYW5kbGVQb2ludGVyVXAsIHRydWUpO1xuICB9XG4gIG9uKCdiZWZvcmVJbml0JywgKCkgPT4ge1xuICAgIGxpdmVSZWdpb24gPSBjcmVhdGVFbGVtZW50KCdzcGFuJywgc3dpcGVyLnBhcmFtcy5hMTF5Lm5vdGlmaWNhdGlvbkNsYXNzKTtcbiAgICBsaXZlUmVnaW9uLnNldEF0dHJpYnV0ZSgnYXJpYS1saXZlJywgJ2Fzc2VydGl2ZScpO1xuICAgIGxpdmVSZWdpb24uc2V0QXR0cmlidXRlKCdhcmlhLWF0b21pYycsICd0cnVlJyk7XG4gICAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIGxpdmVSZWdpb24uc2V0QXR0cmlidXRlKCdzbG90JywgJ2NvbnRhaW5lci1lbmQnKTtcbiAgICB9XG4gIH0pO1xuICBvbignYWZ0ZXJJbml0JywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICBpbml0KCk7XG4gIH0pO1xuICBvbignc2xpZGVzTGVuZ3RoQ2hhbmdlIHNuYXBHcmlkTGVuZ3RoQ2hhbmdlIHNsaWRlc0dyaWRMZW5ndGhDaGFuZ2UnLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGluaXRTbGlkZXMoKTtcbiAgfSk7XG4gIG9uKCdmcm9tRWRnZSB0b0VkZ2UgYWZ0ZXJJbml0IGxvY2sgdW5sb2NrJywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICB1cGRhdGVOYXZpZ2F0aW9uKCk7XG4gIH0pO1xuICBvbigncGFnaW5hdGlvblVwZGF0ZScsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgdXBkYXRlUGFnaW5hdGlvbigpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGRlc3Ryb3koKTtcbiAgfSk7XG59IiwiaW1wb3J0IHsgZ2V0V2luZG93IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgeyBlbGVtZW50SW5kZXggfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSGlzdG9yeSh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvblxufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGhpc3Rvcnk6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgcm9vdDogJycsXG4gICAgICByZXBsYWNlU3RhdGU6IGZhbHNlLFxuICAgICAga2V5OiAnc2xpZGVzJyxcbiAgICAgIGtlZXBRdWVyeTogZmFsc2VcbiAgICB9XG4gIH0pO1xuICBsZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgbGV0IHBhdGhzID0ge307XG4gIGNvbnN0IHNsdWdpZnkgPSB0ZXh0ID0+IHtcbiAgICByZXR1cm4gdGV4dC50b1N0cmluZygpLnJlcGxhY2UoL1xccysvZywgJy0nKS5yZXBsYWNlKC9bXlxcdy1dKy9nLCAnJykucmVwbGFjZSgvLS0rL2csICctJykucmVwbGFjZSgvXi0rLywgJycpLnJlcGxhY2UoLy0rJC8sICcnKTtcbiAgfTtcbiAgY29uc3QgZ2V0UGF0aFZhbHVlcyA9IHVybE92ZXJyaWRlID0+IHtcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBsZXQgbG9jYXRpb247XG4gICAgaWYgKHVybE92ZXJyaWRlKSB7XG4gICAgICBsb2NhdGlvbiA9IG5ldyBVUkwodXJsT3ZlcnJpZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICB9XG4gICAgY29uc3QgcGF0aEFycmF5ID0gbG9jYXRpb24ucGF0aG5hbWUuc2xpY2UoMSkuc3BsaXQoJy8nKS5maWx0ZXIocGFydCA9PiBwYXJ0ICE9PSAnJyk7XG4gICAgY29uc3QgdG90YWwgPSBwYXRoQXJyYXkubGVuZ3RoO1xuICAgIGNvbnN0IGtleSA9IHBhdGhBcnJheVt0b3RhbCAtIDJdO1xuICAgIGNvbnN0IHZhbHVlID0gcGF0aEFycmF5W3RvdGFsIC0gMV07XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleSxcbiAgICAgIHZhbHVlXG4gICAgfTtcbiAgfTtcbiAgY29uc3Qgc2V0SGlzdG9yeSA9IChrZXksIGluZGV4KSA9PiB7XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgaWYgKCFpbml0aWFsaXplZCB8fCAhc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHJldHVybjtcbiAgICBsZXQgbG9jYXRpb247XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudXJsKSB7XG4gICAgICBsb2NhdGlvbiA9IG5ldyBVUkwoc3dpcGVyLnBhcmFtcy51cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICB9XG4gICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzW2luZGV4XTtcbiAgICBsZXQgdmFsdWUgPSBzbHVnaWZ5KHNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1oaXN0b3J5JykpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3Rvcnkucm9vdC5sZW5ndGggPiAwKSB7XG4gICAgICBsZXQgcm9vdCA9IHN3aXBlci5wYXJhbXMuaGlzdG9yeS5yb290O1xuICAgICAgaWYgKHJvb3Rbcm9vdC5sZW5ndGggLSAxXSA9PT0gJy8nKSByb290ID0gcm9vdC5zbGljZSgwLCByb290Lmxlbmd0aCAtIDEpO1xuICAgICAgdmFsdWUgPSBgJHtyb290fS8ke2tleSA/IGAke2tleX0vYCA6ICcnfSR7dmFsdWV9YDtcbiAgICB9IGVsc2UgaWYgKCFsb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICB2YWx1ZSA9IGAke2tleSA/IGAke2tleX0vYCA6ICcnfSR7dmFsdWV9YDtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGlzdG9yeS5rZWVwUXVlcnkpIHtcbiAgICAgIHZhbHVlICs9IGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9XG4gICAgY29uc3QgY3VycmVudFN0YXRlID0gd2luZG93Lmhpc3Rvcnkuc3RhdGU7XG4gICAgaWYgKGN1cnJlbnRTdGF0ZSAmJiBjdXJyZW50U3RhdGUudmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICB2YWx1ZVxuICAgICAgfSwgbnVsbCwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICB2YWx1ZVxuICAgICAgfSwgbnVsbCwgdmFsdWUpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc2Nyb2xsVG9TbGlkZSA9IChzcGVlZCwgdmFsdWUsIHJ1bkNhbGxiYWNrcykgPT4ge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzW2ldO1xuICAgICAgICBjb25zdCBzbGlkZUhpc3RvcnkgPSBzbHVnaWZ5KHNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1oaXN0b3J5JykpO1xuICAgICAgICBpZiAoc2xpZGVIaXN0b3J5ID09PSB2YWx1ZSkge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gZWxlbWVudEluZGV4KHNsaWRlKTtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oMCwgc3BlZWQsIHJ1bkNhbGxiYWNrcyk7XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXRIaXN0b3J5UG9wU3RhdGUgPSAoKSA9PiB7XG4gICAgcGF0aHMgPSBnZXRQYXRoVmFsdWVzKHN3aXBlci5wYXJhbXMudXJsKTtcbiAgICBzY3JvbGxUb1NsaWRlKHN3aXBlci5wYXJhbXMuc3BlZWQsIHBhdGhzLnZhbHVlLCBmYWxzZSk7XG4gIH07XG4gIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkpIHJldHVybjtcbiAgICBpZiAoIXdpbmRvdy5oaXN0b3J5IHx8ICF3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUpIHtcbiAgICAgIHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkID0gZmFsc2U7XG4gICAgICBzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgcGF0aHMgPSBnZXRQYXRoVmFsdWVzKHN3aXBlci5wYXJhbXMudXJsKTtcbiAgICBpZiAoIXBhdGhzLmtleSAmJiAhcGF0aHMudmFsdWUpIHtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBzZXRIaXN0b3J5UG9wU3RhdGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzY3JvbGxUb1NsaWRlKDAsIHBhdGhzLnZhbHVlLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBzZXRIaXN0b3J5UG9wU3RhdGUpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHNldEhpc3RvcnlQb3BTdGF0ZSk7XG4gICAgfVxuICB9O1xuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHtcbiAgICAgIGluaXQoKTtcbiAgICB9XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHtcbiAgICAgIGRlc3Ryb3koKTtcbiAgICB9XG4gIH0pO1xuICBvbigndHJhbnNpdGlvbkVuZCBfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZScsICgpID0+IHtcbiAgICBpZiAoaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHNldEhpc3Rvcnkoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmtleSwgc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICB9XG4gIH0pO1xuICBvbignc2xpZGVDaGFuZ2UnLCAoKSA9PiB7XG4gICAgaWYgKGluaXRpYWxpemVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc2V0SGlzdG9yeShzd2lwZXIucGFyYW1zLmhpc3Rvcnkua2V5LCBzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgIH1cbiAgfSk7XG59IiwiaW1wb3J0IHsgZ2V0V2luZG93LCBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuaW1wb3J0IHsgZWxlbWVudENoaWxkcmVuLCBlbGVtZW50SW5kZXggfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gSGFzaE5hdmlnYXRpb24oe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtcyxcbiAgZW1pdCxcbiAgb25cbn0pIHtcbiAgbGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgaGFzaE5hdmlnYXRpb246IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgcmVwbGFjZVN0YXRlOiBmYWxzZSxcbiAgICAgIHdhdGNoU3RhdGU6IGZhbHNlXG4gICAgfVxuICB9KTtcbiAgY29uc3Qgb25IYXNoQ2hhbmdlID0gKCkgPT4ge1xuICAgIGVtaXQoJ2hhc2hDaGFuZ2UnKTtcbiAgICBjb25zdCBuZXdIYXNoID0gZG9jdW1lbnQubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuICAgIGNvbnN0IGFjdGl2ZVNsaWRlSGFzaCA9IHN3aXBlci5zbGlkZXNbc3dpcGVyLmFjdGl2ZUluZGV4XS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGFzaCcpO1xuICAgIGlmIChuZXdIYXNoICE9PSBhY3RpdmVTbGlkZUhhc2gpIHtcbiAgICAgIGNvbnN0IG5ld0luZGV4ID0gZWxlbWVudEluZGV4KGVsZW1lbnRDaGlsZHJlbihzd2lwZXIuc2xpZGVzRWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtaGFzaD1cIiR7bmV3SGFzaH1cIl0sIHN3aXBlci1zbGlkZVtkYXRhLWhhc2g9XCIke25ld0hhc2h9XCJdYClbMF0pO1xuICAgICAgaWYgKHR5cGVvZiBuZXdJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHNldEhhc2ggPSAoKSA9PiB7XG4gICAgaWYgKCFpbml0aWFsaXplZCB8fCAhc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ucmVwbGFjZVN0YXRlICYmIHdpbmRvdy5oaXN0b3J5ICYmIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsIGAjJHtzd2lwZXIuc2xpZGVzW3N3aXBlci5hY3RpdmVJbmRleF0uZ2V0QXR0cmlidXRlKCdkYXRhLWhhc2gnKX1gIHx8ICcnKTtcbiAgICAgIGVtaXQoJ2hhc2hTZXQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzW3N3aXBlci5hY3RpdmVJbmRleF07XG4gICAgICBjb25zdCBoYXNoID0gc2xpZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWhhc2gnKSB8fCBzbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGlzdG9yeScpO1xuICAgICAgZG9jdW1lbnQubG9jYXRpb24uaGFzaCA9IGhhc2ggfHwgJyc7XG4gICAgICBlbWl0KCdoYXNoU2V0Jyk7XG4gICAgfVxuICB9O1xuICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkIHx8IHN3aXBlci5wYXJhbXMuaGlzdG9yeSAmJiBzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICBjb25zdCBoYXNoID0gZG9jdW1lbnQubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuICAgIGlmIChoYXNoKSB7XG4gICAgICBjb25zdCBzcGVlZCA9IDA7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBzbGlkZSA9IHN3aXBlci5zbGlkZXNbaV07XG4gICAgICAgIGNvbnN0IHNsaWRlSGFzaCA9IHNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1oYXNoJykgfHwgc2xpZGUuZ2V0QXR0cmlidXRlKCdkYXRhLWhpc3RvcnknKTtcbiAgICAgICAgaWYgKHNsaWRlSGFzaCA9PT0gaGFzaCkge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gZWxlbWVudEluZGV4KHNsaWRlKTtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi53YXRjaFN0YXRlKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIG9uSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBkZXN0cm95ID0gKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLndhdGNoU3RhdGUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdoYXNoY2hhbmdlJywgb25IYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQpIHtcbiAgICAgIGluaXQoKTtcbiAgICB9XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSB7XG4gICAgICBkZXN0cm95KCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3RyYW5zaXRpb25FbmQgX2ZyZWVNb2RlTm9Nb21lbnR1bVJlbGVhc2UnLCAoKSA9PiB7XG4gICAgaWYgKGluaXRpYWxpemVkKSB7XG4gICAgICBzZXRIYXNoKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3NsaWRlQ2hhbmdlJywgKCkgPT4ge1xuICAgIGlmIChpbml0aWFsaXplZCAmJiBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHNldEhhc2goKTtcbiAgICB9XG4gIH0pO1xufSIsIi8qIGVzbGludCBuby11bmRlcnNjb3JlLWRhbmdsZTogXCJvZmZcIiAqL1xuLyogZXNsaW50IG5vLXVzZS1iZWZvcmUtZGVmaW5lOiBcIm9mZlwiICovXG5pbXBvcnQgeyBnZXREb2N1bWVudCB9IGZyb20gJ3Nzci13aW5kb3cnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gQXV0b3BsYXkoe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtcyxcbiAgb24sXG4gIGVtaXQsXG4gIHBhcmFtc1xufSkge1xuICBzd2lwZXIuYXV0b3BsYXkgPSB7XG4gICAgcnVubmluZzogZmFsc2UsXG4gICAgcGF1c2VkOiBmYWxzZSxcbiAgICB0aW1lTGVmdDogMFxuICB9O1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGF1dG9wbGF5OiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIGRlbGF5OiAzMDAwLFxuICAgICAgd2FpdEZvclRyYW5zaXRpb246IHRydWUsXG4gICAgICBkaXNhYmxlT25JbnRlcmFjdGlvbjogdHJ1ZSxcbiAgICAgIHN0b3BPbkxhc3RTbGlkZTogZmFsc2UsXG4gICAgICByZXZlcnNlRGlyZWN0aW9uOiBmYWxzZSxcbiAgICAgIHBhdXNlT25Nb3VzZUVudGVyOiBmYWxzZVxuICAgIH1cbiAgfSk7XG4gIGxldCB0aW1lb3V0O1xuICBsZXQgcmFmO1xuICBsZXQgYXV0b3BsYXlEZWxheVRvdGFsID0gcGFyYW1zICYmIHBhcmFtcy5hdXRvcGxheSA/IHBhcmFtcy5hdXRvcGxheS5kZWxheSA6IDMwMDA7XG4gIGxldCBhdXRvcGxheURlbGF5Q3VycmVudCA9IHBhcmFtcyAmJiBwYXJhbXMuYXV0b3BsYXkgPyBwYXJhbXMuYXV0b3BsYXkuZGVsYXkgOiAzMDAwO1xuICBsZXQgYXV0b3BsYXlUaW1lTGVmdDtcbiAgbGV0IGF1dG9wbGF5U3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lO1xuICBsZXQgd2FzUGF1c2VkO1xuICBsZXQgaXNUb3VjaGVkO1xuICBsZXQgcGF1c2VkQnlUb3VjaDtcbiAgbGV0IHRvdWNoU3RhcnRUaW1lb3V0O1xuICBsZXQgc2xpZGVDaGFuZ2VkO1xuICBsZXQgcGF1c2VkQnlJbnRlcmFjdGlvbjtcbiAgZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKGUpIHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIud3JhcHBlckVsKSByZXR1cm47XG4gICAgaWYgKGUudGFyZ2V0ICE9PSBzd2lwZXIud3JhcHBlckVsKSByZXR1cm47XG4gICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgb25UcmFuc2l0aW9uRW5kKTtcbiAgICByZXN1bWUoKTtcbiAgfVxuICBjb25zdCBjYWxjVGltZUxlZnQgPSAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICAgIHdhc1BhdXNlZCA9IHRydWU7XG4gICAgfSBlbHNlIGlmICh3YXNQYXVzZWQpIHtcbiAgICAgIGF1dG9wbGF5RGVsYXlDdXJyZW50ID0gYXV0b3BsYXlUaW1lTGVmdDtcbiAgICAgIHdhc1BhdXNlZCA9IGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCB0aW1lTGVmdCA9IHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPyBhdXRvcGxheVRpbWVMZWZ0IDogYXV0b3BsYXlTdGFydFRpbWUgKyBhdXRvcGxheURlbGF5Q3VycmVudCAtIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIHN3aXBlci5hdXRvcGxheS50aW1lTGVmdCA9IHRpbWVMZWZ0O1xuICAgIGVtaXQoJ2F1dG9wbGF5VGltZUxlZnQnLCB0aW1lTGVmdCwgdGltZUxlZnQgLyBhdXRvcGxheURlbGF5VG90YWwpO1xuICAgIHJhZiA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBjYWxjVGltZUxlZnQoKTtcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZ2V0U2xpZGVEZWxheSA9ICgpID0+IHtcbiAgICBsZXQgYWN0aXZlU2xpZGVFbDtcbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIGFjdGl2ZVNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdzd2lwZXItc2xpZGUtYWN0aXZlJykpWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVTbGlkZUVsID0gc3dpcGVyLnNsaWRlc1tzd2lwZXIuYWN0aXZlSW5kZXhdO1xuICAgIH1cbiAgICBpZiAoIWFjdGl2ZVNsaWRlRWwpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgY29uc3QgY3VycmVudFNsaWRlRGVsYXkgPSBwYXJzZUludChhY3RpdmVTbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItYXV0b3BsYXknKSwgMTApO1xuICAgIHJldHVybiBjdXJyZW50U2xpZGVEZWxheTtcbiAgfTtcbiAgY29uc3QgcnVuID0gZGVsYXlGb3JjZSA9PiB7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUocmFmKTtcbiAgICBjYWxjVGltZUxlZnQoKTtcbiAgICBsZXQgZGVsYXkgPSB0eXBlb2YgZGVsYXlGb3JjZSA9PT0gJ3VuZGVmaW5lZCcgPyBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRlbGF5IDogZGVsYXlGb3JjZTtcbiAgICBhdXRvcGxheURlbGF5VG90YWwgPSBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRlbGF5O1xuICAgIGF1dG9wbGF5RGVsYXlDdXJyZW50ID0gc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kZWxheTtcbiAgICBjb25zdCBjdXJyZW50U2xpZGVEZWxheSA9IGdldFNsaWRlRGVsYXkoKTtcbiAgICBpZiAoIU51bWJlci5pc05hTihjdXJyZW50U2xpZGVEZWxheSkgJiYgY3VycmVudFNsaWRlRGVsYXkgPiAwICYmIHR5cGVvZiBkZWxheUZvcmNlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgZGVsYXkgPSBjdXJyZW50U2xpZGVEZWxheTtcbiAgICAgIGF1dG9wbGF5RGVsYXlUb3RhbCA9IGN1cnJlbnRTbGlkZURlbGF5O1xuICAgICAgYXV0b3BsYXlEZWxheUN1cnJlbnQgPSBjdXJyZW50U2xpZGVEZWxheTtcbiAgICB9XG4gICAgYXV0b3BsYXlUaW1lTGVmdCA9IGRlbGF5O1xuICAgIGNvbnN0IHNwZWVkID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgICBjb25zdCBwcm9jZWVkID0gKCkgPT4ge1xuICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkucmV2ZXJzZURpcmVjdGlvbikge1xuICAgICAgICBpZiAoIXN3aXBlci5pc0JlZ2lubmluZyB8fCBzd2lwZXIucGFyYW1zLmxvb3AgfHwgc3dpcGVyLnBhcmFtcy5yZXdpbmQpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KHNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBlbWl0KCdhdXRvcGxheScpO1xuICAgICAgICB9IGVsc2UgaWYgKCFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnN0b3BPbkxhc3RTbGlkZSkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSwgc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgIGVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghc3dpcGVyLmlzRW5kIHx8IHN3aXBlci5wYXJhbXMubG9vcCB8fCBzd2lwZXIucGFyYW1zLnJld2luZCkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZU5leHQoc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgIGVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuc3RvcE9uTGFzdFNsaWRlKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oMCwgc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgIGVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgYXV0b3BsYXlTdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBydW4oKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoZGVsYXkgPiAwKSB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHByb2NlZWQoKTtcbiAgICAgIH0sIGRlbGF5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgcHJvY2VlZCgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgcmV0dXJuIGRlbGF5O1xuICB9O1xuICBjb25zdCBzdGFydCA9ICgpID0+IHtcbiAgICBzd2lwZXIuYXV0b3BsYXkucnVubmluZyA9IHRydWU7XG4gICAgcnVuKCk7XG4gICAgZW1pdCgnYXV0b3BsYXlTdGFydCcpO1xuICB9O1xuICBjb25zdCBzdG9wID0gKCkgPT4ge1xuICAgIHN3aXBlci5hdXRvcGxheS5ydW5uaW5nID0gZmFsc2U7XG4gICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHJhZik7XG4gICAgZW1pdCgnYXV0b3BsYXlTdG9wJyk7XG4gIH07XG4gIGNvbnN0IHBhdXNlID0gKGludGVybmFsLCByZXNldCkgPT4ge1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICBpZiAoIWludGVybmFsKSB7XG4gICAgICBwYXVzZWRCeUludGVyYWN0aW9uID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgcHJvY2VlZCA9ICgpID0+IHtcbiAgICAgIGVtaXQoJ2F1dG9wbGF5UGF1c2UnKTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LndhaXRGb3JUcmFuc2l0aW9uKSB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIG9uVHJhbnNpdGlvbkVuZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bWUoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHN3aXBlci5hdXRvcGxheS5wYXVzZWQgPSB0cnVlO1xuICAgIGlmIChyZXNldCkge1xuICAgICAgaWYgKHNsaWRlQ2hhbmdlZCkge1xuICAgICAgICBhdXRvcGxheVRpbWVMZWZ0ID0gc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kZWxheTtcbiAgICAgIH1cbiAgICAgIHNsaWRlQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgcHJvY2VlZCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBkZWxheSA9IGF1dG9wbGF5VGltZUxlZnQgfHwgc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kZWxheTtcbiAgICBhdXRvcGxheVRpbWVMZWZ0ID0gZGVsYXkgLSAobmV3IERhdGUoKS5nZXRUaW1lKCkgLSBhdXRvcGxheVN0YXJ0VGltZSk7XG4gICAgaWYgKHN3aXBlci5pc0VuZCAmJiBhdXRvcGxheVRpbWVMZWZ0IDwgMCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSByZXR1cm47XG4gICAgaWYgKGF1dG9wbGF5VGltZUxlZnQgPCAwKSBhdXRvcGxheVRpbWVMZWZ0ID0gMDtcbiAgICBwcm9jZWVkKCk7XG4gIH07XG4gIGNvbnN0IHJlc3VtZSA9ICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLmlzRW5kICYmIGF1dG9wbGF5VGltZUxlZnQgPCAwICYmICFzd2lwZXIucGFyYW1zLmxvb3AgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBhdXRvcGxheVN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGlmIChwYXVzZWRCeUludGVyYWN0aW9uKSB7XG4gICAgICBwYXVzZWRCeUludGVyYWN0aW9uID0gZmFsc2U7XG4gICAgICBydW4oYXV0b3BsYXlUaW1lTGVmdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJ1bigpO1xuICAgIH1cbiAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7XG4gICAgZW1pdCgnYXV0b3BsYXlSZXN1bWUnKTtcbiAgfTtcbiAgY29uc3Qgb25WaXNpYmlsaXR5Q2hhbmdlID0gKCkgPT4ge1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBpZiAoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlID09PSAnaGlkZGVuJykge1xuICAgICAgcGF1c2VkQnlJbnRlcmFjdGlvbiA9IHRydWU7XG4gICAgICBwYXVzZSh0cnVlKTtcbiAgICB9XG4gICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ3Zpc2libGUnKSB7XG4gICAgICByZXN1bWUoKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9uUG9pbnRlckVudGVyID0gZSA9PiB7XG4gICAgaWYgKGUucG9pbnRlclR5cGUgIT09ICdtb3VzZScpIHJldHVybjtcbiAgICBwYXVzZWRCeUludGVyYWN0aW9uID0gdHJ1ZTtcbiAgICBwYXVzZSh0cnVlKTtcbiAgfTtcbiAgY29uc3Qgb25Qb2ludGVyTGVhdmUgPSBlID0+IHtcbiAgICBpZiAoZS5wb2ludGVyVHlwZSAhPT0gJ21vdXNlJykgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgICByZXN1bWUoKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGF0dGFjaE1vdXNlRXZlbnRzID0gKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LnBhdXNlT25Nb3VzZUVudGVyKSB7XG4gICAgICBzd2lwZXIuZWwuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmVudGVyJywgb25Qb2ludGVyRW50ZXIpO1xuICAgICAgc3dpcGVyLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJsZWF2ZScsIG9uUG9pbnRlckxlYXZlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IGRldGFjaE1vdXNlRXZlbnRzID0gKCkgPT4ge1xuICAgIHN3aXBlci5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZW50ZXInLCBvblBvaW50ZXJFbnRlcik7XG4gICAgc3dpcGVyLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJsZWF2ZScsIG9uUG9pbnRlckxlYXZlKTtcbiAgfTtcbiAgY29uc3QgYXR0YWNoRG9jdW1lbnRFdmVudHMgPSAoKSA9PiB7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBvblZpc2liaWxpdHlDaGFuZ2UpO1xuICB9O1xuICBjb25zdCBkZXRhY2hEb2N1bWVudEV2ZW50cyA9ICgpID0+IHtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIG9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gIH07XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmVuYWJsZWQpIHtcbiAgICAgIGF0dGFjaE1vdXNlRXZlbnRzKCk7XG4gICAgICBhdHRhY2hEb2N1bWVudEV2ZW50cygpO1xuICAgICAgYXV0b3BsYXlTdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgIHN0YXJ0KCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgZGV0YWNoTW91c2VFdmVudHMoKTtcbiAgICBkZXRhY2hEb2N1bWVudEV2ZW50cygpO1xuICAgIGlmIChzd2lwZXIuYXV0b3BsYXkucnVubmluZykge1xuICAgICAgc3RvcCgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCAoX3MsIHNwZWVkLCBpbnRlcm5hbCkgPT4ge1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgIGlmIChpbnRlcm5hbCB8fCAhc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgcGF1c2UodHJ1ZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH0pO1xuICBvbignc2xpZGVyRmlyc3RNb3ZlJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSB7XG4gICAgICBzdG9wKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlzVG91Y2hlZCA9IHRydWU7XG4gICAgcGF1c2VkQnlUb3VjaCA9IGZhbHNlO1xuICAgIHBhdXNlZEJ5SW50ZXJhY3Rpb24gPSBmYWxzZTtcbiAgICB0b3VjaFN0YXJ0VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgcGF1c2VkQnlJbnRlcmFjdGlvbiA9IHRydWU7XG4gICAgICBwYXVzZWRCeVRvdWNoID0gdHJ1ZTtcbiAgICAgIHBhdXNlKHRydWUpO1xuICAgIH0sIDIwMCk7XG4gIH0pO1xuICBvbigndG91Y2hFbmQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nIHx8ICFpc1RvdWNoZWQpIHJldHVybjtcbiAgICBjbGVhclRpbWVvdXQodG91Y2hTdGFydFRpbWVvdXQpO1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgcGF1c2VkQnlUb3VjaCA9IGZhbHNlO1xuICAgICAgaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwYXVzZWRCeVRvdWNoICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkgcmVzdW1lKCk7XG4gICAgcGF1c2VkQnlUb3VjaCA9IGZhbHNlO1xuICAgIGlzVG91Y2hlZCA9IGZhbHNlO1xuICB9KTtcbiAgb24oJ3NsaWRlQ2hhbmdlJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgIHNsaWRlQ2hhbmdlZCA9IHRydWU7XG4gIH0pO1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5hdXRvcGxheSwge1xuICAgIHN0YXJ0LFxuICAgIHN0b3AsXG4gICAgcGF1c2UsXG4gICAgcmVzdW1lXG4gIH0pO1xufSIsImltcG9ydCB7IGdldERvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5pbXBvcnQgeyBlbGVtZW50Q2hpbGRyZW4sIGlzT2JqZWN0IH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFRodW1iKHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uXG59KSB7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgdGh1bWJzOiB7XG4gICAgICBzd2lwZXI6IG51bGwsXG4gICAgICBtdWx0aXBsZUFjdGl2ZVRodW1iczogdHJ1ZSxcbiAgICAgIGF1dG9TY3JvbGxPZmZzZXQ6IDAsXG4gICAgICBzbGlkZVRodW1iQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtdGh1bWItYWN0aXZlJyxcbiAgICAgIHRodW1ic0NvbnRhaW5lckNsYXNzOiAnc3dpcGVyLXRodW1icydcbiAgICB9XG4gIH0pO1xuICBsZXQgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgbGV0IHN3aXBlckNyZWF0ZWQgPSBmYWxzZTtcbiAgc3dpcGVyLnRodW1icyA9IHtcbiAgICBzd2lwZXI6IG51bGxcbiAgfTtcbiAgZnVuY3Rpb24gb25UaHVtYkNsaWNrKCkge1xuICAgIGNvbnN0IHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgIGlmICghdGh1bWJzU3dpcGVyIHx8IHRodW1ic1N3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBjb25zdCBjbGlja2VkSW5kZXggPSB0aHVtYnNTd2lwZXIuY2xpY2tlZEluZGV4O1xuICAgIGNvbnN0IGNsaWNrZWRTbGlkZSA9IHRodW1ic1N3aXBlci5jbGlja2VkU2xpZGU7XG4gICAgaWYgKGNsaWNrZWRTbGlkZSAmJiBjbGlja2VkU2xpZGUuY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcykpIHJldHVybjtcbiAgICBpZiAodHlwZW9mIGNsaWNrZWRJbmRleCA9PT0gJ3VuZGVmaW5lZCcgfHwgY2xpY2tlZEluZGV4ID09PSBudWxsKSByZXR1cm47XG4gICAgbGV0IHNsaWRlVG9JbmRleDtcbiAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzbGlkZVRvSW5kZXggPSBwYXJzZUludCh0aHVtYnNTd2lwZXIuY2xpY2tlZFNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZVRvSW5kZXggPSBjbGlja2VkSW5kZXg7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvTG9vcChzbGlkZVRvSW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHRodW1iczogdGh1bWJzUGFyYW1zXG4gICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgaWYgKGluaXRpYWxpemVkKSByZXR1cm4gZmFsc2U7XG4gICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIGNvbnN0IFN3aXBlckNsYXNzID0gc3dpcGVyLmNvbnN0cnVjdG9yO1xuICAgIGlmICh0aHVtYnNQYXJhbXMuc3dpcGVyIGluc3RhbmNlb2YgU3dpcGVyQ2xhc3MpIHtcbiAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyID0gdGh1bWJzUGFyYW1zLnN3aXBlcjtcbiAgICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnRodW1icy5zd2lwZXIub3JpZ2luYWxQYXJhbXMsIHtcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmFzc2lnbihzd2lwZXIudGh1bWJzLnN3aXBlci5wYXJhbXMsIHtcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc2xpZGVUb0NsaWNrZWRTbGlkZTogZmFsc2VcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIudXBkYXRlKCk7XG4gICAgfSBlbHNlIGlmIChpc09iamVjdCh0aHVtYnNQYXJhbXMuc3dpcGVyKSkge1xuICAgICAgY29uc3QgdGh1bWJzU3dpcGVyUGFyYW1zID0gT2JqZWN0LmFzc2lnbih7fSwgdGh1bWJzUGFyYW1zLnN3aXBlcik7XG4gICAgICBPYmplY3QuYXNzaWduKHRodW1ic1N3aXBlclBhcmFtcywge1xuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBzd2lwZXIudGh1bWJzLnN3aXBlciA9IG5ldyBTd2lwZXJDbGFzcyh0aHVtYnNTd2lwZXJQYXJhbXMpO1xuICAgICAgc3dpcGVyQ3JlYXRlZCA9IHRydWU7XG4gICAgfVxuICAgIHN3aXBlci50aHVtYnMuc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLnBhcmFtcy50aHVtYnMudGh1bWJzQ29udGFpbmVyQ2xhc3MpO1xuICAgIHN3aXBlci50aHVtYnMuc3dpcGVyLm9uKCd0YXAnLCBvblRodW1iQ2xpY2spO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZShpbml0aWFsKSB7XG4gICAgY29uc3QgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgaWYgKCF0aHVtYnNTd2lwZXIgfHwgdGh1bWJzU3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGNvbnN0IHNsaWRlc1BlclZpZXcgPSB0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHRodW1ic1N3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuXG4gICAgLy8gQWN0aXZhdGUgdGh1bWJzXG4gICAgbGV0IHRodW1ic1RvQWN0aXZhdGUgPSAxO1xuICAgIGNvbnN0IHRodW1iQWN0aXZlQ2xhc3MgPSBzd2lwZXIucGFyYW1zLnRodW1icy5zbGlkZVRodW1iQWN0aXZlQ2xhc3M7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEgJiYgIXN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHRodW1ic1RvQWN0aXZhdGUgPSBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLnBhcmFtcy50aHVtYnMubXVsdGlwbGVBY3RpdmVUaHVtYnMpIHtcbiAgICAgIHRodW1ic1RvQWN0aXZhdGUgPSAxO1xuICAgIH1cbiAgICB0aHVtYnNUb0FjdGl2YXRlID0gTWF0aC5mbG9vcih0aHVtYnNUb0FjdGl2YXRlKTtcbiAgICB0aHVtYnNTd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiBzbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUodGh1bWJBY3RpdmVDbGFzcykpO1xuICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3AgfHwgdGh1bWJzU3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHRodW1ic1N3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRodW1ic1RvQWN0aXZhdGU7IGkgKz0gMSkge1xuICAgICAgICBlbGVtZW50Q2hpbGRyZW4odGh1bWJzU3dpcGVyLnNsaWRlc0VsLCBgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzd2lwZXIucmVhbEluZGV4ICsgaX1cIl1gKS5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICAgIHNsaWRlRWwuY2xhc3NMaXN0LmFkZCh0aHVtYkFjdGl2ZUNsYXNzKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGh1bWJzVG9BY3RpdmF0ZTsgaSArPSAxKSB7XG4gICAgICAgIGlmICh0aHVtYnNTd2lwZXIuc2xpZGVzW3N3aXBlci5yZWFsSW5kZXggKyBpXSkge1xuICAgICAgICAgIHRodW1ic1N3aXBlci5zbGlkZXNbc3dpcGVyLnJlYWxJbmRleCArIGldLmNsYXNzTGlzdC5hZGQodGh1bWJBY3RpdmVDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYXV0b1Njcm9sbE9mZnNldCA9IHN3aXBlci5wYXJhbXMudGh1bWJzLmF1dG9TY3JvbGxPZmZzZXQ7XG4gICAgY29uc3QgdXNlT2Zmc2V0ID0gYXV0b1Njcm9sbE9mZnNldCAmJiAhdGh1bWJzU3dpcGVyLnBhcmFtcy5sb29wO1xuICAgIGlmIChzd2lwZXIucmVhbEluZGV4ICE9PSB0aHVtYnNTd2lwZXIucmVhbEluZGV4IHx8IHVzZU9mZnNldCkge1xuICAgICAgY29uc3QgY3VycmVudFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgbGV0IG5ld1RodW1ic0luZGV4O1xuICAgICAgbGV0IGRpcmVjdGlvbjtcbiAgICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgY29uc3QgbmV3VGh1bWJzU2xpZGUgPSB0aHVtYnNTd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpID09PSBgJHtzd2lwZXIucmVhbEluZGV4fWApWzBdO1xuICAgICAgICBuZXdUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5zbGlkZXMuaW5kZXhPZihuZXdUaHVtYnNTbGlkZSk7XG4gICAgICAgIGRpcmVjdGlvbiA9IHN3aXBlci5hY3RpdmVJbmRleCA+IHN3aXBlci5wcmV2aW91c0luZGV4ID8gJ25leHQnIDogJ3ByZXYnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBzd2lwZXIucmVhbEluZGV4O1xuICAgICAgICBkaXJlY3Rpb24gPSBuZXdUaHVtYnNJbmRleCA+IHN3aXBlci5wcmV2aW91c0luZGV4ID8gJ25leHQnIDogJ3ByZXYnO1xuICAgICAgfVxuICAgICAgaWYgKHVzZU9mZnNldCkge1xuICAgICAgICBuZXdUaHVtYnNJbmRleCArPSBkaXJlY3Rpb24gPT09ICduZXh0JyA/IGF1dG9TY3JvbGxPZmZzZXQgOiAtMSAqIGF1dG9TY3JvbGxPZmZzZXQ7XG4gICAgICB9XG4gICAgICBpZiAodGh1bWJzU3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzICYmIHRodW1ic1N3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5pbmRleE9mKG5ld1RodW1ic0luZGV4KSA8IDApIHtcbiAgICAgICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgICBpZiAobmV3VGh1bWJzSW5kZXggPiBjdXJyZW50VGh1bWJzSW5kZXgpIHtcbiAgICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gbmV3VGh1bWJzSW5kZXggLSBNYXRoLmZsb29yKHNsaWRlc1BlclZpZXcgLyAyKSArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gbmV3VGh1bWJzSW5kZXggKyBNYXRoLmZsb29yKHNsaWRlc1BlclZpZXcgLyAyKSAtIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG5ld1RodW1ic0luZGV4ID4gY3VycmVudFRodW1ic0luZGV4ICYmIHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDEpIHtcbiAgICAgICAgICAvLyBuZXdUaHVtYnNJbmRleCA9IG5ld1RodW1ic0luZGV4IC0gc2xpZGVzUGVyVmlldyArIDE7XG4gICAgICAgIH1cbiAgICAgICAgdGh1bWJzU3dpcGVyLnNsaWRlVG8obmV3VGh1bWJzSW5kZXgsIGluaXRpYWwgPyAwIDogdW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgb24oJ2JlZm9yZUluaXQnLCAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgdGh1bWJzXG4gICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgaWYgKCF0aHVtYnMgfHwgIXRodW1icy5zd2lwZXIpIHJldHVybjtcbiAgICBpZiAodHlwZW9mIHRodW1icy5zd2lwZXIgPT09ICdzdHJpbmcnIHx8IHRodW1icy5zd2lwZXIgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgICAgY29uc3QgZ2V0VGh1bWJzRWxlbWVudEFuZEluaXQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRodW1ic0VsZW1lbnQgPSB0eXBlb2YgdGh1bWJzLnN3aXBlciA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRodW1icy5zd2lwZXIpIDogdGh1bWJzLnN3aXBlcjtcbiAgICAgICAgaWYgKHRodW1ic0VsZW1lbnQgJiYgdGh1bWJzRWxlbWVudC5zd2lwZXIpIHtcbiAgICAgICAgICB0aHVtYnMuc3dpcGVyID0gdGh1bWJzRWxlbWVudC5zd2lwZXI7XG4gICAgICAgICAgaW5pdCgpO1xuICAgICAgICAgIHVwZGF0ZSh0cnVlKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aHVtYnNFbGVtZW50KSB7XG4gICAgICAgICAgY29uc3Qgb25UaHVtYnNTd2lwZXIgPSBlID0+IHtcbiAgICAgICAgICAgIHRodW1icy5zd2lwZXIgPSBlLmRldGFpbFswXTtcbiAgICAgICAgICAgIHRodW1ic0VsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5pdCcsIG9uVGh1bWJzU3dpcGVyKTtcbiAgICAgICAgICAgIGluaXQoKTtcbiAgICAgICAgICAgIHVwZGF0ZSh0cnVlKTtcbiAgICAgICAgICAgIHRodW1icy5zd2lwZXIudXBkYXRlKCk7XG4gICAgICAgICAgICBzd2lwZXIudXBkYXRlKCk7XG4gICAgICAgICAgfTtcbiAgICAgICAgICB0aHVtYnNFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2luaXQnLCBvblRodW1ic1N3aXBlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRodW1ic0VsZW1lbnQ7XG4gICAgICB9O1xuICAgICAgY29uc3Qgd2F0Y2hGb3JUaHVtYnNUb0FwcGVhciA9ICgpID0+IHtcbiAgICAgICAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgY29uc3QgdGh1bWJzRWxlbWVudCA9IGdldFRodW1ic0VsZW1lbnRBbmRJbml0KCk7XG4gICAgICAgIGlmICghdGh1bWJzRWxlbWVudCkge1xuICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh3YXRjaEZvclRodW1ic1RvQXBwZWFyKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh3YXRjaEZvclRodW1ic1RvQXBwZWFyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdCgpO1xuICAgICAgdXBkYXRlKHRydWUpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdzbGlkZUNoYW5nZSB1cGRhdGUgcmVzaXplIG9ic2VydmVyVXBkYXRlJywgKCkgPT4ge1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zaXRpb24nLCAoX3MsIGR1cmF0aW9uKSA9PiB7XG4gICAgY29uc3QgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgaWYgKCF0aHVtYnNTd2lwZXIgfHwgdGh1bWJzU3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIHRodW1ic1N3aXBlci5zZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfSk7XG4gIG9uKCdiZWZvcmVEZXN0cm95JywgKCkgPT4ge1xuICAgIGNvbnN0IHRodW1ic1N3aXBlciA9IHN3aXBlci50aHVtYnMuc3dpcGVyO1xuICAgIGlmICghdGh1bWJzU3dpcGVyIHx8IHRodW1ic1N3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyQ3JlYXRlZCkge1xuICAgICAgdGh1bWJzU3dpcGVyLmRlc3Ryb3koKTtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuYXNzaWduKHN3aXBlci50aHVtYnMsIHtcbiAgICBpbml0LFxuICAgIHVwZGF0ZVxuICB9KTtcbn0iLCJpbXBvcnQgeyBlbGVtZW50VHJhbnNpdGlvbkVuZCwgbm93IH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZyZWVNb2RlKHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIGVtaXQsXG4gIG9uY2Vcbn0pIHtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBmcmVlTW9kZToge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBtb21lbnR1bTogdHJ1ZSxcbiAgICAgIG1vbWVudHVtUmF0aW86IDEsXG4gICAgICBtb21lbnR1bUJvdW5jZTogdHJ1ZSxcbiAgICAgIG1vbWVudHVtQm91bmNlUmF0aW86IDEsXG4gICAgICBtb21lbnR1bVZlbG9jaXR5UmF0aW86IDEsXG4gICAgICBzdGlja3k6IGZhbHNlLFxuICAgICAgbWluaW11bVZlbG9jaXR5OiAwLjAyXG4gICAgfVxuICB9KTtcbiAgZnVuY3Rpb24gb25Ub3VjaFN0YXJ0KCkge1xuICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS52ZWxvY2l0aWVzLmxlbmd0aCA9IDA7XG4gICAgc3dpcGVyLmZyZWVNb2RlLm9uVG91Y2hFbmQoe1xuICAgICAgY3VycmVudFBvczogc3dpcGVyLnJ0bCA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG9uVG91Y2hNb3ZlKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHRvdWNoRXZlbnRzRGF0YTogZGF0YSxcbiAgICAgIHRvdWNoZXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIC8vIFZlbG9jaXR5XG4gICAgaWYgKGRhdGEudmVsb2NpdGllcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGRhdGEudmVsb2NpdGllcy5wdXNoKHtcbiAgICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3N0YXJ0WCcgOiAnc3RhcnRZJ10sXG4gICAgICAgIHRpbWU6IGRhdGEudG91Y2hTdGFydFRpbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBkYXRhLnZlbG9jaXRpZXMucHVzaCh7XG4gICAgICBwb3NpdGlvbjogdG91Y2hlc1tzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnY3VycmVudFgnIDogJ2N1cnJlbnRZJ10sXG4gICAgICB0aW1lOiBub3coKVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG9uVG91Y2hFbmQoe1xuICAgIGN1cnJlbnRQb3NcbiAgfSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmFtcyxcbiAgICAgIHdyYXBwZXJFbCxcbiAgICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgICAgc25hcEdyaWQsXG4gICAgICB0b3VjaEV2ZW50c0RhdGE6IGRhdGFcbiAgICB9ID0gc3dpcGVyO1xuICAgIC8vIFRpbWUgZGlmZlxuICAgIGNvbnN0IHRvdWNoRW5kVGltZSA9IG5vdygpO1xuICAgIGNvbnN0IHRpbWVEaWZmID0gdG91Y2hFbmRUaW1lIC0gZGF0YS50b3VjaFN0YXJ0VGltZTtcbiAgICBpZiAoY3VycmVudFBvcyA8IC1zd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjdXJyZW50UG9zID4gLXN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXMubGVuZ3RoIDwgc25hcEdyaWQubGVuZ3RoKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNuYXBHcmlkLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5mcmVlTW9kZS5tb21lbnR1bSkge1xuICAgICAgaWYgKGRhdGEudmVsb2NpdGllcy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbnN0IGxhc3RNb3ZlRXZlbnQgPSBkYXRhLnZlbG9jaXRpZXMucG9wKCk7XG4gICAgICAgIGNvbnN0IHZlbG9jaXR5RXZlbnQgPSBkYXRhLnZlbG9jaXRpZXMucG9wKCk7XG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gbGFzdE1vdmVFdmVudC5wb3NpdGlvbiAtIHZlbG9jaXR5RXZlbnQucG9zaXRpb247XG4gICAgICAgIGNvbnN0IHRpbWUgPSBsYXN0TW92ZUV2ZW50LnRpbWUgLSB2ZWxvY2l0eUV2ZW50LnRpbWU7XG4gICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IGRpc3RhbmNlIC8gdGltZTtcbiAgICAgICAgc3dpcGVyLnZlbG9jaXR5IC89IDI7XG4gICAgICAgIGlmIChNYXRoLmFicyhzd2lwZXIudmVsb2NpdHkpIDwgcGFyYW1zLmZyZWVNb2RlLm1pbmltdW1WZWxvY2l0eSkge1xuICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdGhpcyBpbXBsaWVzIHRoYXQgdGhlIHVzZXIgc3RvcHBlZCBtb3ZpbmcgYSBmaW5nZXIgdGhlbiByZWxlYXNlZC5cbiAgICAgICAgLy8gVGhlcmUgd291bGQgYmUgbm8gZXZlbnRzIHdpdGggZGlzdGFuY2UgemVybywgc28gdGhlIGxhc3QgZXZlbnQgaXMgc3RhbGUuXG4gICAgICAgIGlmICh0aW1lID4gMTUwIHx8IG5vdygpIC0gbGFzdE1vdmVFdmVudC50aW1lID4gMzAwKSB7XG4gICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgIH1cbiAgICAgIHN3aXBlci52ZWxvY2l0eSAqPSBwYXJhbXMuZnJlZU1vZGUubW9tZW50dW1WZWxvY2l0eVJhdGlvO1xuICAgICAgZGF0YS52ZWxvY2l0aWVzLmxlbmd0aCA9IDA7XG4gICAgICBsZXQgbW9tZW50dW1EdXJhdGlvbiA9IDEwMDAgKiBwYXJhbXMuZnJlZU1vZGUubW9tZW50dW1SYXRpbztcbiAgICAgIGNvbnN0IG1vbWVudHVtRGlzdGFuY2UgPSBzd2lwZXIudmVsb2NpdHkgKiBtb21lbnR1bUR1cmF0aW9uO1xuICAgICAgbGV0IG5ld1Bvc2l0aW9uID0gc3dpcGVyLnRyYW5zbGF0ZSArIG1vbWVudHVtRGlzdGFuY2U7XG4gICAgICBpZiAocnRsKSBuZXdQb3NpdGlvbiA9IC1uZXdQb3NpdGlvbjtcbiAgICAgIGxldCBkb0JvdW5jZSA9IGZhbHNlO1xuICAgICAgbGV0IGFmdGVyQm91bmNlUG9zaXRpb247XG4gICAgICBjb25zdCBib3VuY2VBbW91bnQgPSBNYXRoLmFicyhzd2lwZXIudmVsb2NpdHkpICogMjAgKiBwYXJhbXMuZnJlZU1vZGUubW9tZW50dW1Cb3VuY2VSYXRpbztcbiAgICAgIGxldCBuZWVkc0xvb3BGaXg7XG4gICAgICBpZiAobmV3UG9zaXRpb24gPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZS5tb21lbnR1bUJvdW5jZSkge1xuICAgICAgICAgIGlmIChuZXdQb3NpdGlvbiArIHN3aXBlci5tYXhUcmFuc2xhdGUoKSA8IC1ib3VuY2VBbW91bnQpIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gYm91bmNlQW1vdW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZnRlckJvdW5jZVBvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICAgIGRvQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMubG9vcCAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXMpIG5lZWRzTG9vcEZpeCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKG5ld1Bvc2l0aW9uID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGUubW9tZW50dW1Cb3VuY2UpIHtcbiAgICAgICAgICBpZiAobmV3UG9zaXRpb24gLSBzd2lwZXIubWluVHJhbnNsYXRlKCkgPiBib3VuY2VBbW91bnQpIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgYm91bmNlQW1vdW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZnRlckJvdW5jZVBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgICAgIGRvQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMubG9vcCAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXMpIG5lZWRzTG9vcEZpeCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZS5zdGlja3kpIHtcbiAgICAgICAgbGV0IG5leHRTbGlkZTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBzbmFwR3JpZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIGlmIChzbmFwR3JpZFtqXSA+IC1uZXdQb3NpdGlvbikge1xuICAgICAgICAgICAgbmV4dFNsaWRlID0gajtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoTWF0aC5hYnMoc25hcEdyaWRbbmV4dFNsaWRlXSAtIG5ld1Bvc2l0aW9uKSA8IE1hdGguYWJzKHNuYXBHcmlkW25leHRTbGlkZSAtIDFdIC0gbmV3UG9zaXRpb24pIHx8IHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzbmFwR3JpZFtuZXh0U2xpZGVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc25hcEdyaWRbbmV4dFNsaWRlIC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgbmV3UG9zaXRpb24gPSAtbmV3UG9zaXRpb247XG4gICAgICB9XG4gICAgICBpZiAobmVlZHNMb29wRml4KSB7XG4gICAgICAgIG9uY2UoJ3RyYW5zaXRpb25FbmQnLCAoKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICAvLyBGaXggZHVyYXRpb25cbiAgICAgIGlmIChzd2lwZXIudmVsb2NpdHkgIT09IDApIHtcbiAgICAgICAgaWYgKHJ0bCkge1xuICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLmFicygoLW5ld1Bvc2l0aW9uIC0gc3dpcGVyLnRyYW5zbGF0ZSkgLyBzd2lwZXIudmVsb2NpdHkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLmFicygobmV3UG9zaXRpb24gLSBzd2lwZXIudHJhbnNsYXRlKSAvIHN3aXBlci52ZWxvY2l0eSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZS5zdGlja3kpIHtcbiAgICAgICAgICAvLyBJZiBmcmVlTW9kZS5zdGlja3kgaXMgYWN0aXZlIGFuZCB0aGUgdXNlciBlbmRzIGEgc3dpcGUgd2l0aCBhIHNsb3ctdmVsb2NpdHlcbiAgICAgICAgICAvLyBldmVudCwgdGhlbiBkdXJhdGlvbnMgY2FuIGJlIDIwKyBzZWNvbmRzIHRvIHNsaWRlIG9uZSAob3IgemVybyEpIHNsaWRlcy5cbiAgICAgICAgICAvLyBJdCdzIGVhc3kgdG8gc2VlIHRoaXMgd2hlbiBzaW11bGF0aW5nIHRvdWNoIHdpdGggbW91c2UgZXZlbnRzLiBUbyBmaXggdGhpcyxcbiAgICAgICAgICAvLyBsaW1pdCBzaW5nbGUtc2xpZGUgc3dpcGVzIHRvIHRoZSBkZWZhdWx0IHNsaWRlIGR1cmF0aW9uLiBUaGlzIGFsc28gaGFzIHRoZVxuICAgICAgICAgIC8vIG5pY2Ugc2lkZSBlZmZlY3Qgb2YgbWF0Y2hpbmcgc2xpZGUgc3BlZWQgaWYgdGhlIHVzZXIgc3RvcHBlZCBtb3ZpbmcgYmVmb3JlXG4gICAgICAgICAgLy8gbGlmdGluZyBmaW5nZXIgb3IgbW91c2UgdnMuIG1vdmluZyBzbG93bHkgYmVmb3JlIGxpZnRpbmcgdGhlIGZpbmdlci9tb3VzZS5cbiAgICAgICAgICAvLyBGb3IgZmFzdGVyIHN3aXBlcywgYWxzbyBhcHBseSBsaW1pdHMgKGFsYmVpdCBoaWdoZXIgb25lcykuXG4gICAgICAgICAgY29uc3QgbW92ZURpc3RhbmNlID0gTWF0aC5hYnMoKHJ0bCA/IC1uZXdQb3NpdGlvbiA6IG5ld1Bvc2l0aW9uKSAtIHN3aXBlci50cmFuc2xhdGUpO1xuICAgICAgICAgIGNvbnN0IGN1cnJlbnRTbGlkZVNpemUgPSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW3N3aXBlci5hY3RpdmVJbmRleF07XG4gICAgICAgICAgaWYgKG1vdmVEaXN0YW5jZSA8IGN1cnJlbnRTbGlkZVNpemUpIHtcbiAgICAgICAgICAgIG1vbWVudHVtRHVyYXRpb24gPSBwYXJhbXMuc3BlZWQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChtb3ZlRGlzdGFuY2UgPCAyICogY3VycmVudFNsaWRlU2l6ZSkge1xuICAgICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IHBhcmFtcy5zcGVlZCAqIDEuNTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IHBhcmFtcy5zcGVlZCAqIDIuNTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlLnN0aWNreSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZS5tb21lbnR1bUJvdW5jZSAmJiBkb0JvdW5jZSkge1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoYWZ0ZXJCb3VuY2VQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydCh0cnVlLCBzd2lwZXIuc3dpcGVEaXJlY3Rpb24pO1xuICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgZWxlbWVudFRyYW5zaXRpb25FbmQod3JhcHBlckVsLCAoKSA9PiB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhZGF0YS5hbGxvd01vbWVudHVtQm91bmNlKSByZXR1cm47XG4gICAgICAgICAgZW1pdCgnbW9tZW50dW1Cb3VuY2UnKTtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihwYXJhbXMuc3BlZWQpO1xuICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShhZnRlckJvdW5jZVBvc2l0aW9uKTtcbiAgICAgICAgICAgIGVsZW1lbnRUcmFuc2l0aW9uRW5kKHdyYXBwZXJFbCwgKCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci52ZWxvY2l0eSkge1xuICAgICAgICBlbWl0KCdfZnJlZU1vZGVOb01vbWVudHVtUmVsZWFzZScpO1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3UG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTtcbiAgICAgICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgZWxlbWVudFRyYW5zaXRpb25FbmQod3JhcHBlckVsLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3UG9zaXRpb24pO1xuICAgICAgfVxuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlLnN0aWNreSkge1xuICAgICAgc3dpcGVyLnNsaWRlVG9DbG9zZXN0KCk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAgIGVtaXQoJ19mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlJyk7XG4gICAgfVxuICAgIGlmICghcGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtIHx8IHRpbWVEaWZmID49IHBhcmFtcy5sb25nU3dpcGVzTXMpIHtcbiAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cbiAgfVxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIGZyZWVNb2RlOiB7XG4gICAgICBvblRvdWNoU3RhcnQsXG4gICAgICBvblRvdWNoTW92ZSxcbiAgICAgIG9uVG91Y2hFbmRcbiAgICB9XG4gIH0pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEdyaWQoe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtc1xufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGdyaWQ6IHtcbiAgICAgIHJvd3M6IDEsXG4gICAgICBmaWxsOiAnY29sdW1uJ1xuICAgIH1cbiAgfSk7XG4gIGxldCBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzO1xuICBsZXQgc2xpZGVzUGVyUm93O1xuICBsZXQgbnVtRnVsbENvbHVtbnM7XG4gIGNvbnN0IGluaXRTbGlkZXMgPSBzbGlkZXNMZW5ndGggPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlc1BlclZpZXdcbiAgICB9ID0gc3dpcGVyLnBhcmFtcztcbiAgICBjb25zdCB7XG4gICAgICByb3dzLFxuICAgICAgZmlsbFxuICAgIH0gPSBzd2lwZXIucGFyYW1zLmdyaWQ7XG4gICAgc2xpZGVzUGVyUm93ID0gc2xpZGVzTnVtYmVyRXZlblRvUm93cyAvIHJvd3M7XG4gICAgbnVtRnVsbENvbHVtbnMgPSBNYXRoLmZsb29yKHNsaWRlc0xlbmd0aCAvIHJvd3MpO1xuICAgIGlmIChNYXRoLmZsb29yKHNsaWRlc0xlbmd0aCAvIHJvd3MpID09PSBzbGlkZXNMZW5ndGggLyByb3dzKSB7XG4gICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gc2xpZGVzTGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHJvd3MpICogcm93cztcbiAgICB9XG4gICAgaWYgKHNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiBmaWxsID09PSAncm93Jykge1xuICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IE1hdGgubWF4KHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MsIHNsaWRlc1BlclZpZXcgKiByb3dzKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHVwZGF0ZVNsaWRlID0gKGksIHNsaWRlLCBzbGlkZXNMZW5ndGgsIGdldERpcmVjdGlvbkxhYmVsKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzUGVyR3JvdXAsXG4gICAgICBzcGFjZUJldHdlZW5cbiAgICB9ID0gc3dpcGVyLnBhcmFtcztcbiAgICBjb25zdCB7XG4gICAgICByb3dzLFxuICAgICAgZmlsbFxuICAgIH0gPSBzd2lwZXIucGFyYW1zLmdyaWQ7XG4gICAgLy8gU2V0IHNsaWRlcyBvcmRlclxuICAgIGxldCBuZXdTbGlkZU9yZGVySW5kZXg7XG4gICAgbGV0IGNvbHVtbjtcbiAgICBsZXQgcm93O1xuICAgIGlmIChmaWxsID09PSAncm93JyAmJiBzbGlkZXNQZXJHcm91cCA+IDEpIHtcbiAgICAgIGNvbnN0IGdyb3VwSW5kZXggPSBNYXRoLmZsb29yKGkgLyAoc2xpZGVzUGVyR3JvdXAgKiByb3dzKSk7XG4gICAgICBjb25zdCBzbGlkZUluZGV4SW5Hcm91cCA9IGkgLSByb3dzICogc2xpZGVzUGVyR3JvdXAgKiBncm91cEluZGV4O1xuICAgICAgY29uc3QgY29sdW1uc0luR3JvdXAgPSBncm91cEluZGV4ID09PSAwID8gc2xpZGVzUGVyR3JvdXAgOiBNYXRoLm1pbihNYXRoLmNlaWwoKHNsaWRlc0xlbmd0aCAtIGdyb3VwSW5kZXggKiByb3dzICogc2xpZGVzUGVyR3JvdXApIC8gcm93cyksIHNsaWRlc1Blckdyb3VwKTtcbiAgICAgIHJvdyA9IE1hdGguZmxvb3Ioc2xpZGVJbmRleEluR3JvdXAgLyBjb2x1bW5zSW5Hcm91cCk7XG4gICAgICBjb2x1bW4gPSBzbGlkZUluZGV4SW5Hcm91cCAtIHJvdyAqIGNvbHVtbnNJbkdyb3VwICsgZ3JvdXBJbmRleCAqIHNsaWRlc1Blckdyb3VwO1xuICAgICAgbmV3U2xpZGVPcmRlckluZGV4ID0gY29sdW1uICsgcm93ICogc2xpZGVzTnVtYmVyRXZlblRvUm93cyAvIHJvd3M7XG4gICAgICBzbGlkZS5zdHlsZS5vcmRlciA9IG5ld1NsaWRlT3JkZXJJbmRleDtcbiAgICB9IGVsc2UgaWYgKGZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICBjb2x1bW4gPSBNYXRoLmZsb29yKGkgLyByb3dzKTtcbiAgICAgIHJvdyA9IGkgLSBjb2x1bW4gKiByb3dzO1xuICAgICAgaWYgKGNvbHVtbiA+IG51bUZ1bGxDb2x1bW5zIHx8IGNvbHVtbiA9PT0gbnVtRnVsbENvbHVtbnMgJiYgcm93ID09PSByb3dzIC0gMSkge1xuICAgICAgICByb3cgKz0gMTtcbiAgICAgICAgaWYgKHJvdyA+PSByb3dzKSB7XG4gICAgICAgICAgcm93ID0gMDtcbiAgICAgICAgICBjb2x1bW4gKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByb3cgPSBNYXRoLmZsb29yKGkgLyBzbGlkZXNQZXJSb3cpO1xuICAgICAgY29sdW1uID0gaSAtIHJvdyAqIHNsaWRlc1BlclJvdztcbiAgICB9XG4gICAgc2xpZGUuc3R5bGVbZ2V0RGlyZWN0aW9uTGFiZWwoJ21hcmdpbi10b3AnKV0gPSByb3cgIT09IDAgPyBzcGFjZUJldHdlZW4gJiYgYCR7c3BhY2VCZXR3ZWVufXB4YCA6ICcnO1xuICB9O1xuICBjb25zdCB1cGRhdGVXcmFwcGVyU2l6ZSA9IChzbGlkZVNpemUsIHNuYXBHcmlkLCBnZXREaXJlY3Rpb25MYWJlbCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHNwYWNlQmV0d2VlbixcbiAgICAgIGNlbnRlcmVkU2xpZGVzLFxuICAgICAgcm91bmRMZW5ndGhzXG4gICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgY29uc3Qge1xuICAgICAgcm93c1xuICAgIH0gPSBzd2lwZXIucGFyYW1zLmdyaWQ7XG4gICAgc3dpcGVyLnZpcnR1YWxTaXplID0gKHNsaWRlU2l6ZSArIHNwYWNlQmV0d2VlbikgKiBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzO1xuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IE1hdGguY2VpbChzd2lwZXIudmlydHVhbFNpemUgLyByb3dzKSAtIHNwYWNlQmV0d2VlbjtcbiAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlW2dldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHNwYWNlQmV0d2Vlbn1weGA7XG4gICAgaWYgKGNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBjb25zdCBuZXdTbGlkZXNHcmlkID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNuYXBHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGxldCBzbGlkZXNHcmlkSXRlbSA9IHNuYXBHcmlkW2ldO1xuICAgICAgICBpZiAocm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgICBpZiAoc25hcEdyaWRbaV0gPCBzd2lwZXIudmlydHVhbFNpemUgKyBzbmFwR3JpZFswXSkgbmV3U2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgIH1cbiAgICAgIHNuYXBHcmlkLnNwbGljZSgwLCBzbmFwR3JpZC5sZW5ndGgpO1xuICAgICAgc25hcEdyaWQucHVzaCguLi5uZXdTbGlkZXNHcmlkKTtcbiAgICB9XG4gIH07XG4gIHN3aXBlci5ncmlkID0ge1xuICAgIGluaXRTbGlkZXMsXG4gICAgdXBkYXRlU2xpZGUsXG4gICAgdXBkYXRlV3JhcHBlclNpemVcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcHBlbmRTbGlkZShzbGlkZXMpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgfVxuICBjb25zdCBhcHBlbmRFbGVtZW50ID0gc2xpZGVFbCA9PiB7XG4gICAgaWYgKHR5cGVvZiBzbGlkZUVsID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgdGVtcERPTSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGVtcERPTS5pbm5lckhUTUwgPSBzbGlkZUVsO1xuICAgICAgc2xpZGVzRWwuYXBwZW5kKHRlbXBET00uY2hpbGRyZW5bMF0pO1xuICAgICAgdGVtcERPTS5pbm5lckhUTUwgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVzRWwuYXBwZW5kKHNsaWRlRWwpO1xuICAgIH1cbiAgfTtcbiAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc2xpZGVzW2ldKSBhcHBlbmRFbGVtZW50KHNsaWRlc1tpXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFwcGVuZEVsZW1lbnQoc2xpZGVzKTtcbiAgfVxuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cbiAgaWYgKCFwYXJhbXMub2JzZXJ2ZXIgfHwgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZXBlbmRTbGlkZShzbGlkZXMpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBhY3RpdmVJbmRleCxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgfVxuICBsZXQgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIDE7XG4gIGNvbnN0IHByZXBlbmRFbGVtZW50ID0gc2xpZGVFbCA9PiB7XG4gICAgaWYgKHR5cGVvZiBzbGlkZUVsID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgdGVtcERPTSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGVtcERPTS5pbm5lckhUTUwgPSBzbGlkZUVsO1xuICAgICAgc2xpZGVzRWwucHJlcGVuZCh0ZW1wRE9NLmNoaWxkcmVuWzBdKTtcbiAgICAgIHRlbXBET00uaW5uZXJIVE1MID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlc0VsLnByZXBlbmQoc2xpZGVFbCk7XG4gICAgfVxuICB9O1xuICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzbGlkZXNbaV0pIHByZXBlbmRFbGVtZW50KHNsaWRlc1tpXSk7XG4gICAgfVxuICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyBzbGlkZXMubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgIHByZXBlbmRFbGVtZW50KHNsaWRlcyk7XG4gIH1cbiAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG4gIGlmICghcGFyYW1zLm9ic2VydmVyIHx8IHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cbiAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRTbGlkZShpbmRleCwgc2xpZGVzKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgYWN0aXZlSW5kZXgsXG4gICAgc2xpZGVzRWxcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGFjdGl2ZUluZGV4QnVmZmVyID0gYWN0aXZlSW5kZXg7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGFjdGl2ZUluZGV4QnVmZmVyIC09IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICB9XG4gIGNvbnN0IGJhc2VMZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgaWYgKGluZGV4IDw9IDApIHtcbiAgICBzd2lwZXIucHJlcGVuZFNsaWRlKHNsaWRlcyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChpbmRleCA+PSBiYXNlTGVuZ3RoKSB7XG4gICAgc3dpcGVyLmFwcGVuZFNsaWRlKHNsaWRlcyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyID4gaW5kZXggPyBhY3RpdmVJbmRleEJ1ZmZlciArIDEgOiBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgY29uc3Qgc2xpZGVzQnVmZmVyID0gW107XG4gIGZvciAobGV0IGkgPSBiYXNlTGVuZ3RoIC0gMTsgaSA+PSBpbmRleDsgaSAtPSAxKSB7XG4gICAgY29uc3QgY3VycmVudFNsaWRlID0gc3dpcGVyLnNsaWRlc1tpXTtcbiAgICBjdXJyZW50U2xpZGUucmVtb3ZlKCk7XG4gICAgc2xpZGVzQnVmZmVyLnVuc2hpZnQoY3VycmVudFNsaWRlKTtcbiAgfVxuICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzbGlkZXNbaV0pIHNsaWRlc0VsLmFwcGVuZChzbGlkZXNbaV0pO1xuICAgIH1cbiAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4QnVmZmVyID4gaW5kZXggPyBhY3RpdmVJbmRleEJ1ZmZlciArIHNsaWRlcy5sZW5ndGggOiBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgfSBlbHNlIHtcbiAgICBzbGlkZXNFbC5hcHBlbmQoc2xpZGVzKTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0J1ZmZlci5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc0VsLmFwcGVuZChzbGlkZXNCdWZmZXJbaV0pO1xuICB9XG4gIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgfVxuICBpZiAoIXBhcmFtcy5vYnNlcnZlciB8fCBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4ICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgYWN0aXZlSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGFjdGl2ZUluZGV4QnVmZmVyID0gYWN0aXZlSW5kZXg7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGFjdGl2ZUluZGV4QnVmZmVyIC09IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gIH1cbiAgbGV0IG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXI7XG4gIGxldCBpbmRleFRvUmVtb3ZlO1xuICBpZiAodHlwZW9mIHNsaWRlc0luZGV4ZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlc0luZGV4ZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0luZGV4ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGluZGV4VG9SZW1vdmUgPSBzbGlkZXNJbmRleGVzW2ldO1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0ucmVtb3ZlKCk7XG4gICAgICBpZiAoaW5kZXhUb1JlbW92ZSA8IG5ld0FjdGl2ZUluZGV4KSBuZXdBY3RpdmVJbmRleCAtPSAxO1xuICAgIH1cbiAgICBuZXdBY3RpdmVJbmRleCA9IE1hdGgubWF4KG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgfSBlbHNlIHtcbiAgICBpbmRleFRvUmVtb3ZlID0gc2xpZGVzSW5kZXhlcztcbiAgICBpZiAoc3dpcGVyLnNsaWRlc1tpbmRleFRvUmVtb3ZlXSkgc3dpcGVyLnNsaWRlc1tpbmRleFRvUmVtb3ZlXS5yZW1vdmUoKTtcbiAgICBpZiAoaW5kZXhUb1JlbW92ZSA8IG5ld0FjdGl2ZUluZGV4KSBuZXdBY3RpdmVJbmRleCAtPSAxO1xuICAgIG5ld0FjdGl2ZUluZGV4ID0gTWF0aC5tYXgobmV3QWN0aXZlSW5kZXgsIDApO1xuICB9XG4gIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgfVxuICBpZiAoIXBhcmFtcy5vYnNlcnZlciB8fCBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4ICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG4gIH1cbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW1vdmVBbGxTbGlkZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICB9XG4gIHN3aXBlci5yZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKTtcbn0iLCJpbXBvcnQgYXBwZW5kU2xpZGUgZnJvbSAnLi9tZXRob2RzL2FwcGVuZFNsaWRlLmpzJztcbmltcG9ydCBwcmVwZW5kU2xpZGUgZnJvbSAnLi9tZXRob2RzL3ByZXBlbmRTbGlkZS5qcyc7XG5pbXBvcnQgYWRkU2xpZGUgZnJvbSAnLi9tZXRob2RzL2FkZFNsaWRlLmpzJztcbmltcG9ydCByZW1vdmVTbGlkZSBmcm9tICcuL21ldGhvZHMvcmVtb3ZlU2xpZGUuanMnO1xuaW1wb3J0IHJlbW92ZUFsbFNsaWRlcyBmcm9tICcuL21ldGhvZHMvcmVtb3ZlQWxsU2xpZGVzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1hbmlwdWxhdGlvbih7XG4gIHN3aXBlclxufSkge1xuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIGFwcGVuZFNsaWRlOiBhcHBlbmRTbGlkZS5iaW5kKHN3aXBlciksXG4gICAgcHJlcGVuZFNsaWRlOiBwcmVwZW5kU2xpZGUuYmluZChzd2lwZXIpLFxuICAgIGFkZFNsaWRlOiBhZGRTbGlkZS5iaW5kKHN3aXBlciksXG4gICAgcmVtb3ZlU2xpZGU6IHJlbW92ZVNsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICByZW1vdmVBbGxTbGlkZXM6IHJlbW92ZUFsbFNsaWRlcy5iaW5kKHN3aXBlcilcbiAgfSk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWZmZWN0SW5pdChwYXJhbXMpIHtcbiAgY29uc3Qge1xuICAgIGVmZmVjdCxcbiAgICBzd2lwZXIsXG4gICAgb24sXG4gICAgc2V0VHJhbnNsYXRlLFxuICAgIHNldFRyYW5zaXRpb24sXG4gICAgb3ZlcndyaXRlUGFyYW1zLFxuICAgIHBlcnNwZWN0aXZlLFxuICAgIHJlY3JlYXRlU2hhZG93cyxcbiAgICBnZXRFZmZlY3RQYXJhbXNcbiAgfSA9IHBhcmFtcztcbiAgb24oJ2JlZm9yZUluaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke2VmZmVjdH1gKTtcbiAgICBpZiAocGVyc3BlY3RpdmUgJiYgcGVyc3BlY3RpdmUoKSkge1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9M2RgKTtcbiAgICB9XG4gICAgY29uc3Qgb3ZlcndyaXRlUGFyYW1zUmVzdWx0ID0gb3ZlcndyaXRlUGFyYW1zID8gb3ZlcndyaXRlUGFyYW1zKCkgOiB7fTtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtc1Jlc3VsdCk7XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIub3JpZ2luYWxQYXJhbXMsIG92ZXJ3cml0ZVBhcmFtc1Jlc3VsdCk7XG4gIH0pO1xuICBvbignc2V0VHJhbnNsYXRlJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XG4gICAgc2V0VHJhbnNsYXRlKCk7XG4gIH0pO1xuICBvbignc2V0VHJhbnNpdGlvbicsIChfcywgZHVyYXRpb24pID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09IGVmZmVjdCkgcmV0dXJuO1xuICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICB9KTtcbiAgb24oJ3RyYW5zaXRpb25FbmQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICBpZiAocmVjcmVhdGVTaGFkb3dzKSB7XG4gICAgICBpZiAoIWdldEVmZmVjdFBhcmFtcyB8fCAhZ2V0RWZmZWN0UGFyYW1zKCkuc2xpZGVTaGFkb3dzKSByZXR1cm47XG4gICAgICAvLyByZW1vdmUgc2hhZG93c1xuICAgICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLmZvckVhY2goc2hhZG93RWwgPT4gc2hhZG93RWwucmVtb3ZlKCkpO1xuICAgICAgfSk7XG4gICAgICAvLyBjcmVhdGUgbmV3IG9uZVxuICAgICAgcmVjcmVhdGVTaGFkb3dzKCk7XG4gICAgfVxuICB9KTtcbiAgbGV0IHJlcXVpcmVVcGRhdGVPblZpcnR1YWw7XG4gIG9uKCd2aXJ0dWFsVXBkYXRlJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XG4gICAgaWYgKCFzd2lwZXIuc2xpZGVzLmxlbmd0aCkge1xuICAgICAgcmVxdWlyZVVwZGF0ZU9uVmlydHVhbCA9IHRydWU7XG4gICAgfVxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBpZiAocmVxdWlyZVVwZGF0ZU9uVmlydHVhbCAmJiBzd2lwZXIuc2xpZGVzICYmIHN3aXBlci5zbGlkZXMubGVuZ3RoKSB7XG4gICAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgICByZXF1aXJlVXBkYXRlT25WaXJ0dWFsID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufSIsImltcG9ydCB7IGdldFNsaWRlVHJhbnNmb3JtRWwgfSBmcm9tICcuL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVmZmVjdFRhcmdldChlZmZlY3RQYXJhbXMsIHNsaWRlRWwpIHtcbiAgY29uc3QgdHJhbnNmb3JtRWwgPSBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpO1xuICBpZiAodHJhbnNmb3JtRWwgIT09IHNsaWRlRWwpIHtcbiAgICB0cmFuc2Zvcm1FbC5zdHlsZS5iYWNrZmFjZVZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICB0cmFuc2Zvcm1FbC5zdHlsZVsnLXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5J10gPSAnaGlkZGVuJztcbiAgfVxuICByZXR1cm4gdHJhbnNmb3JtRWw7XG59IiwiaW1wb3J0IHsgZWxlbWVudEluZGV4LCBlbGVtZW50VHJhbnNpdGlvbkVuZCB9IGZyb20gJy4vdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQoe1xuICBzd2lwZXIsXG4gIGR1cmF0aW9uLFxuICB0cmFuc2Zvcm1FbGVtZW50cyxcbiAgYWxsU2xpZGVzXG59KSB7XG4gIGNvbnN0IHtcbiAgICBhY3RpdmVJbmRleFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBnZXRTbGlkZSA9IGVsID0+IHtcbiAgICBpZiAoIWVsLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgIC8vIGFzc3VtZSBzaGFkb3cgcm9vdFxuICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuc2hhZG93RWwgJiYgc2xpZGVFbC5zaGFkb3dFbCA9PT0gZWwucGFyZW50Tm9kZSlbMF07XG4gICAgICByZXR1cm4gc2xpZGU7XG4gICAgfVxuICAgIHJldHVybiBlbC5wYXJlbnRFbGVtZW50O1xuICB9O1xuICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlICYmIGR1cmF0aW9uICE9PSAwKSB7XG4gICAgbGV0IGV2ZW50VHJpZ2dlcmVkID0gZmFsc2U7XG4gICAgbGV0IHRyYW5zaXRpb25FbmRUYXJnZXQ7XG4gICAgaWYgKGFsbFNsaWRlcykge1xuICAgICAgdHJhbnNpdGlvbkVuZFRhcmdldCA9IHRyYW5zZm9ybUVsZW1lbnRzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2l0aW9uRW5kVGFyZ2V0ID0gdHJhbnNmb3JtRWxlbWVudHMuZmlsdGVyKHRyYW5zZm9ybUVsID0+IHtcbiAgICAgICAgY29uc3QgZWwgPSB0cmFuc2Zvcm1FbC5jbGFzc0xpc3QuY29udGFpbnMoJ3N3aXBlci1zbGlkZS10cmFuc2Zvcm0nKSA/IGdldFNsaWRlKHRyYW5zZm9ybUVsKSA6IHRyYW5zZm9ybUVsO1xuICAgICAgICByZXR1cm4gZWxlbWVudEluZGV4KGVsKSA9PT0gYWN0aXZlSW5kZXg7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdHJhbnNpdGlvbkVuZFRhcmdldC5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGVsZW1lbnRUcmFuc2l0aW9uRW5kKGVsLCAoKSA9PiB7XG4gICAgICAgIGlmIChldmVudFRyaWdnZXJlZCkgcmV0dXJuO1xuICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIGV2ZW50VHJpZ2dlcmVkID0gdHJ1ZTtcbiAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBldnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KCd0cmFuc2l0aW9uZW5kJywge1xuICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufSIsImltcG9ydCBlZmZlY3RJbml0IGZyb20gJy4uLy4uL3NoYXJlZC9lZmZlY3QtaW5pdC5qcyc7XG5pbXBvcnQgZWZmZWN0VGFyZ2V0IGZyb20gJy4uLy4uL3NoYXJlZC9lZmZlY3QtdGFyZ2V0LmpzJztcbmltcG9ydCBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCBmcm9tICcuLi8uLi9zaGFyZWQvZWZmZWN0LXZpcnR1YWwtdHJhbnNpdGlvbi1lbmQuanMnO1xuaW1wb3J0IHsgZ2V0U2xpZGVUcmFuc2Zvcm1FbCB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBFZmZlY3RGYWRlKHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uXG59KSB7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgZmFkZUVmZmVjdDoge1xuICAgICAgY3Jvc3NGYWRlOiBmYWxzZVxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHNldFRyYW5zbGF0ZSA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuZmFkZUVmZmVjdDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgc2xpZGVFbCA9IHN3aXBlci5zbGlkZXNbaV07XG4gICAgICBjb25zdCBvZmZzZXQgPSBzbGlkZUVsLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgbGV0IHR4ID0gLW9mZnNldDtcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB0eCAtPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgbGV0IHR5ID0gMDtcbiAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIHR5ID0gdHg7XG4gICAgICAgIHR4ID0gMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNsaWRlT3BhY2l0eSA9IHN3aXBlci5wYXJhbXMuZmFkZUVmZmVjdC5jcm9zc0ZhZGUgPyBNYXRoLm1heCgxIC0gTWF0aC5hYnMoc2xpZGVFbC5wcm9ncmVzcyksIDApIDogMSArIE1hdGgubWluKE1hdGgubWF4KHNsaWRlRWwucHJvZ3Jlc3MsIC0xKSwgMCk7XG4gICAgICBjb25zdCB0YXJnZXRFbCA9IGVmZmVjdFRhcmdldChwYXJhbXMsIHNsaWRlRWwpO1xuICAgICAgdGFyZ2V0RWwuc3R5bGUub3BhY2l0eSA9IHNsaWRlT3BhY2l0eTtcbiAgICAgIHRhcmdldEVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3R4fXB4LCAke3R5fXB4LCAwcHgpYDtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHNldFRyYW5zaXRpb24gPSBkdXJhdGlvbiA9PiB7XG4gICAgY29uc3QgdHJhbnNmb3JtRWxlbWVudHMgPSBzd2lwZXIuc2xpZGVzLm1hcChzbGlkZUVsID0+IGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCkpO1xuICAgIHRyYW5zZm9ybUVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgIH0pO1xuICAgIGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kKHtcbiAgICAgIHN3aXBlcixcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgdHJhbnNmb3JtRWxlbWVudHMsXG4gICAgICBhbGxTbGlkZXM6IHRydWVcbiAgICB9KTtcbiAgfTtcbiAgZWZmZWN0SW5pdCh7XG4gICAgZWZmZWN0OiAnZmFkZScsXG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2l0aW9uLFxuICAgIG92ZXJ3cml0ZVBhcmFtczogKCkgPT4gKHtcbiAgICAgIHNsaWRlc1BlclZpZXc6IDEsXG4gICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICBzcGFjZUJldHdlZW46IDAsXG4gICAgICB2aXJ0dWFsVHJhbnNsYXRlOiAhc3dpcGVyLnBhcmFtcy5jc3NNb2RlXG4gICAgfSlcbiAgfSk7XG59IiwiaW1wb3J0IGVmZmVjdEluaXQgZnJvbSAnLi4vLi4vc2hhcmVkL2VmZmVjdC1pbml0LmpzJztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnQgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRWZmZWN0Q3ViZSh7XG4gIHN3aXBlcixcbiAgZXh0ZW5kUGFyYW1zLFxuICBvblxufSkge1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGN1YmVFZmZlY3Q6IHtcbiAgICAgIHNsaWRlU2hhZG93czogdHJ1ZSxcbiAgICAgIHNoYWRvdzogdHJ1ZSxcbiAgICAgIHNoYWRvd09mZnNldDogMjAsXG4gICAgICBzaGFkb3dTY2FsZTogMC45NFxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGNyZWF0ZVNsaWRlU2hhZG93cyA9IChzbGlkZUVsLCBwcm9ncmVzcywgaXNIb3Jpem9udGFsKSA9PiB7XG4gICAgbGV0IHNoYWRvd0JlZm9yZSA9IGlzSG9yaXpvbnRhbCA/IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AnKTtcbiAgICBsZXQgc2hhZG93QWZ0ZXIgPSBpc0hvcml6b250YWwgPyBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xuICAgIGlmICghc2hhZG93QmVmb3JlKSB7XG4gICAgICBzaGFkb3dCZWZvcmUgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBgc3dpcGVyLXNsaWRlLXNoYWRvdy0ke2lzSG9yaXpvbnRhbCA/ICdsZWZ0JyA6ICd0b3AnfWApO1xuICAgICAgc2xpZGVFbC5hcHBlbmQoc2hhZG93QmVmb3JlKTtcbiAgICB9XG4gICAgaWYgKCFzaGFkb3dBZnRlcikge1xuICAgICAgc2hhZG93QWZ0ZXIgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBgc3dpcGVyLXNsaWRlLXNoYWRvdy0ke2lzSG9yaXpvbnRhbCA/ICdyaWdodCcgOiAnYm90dG9tJ31gKTtcbiAgICAgIHNsaWRlRWwuYXBwZW5kKHNoYWRvd0FmdGVyKTtcbiAgICB9XG4gICAgaWYgKHNoYWRvd0JlZm9yZSkgc2hhZG93QmVmb3JlLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heCgtcHJvZ3Jlc3MsIDApO1xuICAgIGlmIChzaGFkb3dBZnRlcikgc2hhZG93QWZ0ZXIuc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KHByb2dyZXNzLCAwKTtcbiAgfTtcbiAgY29uc3QgcmVjcmVhdGVTaGFkb3dzID0gKCkgPT4ge1xuICAgIC8vIGNyZWF0ZSBuZXcgb25lc1xuICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKHNsaWRlRWwucHJvZ3Jlc3MsIDEpLCAtMSk7XG4gICAgICBjcmVhdGVTbGlkZVNoYWRvd3Moc2xpZGVFbCwgcHJvZ3Jlc3MsIGlzSG9yaXpvbnRhbCk7XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IHNldFRyYW5zbGF0ZSA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBlbCxcbiAgICAgIHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlcyxcbiAgICAgIHdpZHRoOiBzd2lwZXJXaWR0aCxcbiAgICAgIGhlaWdodDogc3dpcGVySGVpZ2h0LFxuICAgICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgICBzaXplOiBzd2lwZXJTaXplLFxuICAgICAgYnJvd3NlclxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5jdWJlRWZmZWN0O1xuICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICBsZXQgd3JhcHBlclJvdGF0ZSA9IDA7XG4gICAgbGV0IGN1YmVTaGFkb3dFbDtcbiAgICBpZiAocGFyYW1zLnNoYWRvdykge1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBjdWJlU2hhZG93RWwgPSBzd2lwZXIuc2xpZGVzRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1jdWJlLXNoYWRvdycpO1xuICAgICAgICBpZiAoIWN1YmVTaGFkb3dFbCkge1xuICAgICAgICAgIGN1YmVTaGFkb3dFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsICdzd2lwZXItY3ViZS1zaGFkb3cnKTtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVzRWwuYXBwZW5kKGN1YmVTaGFkb3dFbCk7XG4gICAgICAgIH1cbiAgICAgICAgY3ViZVNoYWRvd0VsLnN0eWxlLmhlaWdodCA9IGAke3N3aXBlcldpZHRofXB4YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1YmVTaGFkb3dFbCA9IGVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItY3ViZS1zaGFkb3cnKTtcbiAgICAgICAgaWYgKCFjdWJlU2hhZG93RWwpIHtcbiAgICAgICAgICBjdWJlU2hhZG93RWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCAnc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG4gICAgICAgICAgZWwuYXBwZW5kKGN1YmVTaGFkb3dFbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHNsaWRlRWwgPSBzbGlkZXNbaV07XG4gICAgICBsZXQgc2xpZGVJbmRleCA9IGk7XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIHNsaWRlSW5kZXggPSBwYXJzZUludChzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgICAgfVxuICAgICAgbGV0IHNsaWRlQW5nbGUgPSBzbGlkZUluZGV4ICogOTA7XG4gICAgICBsZXQgcm91bmQgPSBNYXRoLmZsb29yKHNsaWRlQW5nbGUgLyAzNjApO1xuICAgICAgaWYgKHJ0bCkge1xuICAgICAgICBzbGlkZUFuZ2xlID0gLXNsaWRlQW5nbGU7XG4gICAgICAgIHJvdW5kID0gTWF0aC5mbG9vcigtc2xpZGVBbmdsZSAvIDM2MCk7XG4gICAgICB9XG4gICAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKHNsaWRlRWwucHJvZ3Jlc3MsIDEpLCAtMSk7XG4gICAgICBsZXQgdHggPSAwO1xuICAgICAgbGV0IHR5ID0gMDtcbiAgICAgIGxldCB0eiA9IDA7XG4gICAgICBpZiAoc2xpZGVJbmRleCAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSAtcm91bmQgKiA0ICogc3dpcGVyU2l6ZTtcbiAgICAgICAgdHogPSAwO1xuICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDEpICUgNCA9PT0gMCkge1xuICAgICAgICB0eCA9IDA7XG4gICAgICAgIHR6ID0gLXJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICB9IGVsc2UgaWYgKChzbGlkZUluZGV4IC0gMikgJSA0ID09PSAwKSB7XG4gICAgICAgIHR4ID0gc3dpcGVyU2l6ZSArIHJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICAgIHR6ID0gc3dpcGVyU2l6ZTtcbiAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAzKSAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSAtc3dpcGVyU2l6ZTtcbiAgICAgICAgdHogPSAzICogc3dpcGVyU2l6ZSArIHN3aXBlclNpemUgKiA0ICogcm91bmQ7XG4gICAgICB9XG4gICAgICBpZiAocnRsKSB7XG4gICAgICAgIHR4ID0gLXR4O1xuICAgICAgfVxuICAgICAgaWYgKCFpc0hvcml6b250YWwpIHtcbiAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgdHggPSAwO1xuICAgICAgfVxuICAgICAgY29uc3QgdHJhbnNmb3JtID0gYHJvdGF0ZVgoJHtpc0hvcml6b250YWwgPyAwIDogLXNsaWRlQW5nbGV9ZGVnKSByb3RhdGVZKCR7aXNIb3Jpem9udGFsID8gc2xpZGVBbmdsZSA6IDB9ZGVnKSB0cmFuc2xhdGUzZCgke3R4fXB4LCAke3R5fXB4LCAke3R6fXB4KWA7XG4gICAgICBpZiAocHJvZ3Jlc3MgPD0gMSAmJiBwcm9ncmVzcyA+IC0xKSB7XG4gICAgICAgIHdyYXBwZXJSb3RhdGUgPSBzbGlkZUluZGV4ICogOTAgKyBwcm9ncmVzcyAqIDkwO1xuICAgICAgICBpZiAocnRsKSB3cmFwcGVyUm90YXRlID0gLXNsaWRlSW5kZXggKiA5MCAtIHByb2dyZXNzICogOTA7XG4gICAgICB9XG4gICAgICBzbGlkZUVsLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIGlmIChwYXJhbXMuc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgIGNyZWF0ZVNsaWRlU2hhZG93cyhzbGlkZUVsLCBwcm9ncmVzcywgaXNIb3Jpem9udGFsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgd3JhcHBlckVsLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IGA1MCUgNTAlIC0ke3N3aXBlclNpemUgLyAyfXB4YDtcbiAgICB3cmFwcGVyRWwuc3R5bGVbJy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbiddID0gYDUwJSA1MCUgLSR7c3dpcGVyU2l6ZSAvIDJ9cHhgO1xuICAgIGlmIChwYXJhbXMuc2hhZG93KSB7XG4gICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIGN1YmVTaGFkb3dFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoMHB4LCAke3N3aXBlcldpZHRoIC8gMiArIHBhcmFtcy5zaGFkb3dPZmZzZXR9cHgsICR7LXN3aXBlcldpZHRoIC8gMn1weCkgcm90YXRlWCg5MGRlZykgcm90YXRlWigwZGVnKSBzY2FsZSgke3BhcmFtcy5zaGFkb3dTY2FsZX0pYDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNoYWRvd0FuZ2xlID0gTWF0aC5hYnMod3JhcHBlclJvdGF0ZSkgLSBNYXRoLmZsb29yKE1hdGguYWJzKHdyYXBwZXJSb3RhdGUpIC8gOTApICogOTA7XG4gICAgICAgIGNvbnN0IG11bHRpcGxpZXIgPSAxLjUgLSAoTWF0aC5zaW4oc2hhZG93QW5nbGUgKiAyICogTWF0aC5QSSAvIDM2MCkgLyAyICsgTWF0aC5jb3Moc2hhZG93QW5nbGUgKiAyICogTWF0aC5QSSAvIDM2MCkgLyAyKTtcbiAgICAgICAgY29uc3Qgc2NhbGUxID0gcGFyYW1zLnNoYWRvd1NjYWxlO1xuICAgICAgICBjb25zdCBzY2FsZTIgPSBwYXJhbXMuc2hhZG93U2NhbGUgLyBtdWx0aXBsaWVyO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBwYXJhbXMuc2hhZG93T2Zmc2V0O1xuICAgICAgICBjdWJlU2hhZG93RWwuc3R5bGUudHJhbnNmb3JtID0gYHNjYWxlM2QoJHtzY2FsZTF9LCAxLCAke3NjYWxlMn0pIHRyYW5zbGF0ZTNkKDBweCwgJHtzd2lwZXJIZWlnaHQgLyAyICsgb2Zmc2V0fXB4LCAkey1zd2lwZXJIZWlnaHQgLyAyIC8gc2NhbGUyfXB4KSByb3RhdGVYKC05MGRlZylgO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB6RmFjdG9yID0gKGJyb3dzZXIuaXNTYWZhcmkgfHwgYnJvd3Nlci5pc1dlYlZpZXcpICYmIGJyb3dzZXIubmVlZFBlcnNwZWN0aXZlRml4ID8gLXN3aXBlclNpemUgLyAyIDogMDtcbiAgICB3cmFwcGVyRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDBweCwwLCR7ekZhY3Rvcn1weCkgcm90YXRlWCgke3N3aXBlci5pc0hvcml6b250YWwoKSA/IDAgOiB3cmFwcGVyUm90YXRlfWRlZykgcm90YXRlWSgke3N3aXBlci5pc0hvcml6b250YWwoKSA/IC13cmFwcGVyUm90YXRlIDogMH1kZWcpYDtcbiAgICB3cmFwcGVyRWwuc3R5bGUuc2V0UHJvcGVydHkoJy0tc3dpcGVyLWN1YmUtdHJhbnNsYXRlLXonLCBgJHt6RmFjdG9yfXB4YCk7XG4gIH07XG4gIGNvbnN0IHNldFRyYW5zaXRpb24gPSBkdXJhdGlvbiA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgZWwsXG4gICAgICBzbGlkZXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgc2xpZGVFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XG4gICAgICBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgICBzdWJFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jdWJlRWZmZWN0LnNoYWRvdyAmJiAhc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBjb25zdCBzaGFkb3dFbCA9IGVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItY3ViZS1zaGFkb3cnKTtcbiAgICAgIGlmIChzaGFkb3dFbCkgc2hhZG93RWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgIH1cbiAgfTtcbiAgZWZmZWN0SW5pdCh7XG4gICAgZWZmZWN0OiAnY3ViZScsXG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2l0aW9uLFxuICAgIHJlY3JlYXRlU2hhZG93cyxcbiAgICBnZXRFZmZlY3RQYXJhbXM6ICgpID0+IHN3aXBlci5wYXJhbXMuY3ViZUVmZmVjdCxcbiAgICBwZXJzcGVjdGl2ZTogKCkgPT4gdHJ1ZSxcbiAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7XG4gICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgcmVzaXN0YW5jZVJhdGlvOiAwLFxuICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICAgICAgdmlydHVhbFRyYW5zbGF0ZTogdHJ1ZVxuICAgIH0pXG4gIH0pO1xufSIsImltcG9ydCB7IGNyZWF0ZUVsZW1lbnQsIGdldFNsaWRlVHJhbnNmb3JtRWwgfSBmcm9tICcuL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVNoYWRvdyhwYXJhbXMsIHNsaWRlRWwsIHNpZGUpIHtcbiAgY29uc3Qgc2hhZG93Q2xhc3MgPSBgc3dpcGVyLXNsaWRlLXNoYWRvdyR7c2lkZSA/IGAtJHtzaWRlfWAgOiAnJ31gO1xuICBjb25zdCBzaGFkb3dDb250YWluZXIgPSBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpO1xuICBsZXQgc2hhZG93RWwgPSBzaGFkb3dDb250YWluZXIucXVlcnlTZWxlY3RvcihgLiR7c2hhZG93Q2xhc3N9YCk7XG4gIGlmICghc2hhZG93RWwpIHtcbiAgICBzaGFkb3dFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIGBzd2lwZXItc2xpZGUtc2hhZG93JHtzaWRlID8gYC0ke3NpZGV9YCA6ICcnfWApO1xuICAgIHNoYWRvd0NvbnRhaW5lci5hcHBlbmQoc2hhZG93RWwpO1xuICB9XG4gIHJldHVybiBzaGFkb3dFbDtcbn0iLCJpbXBvcnQgY3JlYXRlU2hhZG93IGZyb20gJy4uLy4uL3NoYXJlZC9jcmVhdGUtc2hhZG93LmpzJztcbmltcG9ydCBlZmZlY3RJbml0IGZyb20gJy4uLy4uL3NoYXJlZC9lZmZlY3QtaW5pdC5qcyc7XG5pbXBvcnQgZWZmZWN0VGFyZ2V0IGZyb20gJy4uLy4uL3NoYXJlZC9lZmZlY3QtdGFyZ2V0LmpzJztcbmltcG9ydCBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCBmcm9tICcuLi8uLi9zaGFyZWQvZWZmZWN0LXZpcnR1YWwtdHJhbnNpdGlvbi1lbmQuanMnO1xuaW1wb3J0IHsgZ2V0U2xpZGVUcmFuc2Zvcm1FbCB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBFZmZlY3RGbGlwKHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uXG59KSB7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgZmxpcEVmZmVjdDoge1xuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgbGltaXRSb3RhdGlvbjogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGNyZWF0ZVNsaWRlU2hhZG93cyA9IChzbGlkZUVsLCBwcm9ncmVzcywgcGFyYW1zKSA9PiB7XG4gICAgbGV0IHNoYWRvd0JlZm9yZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AnKTtcbiAgICBsZXQgc2hhZG93QWZ0ZXIgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xuICAgIGlmICghc2hhZG93QmVmb3JlKSB7XG4gICAgICBzaGFkb3dCZWZvcmUgPSBjcmVhdGVTaGFkb3cocGFyYW1zLCBzbGlkZUVsLCBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJyk7XG4gICAgfVxuICAgIGlmICghc2hhZG93QWZ0ZXIpIHtcbiAgICAgIHNoYWRvd0FmdGVyID0gY3JlYXRlU2hhZG93KHBhcmFtcywgc2xpZGVFbCwgc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3JpZ2h0JyA6ICdib3R0b20nKTtcbiAgICB9XG4gICAgaWYgKHNoYWRvd0JlZm9yZSkgc2hhZG93QmVmb3JlLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heCgtcHJvZ3Jlc3MsIDApO1xuICAgIGlmIChzaGFkb3dBZnRlcikgc2hhZG93QWZ0ZXIuc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KHByb2dyZXNzLCAwKTtcbiAgfTtcbiAgY29uc3QgcmVjcmVhdGVTaGFkb3dzID0gKCkgPT4ge1xuICAgIC8vIFNldCBzaGFkb3dzXG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5mbGlwRWZmZWN0O1xuICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIGxldCBwcm9ncmVzcyA9IHNsaWRlRWwucHJvZ3Jlc3M7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mbGlwRWZmZWN0LmxpbWl0Um90YXRpb24pIHtcbiAgICAgICAgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbihzbGlkZUVsLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgfVxuICAgICAgY3JlYXRlU2xpZGVTaGFkb3dzKHNsaWRlRWwsIHByb2dyZXNzLCBwYXJhbXMpO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBzZXRUcmFuc2xhdGUgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzLFxuICAgICAgcnRsVHJhbnNsYXRlOiBydGxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgc2xpZGVFbCA9IHNsaWRlc1tpXTtcbiAgICAgIGxldCBwcm9ncmVzcyA9IHNsaWRlRWwucHJvZ3Jlc3M7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mbGlwRWZmZWN0LmxpbWl0Um90YXRpb24pIHtcbiAgICAgICAgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbihzbGlkZUVsLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgfVxuICAgICAgY29uc3Qgb2Zmc2V0ID0gc2xpZGVFbC5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIGNvbnN0IHJvdGF0ZSA9IC0xODAgKiBwcm9ncmVzcztcbiAgICAgIGxldCByb3RhdGVZID0gcm90YXRlO1xuICAgICAgbGV0IHJvdGF0ZVggPSAwO1xuICAgICAgbGV0IHR4ID0gc3dpcGVyLnBhcmFtcy5jc3NNb2RlID8gLW9mZnNldCAtIHN3aXBlci50cmFuc2xhdGUgOiAtb2Zmc2V0O1xuICAgICAgbGV0IHR5ID0gMDtcbiAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIHR5ID0gdHg7XG4gICAgICAgIHR4ID0gMDtcbiAgICAgICAgcm90YXRlWCA9IC1yb3RhdGVZO1xuICAgICAgICByb3RhdGVZID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocnRsKSB7XG4gICAgICAgIHJvdGF0ZVkgPSAtcm90YXRlWTtcbiAgICAgIH1cbiAgICAgIHNsaWRlRWwuc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQocHJvZ3Jlc3MpKSArIHNsaWRlcy5sZW5ndGg7XG4gICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICBjcmVhdGVTbGlkZVNoYWRvd3Moc2xpZGVFbCwgcHJvZ3Jlc3MsIHBhcmFtcyk7XG4gICAgICB9XG4gICAgICBjb25zdCB0cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0eH1weCwgJHt0eX1weCwgMHB4KSByb3RhdGVYKCR7cm90YXRlWH1kZWcpIHJvdGF0ZVkoJHtyb3RhdGVZfWRlZylgO1xuICAgICAgY29uc3QgdGFyZ2V0RWwgPSBlZmZlY3RUYXJnZXQocGFyYW1zLCBzbGlkZUVsKTtcbiAgICAgIHRhcmdldEVsLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHNldFRyYW5zaXRpb24gPSBkdXJhdGlvbiA9PiB7XG4gICAgY29uc3QgdHJhbnNmb3JtRWxlbWVudHMgPSBzd2lwZXIuc2xpZGVzLm1hcChzbGlkZUVsID0+IGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCkpO1xuICAgIHRyYW5zZm9ybUVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgZWwucXVlcnlTZWxlY3RvckFsbCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykuZm9yRWFjaChzaGFkb3dFbCA9PiB7XG4gICAgICAgIHNoYWRvd0VsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kKHtcbiAgICAgIHN3aXBlcixcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgdHJhbnNmb3JtRWxlbWVudHNcbiAgICB9KTtcbiAgfTtcbiAgZWZmZWN0SW5pdCh7XG4gICAgZWZmZWN0OiAnZmxpcCcsXG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2l0aW9uLFxuICAgIHJlY3JlYXRlU2hhZG93cyxcbiAgICBnZXRFZmZlY3RQYXJhbXM6ICgpID0+IHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdCxcbiAgICBwZXJzcGVjdGl2ZTogKCkgPT4gdHJ1ZSxcbiAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7XG4gICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgdmlydHVhbFRyYW5zbGF0ZTogIXN3aXBlci5wYXJhbXMuY3NzTW9kZVxuICAgIH0pXG4gIH0pO1xufSIsImltcG9ydCBjcmVhdGVTaGFkb3cgZnJvbSAnLi4vLi4vc2hhcmVkL2NyZWF0ZS1zaGFkb3cuanMnO1xuaW1wb3J0IGVmZmVjdEluaXQgZnJvbSAnLi4vLi4vc2hhcmVkL2VmZmVjdC1pbml0LmpzJztcbmltcG9ydCBlZmZlY3RUYXJnZXQgZnJvbSAnLi4vLi4vc2hhcmVkL2VmZmVjdC10YXJnZXQuanMnO1xuaW1wb3J0IHsgZ2V0U2xpZGVUcmFuc2Zvcm1FbCB9IGZyb20gJy4uLy4uL3NoYXJlZC91dGlscy5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBFZmZlY3RDb3ZlcmZsb3coe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtcyxcbiAgb25cbn0pIHtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBjb3ZlcmZsb3dFZmZlY3Q6IHtcbiAgICAgIHJvdGF0ZTogNTAsXG4gICAgICBzdHJldGNoOiAwLFxuICAgICAgZGVwdGg6IDEwMCxcbiAgICAgIHNjYWxlOiAxLFxuICAgICAgbW9kaWZpZXI6IDEsXG4gICAgICBzbGlkZVNoYWRvd3M6IHRydWVcbiAgICB9XG4gIH0pO1xuICBjb25zdCBzZXRUcmFuc2xhdGUgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgd2lkdGg6IHN3aXBlcldpZHRoLFxuICAgICAgaGVpZ2h0OiBzd2lwZXJIZWlnaHQsXG4gICAgICBzbGlkZXMsXG4gICAgICBzbGlkZXNTaXplc0dyaWRcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuY292ZXJmbG93RWZmZWN0O1xuICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgIGNvbnN0IGNlbnRlciA9IGlzSG9yaXpvbnRhbCA/IC10cmFuc2Zvcm0gKyBzd2lwZXJXaWR0aCAvIDIgOiAtdHJhbnNmb3JtICsgc3dpcGVySGVpZ2h0IC8gMjtcbiAgICBjb25zdCByb3RhdGUgPSBpc0hvcml6b250YWwgPyBwYXJhbXMucm90YXRlIDogLXBhcmFtcy5yb3RhdGU7XG4gICAgY29uc3QgdHJhbnNsYXRlID0gcGFyYW1zLmRlcHRoO1xuICAgIC8vIEVhY2ggc2xpZGUgb2Zmc2V0IGZyb20gY2VudGVyXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHNsaWRlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgc2xpZGVFbCA9IHNsaWRlc1tpXTtcbiAgICAgIGNvbnN0IHNsaWRlU2l6ZSA9IHNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICAgIGNvbnN0IHNsaWRlT2Zmc2V0ID0gc2xpZGVFbC5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIGNvbnN0IGNlbnRlck9mZnNldCA9IChjZW50ZXIgLSBzbGlkZU9mZnNldCAtIHNsaWRlU2l6ZSAvIDIpIC8gc2xpZGVTaXplO1xuICAgICAgY29uc3Qgb2Zmc2V0TXVsdGlwbGllciA9IHR5cGVvZiBwYXJhbXMubW9kaWZpZXIgPT09ICdmdW5jdGlvbicgPyBwYXJhbXMubW9kaWZpZXIoY2VudGVyT2Zmc2V0KSA6IGNlbnRlck9mZnNldCAqIHBhcmFtcy5tb2RpZmllcjtcbiAgICAgIGxldCByb3RhdGVZID0gaXNIb3Jpem9udGFsID8gcm90YXRlICogb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICBsZXQgcm90YXRlWCA9IGlzSG9yaXpvbnRhbCA/IDAgOiByb3RhdGUgKiBvZmZzZXRNdWx0aXBsaWVyO1xuICAgICAgLy8gdmFyIHJvdGF0ZVogPSAwXG4gICAgICBsZXQgdHJhbnNsYXRlWiA9IC10cmFuc2xhdGUgKiBNYXRoLmFicyhvZmZzZXRNdWx0aXBsaWVyKTtcbiAgICAgIGxldCBzdHJldGNoID0gcGFyYW1zLnN0cmV0Y2g7XG4gICAgICAvLyBBbGxvdyBwZXJjZW50YWdlIHRvIG1ha2UgYSByZWxhdGl2ZSBzdHJldGNoIGZvciByZXNwb25zaXZlIHNsaWRlcnNcbiAgICAgIGlmICh0eXBlb2Ygc3RyZXRjaCA9PT0gJ3N0cmluZycgJiYgc3RyZXRjaC5pbmRleE9mKCclJykgIT09IC0xKSB7XG4gICAgICAgIHN0cmV0Y2ggPSBwYXJzZUZsb2F0KHBhcmFtcy5zdHJldGNoKSAvIDEwMCAqIHNsaWRlU2l6ZTtcbiAgICAgIH1cbiAgICAgIGxldCB0cmFuc2xhdGVZID0gaXNIb3Jpem9udGFsID8gMCA6IHN0cmV0Y2ggKiBvZmZzZXRNdWx0aXBsaWVyO1xuICAgICAgbGV0IHRyYW5zbGF0ZVggPSBpc0hvcml6b250YWwgPyBzdHJldGNoICogb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICBsZXQgc2NhbGUgPSAxIC0gKDEgLSBwYXJhbXMuc2NhbGUpICogTWF0aC5hYnMob2Zmc2V0TXVsdGlwbGllcik7XG5cbiAgICAgIC8vIEZpeCBmb3IgdWx0cmEgc21hbGwgdmFsdWVzXG4gICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWCkgPCAwLjAwMSkgdHJhbnNsYXRlWCA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWSkgPCAwLjAwMSkgdHJhbnNsYXRlWSA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnModHJhbnNsYXRlWikgPCAwLjAwMSkgdHJhbnNsYXRlWiA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnMocm90YXRlWSkgPCAwLjAwMSkgcm90YXRlWSA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnMocm90YXRlWCkgPCAwLjAwMSkgcm90YXRlWCA9IDA7XG4gICAgICBpZiAoTWF0aC5hYnMoc2NhbGUpIDwgMC4wMDEpIHNjYWxlID0gMDtcbiAgICAgIGNvbnN0IHNsaWRlVHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7dHJhbnNsYXRlWH1weCwke3RyYW5zbGF0ZVl9cHgsJHt0cmFuc2xhdGVafXB4KSAgcm90YXRlWCgke3JvdGF0ZVh9ZGVnKSByb3RhdGVZKCR7cm90YXRlWX1kZWcpIHNjYWxlKCR7c2NhbGV9KWA7XG4gICAgICBjb25zdCB0YXJnZXRFbCA9IGVmZmVjdFRhcmdldChwYXJhbXMsIHNsaWRlRWwpO1xuICAgICAgdGFyZ2V0RWwuc3R5bGUudHJhbnNmb3JtID0gc2xpZGVUcmFuc2Zvcm07XG4gICAgICBzbGlkZUVsLnN0eWxlLnpJbmRleCA9IC1NYXRoLmFicyhNYXRoLnJvdW5kKG9mZnNldE11bHRpcGxpZXIpKSArIDE7XG4gICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgICBsZXQgc2hhZG93QmVmb3JlRWwgPSBpc0hvcml6b250YWwgPyBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgICAgIGxldCBzaGFkb3dBZnRlckVsID0gaXNIb3Jpem9udGFsID8gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcbiAgICAgICAgaWYgKCFzaGFkb3dCZWZvcmVFbCkge1xuICAgICAgICAgIHNoYWRvd0JlZm9yZUVsID0gY3JlYXRlU2hhZG93KHBhcmFtcywgc2xpZGVFbCwgaXNIb3Jpem9udGFsID8gJ2xlZnQnIDogJ3RvcCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2hhZG93QWZ0ZXJFbCkge1xuICAgICAgICAgIHNoYWRvd0FmdGVyRWwgPSBjcmVhdGVTaGFkb3cocGFyYW1zLCBzbGlkZUVsLCBpc0hvcml6b250YWwgPyAncmlnaHQnIDogJ2JvdHRvbScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFkb3dCZWZvcmVFbCkgc2hhZG93QmVmb3JlRWwuc3R5bGUub3BhY2l0eSA9IG9mZnNldE11bHRpcGxpZXIgPiAwID8gb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICAgIGlmIChzaGFkb3dBZnRlckVsKSBzaGFkb3dBZnRlckVsLnN0eWxlLm9wYWNpdHkgPSAtb2Zmc2V0TXVsdGlwbGllciA+IDAgPyAtb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4ge1xuICAgIGNvbnN0IHRyYW5zZm9ybUVsZW1lbnRzID0gc3dpcGVyLnNsaWRlcy5tYXAoc2xpZGVFbCA9PiBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpKTtcbiAgICB0cmFuc2Zvcm1FbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLmZvckVhY2goc2hhZG93RWwgPT4ge1xuICAgICAgICBzaGFkb3dFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbiAgZWZmZWN0SW5pdCh7XG4gICAgZWZmZWN0OiAnY292ZXJmbG93JyxcbiAgICBzd2lwZXIsXG4gICAgb24sXG4gICAgc2V0VHJhbnNsYXRlLFxuICAgIHNldFRyYW5zaXRpb24sXG4gICAgcGVyc3BlY3RpdmU6ICgpID0+IHRydWUsXG4gICAgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoe1xuICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZVxuICAgIH0pXG4gIH0pO1xufSIsImltcG9ydCBjcmVhdGVTaGFkb3cgZnJvbSAnLi4vLi4vc2hhcmVkL2NyZWF0ZS1zaGFkb3cuanMnO1xuaW1wb3J0IGVmZmVjdEluaXQgZnJvbSAnLi4vLi4vc2hhcmVkL2VmZmVjdC1pbml0LmpzJztcbmltcG9ydCBlZmZlY3RUYXJnZXQgZnJvbSAnLi4vLi4vc2hhcmVkL2VmZmVjdC10YXJnZXQuanMnO1xuaW1wb3J0IGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kIGZyb20gJy4uLy4uL3NoYXJlZC9lZmZlY3QtdmlydHVhbC10cmFuc2l0aW9uLWVuZC5qcyc7XG5pbXBvcnQgeyBnZXRTbGlkZVRyYW5zZm9ybUVsIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3V0aWxzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEVmZmVjdENyZWF0aXZlKHtcbiAgc3dpcGVyLFxuICBleHRlbmRQYXJhbXMsXG4gIG9uXG59KSB7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgY3JlYXRpdmVFZmZlY3Q6IHtcbiAgICAgIGxpbWl0UHJvZ3Jlc3M6IDEsXG4gICAgICBzaGFkb3dQZXJQcm9ncmVzczogZmFsc2UsXG4gICAgICBwcm9ncmVzc011bHRpcGxpZXI6IDEsXG4gICAgICBwZXJzcGVjdGl2ZTogdHJ1ZSxcbiAgICAgIHByZXY6IHtcbiAgICAgICAgdHJhbnNsYXRlOiBbMCwgMCwgMF0sXG4gICAgICAgIHJvdGF0ZTogWzAsIDAsIDBdLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBzY2FsZTogMVxuICAgICAgfSxcbiAgICAgIG5leHQ6IHtcbiAgICAgICAgdHJhbnNsYXRlOiBbMCwgMCwgMF0sXG4gICAgICAgIHJvdGF0ZTogWzAsIDAsIDBdLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBzY2FsZTogMVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGdldFRyYW5zbGF0ZVZhbHVlID0gdmFsdWUgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSByZXR1cm4gdmFsdWU7XG4gICAgcmV0dXJuIGAke3ZhbHVlfXB4YDtcbiAgfTtcbiAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlcyxcbiAgICAgIHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlc1NpemVzR3JpZFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5jcmVhdGl2ZUVmZmVjdDtcbiAgICBjb25zdCB7XG4gICAgICBwcm9ncmVzc011bHRpcGxpZXI6IG11bHRpcGxpZXJcbiAgICB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IGlzQ2VudGVyZWRTbGlkZXMgPSBzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzO1xuICAgIGlmIChpc0NlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBjb25zdCBtYXJnaW4gPSBzbGlkZXNTaXplc0dyaWRbMF0gLyAyIC0gc3dpcGVyLnBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUgfHwgMDtcbiAgICAgIHdyYXBwZXJFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWChjYWxjKDUwJSAtICR7bWFyZ2lufXB4KSlgO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgc2xpZGVFbCA9IHNsaWRlc1tpXTtcbiAgICAgIGNvbnN0IHNsaWRlUHJvZ3Jlc3MgPSBzbGlkZUVsLnByb2dyZXNzO1xuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChzbGlkZUVsLnByb2dyZXNzLCAtcGFyYW1zLmxpbWl0UHJvZ3Jlc3MpLCBwYXJhbXMubGltaXRQcm9ncmVzcyk7XG4gICAgICBsZXQgb3JpZ2luYWxQcm9ncmVzcyA9IHByb2dyZXNzO1xuICAgICAgaWYgKCFpc0NlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIG9yaWdpbmFsUHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChzbGlkZUVsLm9yaWdpbmFsUHJvZ3Jlc3MsIC1wYXJhbXMubGltaXRQcm9ncmVzcyksIHBhcmFtcy5saW1pdFByb2dyZXNzKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9mZnNldCA9IHNsaWRlRWwuc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICBjb25zdCB0ID0gW3N3aXBlci5wYXJhbXMuY3NzTW9kZSA/IC1vZmZzZXQgLSBzd2lwZXIudHJhbnNsYXRlIDogLW9mZnNldCwgMCwgMF07XG4gICAgICBjb25zdCByID0gWzAsIDAsIDBdO1xuICAgICAgbGV0IGN1c3RvbSA9IGZhbHNlO1xuICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgdFsxXSA9IHRbMF07XG4gICAgICAgIHRbMF0gPSAwO1xuICAgICAgfVxuICAgICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIHRyYW5zbGF0ZTogWzAsIDAsIDBdLFxuICAgICAgICByb3RhdGU6IFswLCAwLCAwXSxcbiAgICAgICAgc2NhbGU6IDEsXG4gICAgICAgIG9wYWNpdHk6IDFcbiAgICAgIH07XG4gICAgICBpZiAocHJvZ3Jlc3MgPCAwKSB7XG4gICAgICAgIGRhdGEgPSBwYXJhbXMubmV4dDtcbiAgICAgICAgY3VzdG9tID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAocHJvZ3Jlc3MgPiAwKSB7XG4gICAgICAgIGRhdGEgPSBwYXJhbXMucHJldjtcbiAgICAgICAgY3VzdG9tID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIHNldCB0cmFuc2xhdGVcbiAgICAgIHQuZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgIHRbaW5kZXhdID0gYGNhbGMoJHt2YWx1ZX1weCArICgke2dldFRyYW5zbGF0ZVZhbHVlKGRhdGEudHJhbnNsYXRlW2luZGV4XSl9ICogJHtNYXRoLmFicyhwcm9ncmVzcyAqIG11bHRpcGxpZXIpfSkpYDtcbiAgICAgIH0pO1xuICAgICAgLy8gc2V0IHJvdGF0ZXNcbiAgICAgIHIuZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgIHJbaW5kZXhdID0gZGF0YS5yb3RhdGVbaW5kZXhdICogTWF0aC5hYnMocHJvZ3Jlc3MgKiBtdWx0aXBsaWVyKTtcbiAgICAgIH0pO1xuICAgICAgc2xpZGVFbC5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChzbGlkZVByb2dyZXNzKSkgKyBzbGlkZXMubGVuZ3RoO1xuICAgICAgY29uc3QgdHJhbnNsYXRlU3RyaW5nID0gdC5qb2luKCcsICcpO1xuICAgICAgY29uc3Qgcm90YXRlU3RyaW5nID0gYHJvdGF0ZVgoJHtyWzBdfWRlZykgcm90YXRlWSgke3JbMV19ZGVnKSByb3RhdGVaKCR7clsyXX1kZWcpYDtcbiAgICAgIGNvbnN0IHNjYWxlU3RyaW5nID0gb3JpZ2luYWxQcm9ncmVzcyA8IDAgPyBgc2NhbGUoJHsxICsgKDEgLSBkYXRhLnNjYWxlKSAqIG9yaWdpbmFsUHJvZ3Jlc3MgKiBtdWx0aXBsaWVyfSlgIDogYHNjYWxlKCR7MSAtICgxIC0gZGF0YS5zY2FsZSkgKiBvcmlnaW5hbFByb2dyZXNzICogbXVsdGlwbGllcn0pYDtcbiAgICAgIGNvbnN0IG9wYWNpdHlTdHJpbmcgPSBvcmlnaW5hbFByb2dyZXNzIDwgMCA/IDEgKyAoMSAtIGRhdGEub3BhY2l0eSkgKiBvcmlnaW5hbFByb2dyZXNzICogbXVsdGlwbGllciA6IDEgLSAoMSAtIGRhdGEub3BhY2l0eSkgKiBvcmlnaW5hbFByb2dyZXNzICogbXVsdGlwbGllcjtcbiAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZVN0cmluZ30pICR7cm90YXRlU3RyaW5nfSAke3NjYWxlU3RyaW5nfWA7XG5cbiAgICAgIC8vIFNldCBzaGFkb3dzXG4gICAgICBpZiAoY3VzdG9tICYmIGRhdGEuc2hhZG93IHx8ICFjdXN0b20pIHtcbiAgICAgICAgbGV0IHNoYWRvd0VsID0gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdycpO1xuICAgICAgICBpZiAoIXNoYWRvd0VsICYmIGRhdGEuc2hhZG93KSB7XG4gICAgICAgICAgc2hhZG93RWwgPSBjcmVhdGVTaGFkb3cocGFyYW1zLCBzbGlkZUVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhZG93RWwpIHtcbiAgICAgICAgICBjb25zdCBzaGFkb3dPcGFjaXR5ID0gcGFyYW1zLnNoYWRvd1BlclByb2dyZXNzID8gcHJvZ3Jlc3MgKiAoMSAvIHBhcmFtcy5saW1pdFByb2dyZXNzKSA6IHByb2dyZXNzO1xuICAgICAgICAgIHNoYWRvd0VsLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1pbihNYXRoLm1heChNYXRoLmFicyhzaGFkb3dPcGFjaXR5KSwgMCksIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCB0YXJnZXRFbCA9IGVmZmVjdFRhcmdldChwYXJhbXMsIHNsaWRlRWwpO1xuICAgICAgdGFyZ2V0RWwuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgdGFyZ2V0RWwuc3R5bGUub3BhY2l0eSA9IG9wYWNpdHlTdHJpbmc7XG4gICAgICBpZiAoZGF0YS5vcmlnaW4pIHtcbiAgICAgICAgdGFyZ2V0RWwuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gb3BhY2l0eVN0cmluZztcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IHNldFRyYW5zaXRpb24gPSBkdXJhdGlvbiA9PiB7XG4gICAgY29uc3QgdHJhbnNmb3JtRWxlbWVudHMgPSBzd2lwZXIuc2xpZGVzLm1hcChzbGlkZUVsID0+IGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCkpO1xuICAgIHRyYW5zZm9ybUVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgZWwucXVlcnlTZWxlY3RvckFsbCgnLnN3aXBlci1zbGlkZS1zaGFkb3cnKS5mb3JFYWNoKHNoYWRvd0VsID0+IHtcbiAgICAgICAgc2hhZG93RWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQoe1xuICAgICAgc3dpcGVyLFxuICAgICAgZHVyYXRpb24sXG4gICAgICB0cmFuc2Zvcm1FbGVtZW50cyxcbiAgICAgIGFsbFNsaWRlczogdHJ1ZVxuICAgIH0pO1xuICB9O1xuICBlZmZlY3RJbml0KHtcbiAgICBlZmZlY3Q6ICdjcmVhdGl2ZScsXG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2l0aW9uLFxuICAgIHBlcnNwZWN0aXZlOiAoKSA9PiBzd2lwZXIucGFyYW1zLmNyZWF0aXZlRWZmZWN0LnBlcnNwZWN0aXZlLFxuICAgIG92ZXJ3cml0ZVBhcmFtczogKCkgPT4gKHtcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICB2aXJ0dWFsVHJhbnNsYXRlOiAhc3dpcGVyLnBhcmFtcy5jc3NNb2RlXG4gICAgfSlcbiAgfSk7XG59IiwiaW1wb3J0IGNyZWF0ZVNoYWRvdyBmcm9tICcuLi8uLi9zaGFyZWQvY3JlYXRlLXNoYWRvdy5qcyc7XG5pbXBvcnQgZWZmZWN0SW5pdCBmcm9tICcuLi8uLi9zaGFyZWQvZWZmZWN0LWluaXQuanMnO1xuaW1wb3J0IGVmZmVjdFRhcmdldCBmcm9tICcuLi8uLi9zaGFyZWQvZWZmZWN0LXRhcmdldC5qcyc7XG5pbXBvcnQgZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQgZnJvbSAnLi4vLi4vc2hhcmVkL2VmZmVjdC12aXJ0dWFsLXRyYW5zaXRpb24tZW5kLmpzJztcbmltcG9ydCB7IGdldFNsaWRlVHJhbnNmb3JtRWwgfSBmcm9tICcuLi8uLi9zaGFyZWQvdXRpbHMuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gRWZmZWN0Q2FyZHMoe1xuICBzd2lwZXIsXG4gIGV4dGVuZFBhcmFtcyxcbiAgb25cbn0pIHtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBjYXJkc0VmZmVjdDoge1xuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgcm90YXRlOiB0cnVlLFxuICAgICAgcGVyU2xpZGVSb3RhdGU6IDIsXG4gICAgICBwZXJTbGlkZU9mZnNldDogOFxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IHNldFRyYW5zbGF0ZSA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXMsXG4gICAgICBhY3RpdmVJbmRleFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5jYXJkc0VmZmVjdDtcbiAgICBjb25zdCB7XG4gICAgICBzdGFydFRyYW5zbGF0ZSxcbiAgICAgIGlzVG91Y2hlZFxuICAgIH0gPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICAgIGNvbnN0IGN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBzbGlkZUVsID0gc2xpZGVzW2ldO1xuICAgICAgY29uc3Qgc2xpZGVQcm9ncmVzcyA9IHNsaWRlRWwucHJvZ3Jlc3M7XG4gICAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHNsaWRlUHJvZ3Jlc3MsIC00KSwgNCk7XG4gICAgICBsZXQgb2Zmc2V0ID0gc2xpZGVFbC5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmICFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke3N3aXBlci5taW5UcmFuc2xhdGUoKX1weClgO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIG9mZnNldCAtPSBzbGlkZXNbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICB9XG4gICAgICBsZXQgdFggPSBzd2lwZXIucGFyYW1zLmNzc01vZGUgPyAtb2Zmc2V0IC0gc3dpcGVyLnRyYW5zbGF0ZSA6IC1vZmZzZXQ7XG4gICAgICBsZXQgdFkgPSAwO1xuICAgICAgY29uc3QgdFogPSAtMTAwICogTWF0aC5hYnMocHJvZ3Jlc3MpO1xuICAgICAgbGV0IHNjYWxlID0gMTtcbiAgICAgIGxldCByb3RhdGUgPSAtcGFyYW1zLnBlclNsaWRlUm90YXRlICogcHJvZ3Jlc3M7XG4gICAgICBsZXQgdFhBZGQgPSBwYXJhbXMucGVyU2xpZGVPZmZzZXQgLSBNYXRoLmFicyhwcm9ncmVzcykgKiAwLjc1O1xuICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuZnJvbSArIGkgOiBpO1xuICAgICAgY29uc3QgaXNTd2lwZVRvTmV4dCA9IChzbGlkZUluZGV4ID09PSBhY3RpdmVJbmRleCB8fCBzbGlkZUluZGV4ID09PSBhY3RpdmVJbmRleCAtIDEpICYmIHByb2dyZXNzID4gMCAmJiBwcm9ncmVzcyA8IDEgJiYgKGlzVG91Y2hlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpICYmIGN1cnJlbnRUcmFuc2xhdGUgPCBzdGFydFRyYW5zbGF0ZTtcbiAgICAgIGNvbnN0IGlzU3dpcGVUb1ByZXYgPSAoc2xpZGVJbmRleCA9PT0gYWN0aXZlSW5kZXggfHwgc2xpZGVJbmRleCA9PT0gYWN0aXZlSW5kZXggKyAxKSAmJiBwcm9ncmVzcyA8IDAgJiYgcHJvZ3Jlc3MgPiAtMSAmJiAoaXNUb3VjaGVkIHx8IHN3aXBlci5wYXJhbXMuY3NzTW9kZSkgJiYgY3VycmVudFRyYW5zbGF0ZSA+IHN0YXJ0VHJhbnNsYXRlO1xuICAgICAgaWYgKGlzU3dpcGVUb05leHQgfHwgaXNTd2lwZVRvUHJldikge1xuICAgICAgICBjb25zdCBzdWJQcm9ncmVzcyA9ICgxIC0gTWF0aC5hYnMoKE1hdGguYWJzKHByb2dyZXNzKSAtIDAuNSkgLyAwLjUpKSAqKiAwLjU7XG4gICAgICAgIHJvdGF0ZSArPSAtMjggKiBwcm9ncmVzcyAqIHN1YlByb2dyZXNzO1xuICAgICAgICBzY2FsZSArPSAtMC41ICogc3ViUHJvZ3Jlc3M7XG4gICAgICAgIHRYQWRkICs9IDk2ICogc3ViUHJvZ3Jlc3M7XG4gICAgICAgIHRZID0gYCR7LTI1ICogc3ViUHJvZ3Jlc3MgKiBNYXRoLmFicyhwcm9ncmVzcyl9JWA7XG4gICAgICB9XG4gICAgICBpZiAocHJvZ3Jlc3MgPCAwKSB7XG4gICAgICAgIC8vIG5leHRcbiAgICAgICAgdFggPSBgY2FsYygke3RYfXB4ICsgKCR7dFhBZGQgKiBNYXRoLmFicyhwcm9ncmVzcyl9JSkpYDtcbiAgICAgIH0gZWxzZSBpZiAocHJvZ3Jlc3MgPiAwKSB7XG4gICAgICAgIC8vIHByZXZcbiAgICAgICAgdFggPSBgY2FsYygke3RYfXB4ICsgKC0ke3RYQWRkICogTWF0aC5hYnMocHJvZ3Jlc3MpfSUpKWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0WCA9IGAke3RYfXB4YDtcbiAgICAgIH1cbiAgICAgIGlmICghc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIGNvbnN0IHByZXZZID0gdFk7XG4gICAgICAgIHRZID0gdFg7XG4gICAgICAgIHRYID0gcHJldlk7XG4gICAgICB9XG4gICAgICBjb25zdCBzY2FsZVN0cmluZyA9IHByb2dyZXNzIDwgMCA/IGAkezEgKyAoMSAtIHNjYWxlKSAqIHByb2dyZXNzfWAgOiBgJHsxIC0gKDEgLSBzY2FsZSkgKiBwcm9ncmVzc31gO1xuICAgICAgY29uc3QgdHJhbnNmb3JtID0gYFxuICAgICAgICB0cmFuc2xhdGUzZCgke3RYfSwgJHt0WX0sICR7dFp9cHgpXG4gICAgICAgIHJvdGF0ZVooJHtwYXJhbXMucm90YXRlID8gcm90YXRlIDogMH1kZWcpXG4gICAgICAgIHNjYWxlKCR7c2NhbGVTdHJpbmd9KVxuICAgICAgYDtcbiAgICAgIGlmIChwYXJhbXMuc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgIC8vIFNldCBzaGFkb3dzXG4gICAgICAgIGxldCBzaGFkb3dFbCA9IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3cnKTtcbiAgICAgICAgaWYgKCFzaGFkb3dFbCkge1xuICAgICAgICAgIHNoYWRvd0VsID0gY3JlYXRlU2hhZG93KHBhcmFtcywgc2xpZGVFbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYWRvd0VsKSBzaGFkb3dFbC5zdHlsZS5vcGFjaXR5ID0gTWF0aC5taW4oTWF0aC5tYXgoKE1hdGguYWJzKHByb2dyZXNzKSAtIDAuNSkgLyAwLjUsIDApLCAxKTtcbiAgICAgIH1cbiAgICAgIHNsaWRlRWwuc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQoc2xpZGVQcm9ncmVzcykpICsgc2xpZGVzLmxlbmd0aDtcbiAgICAgIGNvbnN0IHRhcmdldEVsID0gZWZmZWN0VGFyZ2V0KHBhcmFtcywgc2xpZGVFbCk7XG4gICAgICB0YXJnZXRFbC5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4ge1xuICAgIGNvbnN0IHRyYW5zZm9ybUVsZW1lbnRzID0gc3dpcGVyLnNsaWRlcy5tYXAoc2xpZGVFbCA9PiBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpKTtcbiAgICB0cmFuc2Zvcm1FbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zd2lwZXItc2xpZGUtc2hhZG93JykuZm9yRWFjaChzaGFkb3dFbCA9PiB7XG4gICAgICAgIHNoYWRvd0VsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kKHtcbiAgICAgIHN3aXBlcixcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgdHJhbnNmb3JtRWxlbWVudHNcbiAgICB9KTtcbiAgfTtcbiAgZWZmZWN0SW5pdCh7XG4gICAgZWZmZWN0OiAnY2FyZHMnLFxuICAgIHN3aXBlcixcbiAgICBvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgc2V0VHJhbnNpdGlvbixcbiAgICBwZXJzcGVjdGl2ZTogKCkgPT4gdHJ1ZSxcbiAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7XG4gICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgdmlydHVhbFRyYW5zbGF0ZTogIXN3aXBlci5wYXJhbXMuY3NzTW9kZVxuICAgIH0pXG4gIH0pO1xufSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLy8gVGhpcyBlbnRyeSBtb2R1bGUgaXMgcmVmZXJlbmNlZCBieSBvdGhlciBtb2R1bGVzIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1NjApO1xuIl0sIm5hbWVzIjpbInN3aXBlclRvcERhdGEiLCJpZCIsImltZyIsImxhcmdlIiwibWVkaXVtIiwibW9iaWxlIiwidGh1bWIiLCJhbHQiLCJsb2dvIiwidGl0bGUiLCJ0ZXh0IiwiYnRuIiwiaHJlZiIsInN3aXBlckhhcmR3YXJlRGF0YSIsIm1vcmUiLCJidXkiLCJzZWN0aW9uVG9wV3JhcHBlciIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsInNlY3Rpb25Ub3BUaHVtYnNXcmFwcGVyIiwibWFwIiwiZGF0YSIsImFwcGVuZENoaWxkIiwiZGl2U2xpZGUiLCJjcmVhdGVFbGVtZW50IiwicGljdHVyZSIsInNvdXJjZUxhcmdlIiwic291cmNlTWVkaXVtIiwiaW1nVG9wIiwiYW5jaG9yIiwiZGl2RGVzYyIsImgxIiwicCIsImRpdkJ0biIsIm1lZGlhIiwic3Jjc2V0IiwiY2xhc3NMaXN0IiwiYWRkIiwic3JjIiwibG9hZGluZyIsImFwcGVuZCIsInRleHRDb250ZW50IiwiZGl2TGF6eSIsImNyZWF0ZVRvcFNsaWRlIiwiZGl2IiwiY3JlYXRlVG9wVGh1bWJzIiwic2VjdGlvbkhhcmR3YXJlV3JhcHBlciIsInNlY3Rpb25IYXJkd2FyZVRodW1ic1dyYXBwZXIiLCJkaXZDb250YWluZXIiLCJidG5Nb3JlIiwiYnRuQnV5IiwiY3JlYXRlSGFyZHdhcmVTbGlkZSIsImNyZWF0ZUhhcmR3YXJlVGh1bWJzIiwidGh1bWJzUGFyYW1zIiwibW9kdWxlcyIsIktleWJvYXJkIiwiQXV0b3BsYXkiLCJsb29wIiwic2xpZGVzUGVyVmlldyIsInNwYWNlQmV0d2VlbiIsImNlbnRlcmVkU2xpZGVzIiwic2xpZGVUb0NsaWNrZWRTbGlkZSIsImdyYWJDdXJzb3IiLCJ3YXRjaFNsaWRlc1Byb2dyZXNzIiwia2V5Ym9hcmQiLCJhdXRvcGxheSIsImRlbGF5Iiwic3RvcE9uTGFzdFNsaWRlIiwiZGlzYWJsZU9uSW50ZXJhY3Rpb24iLCJwYXVzZU9uTW91c2VFbnRlciIsIndhaXRGb3JUcmFuc2l0aW9uIiwic3BlZWQiLCJ0aHVtc1BhcmFtc1RvcCIsImJyZWFrcG9pbnRzIiwibGVuZ3RoIiwidGh1bXNQYXJhbXNIYXJkd2FyZSIsImdhbGxlcnlUb3BUaHVtYnMiLCJnYWxsZXJ5SGFyZHdhcmVUaHVtYnMiLCJzbGlkZXJQYXJhbXMiLCJFZmZlY3RGYWRlIiwiVGh1bWJzIiwiZWZmZWN0IiwiZmFkZUVmZmVjdCIsImNyb3NzRmFkZSIsInRvdWNoUmF0aW8iLCJzbGlkZXJQYXJhbXNUb3AiLCJsb29wZWRTbGlkZXMiLCJ0aHVtYnMiLCJzd2lwZXIiLCJzbGlkZXJQYXJhbXNIYXJkd2FyZSIsImlzT2JqZWN0Iiwib2JqIiwiY29uc3RydWN0b3IiLCJPYmplY3QiLCJleHRlbmQiLCJ0YXJnZXQiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNzckRvY3VtZW50IiwiYm9keSIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWN0aXZlRWxlbWVudCIsImJsdXIiLCJub2RlTmFtZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJnZXRFbGVtZW50QnlJZCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiY2hpbGRyZW4iLCJjaGlsZE5vZGVzIiwic3R5bGUiLCJzZXRBdHRyaWJ1dGUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNyZWF0ZUVsZW1lbnROUyIsImltcG9ydE5vZGUiLCJsb2NhdGlvbiIsImhhc2giLCJob3N0IiwiaG9zdG5hbWUiLCJvcmlnaW4iLCJwYXRobmFtZSIsInByb3RvY29sIiwic2VhcmNoIiwiZ2V0RG9jdW1lbnQiLCJkb2MiLCJzc3JXaW5kb3ciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwicHVzaFN0YXRlIiwiZ28iLCJiYWNrIiwiQ3VzdG9tRXZlbnQiLCJ0aGlzIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJJbWFnZSIsIkRhdGUiLCJzY3JlZW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwibWF0Y2hNZWRpYSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImNhbGxiYWNrIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJnZXRXaW5kb3ciLCJ3aW4iLCJ3aW5kb3ciLCJuZXh0VGljayIsIm5vdyIsImdldFRyYW5zbGF0ZSIsImVsIiwiYXhpcyIsIm1hdHJpeCIsImN1clRyYW5zZm9ybSIsInRyYW5zZm9ybU1hdHJpeCIsImN1clN0eWxlIiwiY3VycmVudFN0eWxlIiwiV2ViS2l0Q1NTTWF0cml4IiwidHJhbnNmb3JtIiwid2Via2l0VHJhbnNmb3JtIiwic3BsaXQiLCJhIiwicmVwbGFjZSIsImpvaW4iLCJNb3pUcmFuc2Zvcm0iLCJPVHJhbnNmb3JtIiwiTXNUcmFuc2Zvcm0iLCJtc1RyYW5zZm9ybSIsInRvU3RyaW5nIiwibTQxIiwicGFyc2VGbG9hdCIsIm00MiIsIm8iLCJwcm90b3R5cGUiLCJjYWxsIiwic2xpY2UiLCJhcmdzIiwidG8iLCJub0V4dGVuZCIsImkiLCJuZXh0U291cmNlIiwibm9kZSIsIkhUTUxFbGVtZW50Iiwibm9kZVR5cGUiLCJrZXlzQXJyYXkiLCJmaWx0ZXIiLCJpbmRleE9mIiwibmV4dEluZGV4IiwibGVuIiwibmV4dEtleSIsImRlc2MiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1bmRlZmluZWQiLCJlbnVtZXJhYmxlIiwiX19zd2lwZXJfXyIsInNldENTU1Byb3BlcnR5IiwidmFyTmFtZSIsInZhclZhbHVlIiwic2V0UHJvcGVydHkiLCJhbmltYXRlQ1NTTW9kZVNjcm9sbCIsInRhcmdldFBvc2l0aW9uIiwic2lkZSIsInN0YXJ0UG9zaXRpb24iLCJ0cmFuc2xhdGUiLCJ0aW1lIiwic3RhcnRUaW1lIiwiZHVyYXRpb24iLCJwYXJhbXMiLCJ3cmFwcGVyRWwiLCJzY3JvbGxTbmFwVHlwZSIsImNzc01vZGVGcmFtZUlEIiwiZGlyIiwiaXNPdXRPZkJvdW5kIiwiY3VycmVudCIsImFuaW1hdGUiLCJnZXRUaW1lIiwicHJvZ3Jlc3MiLCJNYXRoIiwibWF4IiwibWluIiwiZWFzZVByb2dyZXNzIiwiY29zIiwiUEkiLCJjdXJyZW50UG9zaXRpb24iLCJzY3JvbGxUbyIsIm92ZXJmbG93IiwiZ2V0U2xpZGVUcmFuc2Zvcm1FbCIsInNsaWRlRWwiLCJzaGFkb3dFbCIsImVsZW1lbnRDaGlsZHJlbiIsImVsZW1lbnQiLCJzZWxlY3RvciIsIm1hdGNoZXMiLCJ0YWciLCJjbGFzc2VzIiwiQXJyYXkiLCJpc0FycmF5IiwiZWxlbWVudE9mZnNldCIsImJveCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImNsaWVudFRvcCIsImNsaWVudExlZnQiLCJzY3JvbGxUb3AiLCJzY3JvbGxZIiwic2Nyb2xsTGVmdCIsInNjcm9sbFgiLCJ0b3AiLCJsZWZ0IiwiZWxlbWVudFN0eWxlIiwicHJvcCIsImVsZW1lbnRJbmRleCIsImNoaWxkIiwicHJldmlvdXNTaWJsaW5nIiwiZWxlbWVudFBhcmVudHMiLCJwYXJlbnRzIiwicGFyZW50IiwicGFyZW50RWxlbWVudCIsInB1c2giLCJlbGVtZW50VHJhbnNpdGlvbkVuZCIsImZpcmVDYWxsQmFjayIsImUiLCJlbGVtZW50T3V0ZXJTaXplIiwic2l6ZSIsImluY2x1ZGVNYXJnaW5zIiwib2Zmc2V0V2lkdGgiLCJzdXBwb3J0IiwiZGV2aWNlQ2FjaGVkIiwiYnJvd3NlciIsImdldFN1cHBvcnQiLCJzbW9vdGhTY3JvbGwiLCJkb2N1bWVudEVsZW1lbnQiLCJ0b3VjaCIsIkRvY3VtZW50VG91Y2giLCJjYWxjU3VwcG9ydCIsIm9uIiwiZXZlbnRzIiwiaGFuZGxlciIsInByaW9yaXR5Iiwic2VsZiIsImV2ZW50c0xpc3RlbmVycyIsImRlc3Ryb3llZCIsIm1ldGhvZCIsImV2ZW50Iiwib25jZSIsIm9uY2VIYW5kbGVyIiwib2ZmIiwiX19lbWl0dGVyUHJveHkiLCJhcHBseSIsIm9uQW55IiwiZXZlbnRzQW55TGlzdGVuZXJzIiwib2ZmQW55IiwiaW5kZXgiLCJzcGxpY2UiLCJldmVudEhhbmRsZXIiLCJlbWl0IiwiY29udGV4dCIsInVuc2hpZnQiLCJ1cGRhdGVTaXplIiwid2lkdGgiLCJoZWlnaHQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImlzSG9yaXpvbnRhbCIsImlzVmVydGljYWwiLCJwYXJzZUludCIsIk51bWJlciIsImlzTmFOIiwiYXNzaWduIiwidXBkYXRlU2xpZGVzIiwiZ2V0RGlyZWN0aW9uTGFiZWwiLCJwcm9wZXJ0eSIsImdldERpcmVjdGlvblByb3BlcnR5VmFsdWUiLCJsYWJlbCIsInNsaWRlc0VsIiwic3dpcGVyU2l6ZSIsInJ0bFRyYW5zbGF0ZSIsInJ0bCIsIndyb25nUlRMIiwiaXNWaXJ0dWFsIiwidmlydHVhbCIsImVuYWJsZWQiLCJwcmV2aW91c1NsaWRlc0xlbmd0aCIsInNsaWRlcyIsInNsaWRlQ2xhc3MiLCJzbGlkZXNMZW5ndGgiLCJzbmFwR3JpZCIsInNsaWRlc0dyaWQiLCJzbGlkZXNTaXplc0dyaWQiLCJvZmZzZXRCZWZvcmUiLCJzbGlkZXNPZmZzZXRCZWZvcmUiLCJvZmZzZXRBZnRlciIsInNsaWRlc09mZnNldEFmdGVyIiwicHJldmlvdXNTbmFwR3JpZExlbmd0aCIsInByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCIsInNsaWRlUG9zaXRpb24iLCJwcmV2U2xpZGVTaXplIiwidmlydHVhbFNpemUiLCJtYXJnaW5MZWZ0IiwibWFyZ2luUmlnaHQiLCJtYXJnaW5Cb3R0b20iLCJtYXJnaW5Ub3AiLCJjc3NNb2RlIiwiZ3JpZEVuYWJsZWQiLCJncmlkIiwicm93cyIsInNsaWRlU2l6ZSIsImluaXRTbGlkZXMiLCJzaG91bGRSZXNldFNsaWRlU2l6ZSIsInNsaWRlIiwidXBkYXRlU2xpZGUiLCJzbGlkZVN0eWxlcyIsImN1cnJlbnRUcmFuc2Zvcm0iLCJjdXJyZW50V2ViS2l0VHJhbnNmb3JtIiwicm91bmRMZW5ndGhzIiwicGFkZGluZ0xlZnQiLCJwYWRkaW5nUmlnaHQiLCJib3hTaXppbmciLCJmbG9vciIsInN3aXBlclNsaWRlU2l6ZSIsImFicyIsInNsaWRlc1Blckdyb3VwIiwic2xpZGVzUGVyR3JvdXBTa2lwIiwic2V0V3JhcHBlclNpemUiLCJ1cGRhdGVXcmFwcGVyU2l6ZSIsIm5ld1NsaWRlc0dyaWQiLCJzbGlkZXNHcmlkSXRlbSIsImdyb3VwcyIsImNlaWwiLCJzbGlkZXNCZWZvcmUiLCJzbGlkZXNBZnRlciIsImdyb3VwU2l6ZSIsIl8iLCJzbGlkZUluZGV4IiwiY2VudGVyZWRTbGlkZXNCb3VuZHMiLCJhbGxTbGlkZXNTaXplIiwic2xpZGVTaXplVmFsdWUiLCJtYXhTbmFwIiwic25hcCIsImNlbnRlckluc3VmZmljaWVudFNsaWRlcyIsImFsbFNsaWRlc09mZnNldCIsInNuYXBJbmRleCIsImFkZFRvU25hcEdyaWQiLCJhZGRUb1NsaWRlc0dyaWQiLCJ2Iiwid2F0Y2hPdmVyZmxvdyIsImNoZWNrT3ZlcmZsb3ciLCJ1cGRhdGVTbGlkZXNPZmZzZXQiLCJiYWNrRmFjZUhpZGRlbkNsYXNzIiwiY29udGFpbmVyTW9kaWZpZXJDbGFzcyIsImhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkIiwiY29udGFpbnMiLCJtYXhCYWNrZmFjZUhpZGRlblNsaWRlcyIsInJlbW92ZSIsInVwZGF0ZUF1dG9IZWlnaHQiLCJhY3RpdmVTbGlkZXMiLCJuZXdIZWlnaHQiLCJzZXRUcmFuc2l0aW9uIiwiZ2V0U2xpZGVCeUluZGV4IiwiZ2V0QXR0cmlidXRlIiwidmlzaWJsZVNsaWRlcyIsImFjdGl2ZUluZGV4Iiwib2Zmc2V0SGVpZ2h0IiwibWludXNPZmZzZXQiLCJpc0VsZW1lbnQiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwic3dpcGVyU2xpZGVPZmZzZXQiLCJ1cGRhdGVTbGlkZXNQcm9ncmVzcyIsIm9mZnNldENlbnRlciIsInNsaWRlVmlzaWJsZUNsYXNzIiwidmlzaWJsZVNsaWRlc0luZGV4ZXMiLCJzbGlkZU9mZnNldCIsInNsaWRlUHJvZ3Jlc3MiLCJtaW5UcmFuc2xhdGUiLCJvcmlnaW5hbFNsaWRlUHJvZ3Jlc3MiLCJzbGlkZUJlZm9yZSIsInNsaWRlQWZ0ZXIiLCJvcmlnaW5hbFByb2dyZXNzIiwidXBkYXRlUHJvZ3Jlc3MiLCJtdWx0aXBsaWVyIiwidHJhbnNsYXRlc0RpZmYiLCJtYXhUcmFuc2xhdGUiLCJpc0JlZ2lubmluZyIsImlzRW5kIiwicHJvZ3Jlc3NMb29wIiwid2FzQmVnaW5uaW5nIiwid2FzRW5kIiwiaXNCZWdpbm5pbmdSb3VuZGVkIiwiaXNFbmRSb3VuZGVkIiwiZmlyc3RTbGlkZUluZGV4IiwibGFzdFNsaWRlSW5kZXgiLCJmaXJzdFNsaWRlVHJhbnNsYXRlIiwibGFzdFNsaWRlVHJhbnNsYXRlIiwidHJhbnNsYXRlTWF4IiwidHJhbnNsYXRlQWJzIiwiYXV0b0hlaWdodCIsInVwZGF0ZVNsaWRlc0NsYXNzZXMiLCJnZXRGaWx0ZXJlZFNsaWRlIiwiYWN0aXZlU2xpZGUiLCJzbGlkZUFjdGl2ZUNsYXNzIiwic2xpZGVOZXh0Q2xhc3MiLCJzbGlkZVByZXZDbGFzcyIsIm5leHRTbGlkZSIsIm5leHRFbHMiLCJuZXh0RWxlbWVudFNpYmxpbmciLCJuZXh0IiwiZWxlbWVudE5leHRBbGwiLCJwcmV2U2xpZGUiLCJwcmV2RWxzIiwicHJldmlvdXNFbGVtZW50U2libGluZyIsInByZXYiLCJlbGVtZW50UHJldkFsbCIsImVtaXRTbGlkZXNDbGFzc2VzIiwidXBkYXRlQWN0aXZlSW5kZXgiLCJuZXdBY3RpdmVJbmRleCIsInByZXZpb3VzSW5kZXgiLCJyZWFsSW5kZXgiLCJwcmV2aW91c1JlYWxJbmRleCIsInByZXZpb3VzU25hcEluZGV4IiwiZ2V0VmlydHVhbFJlYWxJbmRleCIsImFJbmRleCIsIm5vcm1hbGl6ZVNsaWRlSW5kZXgiLCJnZXRBY3RpdmVJbmRleEJ5VHJhbnNsYXRlIiwic2tpcCIsImluaXRpYWxpemVkIiwicnVuQ2FsbGJhY2tzT25Jbml0IiwidXBkYXRlQ2xpY2tlZFNsaWRlIiwiY2xvc2VzdCIsInNsaWRlRm91bmQiLCJjbGlja2VkU2xpZGUiLCJjbGlja2VkSW5kZXgiLCJ0cmFuc2l0aW9uRW1pdCIsInJ1bkNhbGxiYWNrcyIsImRpcmVjdGlvbiIsInN0ZXAiLCJzbGlkZVRvIiwiaW50ZXJuYWwiLCJpbml0aWFsIiwiYW5pbWF0aW5nIiwicHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIiwibm9ybWFsaXplZFRyYW5zbGF0ZSIsIm5vcm1hbGl6ZWRHcmlkIiwibm9ybWFsaXplZEdyaWROZXh0IiwiYWxsb3dTbGlkZU5leHQiLCJhbGxvd1NsaWRlUHJldiIsInNldFRyYW5zbGF0ZSIsInRyYW5zaXRpb25TdGFydCIsInRyYW5zaXRpb25FbmQiLCJpc0giLCJ0IiwiX2ltbWVkaWF0ZVZpcnR1YWwiLCJfY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0IiwiaW5pdGlhbFNsaWRlIiwiYmVoYXZpb3IiLCJvblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCIsInNsaWRlVG9Mb29wIiwibmV3SW5kZXgiLCJzbGlkZU5leHQiLCJwZXJHcm91cCIsInNsaWRlc1Blckdyb3VwQXV0byIsInNsaWRlc1BlclZpZXdEeW5hbWljIiwiaW5jcmVtZW50IiwibG9vcFByZXZlbnRzU2xpZGluZyIsImxvb3BGaXgiLCJfY2xpZW50TGVmdCIsInJld2luZCIsInNsaWRlUHJldiIsIm5vcm1hbGl6ZSIsInZhbCIsIm5vcm1hbGl6ZWRTbmFwR3JpZCIsInByZXZTbmFwIiwicHJldlNuYXBJbmRleCIsInByZXZJbmRleCIsImxhc3RJbmRleCIsInNsaWRlUmVzZXQiLCJzbGlkZVRvQ2xvc2VzdCIsInRocmVzaG9sZCIsImN1cnJlbnRTbmFwIiwic2xpZGVUb0luZGV4Iiwic2xpZGVTZWxlY3RvciIsIm9uVG91Y2hTdGFydCIsInRvdWNoRXZlbnRzRGF0YSIsImV2Q2FjaGUiLCJ0b3VjaGVzIiwic2ltdWxhdGVUb3VjaCIsInBvaW50ZXJUeXBlIiwib3JpZ2luYWxFdmVudCIsInRhcmdldEVsIiwidG91Y2hFdmVudHNUYXJnZXQiLCJ3aGljaCIsImJ1dHRvbiIsImlzVG91Y2hlZCIsImlzTW92ZWQiLCJzd2lwaW5nQ2xhc3NIYXNWYWx1ZSIsIm5vU3dpcGluZ0NsYXNzIiwiZXZlbnRQYXRoIiwiY29tcG9zZWRQYXRoIiwicGF0aCIsInNoYWRvd1Jvb3QiLCJub1N3aXBpbmdTZWxlY3RvciIsImlzVGFyZ2V0U2hhZG93Iiwibm9Td2lwaW5nIiwiYmFzZSIsIl9fY2xvc2VzdEZyb20iLCJhc3NpZ25lZFNsb3QiLCJmb3VuZCIsImdldFJvb3ROb2RlIiwiY2xvc2VzdEVsZW1lbnQiLCJhbGxvd0NsaWNrIiwic3dpcGVIYW5kbGVyIiwiY3VycmVudFgiLCJwYWdlWCIsImN1cnJlbnRZIiwicGFnZVkiLCJzdGFydFgiLCJzdGFydFkiLCJlZGdlU3dpcGVEZXRlY3Rpb24iLCJpT1NFZGdlU3dpcGVEZXRlY3Rpb24iLCJlZGdlU3dpcGVUaHJlc2hvbGQiLCJpT1NFZGdlU3dpcGVUaHJlc2hvbGQiLCJpbm5lcldpZHRoIiwicHJldmVudERlZmF1bHQiLCJhbGxvd1RvdWNoQ2FsbGJhY2tzIiwiaXNTY3JvbGxpbmciLCJzdGFydE1vdmluZyIsInRvdWNoU3RhcnRUaW1lIiwic3dpcGVEaXJlY3Rpb24iLCJhbGxvd1RocmVzaG9sZE1vdmUiLCJmb2N1c2FibGVFbGVtZW50cyIsInNob3VsZFByZXZlbnREZWZhdWx0IiwiYWxsb3dUb3VjaE1vdmUiLCJ0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQiLCJ0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdCIsImlzQ29udGVudEVkaXRhYmxlIiwiZnJlZU1vZGUiLCJvblRvdWNoTW92ZSIsInBvaW50ZXJJbmRleCIsImZpbmRJbmRleCIsImNhY2hlZEV2IiwicG9pbnRlcklkIiwidGFyZ2V0VG91Y2giLCJwcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciIsInByZXZYIiwicHJldlkiLCJ0b3VjaFJlbGVhc2VPbkVkZ2VzIiwidGFyZ2V0VG91Y2hlcyIsImRpZmZYIiwiZGlmZlkiLCJzcXJ0IiwidG91Y2hBbmdsZSIsImF0YW4yIiwiem9vbSIsImNhbmNlbGFibGUiLCJ0b3VjaE1vdmVTdG9wUHJvcGFnYXRpb24iLCJuZXN0ZWQiLCJzdG9wUHJvcGFnYXRpb24iLCJkaWZmIiwidG91Y2hlc0RpZmYiLCJwcmV2aW91c1giLCJwcmV2aW91c1kiLCJvbmVXYXlNb3ZlbWVudCIsInByZXZUb3VjaGVzRGlyZWN0aW9uIiwidG91Y2hlc0RpcmVjdGlvbiIsImlzTG9vcCIsInN0YXJ0VHJhbnNsYXRlIiwiZXZ0IiwiYnViYmxlcyIsImRpc3BhdGNoRXZlbnQiLCJhbGxvd01vbWVudHVtQm91bmNlIiwic2V0R3JhYkN1cnNvciIsImxvb3BGaXhlZCIsImN1cnJlbnRUcmFuc2xhdGUiLCJkaXNhYmxlUGFyZW50U3dpcGVyIiwicmVzaXN0YW5jZVJhdGlvIiwiYWN0aXZlU2xpZGVJbmRleCIsInJlc2lzdGFuY2UiLCJmb2xsb3dGaW5nZXIiLCJvblRvdWNoRW5kIiwiaW5jbHVkZXMiLCJ0eXBlIiwidG91Y2hFbmRUaW1lIiwidGltZURpZmYiLCJwYXRoVHJlZSIsImxhc3RDbGlja1RpbWUiLCJjdXJyZW50UG9zIiwic3RvcEluZGV4IiwicmV3aW5kRmlyc3RJbmRleCIsInJld2luZExhc3RJbmRleCIsInJhdGlvIiwibG9uZ1N3aXBlc01zIiwibG9uZ1N3aXBlcyIsImxvbmdTd2lwZXNSYXRpbyIsInNob3J0U3dpcGVzIiwibmF2aWdhdGlvbiIsIm5leHRFbCIsInByZXZFbCIsInRpbWVvdXQiLCJvblJlc2l6ZSIsInNldEJyZWFrcG9pbnQiLCJpc1ZpcnR1YWxMb29wIiwicnVubmluZyIsInBhdXNlZCIsInJlc3VtZSIsIm9uQ2xpY2siLCJwcmV2ZW50Q2xpY2tzIiwicHJldmVudENsaWNrc1Byb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwib25TY3JvbGwiLCJuZXdQcm9ncmVzcyIsInByZXZpb3VzVHJhbnNsYXRlIiwicHJvY2Vzc0xhenlQcmVsb2FkZXIiLCJpbWFnZUVsIiwibGF6eUVsIiwibGF6eVByZWxvYWRlckNsYXNzIiwib25Mb2FkIiwidXBkYXRlIiwiZHVtbXlFdmVudEF0dGFjaGVkIiwiZHVtbXlFdmVudExpc3RlbmVyIiwiZGV2aWNlIiwiY2FwdHVyZSIsImRvbU1ldGhvZCIsInN3aXBlck1ldGhvZCIsInBhc3NpdmUiLCJ1cGRhdGVPbldpbmRvd1Jlc2l6ZSIsImlvcyIsImFuZHJvaWQiLCJpc0dyaWRFbmFibGVkIiwiaW5pdCIsInJlc2l6ZU9ic2VydmVyIiwiY3JlYXRlRWxlbWVudHMiLCJ1cmwiLCJ2aXJ0dWFsVHJhbnNsYXRlIiwiYnJlYWtwb2ludHNCYXNlIiwidW5pcXVlTmF2RWxlbWVudHMiLCJwYXNzaXZlTGlzdGVuZXJzIiwid3JhcHBlckNsYXNzIiwiX2VtaXRDbGFzc2VzIiwibW9kdWxlRXh0ZW5kUGFyYW1zIiwiYWxsTW9kdWxlc1BhcmFtcyIsIm1vZHVsZVBhcmFtTmFtZSIsIm1vZHVsZVBhcmFtcyIsImF1dG8iLCJwcm90b3R5cGVzIiwiZXZlbnRzRW1pdHRlciIsImJ5Q29udHJvbGxlciIsIngiLCJ5IiwidHJhbnNsYXRlVG8iLCJ0cmFuc2xhdGVCb3VuZHMiLCJuZXdUcmFuc2xhdGUiLCJvblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJ0cmFuc2l0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwibG9vcENyZWF0ZSIsInNsaWRlUmVhbEluZGV4IiwiYnlNb3VzZXdoZWVsIiwicHJlcGVuZFNsaWRlc0luZGV4ZXMiLCJhcHBlbmRTbGlkZXNJbmRleGVzIiwiaXNOZXh0IiwiaXNQcmV2Iiwic2xpZGVzUHJlcGVuZGVkIiwic2xpZGVzQXBwZW5kZWQiLCJwcmVwZW5kIiwicmVjYWxjU2xpZGVzIiwiY3VycmVudFNsaWRlVHJhbnNsYXRlIiwiY29udHJvbGxlciIsImNvbnRyb2wiLCJsb29wUGFyYW1zIiwiYyIsImxvb3BEZXN0cm95IiwibmV3U2xpZGVzT3JkZXIiLCJzd2lwZXJTbGlkZUluZGV4IiwicmVtb3ZlQXR0cmlidXRlIiwibW92aW5nIiwiaXNMb2NrZWQiLCJjdXJzb3IiLCJ1bnNldEdyYWJDdXJzb3IiLCJhdHRhY2hFdmVudHMiLCJiaW5kIiwiZGV0YWNoRXZlbnRzIiwiYnJlYWtwb2ludCIsImdldEJyZWFrcG9pbnQiLCJjdXJyZW50QnJlYWtwb2ludCIsImJyZWFrcG9pbnRQYXJhbXMiLCJvcmlnaW5hbFBhcmFtcyIsIndhc011bHRpUm93IiwiaXNNdWx0aVJvdyIsIndhc0VuYWJsZWQiLCJlbWl0Q29udGFpbmVyQ2xhc3NlcyIsImZpbGwiLCJ3YXNNb2R1bGVFbmFibGVkIiwiaXNNb2R1bGVFbmFibGVkIiwiZGlzYWJsZSIsImVuYWJsZSIsImRpcmVjdGlvbkNoYW5nZWQiLCJuZWVkc1JlTG9vcCIsImNoYW5nZURpcmVjdGlvbiIsImlzRW5hYmxlZCIsImNvbnRhaW5lckVsIiwiY3VycmVudEhlaWdodCIsImlubmVySGVpZ2h0IiwicG9pbnRzIiwicG9pbnQiLCJtaW5SYXRpbyIsInN1YnN0ciIsInZhbHVlIiwic29ydCIsImIiLCJ3YXNMb2NrZWQiLCJsYXN0U2xpZGVSaWdodEVkZ2UiLCJhZGRDbGFzc2VzIiwiY2xhc3NOYW1lcyIsInN1ZmZpeGVzIiwiZW50cmllcyIsInByZWZpeCIsInJlc3VsdENsYXNzZXMiLCJpdGVtIiwicHJlcGFyZUNsYXNzZXMiLCJyZW1vdmVDbGFzc2VzIiwiZXh0ZW5kZWREZWZhdWx0cyIsIlN3aXBlciIsInN3aXBlcnMiLCJuZXdQYXJhbXMiLCJvdmVycmlkZXMiLCJwbGF0Zm9ybSIsInVhIiwic2NyZWVuV2lkdGgiLCJzY3JlZW5IZWlnaHQiLCJtYXRjaCIsImlwYWQiLCJpcG9kIiwiaXBob25lIiwid2luZG93cyIsIm1hY29zIiwib3MiLCJjYWxjRGV2aWNlIiwiZ2V0RGV2aWNlIiwibmVlZFBlcnNwZWN0aXZlRml4IiwiaXNTYWZhcmkiLCJ0b0xvd2VyQ2FzZSIsIlN0cmluZyIsIm1ham9yIiwibWlub3IiLCJudW0iLCJpc1dlYlZpZXciLCJ0ZXN0IiwiY2FsY0Jyb3dzZXIiLCJfX21vZHVsZXNfXyIsIm1vZCIsImV4dGVuZFBhcmFtcyIsInN3aXBlclBhcmFtcyIsImRlZmF1bHRzIiwicGFzc2VkUGFyYW1zIiwiZXZlbnROYW1lIiwidmVsb2NpdHkiLCJjbGlja1RpbWVvdXQiLCJ2ZWxvY2l0aWVzIiwiaW1hZ2VzVG9Mb2FkIiwiaW1hZ2VzTG9hZGVkIiwic2V0UHJvZ3Jlc3MiLCJjbHMiLCJjbGFzc05hbWUiLCJnZXRTbGlkZUNsYXNzZXMiLCJ1cGRhdGVzIiwidmlldyIsImV4YWN0Iiwic3B2IiwiYnJlYWtMb29wIiwidHJhbnNsYXRlVmFsdWUiLCJ0cmFuc2xhdGVkIiwiY29tcGxldGUiLCJuZXdEaXJlY3Rpb24iLCJuZWVkVXBkYXRlIiwiY3VycmVudERpcmVjdGlvbiIsImNoYW5nZUxhbmd1YWdlRGlyZWN0aW9uIiwibW91bnQiLCJtb3VudGVkIiwiZ2V0V3JhcHBlclNlbGVjdG9yIiwidHJpbSIsImRlc3Ryb3kiLCJkZWxldGVJbnN0YW5jZSIsImNsZWFuU3R5bGVzIiwib2JqZWN0IiwiZGVsZXRlUHJvcHMiLCJzdGF0aWMiLCJuZXdEZWZhdWx0cyIsIm1vZHVsZSIsIm0iLCJpbnN0YWxsTW9kdWxlIiwicHJvdG90eXBlR3JvdXAiLCJwcm90b01ldGhvZCIsInVzZSIsIm9ic2VydmVyIiwiYW5pbWF0aW9uRnJhbWUiLCJyZXNpemVIYW5kbGVyIiwib3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyIiwiUmVzaXplT2JzZXJ2ZXIiLCJuZXdXaWR0aCIsImNvbnRlbnRCb3hTaXplIiwiY29udGVudFJlY3QiLCJpbmxpbmVTaXplIiwiYmxvY2tTaXplIiwib2JzZXJ2ZSIsInVub2JzZXJ2ZSIsIm9ic2VydmVycyIsImF0dGFjaCIsIm9wdGlvbnMiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2Via2l0TXV0YXRpb25PYnNlcnZlciIsIm11dGF0aW9ucyIsIm9ic2VydmVyVXBkYXRlIiwiYXR0cmlidXRlcyIsImNoaWxkTGlzdCIsImNoYXJhY3RlckRhdGEiLCJvYnNlcnZlUGFyZW50cyIsIm9ic2VydmVTbGlkZUNoaWxkcmVuIiwiY29udGFpbmVyUGFyZW50cyIsImRpc2Nvbm5lY3QiLCJWaXJ0dWFsIiwiY3NzTW9kZVRpbWVvdXQiLCJjYWNoZSIsInJlbmRlclNsaWRlIiwicmVuZGVyRXh0ZXJuYWwiLCJyZW5kZXJFeHRlcm5hbFVwZGF0ZSIsImFkZFNsaWRlc0JlZm9yZSIsImFkZFNsaWRlc0FmdGVyIiwiZnJvbSIsIm9mZnNldCIsInRlbXBET00iLCJpbm5lckhUTUwiLCJmb3JjZSIsInByZXZpb3VzRnJvbSIsInByZXZpb3VzVG8iLCJwcmV2aW91c1NsaWRlc0dyaWQiLCJwcmV2aW91c09mZnNldCIsIm9mZnNldFByb3AiLCJvblJlbmRlcmVkIiwic2xpZGVzVG9SZW5kZXIiLCJwcmVwZW5kSW5kZXhlcyIsImFwcGVuZEluZGV4ZXMiLCJnZXRTbGlkZUluZGV4IiwibG9vcEZyb20iLCJsb29wVG8iLCJkb21TbGlkZXNBc3NpZ25lZCIsImFwcGVuZFNsaWRlIiwicHJlcGVuZFNsaWRlIiwibnVtYmVyT2ZOZXdTbGlkZXMiLCJuZXdDYWNoZSIsImNhY2hlZEluZGV4IiwiY2FjaGVkRWwiLCJjYWNoZWRFbEluZGV4IiwicmVtb3ZlU2xpZGUiLCJzbGlkZXNJbmRleGVzIiwicmVtb3ZlQWxsU2xpZGVzIiwiaGFuZGxlIiwia2MiLCJrZXlDb2RlIiwiY2hhckNvZGUiLCJwYWdlVXBEb3duIiwiaXNQYWdlVXAiLCJpc1BhZ2VEb3duIiwiaXNBcnJvd0xlZnQiLCJpc0Fycm93UmlnaHQiLCJpc0Fycm93VXAiLCJpc0Fycm93RG93biIsInNoaWZ0S2V5IiwiYWx0S2V5IiwiY3RybEtleSIsIm1ldGFLZXkiLCJvbmx5SW5WaWV3cG9ydCIsImluVmlldyIsInN3aXBlcldpZHRoIiwic3dpcGVySGVpZ2h0Iiwid2luZG93V2lkdGgiLCJ3aW5kb3dIZWlnaHQiLCJzd2lwZXJPZmZzZXQiLCJzd2lwZXJDb29yZCIsInJldHVyblZhbHVlIiwiTW91c2V3aGVlbCIsIm1vdXNld2hlZWwiLCJyZWxlYXNlT25FZGdlcyIsImludmVydCIsImZvcmNlVG9BeGlzIiwic2Vuc2l0aXZpdHkiLCJldmVudHNUYXJnZXQiLCJ0aHJlc2hvbGREZWx0YSIsInRocmVzaG9sZFRpbWUiLCJsYXN0RXZlbnRCZWZvcmVTbmFwIiwibGFzdFNjcm9sbFRpbWUiLCJyZWNlbnRXaGVlbEV2ZW50cyIsImhhbmRsZU1vdXNlRW50ZXIiLCJtb3VzZUVudGVyZWQiLCJoYW5kbGVNb3VzZUxlYXZlIiwiYW5pbWF0ZVNsaWRlciIsIm5ld0V2ZW50IiwiZGVsdGEiLCJyYXciLCJ0YXJnZXRFbENvbnRhaW5zVGFyZ2V0IiwicnRsRmFjdG9yIiwic1giLCJzWSIsInBYIiwicFkiLCJkZXRhaWwiLCJ3aGVlbERlbHRhIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhWCIsIkhPUklaT05UQUxfQVhJUyIsImRlbHRhWSIsImRlbHRhWCIsImRlbHRhTW9kZSIsInNwaW5YIiwic3BpblkiLCJwaXhlbFgiLCJwaXhlbFkiLCJwb3NpdGlvbnMiLCJzaWduIiwiaWdub3JlV2hlZWxFdmVudHMiLCJwb3NpdGlvbiIsInN0aWNreSIsInNoaWZ0IiwicHJldkV2ZW50IiwiZmlyc3RFdmVudCIsInNuYXBUb1RocmVzaG9sZCIsImF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb24iLCJzdG9wIiwicmVsZWFzZVNjcm9sbCIsImNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQiLCJjaGVja1Byb3BzIiwiTmF2aWdhdGlvbiIsImhpZGVPbkNsaWNrIiwiZGlzYWJsZWRDbGFzcyIsImhpZGRlbkNsYXNzIiwibG9ja0NsYXNzIiwibmF2aWdhdGlvbkRpc2FibGVkQ2xhc3MiLCJtYWtlRWxlbWVudHNBcnJheSIsImdldEVsIiwicmVzIiwidG9nZ2xlRWwiLCJkaXNhYmxlZCIsInN1YkVsIiwidGFnTmFtZSIsIm9uUHJldkNsaWNrIiwib25OZXh0Q2xpY2siLCJpbml0QnV0dG9uIiwiZGVzdHJveUJ1dHRvbiIsIl9zIiwicGFnaW5hdGlvbiIsImNsaWNrYWJsZSIsImlzSGlkZGVuIiwidG9nZ2xlIiwiY2xhc3Nlc1RvU2VsZWN0b3IiLCJQYWdpbmF0aW9uIiwicGZ4IiwiYnVsbGV0U2l6ZSIsImJ1bGxldEVsZW1lbnQiLCJyZW5kZXJCdWxsZXQiLCJyZW5kZXJQcm9ncmVzc2JhciIsInJlbmRlckZyYWN0aW9uIiwicmVuZGVyQ3VzdG9tIiwicHJvZ3Jlc3NiYXJPcHBvc2l0ZSIsImR5bmFtaWNCdWxsZXRzIiwiZHluYW1pY01haW5CdWxsZXRzIiwiZm9ybWF0RnJhY3Rpb25DdXJyZW50IiwibnVtYmVyIiwiZm9ybWF0RnJhY3Rpb25Ub3RhbCIsImJ1bGxldENsYXNzIiwiYnVsbGV0QWN0aXZlQ2xhc3MiLCJtb2RpZmllckNsYXNzIiwiY3VycmVudENsYXNzIiwidG90YWxDbGFzcyIsInByb2dyZXNzYmFyRmlsbENsYXNzIiwicHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzIiwiY2xpY2thYmxlQ2xhc3MiLCJob3Jpem9udGFsQ2xhc3MiLCJ2ZXJ0aWNhbENsYXNzIiwicGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MiLCJidWxsZXRzIiwiZHluYW1pY0J1bGxldEluZGV4IiwiaXNQYWdpbmF0aW9uRGlzYWJsZWQiLCJzZXRTaWRlQnVsbGV0cyIsImJ1bGxldEVsIiwib25CdWxsZXRDbGljayIsInRvdGFsIiwiZmlyc3RJbmRleCIsIm1pZEluZGV4Iiwic3VmZml4IiwiYnVsbGV0IiwiYnVsbGV0SW5kZXgiLCJmaXJzdERpc3BsYXllZEJ1bGxldCIsImxhc3REaXNwbGF5ZWRCdWxsZXQiLCJkeW5hbWljQnVsbGV0c0xlbmd0aCIsImJ1bGxldHNPZmZzZXQiLCJzdWJFbEluZGV4IiwiZnJhY3Rpb25FbCIsInRvdGFsRWwiLCJwcm9ncmVzc2JhckRpcmVjdGlvbiIsInNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwicHJvZ3Jlc3NFbCIsInJlbmRlciIsInBhZ2luYXRpb25IVE1MIiwibnVtYmVyT2ZCdWxsZXRzIiwiU2Nyb2xsYmFyIiwiZHJhZ1N0YXJ0UG9zIiwiZHJhZ1NpemUiLCJ0cmFja1NpemUiLCJkaXZpZGVyIiwiZHJhZ1RpbWVvdXQiLCJzY3JvbGxiYXIiLCJkcmFnRWwiLCJuZXdTaXplIiwibmV3UG9zIiwiaGlkZSIsIm9wYWNpdHkiLCJkaXNwbGF5IiwiZ2V0UG9pbnRlclBvc2l0aW9uIiwiY2xpZW50WCIsImNsaWVudFkiLCJzZXREcmFnUG9zaXRpb24iLCJwb3NpdGlvblJhdGlvIiwib25EcmFnU3RhcnQiLCJvbkRyYWdNb3ZlIiwib25EcmFnRW5kIiwic25hcE9uUmVsZWFzZSIsImFjdGl2ZUxpc3RlbmVyIiwicGFzc2l2ZUxpc3RlbmVyIiwiZXZlbnRNZXRob2QiLCJzd2lwZXJFbCIsImRyYWdDbGFzcyIsImRyYWdnYWJsZSIsInNjcm9sbGJhckRpc2FibGVkQ2xhc3MiLCJQYXJhbGxheCIsInBhcmFsbGF4Iiwic2V0VHJhbnNmb3JtIiwicm90YXRlIiwiY3VycmVudE9wYWNpdHkiLCJfc3dpcGVyIiwicGFyYWxsYXhFbCIsInBhcmFsbGF4RHVyYXRpb24iLCJab29tIiwibWF4UmF0aW8iLCJjb250YWluZXJDbGFzcyIsInpvb21lZFNsaWRlQ2xhc3MiLCJmYWtlR2VzdHVyZVRvdWNoZWQiLCJmYWtlR2VzdHVyZU1vdmVkIiwiY3VycmVudFNjYWxlIiwiaXNTY2FsaW5nIiwiZ2VzdHVyZSIsInNsaWRlV2lkdGgiLCJzbGlkZUhlaWdodCIsImltYWdlV3JhcEVsIiwiaW1hZ2UiLCJtaW5YIiwibWluWSIsIm1heFgiLCJtYXhZIiwidG91Y2hlc1N0YXJ0IiwidG91Y2hlc0N1cnJlbnQiLCJwcmV2UG9zaXRpb25YIiwicHJldlBvc2l0aW9uWSIsInByZXZUaW1lIiwiZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyIsIngxIiwieTEiLCJ4MiIsInkyIiwiZXZlbnRXaXRoaW5TbGlkZSIsIm9uR2VzdHVyZVN0YXJ0Iiwic2NhbGVTdGFydCIsIm9yaWdpblgiLCJvcmlnaW5ZIiwiZ2V0U2NhbGVPcmlnaW4iLCJ0cmFuc2Zvcm1PcmlnaW4iLCJvbkdlc3R1cmVDaGFuZ2UiLCJzY2FsZU1vdmUiLCJvbkdlc3R1cmVFbmQiLCJldmVudFdpdGhpblpvb21Db250YWluZXIiLCJzY2FsZWRXaWR0aCIsInNjYWxlZEhlaWdodCIsIm9uVHJhbnNpdGlvbkVuZCIsInpvb21JbiIsInRvdWNoWCIsInRvdWNoWSIsIm9mZnNldFgiLCJvZmZzZXRZIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJpbWFnZVdpZHRoIiwiaW1hZ2VIZWlnaHQiLCJ0cmFuc2xhdGVNaW5YIiwidHJhbnNsYXRlTWluWSIsInRyYW5zbGF0ZU1heFgiLCJ0cmFuc2xhdGVNYXhZIiwidG91Y2hBY3Rpb24iLCJmb3JjZVpvb21SYXRpbyIsInpvb21PdXQiLCJ6b29tVG9nZ2xlIiwiZ2V0TGlzdGVuZXJzIiwiYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSIsImRlZmluZVByb3BlcnR5IiwiZ2V0Iiwic2V0IiwibW9tZW50dW1EdXJhdGlvblgiLCJtb21lbnR1bUR1cmF0aW9uWSIsIm1vbWVudHVtRGlzdGFuY2VYIiwibmV3UG9zaXRpb25YIiwibW9tZW50dW1EaXN0YW5jZVkiLCJuZXdQb3NpdGlvblkiLCJtb21lbnR1bUR1cmF0aW9uIiwiaW4iLCJvdXQiLCJDb250cm9sbGVyIiwiTGluZWFyU3BsaW5lIiwiYmluYXJ5U2VhcmNoIiwibWF4SW5kZXgiLCJtaW5JbmRleCIsImd1ZXNzIiwiYXJyYXkiLCJpMSIsImkzIiwiaW50ZXJwb2xhdGUiLCJyZW1vdmVTcGxpbmUiLCJzcGxpbmUiLCJpbnZlcnNlIiwiYnkiLCJjb250cm9sRWxlbWVudCIsIm9uQ29udHJvbGxlclN3aXBlciIsIl90IiwiY29udHJvbGxlZCIsImNvbnRyb2xsZWRUcmFuc2xhdGUiLCJzZXRDb250cm9sbGVkVHJhbnNsYXRlIiwiZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbiIsInNldENvbnRyb2xsZWRUcmFuc2l0aW9uIiwiQTExeSIsImExMXkiLCJub3RpZmljYXRpb25DbGFzcyIsInByZXZTbGlkZU1lc3NhZ2UiLCJuZXh0U2xpZGVNZXNzYWdlIiwiZmlyc3RTbGlkZU1lc3NhZ2UiLCJsYXN0U2xpZGVNZXNzYWdlIiwicGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2UiLCJzbGlkZUxhYmVsTWVzc2FnZSIsImNvbnRhaW5lck1lc3NhZ2UiLCJjb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlIiwiaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UiLCJzbGlkZVJvbGUiLCJjbGlja2VkIiwibGl2ZVJlZ2lvbiIsIm5vdGlmeSIsIm1lc3NhZ2UiLCJub3RpZmljYXRpb24iLCJtYWtlRWxGb2N1c2FibGUiLCJtYWtlRWxOb3RGb2N1c2FibGUiLCJhZGRFbFJvbGUiLCJyb2xlIiwiYWRkRWxSb2xlRGVzY3JpcHRpb24iLCJkZXNjcmlwdGlvbiIsImFkZEVsTGFiZWwiLCJkaXNhYmxlRWwiLCJlbmFibGVFbCIsIm9uRW50ZXJPclNwYWNlS2V5IiwiY2xpY2siLCJoYXNQYWdpbmF0aW9uIiwiaGFzQ2xpY2thYmxlUGFnaW5hdGlvbiIsImluaXROYXZFbCIsIndyYXBwZXJJZCIsImNvbnRyb2xzIiwiYWRkRWxDb250cm9scyIsImhhbmRsZVBvaW50ZXJEb3duIiwiaGFuZGxlUG9pbnRlclVwIiwiaGFuZGxlRm9jdXMiLCJpc0FjdGl2ZSIsImlzVmlzaWJsZSIsInNvdXJjZUNhcGFiaWxpdGllcyIsImZpcmVzVG91Y2hFdmVudHMiLCJyZXBlYXQiLCJyb3VuZCIsInJhbmRvbSIsImdldFJhbmRvbU51bWJlciIsImxpdmUiLCJhZGRFbExpdmUiLCJ1cGRhdGVOYXZpZ2F0aW9uIiwidXBkYXRlUGFnaW5hdGlvbiIsIkhpc3RvcnkiLCJyb290Iiwia2VlcFF1ZXJ5IiwicGF0aHMiLCJzbHVnaWZ5IiwiZ2V0UGF0aFZhbHVlcyIsInVybE92ZXJyaWRlIiwiVVJMIiwicGF0aEFycmF5IiwicGFydCIsInNldEhpc3RvcnkiLCJjdXJyZW50U3RhdGUiLCJzdGF0ZSIsInNjcm9sbFRvU2xpZGUiLCJzZXRIaXN0b3J5UG9wU3RhdGUiLCJoYXNoTmF2aWdhdGlvbiIsIkhhc2hOYXZpZ2F0aW9uIiwid2F0Y2hTdGF0ZSIsIm9uSGFzaENoYW5nZSIsIm5ld0hhc2giLCJzZXRIYXNoIiwicmFmIiwidGltZUxlZnQiLCJyZXZlcnNlRGlyZWN0aW9uIiwiYXV0b3BsYXlUaW1lTGVmdCIsIndhc1BhdXNlZCIsInBhdXNlZEJ5VG91Y2giLCJ0b3VjaFN0YXJ0VGltZW91dCIsInNsaWRlQ2hhbmdlZCIsInBhdXNlZEJ5SW50ZXJhY3Rpb24iLCJhdXRvcGxheURlbGF5VG90YWwiLCJhdXRvcGxheURlbGF5Q3VycmVudCIsImF1dG9wbGF5U3RhcnRUaW1lIiwiY2FsY1RpbWVMZWZ0IiwicnVuIiwiZGVsYXlGb3JjZSIsImN1cnJlbnRTbGlkZURlbGF5IiwiYWN0aXZlU2xpZGVFbCIsImdldFNsaWRlRGVsYXkiLCJwcm9jZWVkIiwic3RhcnQiLCJwYXVzZSIsInJlc2V0Iiwib25WaXNpYmlsaXR5Q2hhbmdlIiwidmlzaWJpbGl0eVN0YXRlIiwib25Qb2ludGVyRW50ZXIiLCJvblBvaW50ZXJMZWF2ZSIsIlRodW1iIiwibXVsdGlwbGVBY3RpdmVUaHVtYnMiLCJhdXRvU2Nyb2xsT2Zmc2V0Iiwic2xpZGVUaHVtYkFjdGl2ZUNsYXNzIiwidGh1bWJzQ29udGFpbmVyQ2xhc3MiLCJzd2lwZXJDcmVhdGVkIiwib25UaHVtYkNsaWNrIiwidGh1bWJzU3dpcGVyIiwiU3dpcGVyQ2xhc3MiLCJ0aHVtYnNTd2lwZXJQYXJhbXMiLCJ0aHVtYnNUb0FjdGl2YXRlIiwidGh1bWJBY3RpdmVDbGFzcyIsInVzZU9mZnNldCIsImN1cnJlbnRUaHVtYnNJbmRleCIsIm5ld1RodW1ic0luZGV4IiwibmV3VGh1bWJzU2xpZGUiLCJnZXRUaHVtYnNFbGVtZW50QW5kSW5pdCIsInRodW1ic0VsZW1lbnQiLCJvblRodW1ic1N3aXBlciIsIndhdGNoRm9yVGh1bWJzVG9BcHBlYXIiLCJtb21lbnR1bSIsIm1vbWVudHVtUmF0aW8iLCJtb21lbnR1bUJvdW5jZSIsIm1vbWVudHVtQm91bmNlUmF0aW8iLCJtb21lbnR1bVZlbG9jaXR5UmF0aW8iLCJtaW5pbXVtVmVsb2NpdHkiLCJsYXN0TW92ZUV2ZW50IiwicG9wIiwidmVsb2NpdHlFdmVudCIsImRpc3RhbmNlIiwibW9tZW50dW1EaXN0YW5jZSIsIm5ld1Bvc2l0aW9uIiwiYWZ0ZXJCb3VuY2VQb3NpdGlvbiIsImRvQm91bmNlIiwiYm91bmNlQW1vdW50IiwibmVlZHNMb29wRml4IiwiaiIsIm1vdmVEaXN0YW5jZSIsImN1cnJlbnRTbGlkZVNpemUiLCJHcmlkIiwic2xpZGVzTnVtYmVyRXZlblRvUm93cyIsInNsaWRlc1BlclJvdyIsIm51bUZ1bGxDb2x1bW5zIiwibmV3U2xpZGVPcmRlckluZGV4IiwiY29sdW1uIiwicm93IiwiZ3JvdXBJbmRleCIsInNsaWRlSW5kZXhJbkdyb3VwIiwiY29sdW1uc0luR3JvdXAiLCJvcmRlciIsImFwcGVuZEVsZW1lbnQiLCJwcmVwZW5kRWxlbWVudCIsImFkZFNsaWRlIiwiYWN0aXZlSW5kZXhCdWZmZXIiLCJiYXNlTGVuZ3RoIiwic2xpZGVzQnVmZmVyIiwiY3VycmVudFNsaWRlIiwiaW5kZXhUb1JlbW92ZSIsIk1hbmlwdWxhdGlvbiIsImVmZmVjdEluaXQiLCJvdmVyd3JpdGVQYXJhbXMiLCJwZXJzcGVjdGl2ZSIsInJlY3JlYXRlU2hhZG93cyIsImdldEVmZmVjdFBhcmFtcyIsInJlcXVpcmVVcGRhdGVPblZpcnR1YWwiLCJvdmVyd3JpdGVQYXJhbXNSZXN1bHQiLCJzbGlkZVNoYWRvd3MiLCJlZmZlY3RUYXJnZXQiLCJlZmZlY3RQYXJhbXMiLCJ0cmFuc2Zvcm1FbCIsImJhY2tmYWNlVmlzaWJpbGl0eSIsImVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kIiwidHJhbnNmb3JtRWxlbWVudHMiLCJhbGxTbGlkZXMiLCJ0cmFuc2l0aW9uRW5kVGFyZ2V0IiwiZXZlbnRUcmlnZ2VyZWQiLCJwYXJlbnROb2RlIiwidHgiLCJ0eSIsInNsaWRlT3BhY2l0eSIsIkVmZmVjdEN1YmUiLCJjdWJlRWZmZWN0Iiwic2hhZG93Iiwic2hhZG93T2Zmc2V0Iiwic2hhZG93U2NhbGUiLCJjcmVhdGVTbGlkZVNoYWRvd3MiLCJzaGFkb3dCZWZvcmUiLCJzaGFkb3dBZnRlciIsImN1YmVTaGFkb3dFbCIsIndyYXBwZXJSb3RhdGUiLCJzbGlkZUFuZ2xlIiwidHoiLCJzaGFkb3dBbmdsZSIsInNpbiIsInNjYWxlMSIsInNjYWxlMiIsInpGYWN0b3IiLCJjcmVhdGVTaGFkb3ciLCJzaGFkb3dDbGFzcyIsInNoYWRvd0NvbnRhaW5lciIsIkVmZmVjdEZsaXAiLCJmbGlwRWZmZWN0IiwibGltaXRSb3RhdGlvbiIsInJvdGF0ZVkiLCJyb3RhdGVYIiwiekluZGV4IiwiRWZmZWN0Q292ZXJmbG93IiwiY292ZXJmbG93RWZmZWN0Iiwic3RyZXRjaCIsImRlcHRoIiwibW9kaWZpZXIiLCJjZW50ZXIiLCJjZW50ZXJPZmZzZXQiLCJvZmZzZXRNdWx0aXBsaWVyIiwidHJhbnNsYXRlWiIsInNsaWRlVHJhbnNmb3JtIiwic2hhZG93QmVmb3JlRWwiLCJzaGFkb3dBZnRlckVsIiwiRWZmZWN0Q3JlYXRpdmUiLCJjcmVhdGl2ZUVmZmVjdCIsImxpbWl0UHJvZ3Jlc3MiLCJzaGFkb3dQZXJQcm9ncmVzcyIsInByb2dyZXNzTXVsdGlwbGllciIsImdldFRyYW5zbGF0ZVZhbHVlIiwiaXNDZW50ZXJlZFNsaWRlcyIsIm1hcmdpbiIsInIiLCJjdXN0b20iLCJ0cmFuc2xhdGVTdHJpbmciLCJyb3RhdGVTdHJpbmciLCJzY2FsZVN0cmluZyIsIm9wYWNpdHlTdHJpbmciLCJzaGFkb3dPcGFjaXR5IiwiRWZmZWN0Q2FyZHMiLCJjYXJkc0VmZmVjdCIsInBlclNsaWRlUm90YXRlIiwicGVyU2xpZGVPZmZzZXQiLCJ0WCIsInRZIiwidFoiLCJ0WEFkZCIsImlzU3dpcGVUb05leHQiLCJpc1N3aXBlVG9QcmV2Iiwic3ViUHJvZ3Jlc3MiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJleHBvcnRzIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImQiLCJkZWZpbml0aW9uIiwiZyIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsImhhc093blByb3BlcnR5IiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiY3VycmVudFNjcmlwdCIsInNjcmlwdHMiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=